!function(){"use strict";try{if("undefined"!=typeof document){var e=document.createElement("style");e.appendChild(document.createTextNode(".positive-SwitchStaff__customerSvg{color:#4a90e2}.positive-SwitchStaff__tenantName{max-width:150px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.positive-SwitchStaff__overlay .ant-dropdown-menu{padding-left:8px;padding-right:8px;max-height:320px;overflow-y:auto}.positive-SwitchStaff__overlay .ant-dropdown-menu .ant-dropdown-menu-item:not(.ant-dropdown-menu-item-selected){height:32px;border-radius:2px;color:#fffc}.positive-SwitchStaff__overlay .ant-dropdown-menu .ant-dropdown-menu-item:not(.ant-dropdown-menu-item-selected):hover{color:#fff;background-color:#4a90e2}.positive-SwitchStaff__overlay .ant-dropdown-menu .ant-dropdown-menu-item-selected{height:32px;background:rgba(74,144,226,.16);color:#4a90e2}.positive-SwitchStaff__overlay .ant-dropdown-menu .ant-dropdown-menu-item-selected:hover{color:#fff;background-color:#4a90e2}.positive-SwitchStaff__switchTenant{padding:0;display:inline-block;border:none;color:#4a90e2;cursor:pointer}.positive-NumericKeyboard__boardWrapper{width:210px;height:330px;background-color:#fff;box-shadow:0 2px 20px #0003;padding:10px;font-weight:400;border-radius:4px;color:#000000d9;z-index:999}.positive-NumericKeyboard__boardWrapper .positive-NumericKeyboard__optHeader{display:flex;justify-content:space-between;align-items:center}.positive-NumericKeyboard__boardWrapper .positive-NumericKeyboard__optHeader .positive-NumericKeyboard__optBtn{width:50px;height:32px;font-size:23px;background-color:#0bb798;text-align:center;line-height:32px;cursor:pointer;color:#fffc}.positive-NumericKeyboard__boardWrapper .positive-NumericKeyboard__optHeader .positive-NumericKeyboard__optBtn:active{background-color:#0bb798}.positive-NumericKeyboard__boardWrapper .positive-NumericKeyboard__numContent{display:flex;justify-content:space-between;align-items:center;flex-flow:row wrap;margin-top:4px}.positive-NumericKeyboard__boardWrapper .positive-NumericKeyboard__numContent .positive-NumericKeyboard__numBtn{width:60px;height:60px;background-color:#0bb7981a;text-align:center;font-size:40px;margin-bottom:10px;line-height:60px;cursor:pointer}.positive-NumericKeyboard__boardWrapper .positive-NumericKeyboard__numContent .positive-NumericKeyboard__numBtn:active{background-color:#0bb798;color:#fff}.positive-NumericKeyboard__boardWrapper .positive-NumericKeyboard__symbolFooter{display:flex;justify-content:space-between;align-items:center}.positive-NumericKeyboard__boardWrapper .positive-NumericKeyboard__symbolFooter .positive-NumericKeyboard__symbolBtn{width:60px;height:60px;background-color:#0bb7981a;text-align:center;font-size:40px;cursor:pointer}.positive-NumericKeyboard__boardWrapper .positive-NumericKeyboard__symbolFooter .positive-NumericKeyboard__symbolBtn:active{background-color:#0bb798;color:#fff}.positive-NumericKeyboard__boardWrapper .positive-NumericKeyboard__symbolFooter .positive-NumericKeyboard__clearBtn{width:60px;height:60px;background-color:#0bb7981a;text-align:center;line-height:60px;font-size:34px;cursor:pointer;font-weight:400}.positive-NumericKeyboard__boardWrapper .positive-NumericKeyboard__symbolFooter .positive-NumericKeyboard__clearBtn:active{background-color:#0bb798;color:#fff}")),document.head.appendChild(e)}}catch(o){console.error("vite-plugin-css-injected-by-js",o)}}();
import * as React$2 from "react";
import React__default, { useContext, createContext, useRef, useState, useMemo as useMemo$1, useEffect, useLayoutEffect as useLayoutEffect$2, useCallback, forwardRef, useImperativeHandle, createElement, PureComponent } from "react";
import * as ReactDOM from "react-dom";
import ReactDOM__default, { createPortal, unstable_batchedUpdates, flushSync } from "react-dom";
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
function getAugmentedNamespace(n) {
  if (n.__esModule)
    return n;
  var f = n.default;
  if (typeof f == "function") {
    var a = function a2() {
      if (this instanceof a2) {
        var args = [null];
        args.push.apply(args, arguments);
        var Ctor = Function.bind.apply(f, args);
        return new Ctor();
      }
      return f.apply(this, arguments);
    };
    a.prototype = f.prototype;
  } else
    a = {};
  Object.defineProperty(a, "__esModule", { value: true });
  Object.keys(n).forEach(function(k) {
    var d = Object.getOwnPropertyDescriptor(n, k);
    Object.defineProperty(a, k, d.get ? d : {
      enumerable: true,
      get: function() {
        return n[k];
      }
    });
  });
  return a;
}
var jsxRuntime = { exports: {} };
var reactJsxRuntime_production_min = {};
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactJsxRuntime_production_min;
function requireReactJsxRuntime_production_min() {
  if (hasRequiredReactJsxRuntime_production_min)
    return reactJsxRuntime_production_min;
  hasRequiredReactJsxRuntime_production_min = 1;
  var f = React__default, k = Symbol.for("react.element"), l = Symbol.for("react.fragment"), m = Object.prototype.hasOwnProperty, n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p = { key: true, ref: true, __self: true, __source: true };
  function q(c, a, g) {
    var b, d = {}, e = null, h = null;
    void 0 !== g && (e = "" + g);
    void 0 !== a.key && (e = "" + a.key);
    void 0 !== a.ref && (h = a.ref);
    for (b in a)
      m.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
    if (c && c.defaultProps)
      for (b in a = c.defaultProps, a)
        void 0 === d[b] && (d[b] = a[b]);
    return { $$typeof: k, type: c, key: e, ref: h, props: d, _owner: n.current };
  }
  reactJsxRuntime_production_min.Fragment = l;
  reactJsxRuntime_production_min.jsx = q;
  reactJsxRuntime_production_min.jsxs = q;
  return reactJsxRuntime_production_min;
}
var reactJsxRuntime_development = {};
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactJsxRuntime_development;
function requireReactJsxRuntime_development() {
  if (hasRequiredReactJsxRuntime_development)
    return reactJsxRuntime_development;
  hasRequiredReactJsxRuntime_development = 1;
  if (process.env.NODE_ENV !== "production") {
    (function() {
      var React2 = React__default;
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function error(format2) {
        {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format2, args);
          }
        }
      }
      function printWarning(level, format2, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format2 += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format2);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var enableScopeAPI = false;
      var enableCacheElement = false;
      var enableTransitionTracing = false;
      var enableLegacyHidden = false;
      var enableDebugTracing = false;
      var REACT_MODULE_REFERENCE;
      {
        REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      }
      function isValidElementType(type4) {
        if (typeof type4 === "string" || typeof type4 === "function") {
          return true;
        }
        if (type4 === REACT_FRAGMENT_TYPE || type4 === REACT_PROFILER_TYPE || enableDebugTracing || type4 === REACT_STRICT_MODE_TYPE || type4 === REACT_SUSPENSE_TYPE || type4 === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type4 === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
          return true;
        }
        if (typeof type4 === "object" && type4 !== null) {
          if (type4.$$typeof === REACT_LAZY_TYPE || type4.$$typeof === REACT_MEMO_TYPE || type4.$$typeof === REACT_PROVIDER_TYPE || type4.$$typeof === REACT_CONTEXT_TYPE || type4.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
          // types supported by any Flight configuration anywhere since
          // we don't know which Flight build this will end up being used
          // with.
          type4.$$typeof === REACT_MODULE_REFERENCE || type4.getModuleId !== void 0) {
            return true;
          }
        }
        return false;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type4) {
        return type4.displayName || "Context";
      }
      function getComponentNameFromType(type4) {
        if (type4 == null) {
          return null;
        }
        {
          if (typeof type4.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type4 === "function") {
          return type4.displayName || type4.name || null;
        }
        if (typeof type4 === "string") {
          return type4;
        }
        switch (type4) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type4 === "object") {
          switch (type4.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type4;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type4;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type4, type4.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type4.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type4.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type4;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch (x) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var assign = Object.assign;
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === void 0) {
            try {
              throw Error();
            } catch (x) {
              var match2 = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match2 && match2[1] || "";
            }
          }
          return "\n" + prefix + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;
            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }
            for (; s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;
                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                      if (fn.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn.displayName);
                      }
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type4, source, ownerFn) {
        if (type4 == null) {
          return "";
        }
        if (typeof type4 === "function") {
          {
            return describeNativeComponentFrame(type4, shouldConstruct(type4));
          }
        }
        if (typeof type4 === "string") {
          return describeBuiltInComponentFrame(type4);
        }
        switch (type4) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type4 === "object") {
          switch (type4.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type4.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type4.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type4;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {
              }
            }
          }
        }
        return "";
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has2 = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has2(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type4 = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type4;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            testStringCoercion(value);
            return false;
          } catch (e) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown;
      var specialPropRefWarningShown;
      var didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== void 0;
      }
      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== void 0;
      }
      function warnIfStringRefCannotBeAutoConverted(config, self2) {
        {
          if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      function defineKeyPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
      }
      function defineRefPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
      }
      var ReactElement = function(type4, key, ref, self2, source, owner, props) {
        var element = {
          // This tag allows us to uniquely identify this as a React Element
          $$typeof: REACT_ELEMENT_TYPE,
          // Built-in properties that belong on the element
          type: type4,
          key,
          ref,
          props,
          // Record the component responsible for creating this element.
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self2
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function jsxDEV(type4, config, maybeKey, source, self2) {
        {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          if (maybeKey !== void 0) {
            {
              checkKeyStringCoercion(maybeKey);
            }
            key = "" + maybeKey;
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self2);
          }
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
          if (type4 && type4.defaultProps) {
            var defaultProps = type4.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          if (key || ref) {
            var displayName = typeof type4 === "function" ? type4.displayName || type4.name || "Unknown" : type4;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
          return ReactElement(type4, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function isValidElement2(object4) {
        {
          return typeof object4 === "object" && object4 !== null && object4.$$typeof === REACT_ELEMENT_TYPE;
        }
      }
      function getDeclarationErrorAddendum() {
        {
          if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
      }
      function getSourceInfoErrorAddendum(source) {
        {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
      }
      function validateExplicitKey(element, parentType) {
        {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          setCurrentlyValidatingElement$1(element);
          error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node2, parentType) {
        {
          if (typeof node2 !== "object") {
            return;
          }
          if (isArray(node2)) {
            for (var i = 0; i < node2.length; i++) {
              var child = node2[i];
              if (isValidElement2(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement2(node2)) {
            if (node2._store) {
              node2._store.validated = true;
            }
          } else if (node2) {
            var iteratorFn = getIteratorFn(node2);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node2.entries) {
                var iterator = iteratorFn.call(node2);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement2(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type4 = element.type;
          if (type4 === null || type4 === void 0 || typeof type4 === "string") {
            return;
          }
          var propTypes2;
          if (typeof type4 === "function") {
            propTypes2 = type4.propTypes;
          } else if (typeof type4 === "object" && (type4.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
          // Inner props are checked in the reconciler.
          type4.$$typeof === REACT_MEMO_TYPE)) {
            propTypes2 = type4.propTypes;
          } else {
            return;
          }
          if (propTypes2) {
            var name = getComponentNameFromType(type4);
            checkPropTypes(propTypes2, element.props, "prop", name, element);
          } else if (type4.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type4);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type4.getDefaultProps === "function" && !type4.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys = Object.keys(fragment.props);
          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function jsxWithValidation(type4, props, key, isStaticChildren, source, self2) {
        {
          var validType = isValidElementType(type4);
          if (!validType) {
            var info = "";
            if (type4 === void 0 || typeof type4 === "object" && type4 !== null && Object.keys(type4).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type4 === null) {
              typeString = "null";
            } else if (isArray(type4)) {
              typeString = "array";
            } else if (type4 !== void 0 && type4.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type4.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type4;
            }
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
          var element = jsxDEV(type4, props, key, source, self2);
          if (element == null) {
            return element;
          }
          if (validType) {
            var children = props.children;
            if (children !== void 0) {
              if (isStaticChildren) {
                if (isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    validateChildKeys(children[i], type4);
                  }
                  if (Object.freeze) {
                    Object.freeze(children);
                  }
                } else {
                  error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                }
              } else {
                validateChildKeys(children, type4);
              }
            }
          }
          if (type4 === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
      }
      function jsxWithValidationStatic(type4, props, key) {
        {
          return jsxWithValidation(type4, props, key, true);
        }
      }
      function jsxWithValidationDynamic(type4, props, key) {
        {
          return jsxWithValidation(type4, props, key, false);
        }
      }
      var jsx2 = jsxWithValidationDynamic;
      var jsxs2 = jsxWithValidationStatic;
      reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
      reactJsxRuntime_development.jsx = jsx2;
      reactJsxRuntime_development.jsxs = jsxs2;
    })();
  }
  return reactJsxRuntime_development;
}
if (process.env.NODE_ENV === "production") {
  jsxRuntime.exports = requireReactJsxRuntime_production_min();
} else {
  jsxRuntime.exports = requireReactJsxRuntime_development();
}
var jsxRuntimeExports = jsxRuntime.exports;
const jsx = jsxRuntimeExports.jsx;
const jsxs = jsxRuntimeExports.jsxs;
function _classCallCheck$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _typeof$3(obj) {
  "@babel/helpers - typeof";
  return _typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$3(obj);
}
function _toPrimitive(input, hint) {
  if (_typeof$3(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof$3(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof$3(key) === "symbol" ? key : String(key);
}
function _defineProperties$1(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass$1(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _setPrototypeOf$2(o, p) {
  _setPrototypeOf$2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$2(o, p);
}
function _inherits$1(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf$2(subClass, superClass);
}
function _getPrototypeOf$2(o) {
  _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$2(o);
}
function _isNativeReflectConstruct$2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _assertThisInitialized$1(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _possibleConstructorReturn$1(self2, call2) {
  if (call2 && (_typeof$3(call2) === "object" || typeof call2 === "function")) {
    return call2;
  } else if (call2 !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$1(self2);
}
function _createSuper$1(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$2(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$1(this, result);
  };
}
var classnames = { exports: {} };
/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/
(function(module2) {
  (function() {
    var hasOwn = {}.hasOwnProperty;
    function classNames2() {
      var classes = [];
      for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        if (!arg)
          continue;
        var argType = typeof arg;
        if (argType === "string" || argType === "number") {
          classes.push(arg);
        } else if (Array.isArray(arg)) {
          if (arg.length) {
            var inner = classNames2.apply(null, arg);
            if (inner) {
              classes.push(inner);
            }
          }
        } else if (argType === "object") {
          if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
            classes.push(arg.toString());
            continue;
          }
          for (var key in arg) {
            if (hasOwn.call(arg, key) && arg[key]) {
              classes.push(key);
            }
          }
        }
      }
      return classes.join(" ");
    }
    if (module2.exports) {
      classNames2.default = classNames2;
      module2.exports = classNames2;
    } else {
      window.classNames = classNames2;
    }
  })();
})(classnames);
var classnamesExports = classnames.exports;
const classNames = /* @__PURE__ */ getDefaultExportFromCjs(classnamesExports);
function _extends$1() {
  _extends$1 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$1.apply(this, arguments);
}
var reactIs$1 = { exports: {} };
var reactIs_production_min$1 = {};
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactIs_production_min$1;
function requireReactIs_production_min$1() {
  if (hasRequiredReactIs_production_min$1)
    return reactIs_production_min$1;
  hasRequiredReactIs_production_min$1 = 1;
  var b = "function" === typeof Symbol && Symbol.for, c = b ? Symbol.for("react.element") : 60103, d = b ? Symbol.for("react.portal") : 60106, e = b ? Symbol.for("react.fragment") : 60107, f = b ? Symbol.for("react.strict_mode") : 60108, g = b ? Symbol.for("react.profiler") : 60114, h = b ? Symbol.for("react.provider") : 60109, k = b ? Symbol.for("react.context") : 60110, l = b ? Symbol.for("react.async_mode") : 60111, m = b ? Symbol.for("react.concurrent_mode") : 60111, n = b ? Symbol.for("react.forward_ref") : 60112, p = b ? Symbol.for("react.suspense") : 60113, q = b ? Symbol.for("react.suspense_list") : 60120, r2 = b ? Symbol.for("react.memo") : 60115, t = b ? Symbol.for("react.lazy") : 60116, v = b ? Symbol.for("react.block") : 60121, w = b ? Symbol.for("react.fundamental") : 60117, x = b ? Symbol.for("react.responder") : 60118, y = b ? Symbol.for("react.scope") : 60119;
  function z(a) {
    if ("object" === typeof a && null !== a) {
      var u = a.$$typeof;
      switch (u) {
        case c:
          switch (a = a.type, a) {
            case l:
            case m:
            case e:
            case g:
            case f:
            case p:
              return a;
            default:
              switch (a = a && a.$$typeof, a) {
                case k:
                case n:
                case t:
                case r2:
                case h:
                  return a;
                default:
                  return u;
              }
          }
        case d:
          return u;
      }
    }
  }
  function A(a) {
    return z(a) === m;
  }
  reactIs_production_min$1.AsyncMode = l;
  reactIs_production_min$1.ConcurrentMode = m;
  reactIs_production_min$1.ContextConsumer = k;
  reactIs_production_min$1.ContextProvider = h;
  reactIs_production_min$1.Element = c;
  reactIs_production_min$1.ForwardRef = n;
  reactIs_production_min$1.Fragment = e;
  reactIs_production_min$1.Lazy = t;
  reactIs_production_min$1.Memo = r2;
  reactIs_production_min$1.Portal = d;
  reactIs_production_min$1.Profiler = g;
  reactIs_production_min$1.StrictMode = f;
  reactIs_production_min$1.Suspense = p;
  reactIs_production_min$1.isAsyncMode = function(a) {
    return A(a) || z(a) === l;
  };
  reactIs_production_min$1.isConcurrentMode = A;
  reactIs_production_min$1.isContextConsumer = function(a) {
    return z(a) === k;
  };
  reactIs_production_min$1.isContextProvider = function(a) {
    return z(a) === h;
  };
  reactIs_production_min$1.isElement = function(a) {
    return "object" === typeof a && null !== a && a.$$typeof === c;
  };
  reactIs_production_min$1.isForwardRef = function(a) {
    return z(a) === n;
  };
  reactIs_production_min$1.isFragment = function(a) {
    return z(a) === e;
  };
  reactIs_production_min$1.isLazy = function(a) {
    return z(a) === t;
  };
  reactIs_production_min$1.isMemo = function(a) {
    return z(a) === r2;
  };
  reactIs_production_min$1.isPortal = function(a) {
    return z(a) === d;
  };
  reactIs_production_min$1.isProfiler = function(a) {
    return z(a) === g;
  };
  reactIs_production_min$1.isStrictMode = function(a) {
    return z(a) === f;
  };
  reactIs_production_min$1.isSuspense = function(a) {
    return z(a) === p;
  };
  reactIs_production_min$1.isValidElementType = function(a) {
    return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r2 || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
  };
  reactIs_production_min$1.typeOf = z;
  return reactIs_production_min$1;
}
var reactIs_development$1 = {};
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactIs_development$1;
function requireReactIs_development$1() {
  if (hasRequiredReactIs_development$1)
    return reactIs_development$1;
  hasRequiredReactIs_development$1 = 1;
  if (process.env.NODE_ENV !== "production") {
    (function() {
      var hasSymbol = typeof Symbol === "function" && Symbol.for;
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
      function isValidElementType(type4) {
        return typeof type4 === "string" || typeof type4 === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
        type4 === REACT_FRAGMENT_TYPE || type4 === REACT_CONCURRENT_MODE_TYPE || type4 === REACT_PROFILER_TYPE || type4 === REACT_STRICT_MODE_TYPE || type4 === REACT_SUSPENSE_TYPE || type4 === REACT_SUSPENSE_LIST_TYPE || typeof type4 === "object" && type4 !== null && (type4.$$typeof === REACT_LAZY_TYPE || type4.$$typeof === REACT_MEMO_TYPE || type4.$$typeof === REACT_PROVIDER_TYPE || type4.$$typeof === REACT_CONTEXT_TYPE || type4.$$typeof === REACT_FORWARD_REF_TYPE || type4.$$typeof === REACT_FUNDAMENTAL_TYPE || type4.$$typeof === REACT_RESPONDER_TYPE || type4.$$typeof === REACT_SCOPE_TYPE || type4.$$typeof === REACT_BLOCK_TYPE);
      }
      function typeOf(object4) {
        if (typeof object4 === "object" && object4 !== null) {
          var $$typeof = object4.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type4 = object4.type;
              switch (type4) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type4;
                default:
                  var $$typeofType = type4 && type4.$$typeof;
                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
        return void 0;
      }
      var AsyncMode = REACT_ASYNC_MODE_TYPE;
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element2 = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal2 = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false;
      function isAsyncMode(object4) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true;
            console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
          }
        }
        return isConcurrentMode(object4) || typeOf(object4) === REACT_ASYNC_MODE_TYPE;
      }
      function isConcurrentMode(object4) {
        return typeOf(object4) === REACT_CONCURRENT_MODE_TYPE;
      }
      function isContextConsumer(object4) {
        return typeOf(object4) === REACT_CONTEXT_TYPE;
      }
      function isContextProvider(object4) {
        return typeOf(object4) === REACT_PROVIDER_TYPE;
      }
      function isElement(object4) {
        return typeof object4 === "object" && object4 !== null && object4.$$typeof === REACT_ELEMENT_TYPE;
      }
      function isForwardRef(object4) {
        return typeOf(object4) === REACT_FORWARD_REF_TYPE;
      }
      function isFragment2(object4) {
        return typeOf(object4) === REACT_FRAGMENT_TYPE;
      }
      function isLazy(object4) {
        return typeOf(object4) === REACT_LAZY_TYPE;
      }
      function isMemo(object4) {
        return typeOf(object4) === REACT_MEMO_TYPE;
      }
      function isPortal(object4) {
        return typeOf(object4) === REACT_PORTAL_TYPE;
      }
      function isProfiler(object4) {
        return typeOf(object4) === REACT_PROFILER_TYPE;
      }
      function isStrictMode(object4) {
        return typeOf(object4) === REACT_STRICT_MODE_TYPE;
      }
      function isSuspense(object4) {
        return typeOf(object4) === REACT_SUSPENSE_TYPE;
      }
      reactIs_development$1.AsyncMode = AsyncMode;
      reactIs_development$1.ConcurrentMode = ConcurrentMode;
      reactIs_development$1.ContextConsumer = ContextConsumer;
      reactIs_development$1.ContextProvider = ContextProvider;
      reactIs_development$1.Element = Element2;
      reactIs_development$1.ForwardRef = ForwardRef;
      reactIs_development$1.Fragment = Fragment;
      reactIs_development$1.Lazy = Lazy;
      reactIs_development$1.Memo = Memo;
      reactIs_development$1.Portal = Portal2;
      reactIs_development$1.Profiler = Profiler;
      reactIs_development$1.StrictMode = StrictMode;
      reactIs_development$1.Suspense = Suspense;
      reactIs_development$1.isAsyncMode = isAsyncMode;
      reactIs_development$1.isConcurrentMode = isConcurrentMode;
      reactIs_development$1.isContextConsumer = isContextConsumer;
      reactIs_development$1.isContextProvider = isContextProvider;
      reactIs_development$1.isElement = isElement;
      reactIs_development$1.isForwardRef = isForwardRef;
      reactIs_development$1.isFragment = isFragment2;
      reactIs_development$1.isLazy = isLazy;
      reactIs_development$1.isMemo = isMemo;
      reactIs_development$1.isPortal = isPortal;
      reactIs_development$1.isProfiler = isProfiler;
      reactIs_development$1.isStrictMode = isStrictMode;
      reactIs_development$1.isSuspense = isSuspense;
      reactIs_development$1.isValidElementType = isValidElementType;
      reactIs_development$1.typeOf = typeOf;
    })();
  }
  return reactIs_development$1;
}
if (process.env.NODE_ENV === "production") {
  reactIs$1.exports = requireReactIs_production_min$1();
} else {
  reactIs$1.exports = requireReactIs_development$1();
}
var reactIsExports = reactIs$1.exports;
function toArray$3(children) {
  var option = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var ret = [];
  React__default.Children.forEach(children, function(child) {
    if ((child === void 0 || child === null) && !option.keepEmpty) {
      return;
    }
    if (Array.isArray(child)) {
      ret = ret.concat(toArray$3(child));
    } else if (reactIsExports.isFragment(child) && child.props) {
      ret = ret.concat(toArray$3(child.props.children, option));
    } else {
      ret.push(child);
    }
  });
  return ret;
}
var warned = {};
var preWarningFns = [];
var preMessage = function preMessage2(fn) {
  preWarningFns.push(fn);
};
function warning$4(valid, message) {
  if (process.env.NODE_ENV !== "production" && !valid && console !== void 0) {
    var finalMessage = preWarningFns.reduce(function(msg, preMessageFn) {
      return preMessageFn(msg !== null && msg !== void 0 ? msg : "", "warning");
    }, message);
    if (finalMessage) {
      console.error("Warning: ".concat(finalMessage));
    }
  }
}
function note(valid, message) {
  if (process.env.NODE_ENV !== "production" && !valid && console !== void 0) {
    var finalMessage = preWarningFns.reduce(function(msg, preMessageFn) {
      return preMessageFn(msg !== null && msg !== void 0 ? msg : "", "note");
    }, message);
    if (finalMessage) {
      console.warn("Note: ".concat(finalMessage));
    }
  }
}
function resetWarned() {
  warned = {};
}
function call(method4, valid, message) {
  if (!valid && !warned[message]) {
    method4(false, message);
    warned[message] = true;
  }
}
function warningOnce(valid, message) {
  call(warning$4, valid, message);
}
function noteOnce(valid, message) {
  call(note, valid, message);
}
warningOnce.preMessage = preMessage;
warningOnce.resetWarned = resetWarned;
warningOnce.noteOnce = noteOnce;
function _defineProperty$3(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ownKeys$2(object4, enumerableOnly) {
  var keys = Object.keys(object4);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object4);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object4, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys$2(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function useMemo(getValue2, condition, shouldUpdate) {
  var cacheRef = React$2.useRef({});
  if (!("value" in cacheRef.current) || shouldUpdate(cacheRef.current.condition, condition)) {
    cacheRef.current.value = getValue2();
    cacheRef.current.condition = condition;
  }
  return cacheRef.current.value;
}
function fillRef(ref, node2) {
  if (typeof ref === "function") {
    ref(node2);
  } else if (_typeof$3(ref) === "object" && ref && "current" in ref) {
    ref.current = node2;
  }
}
function composeRef() {
  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
    refs[_key] = arguments[_key];
  }
  var refList = refs.filter(function(ref) {
    return ref;
  });
  if (refList.length <= 1) {
    return refList[0];
  }
  return function(node2) {
    refs.forEach(function(ref) {
      fillRef(ref, node2);
    });
  };
}
function useComposeRef() {
  for (var _len2 = arguments.length, refs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    refs[_key2] = arguments[_key2];
  }
  return useMemo(function() {
    return composeRef.apply(void 0, refs);
  }, refs, function(prev2, next2) {
    return prev2.length === next2.length && prev2.every(function(ref, i) {
      return ref === next2[i];
    });
  });
}
function supportRef(nodeOrComponent) {
  var _type$prototype, _nodeOrComponent$prot;
  var type4 = reactIsExports.isMemo(nodeOrComponent) ? nodeOrComponent.type.type : nodeOrComponent.type;
  if (typeof type4 === "function" && !((_type$prototype = type4.prototype) !== null && _type$prototype !== void 0 && _type$prototype.render)) {
    return false;
  }
  if (typeof nodeOrComponent === "function" && !((_nodeOrComponent$prot = nodeOrComponent.prototype) !== null && _nodeOrComponent$prot !== void 0 && _nodeOrComponent$prot.render)) {
    return false;
  }
  return true;
}
function isDOM(node2) {
  return node2 instanceof HTMLElement || node2 instanceof SVGElement;
}
function findDOMNode$1(node2) {
  if (isDOM(node2)) {
    return node2;
  }
  if (node2 instanceof React__default.Component) {
    return ReactDOM__default.findDOMNode(node2);
  }
  return null;
}
var MapShim = function() {
  if (typeof Map !== "undefined") {
    return Map;
  }
  function getIndex(arr, key) {
    var result = -1;
    arr.some(function(entry, index2) {
      if (entry[0] === key) {
        result = index2;
        return true;
      }
      return false;
    });
    return result;
  }
  return (
    /** @class */
    function() {
      function class_1() {
        this.__entries__ = [];
      }
      Object.defineProperty(class_1.prototype, "size", {
        /**
         * @returns {boolean}
         */
        get: function() {
          return this.__entries__.length;
        },
        enumerable: true,
        configurable: true
      });
      class_1.prototype.get = function(key) {
        var index2 = getIndex(this.__entries__, key);
        var entry = this.__entries__[index2];
        return entry && entry[1];
      };
      class_1.prototype.set = function(key, value) {
        var index2 = getIndex(this.__entries__, key);
        if (~index2) {
          this.__entries__[index2][1] = value;
        } else {
          this.__entries__.push([key, value]);
        }
      };
      class_1.prototype.delete = function(key) {
        var entries = this.__entries__;
        var index2 = getIndex(entries, key);
        if (~index2) {
          entries.splice(index2, 1);
        }
      };
      class_1.prototype.has = function(key) {
        return !!~getIndex(this.__entries__, key);
      };
      class_1.prototype.clear = function() {
        this.__entries__.splice(0);
      };
      class_1.prototype.forEach = function(callback, ctx) {
        if (ctx === void 0) {
          ctx = null;
        }
        for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
          var entry = _a[_i];
          callback.call(ctx, entry[1], entry[0]);
        }
      };
      return class_1;
    }()
  );
}();
var isBrowser = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document;
var global$1 = function() {
  if (typeof global !== "undefined" && global.Math === Math) {
    return global;
  }
  if (typeof self !== "undefined" && self.Math === Math) {
    return self;
  }
  if (typeof window !== "undefined" && window.Math === Math) {
    return window;
  }
  return Function("return this")();
}();
var requestAnimationFrame$1 = function() {
  if (typeof requestAnimationFrame === "function") {
    return requestAnimationFrame.bind(global$1);
  }
  return function(callback) {
    return setTimeout(function() {
      return callback(Date.now());
    }, 1e3 / 60);
  };
}();
var trailingTimeout = 2;
function throttle(callback, delay) {
  var leadingCall = false, trailingCall = false, lastCallTime = 0;
  function resolvePending() {
    if (leadingCall) {
      leadingCall = false;
      callback();
    }
    if (trailingCall) {
      proxy();
    }
  }
  function timeoutCallback() {
    requestAnimationFrame$1(resolvePending);
  }
  function proxy() {
    var timeStamp = Date.now();
    if (leadingCall) {
      if (timeStamp - lastCallTime < trailingTimeout) {
        return;
      }
      trailingCall = true;
    } else {
      leadingCall = true;
      trailingCall = false;
      setTimeout(timeoutCallback, delay);
    }
    lastCallTime = timeStamp;
  }
  return proxy;
}
var REFRESH_DELAY = 20;
var transitionKeys = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
var mutationObserverSupported = typeof MutationObserver !== "undefined";
var ResizeObserverController = (
  /** @class */
  function() {
    function ResizeObserverController2() {
      this.connected_ = false;
      this.mutationEventsAdded_ = false;
      this.mutationsObserver_ = null;
      this.observers_ = [];
      this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
      this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
    }
    ResizeObserverController2.prototype.addObserver = function(observer) {
      if (!~this.observers_.indexOf(observer)) {
        this.observers_.push(observer);
      }
      if (!this.connected_) {
        this.connect_();
      }
    };
    ResizeObserverController2.prototype.removeObserver = function(observer) {
      var observers2 = this.observers_;
      var index2 = observers2.indexOf(observer);
      if (~index2) {
        observers2.splice(index2, 1);
      }
      if (!observers2.length && this.connected_) {
        this.disconnect_();
      }
    };
    ResizeObserverController2.prototype.refresh = function() {
      var changesDetected = this.updateObservers_();
      if (changesDetected) {
        this.refresh();
      }
    };
    ResizeObserverController2.prototype.updateObservers_ = function() {
      var activeObservers = this.observers_.filter(function(observer) {
        return observer.gatherActive(), observer.hasActive();
      });
      activeObservers.forEach(function(observer) {
        return observer.broadcastActive();
      });
      return activeObservers.length > 0;
    };
    ResizeObserverController2.prototype.connect_ = function() {
      if (!isBrowser || this.connected_) {
        return;
      }
      document.addEventListener("transitionend", this.onTransitionEnd_);
      window.addEventListener("resize", this.refresh);
      if (mutationObserverSupported) {
        this.mutationsObserver_ = new MutationObserver(this.refresh);
        this.mutationsObserver_.observe(document, {
          attributes: true,
          childList: true,
          characterData: true,
          subtree: true
        });
      } else {
        document.addEventListener("DOMSubtreeModified", this.refresh);
        this.mutationEventsAdded_ = true;
      }
      this.connected_ = true;
    };
    ResizeObserverController2.prototype.disconnect_ = function() {
      if (!isBrowser || !this.connected_) {
        return;
      }
      document.removeEventListener("transitionend", this.onTransitionEnd_);
      window.removeEventListener("resize", this.refresh);
      if (this.mutationsObserver_) {
        this.mutationsObserver_.disconnect();
      }
      if (this.mutationEventsAdded_) {
        document.removeEventListener("DOMSubtreeModified", this.refresh);
      }
      this.mutationsObserver_ = null;
      this.mutationEventsAdded_ = false;
      this.connected_ = false;
    };
    ResizeObserverController2.prototype.onTransitionEnd_ = function(_a) {
      var _b = _a.propertyName, propertyName = _b === void 0 ? "" : _b;
      var isReflowProperty = transitionKeys.some(function(key) {
        return !!~propertyName.indexOf(key);
      });
      if (isReflowProperty) {
        this.refresh();
      }
    };
    ResizeObserverController2.getInstance = function() {
      if (!this.instance_) {
        this.instance_ = new ResizeObserverController2();
      }
      return this.instance_;
    };
    ResizeObserverController2.instance_ = null;
    return ResizeObserverController2;
  }()
);
var defineConfigurable = function(target, props) {
  for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
    var key = _a[_i];
    Object.defineProperty(target, key, {
      value: props[key],
      enumerable: false,
      writable: false,
      configurable: true
    });
  }
  return target;
};
var getWindowOf = function(target) {
  var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
  return ownerGlobal || global$1;
};
var emptyRect = createRectInit(0, 0, 0, 0);
function toFloat(value) {
  return parseFloat(value) || 0;
}
function getBordersSize(styles2) {
  var positions = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    positions[_i - 1] = arguments[_i];
  }
  return positions.reduce(function(size, position2) {
    var value = styles2["border-" + position2 + "-width"];
    return size + toFloat(value);
  }, 0);
}
function getPaddings(styles2) {
  var positions = ["top", "right", "bottom", "left"];
  var paddings = {};
  for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
    var position2 = positions_1[_i];
    var value = styles2["padding-" + position2];
    paddings[position2] = toFloat(value);
  }
  return paddings;
}
function getSVGContentRect(target) {
  var bbox = target.getBBox();
  return createRectInit(0, 0, bbox.width, bbox.height);
}
function getHTMLElementContentRect(target) {
  var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
  if (!clientWidth && !clientHeight) {
    return emptyRect;
  }
  var styles2 = getWindowOf(target).getComputedStyle(target);
  var paddings = getPaddings(styles2);
  var horizPad = paddings.left + paddings.right;
  var vertPad = paddings.top + paddings.bottom;
  var width = toFloat(styles2.width), height = toFloat(styles2.height);
  if (styles2.boxSizing === "border-box") {
    if (Math.round(width + horizPad) !== clientWidth) {
      width -= getBordersSize(styles2, "left", "right") + horizPad;
    }
    if (Math.round(height + vertPad) !== clientHeight) {
      height -= getBordersSize(styles2, "top", "bottom") + vertPad;
    }
  }
  if (!isDocumentElement(target)) {
    var vertScrollbar = Math.round(width + horizPad) - clientWidth;
    var horizScrollbar = Math.round(height + vertPad) - clientHeight;
    if (Math.abs(vertScrollbar) !== 1) {
      width -= vertScrollbar;
    }
    if (Math.abs(horizScrollbar) !== 1) {
      height -= horizScrollbar;
    }
  }
  return createRectInit(paddings.left, paddings.top, width, height);
}
var isSVGGraphicsElement = function() {
  if (typeof SVGGraphicsElement !== "undefined") {
    return function(target) {
      return target instanceof getWindowOf(target).SVGGraphicsElement;
    };
  }
  return function(target) {
    return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === "function";
  };
}();
function isDocumentElement(target) {
  return target === getWindowOf(target).document.documentElement;
}
function getContentRect(target) {
  if (!isBrowser) {
    return emptyRect;
  }
  if (isSVGGraphicsElement(target)) {
    return getSVGContentRect(target);
  }
  return getHTMLElementContentRect(target);
}
function createReadOnlyRect(_a) {
  var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
  var Constr = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
  var rect = Object.create(Constr.prototype);
  defineConfigurable(rect, {
    x,
    y,
    width,
    height,
    top: y,
    right: x + width,
    bottom: height + y,
    left: x
  });
  return rect;
}
function createRectInit(x, y, width, height) {
  return { x, y, width, height };
}
var ResizeObservation = (
  /** @class */
  function() {
    function ResizeObservation2(target) {
      this.broadcastWidth = 0;
      this.broadcastHeight = 0;
      this.contentRect_ = createRectInit(0, 0, 0, 0);
      this.target = target;
    }
    ResizeObservation2.prototype.isActive = function() {
      var rect = getContentRect(this.target);
      this.contentRect_ = rect;
      return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
    };
    ResizeObservation2.prototype.broadcastRect = function() {
      var rect = this.contentRect_;
      this.broadcastWidth = rect.width;
      this.broadcastHeight = rect.height;
      return rect;
    };
    return ResizeObservation2;
  }()
);
var ResizeObserverEntry = (
  /** @class */
  function() {
    function ResizeObserverEntry2(target, rectInit) {
      var contentRect = createReadOnlyRect(rectInit);
      defineConfigurable(this, { target, contentRect });
    }
    return ResizeObserverEntry2;
  }()
);
var ResizeObserverSPI = (
  /** @class */
  function() {
    function ResizeObserverSPI2(callback, controller, callbackCtx) {
      this.activeObservations_ = [];
      this.observations_ = new MapShim();
      if (typeof callback !== "function") {
        throw new TypeError("The callback provided as parameter 1 is not a function.");
      }
      this.callback_ = callback;
      this.controller_ = controller;
      this.callbackCtx_ = callbackCtx;
    }
    ResizeObserverSPI2.prototype.observe = function(target) {
      if (!arguments.length) {
        throw new TypeError("1 argument required, but only 0 present.");
      }
      if (typeof Element === "undefined" || !(Element instanceof Object)) {
        return;
      }
      if (!(target instanceof getWindowOf(target).Element)) {
        throw new TypeError('parameter 1 is not of type "Element".');
      }
      var observations = this.observations_;
      if (observations.has(target)) {
        return;
      }
      observations.set(target, new ResizeObservation(target));
      this.controller_.addObserver(this);
      this.controller_.refresh();
    };
    ResizeObserverSPI2.prototype.unobserve = function(target) {
      if (!arguments.length) {
        throw new TypeError("1 argument required, but only 0 present.");
      }
      if (typeof Element === "undefined" || !(Element instanceof Object)) {
        return;
      }
      if (!(target instanceof getWindowOf(target).Element)) {
        throw new TypeError('parameter 1 is not of type "Element".');
      }
      var observations = this.observations_;
      if (!observations.has(target)) {
        return;
      }
      observations.delete(target);
      if (!observations.size) {
        this.controller_.removeObserver(this);
      }
    };
    ResizeObserverSPI2.prototype.disconnect = function() {
      this.clearActive();
      this.observations_.clear();
      this.controller_.removeObserver(this);
    };
    ResizeObserverSPI2.prototype.gatherActive = function() {
      var _this = this;
      this.clearActive();
      this.observations_.forEach(function(observation) {
        if (observation.isActive()) {
          _this.activeObservations_.push(observation);
        }
      });
    };
    ResizeObserverSPI2.prototype.broadcastActive = function() {
      if (!this.hasActive()) {
        return;
      }
      var ctx = this.callbackCtx_;
      var entries = this.activeObservations_.map(function(observation) {
        return new ResizeObserverEntry(observation.target, observation.broadcastRect());
      });
      this.callback_.call(ctx, entries, ctx);
      this.clearActive();
    };
    ResizeObserverSPI2.prototype.clearActive = function() {
      this.activeObservations_.splice(0);
    };
    ResizeObserverSPI2.prototype.hasActive = function() {
      return this.activeObservations_.length > 0;
    };
    return ResizeObserverSPI2;
  }()
);
var observers = typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : new MapShim();
var ResizeObserver$2 = (
  /** @class */
  function() {
    function ResizeObserver2(callback) {
      if (!(this instanceof ResizeObserver2)) {
        throw new TypeError("Cannot call a class as a function.");
      }
      if (!arguments.length) {
        throw new TypeError("1 argument required, but only 0 present.");
      }
      var controller = ResizeObserverController.getInstance();
      var observer = new ResizeObserverSPI(callback, controller, this);
      observers.set(this, observer);
    }
    return ResizeObserver2;
  }()
);
[
  "observe",
  "unobserve",
  "disconnect"
].forEach(function(method4) {
  ResizeObserver$2.prototype[method4] = function() {
    var _a;
    return (_a = observers.get(this))[method4].apply(_a, arguments);
  };
});
var index = function() {
  if (typeof global$1.ResizeObserver !== "undefined") {
    return global$1.ResizeObserver;
  }
  return ResizeObserver$2;
}();
var elementListeners = /* @__PURE__ */ new Map();
function onResize(entities) {
  entities.forEach(function(entity) {
    var _elementListeners$get;
    var target = entity.target;
    (_elementListeners$get = elementListeners.get(target)) === null || _elementListeners$get === void 0 ? void 0 : _elementListeners$get.forEach(function(listener) {
      return listener(target);
    });
  });
}
var resizeObserver = new index(onResize);
process.env.NODE_ENV !== "production" ? elementListeners : null;
process.env.NODE_ENV !== "production" ? onResize : null;
function observe(element, callback) {
  if (!elementListeners.has(element)) {
    elementListeners.set(element, /* @__PURE__ */ new Set());
    resizeObserver.observe(element);
  }
  elementListeners.get(element).add(callback);
}
function unobserve(element, callback) {
  if (elementListeners.has(element)) {
    elementListeners.get(element).delete(callback);
    if (!elementListeners.get(element).size) {
      resizeObserver.unobserve(element);
      elementListeners.delete(element);
    }
  }
}
var DomWrapper$1 = /* @__PURE__ */ function(_React$Component) {
  _inherits$1(DomWrapper2, _React$Component);
  var _super = _createSuper$1(DomWrapper2);
  function DomWrapper2() {
    _classCallCheck$1(this, DomWrapper2);
    return _super.apply(this, arguments);
  }
  _createClass$1(DomWrapper2, [{
    key: "render",
    value: function render2() {
      return this.props.children;
    }
  }]);
  return DomWrapper2;
}(React$2.Component);
var CollectionContext = /* @__PURE__ */ React$2.createContext(null);
function Collection(_ref) {
  var children = _ref.children, onBatchResize = _ref.onBatchResize;
  var resizeIdRef = React$2.useRef(0);
  var resizeInfosRef = React$2.useRef([]);
  var onCollectionResize = React$2.useContext(CollectionContext);
  var onResize2 = React$2.useCallback(function(size, element, data2) {
    resizeIdRef.current += 1;
    var currentId = resizeIdRef.current;
    resizeInfosRef.current.push({
      size,
      element,
      data: data2
    });
    Promise.resolve().then(function() {
      if (currentId === resizeIdRef.current) {
        onBatchResize === null || onBatchResize === void 0 ? void 0 : onBatchResize(resizeInfosRef.current);
        resizeInfosRef.current = [];
      }
    });
    onCollectionResize === null || onCollectionResize === void 0 ? void 0 : onCollectionResize(size, element, data2);
  }, [onBatchResize, onCollectionResize]);
  return /* @__PURE__ */ React$2.createElement(CollectionContext.Provider, {
    value: onResize2
  }, children);
}
function SingleObserver(props, ref) {
  var children = props.children, disabled = props.disabled;
  var elementRef = React$2.useRef(null);
  var wrapperRef = React$2.useRef(null);
  var onCollectionResize = React$2.useContext(CollectionContext);
  var isRenderProps = typeof children === "function";
  var mergedChildren = isRenderProps ? children(elementRef) : children;
  var sizeRef = React$2.useRef({
    width: -1,
    height: -1,
    offsetWidth: -1,
    offsetHeight: -1
  });
  var canRef = !isRenderProps && /* @__PURE__ */ React$2.isValidElement(mergedChildren) && supportRef(mergedChildren);
  var originRef = canRef ? mergedChildren.ref : null;
  var mergedRef = React$2.useMemo(function() {
    return composeRef(originRef, elementRef);
  }, [originRef, elementRef]);
  var getDom = function getDom2() {
    return findDOMNode$1(elementRef.current) || findDOMNode$1(wrapperRef.current);
  };
  React$2.useImperativeHandle(ref, function() {
    return getDom();
  });
  var propsRef = React$2.useRef(props);
  propsRef.current = props;
  var onInternalResize = React$2.useCallback(function(target) {
    var _propsRef$current = propsRef.current, onResize2 = _propsRef$current.onResize, data2 = _propsRef$current.data;
    var _target$getBoundingCl = target.getBoundingClientRect(), width = _target$getBoundingCl.width, height = _target$getBoundingCl.height;
    var offsetWidth = target.offsetWidth, offsetHeight = target.offsetHeight;
    var fixedWidth = Math.floor(width);
    var fixedHeight = Math.floor(height);
    if (sizeRef.current.width !== fixedWidth || sizeRef.current.height !== fixedHeight || sizeRef.current.offsetWidth !== offsetWidth || sizeRef.current.offsetHeight !== offsetHeight) {
      var size = {
        width: fixedWidth,
        height: fixedHeight,
        offsetWidth,
        offsetHeight
      };
      sizeRef.current = size;
      var mergedOffsetWidth = offsetWidth === Math.round(width) ? width : offsetWidth;
      var mergedOffsetHeight = offsetHeight === Math.round(height) ? height : offsetHeight;
      var sizeInfo = _objectSpread2$1(_objectSpread2$1({}, size), {}, {
        offsetWidth: mergedOffsetWidth,
        offsetHeight: mergedOffsetHeight
      });
      onCollectionResize === null || onCollectionResize === void 0 ? void 0 : onCollectionResize(sizeInfo, target, data2);
      if (onResize2) {
        Promise.resolve().then(function() {
          onResize2(sizeInfo, target);
        });
      }
    }
  }, []);
  React$2.useEffect(function() {
    var currentElement = getDom();
    if (currentElement && !disabled) {
      observe(currentElement, onInternalResize);
    }
    return function() {
      return unobserve(currentElement, onInternalResize);
    };
  }, [elementRef.current, disabled]);
  return /* @__PURE__ */ React$2.createElement(DomWrapper$1, {
    ref: wrapperRef
  }, canRef ? /* @__PURE__ */ React$2.cloneElement(mergedChildren, {
    ref: mergedRef
  }) : mergedChildren);
}
var RefSingleObserver = /* @__PURE__ */ React$2.forwardRef(SingleObserver);
if (process.env.NODE_ENV !== "production") {
  RefSingleObserver.displayName = "SingleObserver";
}
var INTERNAL_PREFIX_KEY = "rc-observer-key";
function ResizeObserver$1(props, ref) {
  var children = props.children;
  var childNodes = typeof children === "function" ? [children] : toArray$3(children);
  if (process.env.NODE_ENV !== "production") {
    if (childNodes.length > 1) {
      warning$4(false, "Find more than one child node with `children` in ResizeObserver. Please use ResizeObserver.Collection instead.");
    } else if (childNodes.length === 0) {
      warning$4(false, "`children` of ResizeObserver is empty. Nothing is in observe.");
    }
  }
  return childNodes.map(function(child, index2) {
    var key = (child === null || child === void 0 ? void 0 : child.key) || "".concat(INTERNAL_PREFIX_KEY, "-").concat(index2);
    return /* @__PURE__ */ React$2.createElement(RefSingleObserver, _extends$1({}, props, {
      key,
      ref: index2 === 0 ? ref : void 0
    }), child);
  });
}
var RefResizeObserver = /* @__PURE__ */ React$2.forwardRef(ResizeObserver$1);
if (process.env.NODE_ENV !== "production") {
  RefResizeObserver.displayName = "ResizeObserver";
}
RefResizeObserver.Collection = Collection;
function omit(obj, fields) {
  var clone2 = _objectSpread2$1({}, obj);
  if (Array.isArray(fields)) {
    fields.forEach(function(key) {
      delete clone2[key];
    });
  }
  return clone2;
}
function _arrayLikeToArray$1(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$1(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _unsupportedIterableToArray$1(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$1(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$1(o, minLen);
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread();
}
function murmur2(str) {
  var h = 0;
  var k, i = 0, len = str.length;
  for (; len >= 4; ++i, len -= 4) {
    k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
    k = /* Math.imul(k, m): */
    (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
    k ^= /* k >>> r: */
    k >>> 24;
    h = /* Math.imul(k, m): */
    (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
    (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
  }
  switch (len) {
    case 3:
      h ^= (str.charCodeAt(i + 2) & 255) << 16;
    case 2:
      h ^= (str.charCodeAt(i + 1) & 255) << 8;
    case 1:
      h ^= str.charCodeAt(i) & 255;
      h = /* Math.imul(h, m): */
      (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
  }
  h ^= h >>> 13;
  h = /* Math.imul(h, m): */
  (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
  return ((h ^ h >>> 15) >>> 0).toString(36);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function isEqual(obj1, obj2) {
  var shallow = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  var refSet = /* @__PURE__ */ new Set();
  function deepEqual(a, b) {
    var level = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
    var circular = refSet.has(a);
    warningOnce(!circular, "Warning: There may be circular references");
    if (circular) {
      return false;
    }
    if (a === b) {
      return true;
    }
    if (shallow && level > 1) {
      return false;
    }
    refSet.add(a);
    var newLevel = level + 1;
    if (Array.isArray(a)) {
      if (!Array.isArray(b) || a.length !== b.length) {
        return false;
      }
      for (var i = 0; i < a.length; i++) {
        if (!deepEqual(a[i], b[i], newLevel)) {
          return false;
        }
      }
      return true;
    }
    if (a && b && _typeof$3(a) === "object" && _typeof$3(b) === "object") {
      var keys = Object.keys(a);
      if (keys.length !== Object.keys(b).length) {
        return false;
      }
      return keys.every(function(key) {
        return deepEqual(a[key], b[key], newLevel);
      });
    }
    return false;
  }
  return deepEqual(obj1, obj2);
}
var Entity = /* @__PURE__ */ function() {
  function Entity2(instanceId) {
    _classCallCheck$1(this, Entity2);
    _defineProperty$3(this, "instanceId", void 0);
    _defineProperty$3(this, "cache", /* @__PURE__ */ new Map());
    this.instanceId = instanceId;
  }
  _createClass$1(Entity2, [{
    key: "get",
    value: function get2(keys) {
      return this.cache.get(keys.join("%")) || null;
    }
  }, {
    key: "update",
    value: function update(keys, valueFn) {
      var path = keys.join("%");
      var prevValue = this.cache.get(path);
      var nextValue = valueFn(prevValue);
      if (nextValue === null) {
        this.cache.delete(path);
      } else {
        this.cache.set(path, nextValue);
      }
    }
  }]);
  return Entity2;
}();
var ATTR_TOKEN = "data-token-hash";
var ATTR_MARK = "data-css-hash";
var ATTR_DEV_CACHE_PATH = "data-dev-cache-path";
var CSS_IN_JS_INSTANCE = "__cssinjs_instance__";
function createCache() {
  var cssinjsInstanceId = Math.random().toString(12).slice(2);
  if (typeof document !== "undefined" && document.head && document.body) {
    var styles2 = document.body.querySelectorAll("style[".concat(ATTR_MARK, "]")) || [];
    var firstChild = document.head.firstChild;
    Array.from(styles2).forEach(function(style2) {
      style2[CSS_IN_JS_INSTANCE] = style2[CSS_IN_JS_INSTANCE] || cssinjsInstanceId;
      if (style2[CSS_IN_JS_INSTANCE] === cssinjsInstanceId) {
        document.head.insertBefore(style2, firstChild);
      }
    });
    var styleHash = {};
    Array.from(document.querySelectorAll("style[".concat(ATTR_MARK, "]"))).forEach(function(style2) {
      var hash = style2.getAttribute(ATTR_MARK);
      if (styleHash[hash]) {
        if (style2[CSS_IN_JS_INSTANCE] === cssinjsInstanceId) {
          var _style$parentNode;
          (_style$parentNode = style2.parentNode) === null || _style$parentNode === void 0 ? void 0 : _style$parentNode.removeChild(style2);
        }
      } else {
        styleHash[hash] = true;
      }
    });
  }
  return new Entity(cssinjsInstanceId);
}
var StyleContext = /* @__PURE__ */ React$2.createContext({
  hashPriority: "low",
  cache: createCache(),
  defaultCache: true
});
function canUseDom() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
function contains(root, n) {
  if (!root) {
    return false;
  }
  if (root.contains) {
    return root.contains(n);
  }
  var node2 = n;
  while (node2) {
    if (node2 === root) {
      return true;
    }
    node2 = node2.parentNode;
  }
  return false;
}
var APPEND_ORDER = "data-rc-order";
var MARK_KEY = "rc-util-key";
var containerCache = /* @__PURE__ */ new Map();
function getMark() {
  var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, mark = _ref.mark;
  if (mark) {
    return mark.startsWith("data-") ? mark : "data-".concat(mark);
  }
  return MARK_KEY;
}
function getContainer(option) {
  if (option.attachTo) {
    return option.attachTo;
  }
  var head = document.querySelector("head");
  return head || document.body;
}
function getOrder(prepend) {
  if (prepend === "queue") {
    return "prependQueue";
  }
  return prepend ? "prepend" : "append";
}
function findStyles(container) {
  return Array.from((containerCache.get(container) || container).children).filter(function(node2) {
    return node2.tagName === "STYLE";
  });
}
function injectCSS(css2) {
  var option = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  if (!canUseDom()) {
    return null;
  }
  var csp = option.csp, prepend = option.prepend;
  var styleNode = document.createElement("style");
  styleNode.setAttribute(APPEND_ORDER, getOrder(prepend));
  if (csp !== null && csp !== void 0 && csp.nonce) {
    styleNode.nonce = csp === null || csp === void 0 ? void 0 : csp.nonce;
  }
  styleNode.innerHTML = css2;
  var container = getContainer(option);
  var firstChild = container.firstChild;
  if (prepend) {
    if (prepend === "queue") {
      var existStyle = findStyles(container).filter(function(node2) {
        return ["prepend", "prependQueue"].includes(node2.getAttribute(APPEND_ORDER));
      });
      if (existStyle.length) {
        container.insertBefore(styleNode, existStyle[existStyle.length - 1].nextSibling);
        return styleNode;
      }
    }
    container.insertBefore(styleNode, firstChild);
  } else {
    container.appendChild(styleNode);
  }
  return styleNode;
}
function findExistNode(key) {
  var option = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var container = getContainer(option);
  return findStyles(container).find(function(node2) {
    return node2.getAttribute(getMark(option)) === key;
  });
}
function removeCSS(key) {
  var option = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var existNode = findExistNode(key, option);
  if (existNode) {
    var container = getContainer(option);
    container.removeChild(existNode);
  }
}
function syncRealContainer(container, option) {
  var cachedRealContainer = containerCache.get(container);
  if (!cachedRealContainer || !contains(document, cachedRealContainer)) {
    var placeholderStyle = injectCSS("", option);
    var parentNode = placeholderStyle.parentNode;
    containerCache.set(container, parentNode);
    container.removeChild(placeholderStyle);
  }
}
function updateCSS(css2, key) {
  var option = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  var container = getContainer(option);
  syncRealContainer(container, option);
  var existNode = findExistNode(key, option);
  if (existNode) {
    var _option$csp, _option$csp2;
    if ((_option$csp = option.csp) !== null && _option$csp !== void 0 && _option$csp.nonce && existNode.nonce !== ((_option$csp2 = option.csp) === null || _option$csp2 === void 0 ? void 0 : _option$csp2.nonce)) {
      var _option$csp3;
      existNode.nonce = (_option$csp3 = option.csp) === null || _option$csp3 === void 0 ? void 0 : _option$csp3.nonce;
    }
    if (existNode.innerHTML !== css2) {
      existNode.innerHTML = css2;
    }
    return existNode;
  }
  var newNode = injectCSS(css2, option);
  newNode.setAttribute(getMark(option), key);
  return newNode;
}
function flattenToken(token2) {
  var str = "";
  Object.keys(token2).forEach(function(key) {
    var value = token2[key];
    str += key;
    if (value && _typeof$3(value) === "object") {
      str += flattenToken(value);
    } else {
      str += value;
    }
  });
  return str;
}
function token2key(token2, salt) {
  return murmur2("".concat(salt, "_").concat(flattenToken(token2)));
}
var layerKey = "layer-".concat(Date.now(), "-").concat(Math.random()).replace(/\./g, "");
var layerWidth = "903px";
function supportSelector(styleStr, handleElement) {
  if (canUseDom()) {
    var _ele$parentNode;
    updateCSS(styleStr, layerKey);
    var _ele = document.createElement("div");
    _ele.style.position = "fixed";
    _ele.style.left = "0";
    _ele.style.top = "0";
    handleElement === null || handleElement === void 0 ? void 0 : handleElement(_ele);
    document.body.appendChild(_ele);
    if (process.env.NODE_ENV !== "production") {
      _ele.innerHTML = "Test";
      _ele.style.zIndex = "9999999";
    }
    var support = getComputedStyle(_ele).width === layerWidth;
    (_ele$parentNode = _ele.parentNode) === null || _ele$parentNode === void 0 ? void 0 : _ele$parentNode.removeChild(_ele);
    removeCSS(layerKey);
    return support;
  }
  return false;
}
var canLayer = void 0;
function supportLayer() {
  if (canLayer === void 0) {
    canLayer = supportSelector("@layer ".concat(layerKey, " { .").concat(layerKey, " { width: ").concat(layerWidth, "!important; } }"), function(ele) {
      ele.className = layerKey;
    });
  }
  return canLayer;
}
function _arrayWithHoles$1(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit$1(arr, i) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i) {
        if (Object(_i) !== _i)
          return;
        _n = false;
      } else
        for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true)
          ;
    } catch (err) {
      _d = true, _e = err;
    } finally {
      try {
        if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r))
          return;
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
}
function _nonIterableRest$1() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray$1(arr, i) {
  return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest$1();
}
function useProdHMR() {
  return false;
}
var webpackHMR = false;
function useDevHMR() {
  return webpackHMR;
}
const useHMR = process.env.NODE_ENV === "production" ? useProdHMR : useDevHMR;
if (process.env.NODE_ENV !== "production" && typeof module !== "undefined" && module && module.hot) {
  var win = window;
  if (typeof win.webpackHotUpdate === "function") {
    var originWebpackHotUpdate = win.webpackHotUpdate;
    win.webpackHotUpdate = function() {
      webpackHMR = true;
      setTimeout(function() {
        webpackHMR = false;
      }, 0);
      return originWebpackHotUpdate.apply(void 0, arguments);
    };
  }
}
function useClientCache(prefix, keyPath, cacheFn, onCacheRemove) {
  var _React$useContext = React$2.useContext(StyleContext), globalCache = _React$useContext.cache;
  var fullPath = [prefix].concat(_toConsumableArray(keyPath));
  var HMRUpdate = useHMR();
  React$2.useMemo(
    function() {
      globalCache.update(fullPath, function(prevCache) {
        var _ref = prevCache || [], _ref2 = _slicedToArray$1(_ref, 2), _ref2$ = _ref2[0], times = _ref2$ === void 0 ? 0 : _ref2$, cache = _ref2[1];
        var tmpCache = cache;
        if (process.env.NODE_ENV !== "production" && cache && HMRUpdate) {
          onCacheRemove === null || onCacheRemove === void 0 ? void 0 : onCacheRemove(tmpCache, HMRUpdate);
          tmpCache = null;
        }
        var mergedCache = tmpCache || cacheFn();
        return [times + 1, mergedCache];
      });
    },
    /* eslint-disable react-hooks/exhaustive-deps */
    [fullPath.join("_")]
    /* eslint-enable */
  );
  React$2.useEffect(function() {
    return function() {
      globalCache.update(fullPath, function(prevCache) {
        var _ref3 = prevCache || [], _ref4 = _slicedToArray$1(_ref3, 2), _ref4$ = _ref4[0], times = _ref4$ === void 0 ? 0 : _ref4$, cache = _ref4[1];
        var nextCount = times - 1;
        if (nextCount === 0) {
          onCacheRemove === null || onCacheRemove === void 0 ? void 0 : onCacheRemove(cache, false);
          return null;
        }
        return [times - 1, cache];
      });
    };
  }, fullPath);
  return globalCache.get(fullPath)[1];
}
var EMPTY_OVERRIDE = {};
var hashPrefix = process.env.NODE_ENV !== "production" ? "css-dev-only-do-not-override" : "css";
var tokenKeys = /* @__PURE__ */ new Map();
function recordCleanToken(tokenKey) {
  tokenKeys.set(tokenKey, (tokenKeys.get(tokenKey) || 0) + 1);
}
function removeStyleTags(key, instanceId) {
  if (typeof document !== "undefined") {
    var styles2 = document.querySelectorAll("style[".concat(ATTR_TOKEN, '="').concat(key, '"]'));
    styles2.forEach(function(style2) {
      if (style2[CSS_IN_JS_INSTANCE] === instanceId) {
        var _style$parentNode;
        (_style$parentNode = style2.parentNode) === null || _style$parentNode === void 0 ? void 0 : _style$parentNode.removeChild(style2);
      }
    });
  }
}
function cleanTokenStyle(tokenKey, instanceId) {
  tokenKeys.set(tokenKey, (tokenKeys.get(tokenKey) || 0) - 1);
  var tokenKeyList = Array.from(tokenKeys.keys());
  var cleanableKeyList = tokenKeyList.filter(function(key) {
    var count = tokenKeys.get(key) || 0;
    return count <= 0;
  });
  if (cleanableKeyList.length < tokenKeyList.length) {
    cleanableKeyList.forEach(function(key) {
      removeStyleTags(key, instanceId);
      tokenKeys.delete(key);
    });
  }
}
function useCacheToken(theme2, tokens) {
  var option = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  var _useContext = useContext(StyleContext), instanceId = _useContext.cache.instanceId;
  var _option$salt = option.salt, salt = _option$salt === void 0 ? "" : _option$salt, _option$override = option.override, override = _option$override === void 0 ? EMPTY_OVERRIDE : _option$override, formatToken2 = option.formatToken;
  var mergedToken = React$2.useMemo(function() {
    return Object.assign.apply(Object, [{}].concat(_toConsumableArray(tokens)));
  }, [tokens]);
  var tokenStr = React$2.useMemo(function() {
    return flattenToken(mergedToken);
  }, [mergedToken]);
  var overrideTokenStr = React$2.useMemo(function() {
    return flattenToken(override);
  }, [override]);
  var cachedToken = useClientCache("token", [salt, theme2.id, tokenStr, overrideTokenStr], function() {
    var derivativeToken = theme2.getDerivativeToken(mergedToken);
    var mergedDerivativeToken = _objectSpread2$1(_objectSpread2$1({}, derivativeToken), override);
    if (formatToken2) {
      mergedDerivativeToken = formatToken2(mergedDerivativeToken);
    }
    var tokenKey = token2key(mergedDerivativeToken, salt);
    mergedDerivativeToken._tokenKey = tokenKey;
    recordCleanToken(tokenKey);
    var hashId = "".concat(hashPrefix, "-").concat(murmur2(tokenKey));
    mergedDerivativeToken._hashId = hashId;
    return [mergedDerivativeToken, hashId];
  }, function(cache) {
    cleanTokenStyle(cache[0]._tokenKey, instanceId);
  });
  return cachedToken;
}
var unitlessKeys = {
  animationIterationCount: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};
var COMMENT = "comm";
var RULESET = "rule";
var DECLARATION = "decl";
var IMPORT = "@import";
var KEYFRAMES = "@keyframes";
var abs = Math.abs;
var from = String.fromCharCode;
function trim(value) {
  return value.trim();
}
function replace(value, pattern4, replacement) {
  return value.replace(pattern4, replacement);
}
function indexof(value, search) {
  return value.indexOf(search);
}
function charat(value, index2) {
  return value.charCodeAt(index2) | 0;
}
function substr(value, begin, end) {
  return value.slice(begin, end);
}
function strlen(value) {
  return value.length;
}
function sizeof(value) {
  return value.length;
}
function append(value, array4) {
  return array4.push(value), value;
}
var line = 1;
var column = 1;
var length = 0;
var position = 0;
var character = 0;
var characters = "";
function node(value, root, parent, type4, props, children, length2) {
  return { value, root, parent, type: type4, props, children, line, column, length: length2, return: "" };
}
function char() {
  return character;
}
function prev() {
  character = position > 0 ? charat(characters, --position) : 0;
  if (column--, character === 10)
    column = 1, line--;
  return character;
}
function next() {
  character = position < length ? charat(characters, position++) : 0;
  if (column++, character === 10)
    column = 1, line++;
  return character;
}
function peek() {
  return charat(characters, position);
}
function caret() {
  return position;
}
function slice(begin, end) {
  return substr(characters, begin, end);
}
function token(type4) {
  switch (type4) {
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    case 59:
    case 123:
    case 125:
      return 4;
    case 58:
      return 3;
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    case 41:
    case 93:
      return 1;
  }
  return 0;
}
function alloc(value) {
  return line = column = 1, length = strlen(characters = value), position = 0, [];
}
function dealloc(value) {
  return characters = "", value;
}
function delimit(type4) {
  return trim(slice(position - 1, delimiter(type4 === 91 ? type4 + 2 : type4 === 40 ? type4 + 1 : type4)));
}
function whitespace$1(type4) {
  while (character = peek())
    if (character < 33)
      next();
    else
      break;
  return token(type4) > 2 || token(character) > 3 ? "" : " ";
}
function escaping(index2, count) {
  while (--count && next())
    if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
      break;
  return slice(index2, caret() + (count < 6 && peek() == 32 && next() == 32));
}
function delimiter(type4) {
  while (next())
    switch (character) {
      case type4:
        return position;
      case 34:
      case 39:
        if (type4 !== 34 && type4 !== 39)
          delimiter(character);
        break;
      case 40:
        if (type4 === 41)
          delimiter(type4);
        break;
      case 92:
        next();
        break;
    }
  return position;
}
function commenter(type4, index2) {
  while (next())
    if (type4 + character === 47 + 10)
      break;
    else if (type4 + character === 42 + 42 && peek() === 47)
      break;
  return "/*" + slice(index2, position - 1) + "*" + from(type4 === 47 ? type4 : next());
}
function identifier(index2) {
  while (!token(peek()))
    next();
  return slice(index2, position);
}
function compile(value) {
  return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
}
function parse(value, root, parent, rule, rules2, rulesets, pseudo, points, declarations) {
  var index2 = 0;
  var offset2 = 0;
  var length2 = pseudo;
  var atrule = 0;
  var property = 0;
  var previous = 0;
  var variable = 1;
  var scanning = 1;
  var ampersand = 1;
  var character2 = 0;
  var type4 = "";
  var props = rules2;
  var children = rulesets;
  var reference = rule;
  var characters2 = type4;
  while (scanning)
    switch (previous = character2, character2 = next()) {
      case 40:
        if (previous != 108 && charat(characters2, length2 - 1) == 58) {
          if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
            ampersand = -1;
          break;
        }
      case 34:
      case 39:
      case 91:
        characters2 += delimit(character2);
        break;
      case 9:
      case 10:
      case 13:
      case 32:
        characters2 += whitespace$1(previous);
        break;
      case 92:
        characters2 += escaping(caret() - 1, 7);
        continue;
      case 47:
        switch (peek()) {
          case 42:
          case 47:
            append(comment(commenter(next(), caret()), root, parent), declarations);
            break;
          default:
            characters2 += "/";
        }
        break;
      case 123 * variable:
        points[index2++] = strlen(characters2) * ampersand;
      case 125 * variable:
      case 59:
      case 0:
        switch (character2) {
          case 0:
          case 125:
            scanning = 0;
          case 59 + offset2:
            if (property > 0 && strlen(characters2) - length2)
              append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
            break;
          case 59:
            characters2 += ";";
          default:
            append(reference = ruleset(characters2, root, parent, index2, offset2, rules2, points, type4, props = [], children = [], length2), rulesets);
            if (character2 === 123)
              if (offset2 === 0)
                parse(characters2, root, reference, reference, props, rulesets, length2, points, children);
              else
                switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                  case 100:
                  case 109:
                  case 115:
                    parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules2, points, type4, rules2, props = [], length2), children), rules2, children, length2, points, rule ? props : children);
                    break;
                  default:
                    parse(characters2, reference, reference, reference, [""], children, 0, points, children);
                }
        }
        index2 = offset2 = property = 0, variable = ampersand = 1, type4 = characters2 = "", length2 = pseudo;
        break;
      case 58:
        length2 = 1 + strlen(characters2), property = previous;
      default:
        if (variable < 1) {
          if (character2 == 123)
            --variable;
          else if (character2 == 125 && variable++ == 0 && prev() == 125)
            continue;
        }
        switch (characters2 += from(character2), character2 * variable) {
          case 38:
            ampersand = offset2 > 0 ? 1 : (characters2 += "\f", -1);
            break;
          case 44:
            points[index2++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
            break;
          case 64:
            if (peek() === 45)
              characters2 += delimit(next());
            atrule = peek(), offset2 = length2 = strlen(type4 = characters2 += identifier(caret())), character2++;
            break;
          case 45:
            if (previous === 45 && strlen(characters2) == 2)
              variable = 0;
        }
    }
  return rulesets;
}
function ruleset(value, root, parent, index2, offset2, rules2, points, type4, props, children, length2) {
  var post = offset2 - 1;
  var rule = offset2 === 0 ? rules2 : [""];
  var size = sizeof(rule);
  for (var i = 0, j = 0, k = 0; i < index2; ++i)
    for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)
      if (z = trim(j > 0 ? rule[x] + " " + y : replace(y, /&\f/g, rule[x])))
        props[k++] = z;
  return node(value, root, parent, offset2 === 0 ? RULESET : type4, props, children, length2);
}
function comment(value, root, parent) {
  return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
}
function declaration(value, root, parent, length2) {
  return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
}
function serialize(children, callback) {
  var output = "";
  var length2 = sizeof(children);
  for (var i = 0; i < length2; i++)
    output += callback(children[i], i, children, callback) || "";
  return output;
}
function stringify$1(element, index2, children, callback) {
  switch (element.type) {
    case IMPORT:
    case DECLARATION:
      return element.return = element.return || element.value;
    case COMMENT:
      return "";
    case KEYFRAMES:
      return element.return = element.value + "{" + serialize(element.children, callback) + "}";
    case RULESET:
      element.value = element.props.join(",");
  }
  return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
}
function lintWarning(message, info) {
  var path = info.path, parentSelectors = info.parentSelectors;
  warningOnce(false, "[Ant Design CSS-in-JS] ".concat(path ? "Error in ".concat(path, ": ") : "").concat(message).concat(parentSelectors.length ? " Selector: ".concat(parentSelectors.join(" | ")) : ""));
}
var linter$1 = function linter(key, value, info) {
  if (key === "content") {
    var contentValuePattern = /(attr|counters?|url|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
    var contentValues = ["normal", "none", "initial", "inherit", "unset"];
    if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
      lintWarning("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"".concat(value, "\"'`."), info);
    }
  }
};
var linter2 = function linter3(key, value, info) {
  if (key === "animation") {
    if (info.hashId && value !== "none") {
      lintWarning("You seem to be using hashed animation '".concat(value, "', in which case 'animationName' with Keyframe as value is recommended."), info);
    }
  }
};
var isClientSide = canUseDom();
var SKIP_CHECK = "_skip_check_";
var MULTI_VALUE = "_multi_value_";
function normalizeStyle(styleStr) {
  var serialized = serialize(compile(styleStr), stringify$1);
  return serialized.replace(/\{%%%\:[^;];}/g, ";");
}
function isCompoundCSSProperty(value) {
  return _typeof$3(value) === "object" && value && (SKIP_CHECK in value || MULTI_VALUE in value);
}
function injectSelectorHash(key, hashId, hashPriority) {
  if (!hashId) {
    return key;
  }
  var hashClassName = ".".concat(hashId);
  var hashSelector = hashPriority === "low" ? ":where(".concat(hashClassName, ")") : hashClassName;
  var keys = key.split(",").map(function(k) {
    var _firstPath$match;
    var fullPath = k.trim().split(/\s+/);
    var firstPath = fullPath[0] || "";
    var htmlElement = ((_firstPath$match = firstPath.match(/^\w+/)) === null || _firstPath$match === void 0 ? void 0 : _firstPath$match[0]) || "";
    firstPath = "".concat(htmlElement).concat(hashSelector).concat(firstPath.slice(htmlElement.length));
    return [firstPath].concat(_toConsumableArray(fullPath.slice(1))).join(" ");
  });
  return keys.join(",");
}
var parseStyle = function parseStyle2(interpolation) {
  var config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
    root: true,
    parentSelectors: []
  }, root = _ref.root, injectHash = _ref.injectHash, parentSelectors = _ref.parentSelectors;
  var hashId = config.hashId, layer = config.layer, path = config.path, hashPriority = config.hashPriority, _config$transformers = config.transformers, transformers = _config$transformers === void 0 ? [] : _config$transformers, _config$linters = config.linters, linters = _config$linters === void 0 ? [] : _config$linters;
  var styleStr = "";
  var effectStyle = {};
  function parseKeyframes(keyframes) {
    var animationName = keyframes.getName(hashId);
    if (!effectStyle[animationName]) {
      var _parseStyle = parseStyle2(keyframes.style, config, {
        root: false,
        parentSelectors
      }), _parseStyle2 = _slicedToArray$1(_parseStyle, 1), _parsedStr = _parseStyle2[0];
      effectStyle[animationName] = "@keyframes ".concat(keyframes.getName(hashId)).concat(_parsedStr);
    }
  }
  function flattenList(list) {
    var fullList = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    list.forEach(function(item) {
      if (Array.isArray(item)) {
        flattenList(item, fullList);
      } else if (item) {
        fullList.push(item);
      }
    });
    return fullList;
  }
  var flattenStyleList = flattenList(Array.isArray(interpolation) ? interpolation : [interpolation]);
  flattenStyleList.forEach(function(originStyle) {
    var style2 = typeof originStyle === "string" && !root ? {} : originStyle;
    if (typeof style2 === "string") {
      styleStr += "".concat(style2, "\n");
    } else if (style2._keyframe) {
      parseKeyframes(style2);
    } else {
      var mergedStyle = transformers.reduce(function(prev2, trans) {
        var _trans$visit;
        return (trans === null || trans === void 0 ? void 0 : (_trans$visit = trans.visit) === null || _trans$visit === void 0 ? void 0 : _trans$visit.call(trans, prev2)) || prev2;
      }, style2);
      Object.keys(mergedStyle).forEach(function(key) {
        var value = mergedStyle[key];
        if (_typeof$3(value) === "object" && value && (key !== "animationName" || !value._keyframe) && !isCompoundCSSProperty(value)) {
          var subInjectHash = false;
          var mergedKey = key.trim();
          var nextRoot = false;
          if ((root || injectHash) && hashId) {
            if (mergedKey.startsWith("@")) {
              subInjectHash = true;
            } else {
              mergedKey = injectSelectorHash(key, hashId, hashPriority);
            }
          } else if (root && !hashId && (mergedKey === "&" || mergedKey === "")) {
            mergedKey = "";
            nextRoot = true;
          }
          var _parseStyle3 = parseStyle2(value, config, {
            root: nextRoot,
            injectHash: subInjectHash,
            parentSelectors: [].concat(_toConsumableArray(parentSelectors), [mergedKey])
          }), _parseStyle4 = _slicedToArray$1(_parseStyle3, 2), _parsedStr2 = _parseStyle4[0], childEffectStyle = _parseStyle4[1];
          effectStyle = _objectSpread2$1(_objectSpread2$1({}, effectStyle), childEffectStyle);
          styleStr += "".concat(mergedKey).concat(_parsedStr2);
        } else {
          let appendStyle = function(cssKey, cssValue) {
            if (process.env.NODE_ENV !== "production" && (_typeof$3(value) !== "object" || !(value !== null && value !== void 0 && value[SKIP_CHECK]))) {
              [linter$1, linter2].concat(_toConsumableArray(linters)).forEach(function(linter4) {
                return linter4(cssKey, cssValue, {
                  path,
                  hashId,
                  parentSelectors
                });
              });
            }
            var styleName = cssKey.replace(/[A-Z]/g, function(match2) {
              return "-".concat(match2.toLowerCase());
            });
            var formatValue = cssValue;
            if (!unitlessKeys[cssKey] && typeof formatValue === "number" && formatValue !== 0) {
              formatValue = "".concat(formatValue, "px");
            }
            if (cssKey === "animationName" && cssValue !== null && cssValue !== void 0 && cssValue._keyframe) {
              parseKeyframes(cssValue);
              formatValue = cssValue.getName(hashId);
            }
            styleStr += "".concat(styleName, ":").concat(formatValue, ";");
          };
          var _value;
          var actualValue = (_value = value === null || value === void 0 ? void 0 : value.value) !== null && _value !== void 0 ? _value : value;
          if (_typeof$3(value) === "object" && value !== null && value !== void 0 && value[MULTI_VALUE] && Array.isArray(actualValue)) {
            actualValue.forEach(function(item) {
              appendStyle(key, item);
            });
          } else {
            appendStyle(key, actualValue);
          }
        }
      });
    }
  });
  if (!root) {
    styleStr = "{".concat(styleStr, "}");
  } else if (layer && supportLayer()) {
    var layerCells = layer.split(",");
    var layerName = layerCells[layerCells.length - 1].trim();
    styleStr = "@layer ".concat(layerName, " {").concat(styleStr, "}");
    if (layerCells.length > 1) {
      styleStr = "@layer ".concat(layer, "{%%%:%}").concat(styleStr);
    }
  }
  return [styleStr, effectStyle];
};
function uniqueHash(path, styleStr) {
  return murmur2("".concat(path.join("%")).concat(styleStr));
}
function Empty$3() {
  return null;
}
function useStyleRegister(info, styleFn) {
  var token2 = info.token, path = info.path, hashId = info.hashId, layer = info.layer, nonce = info.nonce;
  var _React$useContext = React$2.useContext(StyleContext), autoClear = _React$useContext.autoClear, mock = _React$useContext.mock, defaultCache = _React$useContext.defaultCache, hashPriority = _React$useContext.hashPriority, container = _React$useContext.container, ssrInline = _React$useContext.ssrInline, transformers = _React$useContext.transformers, linters = _React$useContext.linters, cache = _React$useContext.cache;
  var tokenKey = token2._tokenKey;
  var fullPath = [tokenKey].concat(_toConsumableArray(path));
  var isMergedClientSide = isClientSide;
  if (process.env.NODE_ENV !== "production" && mock !== void 0) {
    isMergedClientSide = mock === "client";
  }
  var _useGlobalCache = useClientCache(
    "style",
    fullPath,
    // Create cache if needed
    function() {
      var styleObj = styleFn();
      var _parseStyle5 = parseStyle(styleObj, {
        hashId,
        hashPriority,
        layer,
        path: path.join("-"),
        transformers,
        linters
      }), _parseStyle6 = _slicedToArray$1(_parseStyle5, 2), parsedStyle = _parseStyle6[0], effectStyle = _parseStyle6[1];
      var styleStr = normalizeStyle(parsedStyle);
      var styleId = uniqueHash(fullPath, styleStr);
      if (isMergedClientSide) {
        var mergedCSSConfig = {
          mark: ATTR_MARK,
          prepend: "queue",
          attachTo: container
        };
        var nonceStr = typeof nonce === "function" ? nonce() : nonce;
        if (nonceStr) {
          mergedCSSConfig.csp = {
            nonce: nonceStr
          };
        }
        var style2 = updateCSS(styleStr, styleId, mergedCSSConfig);
        style2[CSS_IN_JS_INSTANCE] = cache.instanceId;
        style2.setAttribute(ATTR_TOKEN, tokenKey);
        if (process.env.NODE_ENV !== "production") {
          style2.setAttribute(ATTR_DEV_CACHE_PATH, fullPath.join("|"));
        }
        Object.keys(effectStyle).forEach(function(effectKey) {
          updateCSS(normalizeStyle(effectStyle[effectKey]), "_effect-".concat(effectKey), mergedCSSConfig);
        });
      }
      return [styleStr, tokenKey, styleId];
    },
    // Remove cache if no need
    function(_ref2, fromHMR) {
      var _ref3 = _slicedToArray$1(_ref2, 3), styleId = _ref3[2];
      if ((fromHMR || autoClear) && isClientSide) {
        removeCSS(styleId, {
          mark: ATTR_MARK
        });
      }
    }
  ), _useGlobalCache2 = _slicedToArray$1(_useGlobalCache, 3), cachedStyleStr = _useGlobalCache2[0], cachedTokenKey = _useGlobalCache2[1], cachedStyleId = _useGlobalCache2[2];
  return function(node2) {
    var styleNode;
    if (!ssrInline || isMergedClientSide || !defaultCache) {
      styleNode = /* @__PURE__ */ React$2.createElement(Empty$3, null);
    } else {
      var _ref4;
      styleNode = /* @__PURE__ */ React$2.createElement("style", _extends$1({}, (_ref4 = {}, _defineProperty$3(_ref4, ATTR_TOKEN, cachedTokenKey), _defineProperty$3(_ref4, ATTR_MARK, cachedStyleId), _ref4), {
        dangerouslySetInnerHTML: {
          __html: cachedStyleStr
        }
      }));
    }
    return /* @__PURE__ */ React$2.createElement(React$2.Fragment, null, styleNode, node2);
  };
}
var Keyframe = /* @__PURE__ */ function() {
  function Keyframe2(name, style2) {
    _classCallCheck$1(this, Keyframe2);
    _defineProperty$3(this, "name", void 0);
    _defineProperty$3(this, "style", void 0);
    _defineProperty$3(this, "_keyframe", true);
    this.name = name;
    this.style = style2;
  }
  _createClass$1(Keyframe2, [{
    key: "getName",
    value: function getName() {
      var hashId = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      return hashId ? "".concat(hashId, "-").concat(this.name) : this.name;
    }
  }]);
  return Keyframe2;
}();
function sameDerivativeOption(left, right) {
  if (left.length !== right.length) {
    return false;
  }
  for (var i = 0; i < left.length; i++) {
    if (left[i] !== right[i]) {
      return false;
    }
  }
  return true;
}
var ThemeCache = /* @__PURE__ */ function() {
  function ThemeCache2() {
    _classCallCheck$1(this, ThemeCache2);
    _defineProperty$3(this, "cache", void 0);
    _defineProperty$3(this, "keys", void 0);
    _defineProperty$3(this, "cacheCallTimes", void 0);
    this.cache = /* @__PURE__ */ new Map();
    this.keys = [];
    this.cacheCallTimes = 0;
  }
  _createClass$1(ThemeCache2, [{
    key: "size",
    value: function size() {
      return this.keys.length;
    }
  }, {
    key: "internalGet",
    value: function internalGet(derivativeOption) {
      var _cache2, _cache3;
      var updateCallTimes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var cache = {
        map: this.cache
      };
      derivativeOption.forEach(function(derivative2) {
        if (!cache) {
          cache = void 0;
        } else {
          var _cache, _cache$map;
          cache = (_cache = cache) === null || _cache === void 0 ? void 0 : (_cache$map = _cache.map) === null || _cache$map === void 0 ? void 0 : _cache$map.get(derivative2);
        }
      });
      if ((_cache2 = cache) !== null && _cache2 !== void 0 && _cache2.value && updateCallTimes) {
        cache.value[1] = this.cacheCallTimes++;
      }
      return (_cache3 = cache) === null || _cache3 === void 0 ? void 0 : _cache3.value;
    }
  }, {
    key: "get",
    value: function get2(derivativeOption) {
      var _this$internalGet;
      return (_this$internalGet = this.internalGet(derivativeOption, true)) === null || _this$internalGet === void 0 ? void 0 : _this$internalGet[0];
    }
  }, {
    key: "has",
    value: function has2(derivativeOption) {
      return !!this.internalGet(derivativeOption);
    }
  }, {
    key: "set",
    value: function set2(derivativeOption, value) {
      var _this = this;
      if (!this.has(derivativeOption)) {
        if (this.size() + 1 > ThemeCache2.MAX_CACHE_SIZE + ThemeCache2.MAX_CACHE_OFFSET) {
          var _this$keys$reduce = this.keys.reduce(function(result, key) {
            var _result = _slicedToArray$1(result, 2), callTimes = _result[1];
            if (_this.internalGet(key)[1] < callTimes) {
              return [key, _this.internalGet(key)[1]];
            }
            return result;
          }, [this.keys[0], this.cacheCallTimes]), _this$keys$reduce2 = _slicedToArray$1(_this$keys$reduce, 1), targetKey = _this$keys$reduce2[0];
          this.delete(targetKey);
        }
        this.keys.push(derivativeOption);
      }
      var cache = this.cache;
      derivativeOption.forEach(function(derivative2, index2) {
        if (index2 === derivativeOption.length - 1) {
          cache.set(derivative2, {
            value: [value, _this.cacheCallTimes++]
          });
        } else {
          var cacheValue = cache.get(derivative2);
          if (!cacheValue) {
            cache.set(derivative2, {
              map: /* @__PURE__ */ new Map()
            });
          } else if (!cacheValue.map) {
            cacheValue.map = /* @__PURE__ */ new Map();
          }
          cache = cache.get(derivative2).map;
        }
      });
    }
  }, {
    key: "deleteByPath",
    value: function deleteByPath(currentCache, derivatives) {
      var cache = currentCache.get(derivatives[0]);
      if (derivatives.length === 1) {
        var _cache$value;
        if (!cache.map) {
          currentCache.delete(derivatives[0]);
        } else {
          currentCache.set(derivatives[0], {
            map: cache.map
          });
        }
        return (_cache$value = cache.value) === null || _cache$value === void 0 ? void 0 : _cache$value[0];
      }
      var result = this.deleteByPath(cache.map, derivatives.slice(1));
      if ((!cache.map || cache.map.size === 0) && !cache.value) {
        currentCache.delete(derivatives[0]);
      }
      return result;
    }
  }, {
    key: "delete",
    value: function _delete(derivativeOption) {
      if (this.has(derivativeOption)) {
        this.keys = this.keys.filter(function(item) {
          return !sameDerivativeOption(item, derivativeOption);
        });
        return this.deleteByPath(this.cache, derivativeOption);
      }
      return void 0;
    }
  }]);
  return ThemeCache2;
}();
_defineProperty$3(ThemeCache, "MAX_CACHE_SIZE", 20);
_defineProperty$3(ThemeCache, "MAX_CACHE_OFFSET", 5);
var uuid$3 = 0;
var Theme = /* @__PURE__ */ function() {
  function Theme2(derivatives) {
    _classCallCheck$1(this, Theme2);
    _defineProperty$3(this, "derivatives", void 0);
    _defineProperty$3(this, "id", void 0);
    this.derivatives = Array.isArray(derivatives) ? derivatives : [derivatives];
    this.id = uuid$3;
    if (derivatives.length === 0) {
      warning$4(derivatives.length > 0, "[Ant Design CSS-in-JS] Theme should have at least one derivative function.");
    }
    uuid$3 += 1;
  }
  _createClass$1(Theme2, [{
    key: "getDerivativeToken",
    value: function getDerivativeToken(token2) {
      return this.derivatives.reduce(function(result, derivative2) {
        return derivative2(token2, result);
      }, void 0);
    }
  }]);
  return Theme2;
}();
var cacheThemes = new ThemeCache();
function createTheme(derivatives) {
  var derivativeArr = Array.isArray(derivatives) ? derivatives : [derivatives];
  if (!cacheThemes.has(derivativeArr)) {
    cacheThemes.set(derivativeArr, new Theme(derivativeArr));
  }
  return cacheThemes.get(derivativeArr);
}
function noSplit(list) {
  list.notSplit = true;
  return list;
}
({
  // Inset
  inset: ["top", "right", "bottom", "left"],
  insetBlock: ["top", "bottom"],
  insetBlockStart: ["top"],
  insetBlockEnd: ["bottom"],
  insetInline: ["left", "right"],
  insetInlineStart: ["left"],
  insetInlineEnd: ["right"],
  // Margin
  marginBlock: ["marginTop", "marginBottom"],
  marginBlockStart: ["marginTop"],
  marginBlockEnd: ["marginBottom"],
  marginInline: ["marginLeft", "marginRight"],
  marginInlineStart: ["marginLeft"],
  marginInlineEnd: ["marginRight"],
  // Padding
  paddingBlock: ["paddingTop", "paddingBottom"],
  paddingBlockStart: ["paddingTop"],
  paddingBlockEnd: ["paddingBottom"],
  paddingInline: ["paddingLeft", "paddingRight"],
  paddingInlineStart: ["paddingLeft"],
  paddingInlineEnd: ["paddingRight"],
  // Border
  borderBlock: noSplit(["borderTop", "borderBottom"]),
  borderBlockStart: noSplit(["borderTop"]),
  borderBlockEnd: noSplit(["borderBottom"]),
  borderInline: noSplit(["borderLeft", "borderRight"]),
  borderInlineStart: noSplit(["borderLeft"]),
  borderInlineEnd: noSplit(["borderRight"]),
  // Border width
  borderBlockWidth: ["borderTopWidth", "borderBottomWidth"],
  borderBlockStartWidth: ["borderTopWidth"],
  borderBlockEndWidth: ["borderBottomWidth"],
  borderInlineWidth: ["borderLeftWidth", "borderRightWidth"],
  borderInlineStartWidth: ["borderLeftWidth"],
  borderInlineEndWidth: ["borderRightWidth"],
  // Border style
  borderBlockStyle: ["borderTopStyle", "borderBottomStyle"],
  borderBlockStartStyle: ["borderTopStyle"],
  borderBlockEndStyle: ["borderBottomStyle"],
  borderInlineStyle: ["borderLeftStyle", "borderRightStyle"],
  borderInlineStartStyle: ["borderLeftStyle"],
  borderInlineEndStyle: ["borderRightStyle"],
  // Border color
  borderBlockColor: ["borderTopColor", "borderBottomColor"],
  borderBlockStartColor: ["borderTopColor"],
  borderBlockEndColor: ["borderBottomColor"],
  borderInlineColor: ["borderLeftColor", "borderRightColor"],
  borderInlineStartColor: ["borderLeftColor"],
  borderInlineEndColor: ["borderRightColor"],
  // Border radius
  borderStartStartRadius: ["borderTopLeftRadius"],
  borderStartEndRadius: ["borderTopRightRadius"],
  borderEndStartRadius: ["borderBottomLeftRadius"],
  borderEndEndRadius: ["borderBottomRightRadius"]
});
var IconContext = /* @__PURE__ */ createContext({});
const Context$2 = IconContext;
var HOOK_MARK = "RC_FORM_INTERNAL_HOOKS";
var warningFunc = function warningFunc2() {
  warningOnce(false, "Can not find FormContext. Please make sure you wrap Field under Form.");
};
var Context$1 = /* @__PURE__ */ React$2.createContext({
  getFieldValue: warningFunc,
  getFieldsValue: warningFunc,
  getFieldError: warningFunc,
  getFieldWarning: warningFunc,
  getFieldsError: warningFunc,
  isFieldsTouched: warningFunc,
  isFieldTouched: warningFunc,
  isFieldValidating: warningFunc,
  isFieldsValidating: warningFunc,
  resetFields: warningFunc,
  setFields: warningFunc,
  setFieldValue: warningFunc,
  setFieldsValue: warningFunc,
  validateFields: warningFunc,
  submit: warningFunc,
  getInternalHooks: function getInternalHooks() {
    warningFunc();
    return {
      dispatch: warningFunc,
      initEntityValue: warningFunc,
      registerField: warningFunc,
      useSubscribe: warningFunc,
      setInitialValues: warningFunc,
      destroyForm: warningFunc,
      setCallbacks: warningFunc,
      registerWatch: warningFunc,
      getFields: warningFunc,
      setValidateMessages: warningFunc,
      setPreserve: warningFunc,
      getInitialValue: warningFunc
    };
  }
});
var ListContext = /* @__PURE__ */ React$2.createContext(null);
function toArray$2(value) {
  if (value === void 0 || value === null) {
    return [];
  }
  return Array.isArray(value) ? value : [value];
}
function isFormInstance(form) {
  return form && !!form._init;
}
function _regeneratorRuntime() {
  _regeneratorRuntime = function _regeneratorRuntime2() {
    return exports;
  };
  var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function(obj, key, desc) {
    obj[key] = desc.value;
  }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function define2(obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self2, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator2 = Object.create(protoGenerator.prototype), context = new Context2(tryLocsList || []);
    return defineProperty(generator2, "_invoke", {
      value: makeInvokeMethod(innerFn, self2, context)
    }), generator2;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {
  }
  function GeneratorFunction() {
  }
  function GeneratorFunctionPrototype() {
  }
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function() {
    return this;
  });
  var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method4) {
      define(prototype, method4, function(arg) {
        return this._invoke(method4, arg);
      });
    });
  }
  function AsyncIterator(generator2, PromiseImpl) {
    function invoke(method4, arg, resolve, reject) {
      var record = tryCatch(generator2[method4], generator2, arg);
      if ("throw" !== record.type) {
        var result = record.arg, value = result.value;
        return value && "object" == _typeof$3(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function(value2) {
          invoke("next", value2, resolve, reject);
        }, function(err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function(unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function(error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function value(method4, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve, reject) {
            invoke(method4, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self2, context) {
    var state = "suspendedStart";
    return function(method4, arg) {
      if ("executing" === state)
        throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method4)
          throw arg;
        return doneResult();
      }
      for (context.method = method4, context.arg = arg; ; ) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel)
              continue;
            return delegateResult;
          }
        }
        if ("next" === context.method)
          context.sent = context._sent = context.arg;
        else if ("throw" === context.method) {
          if ("suspendedStart" === state)
            throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else
          "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self2, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel)
            continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method, method4 = delegate.iterator[methodName];
    if (void 0 === method4)
      return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = void 0, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
    var record = tryCatch(method4, delegate.iterator, context.arg);
    if ("throw" === record.type)
      return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = void 0), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context2(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(true);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod)
        return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next)
        return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1, next2 = function next3() {
          for (; ++i < iterable.length; )
            if (hasOwn.call(iterable, i))
              return next3.value = iterable[i], next3.done = false, next3;
          return next3.value = void 0, next3.done = true, next3;
        };
        return next2.next = next2;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: void 0,
      done: true
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: true
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: true
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function(genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function(genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function(arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function() {
    return this;
  }), define(Gp, "toString", function() {
    return "[object Generator]";
  }), exports.keys = function(val) {
    var object4 = Object(val), keys = [];
    for (var key in object4)
      keys.push(key);
    return keys.reverse(), function next2() {
      for (; keys.length; ) {
        var key2 = keys.pop();
        if (key2 in object4)
          return next2.value = key2, next2.done = false, next2;
      }
      return next2.done = true, next2;
    };
  }, exports.values = values, Context2.prototype = {
    constructor: Context2,
    reset: function reset(skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(resetTryEntry), !skipTempReset)
        for (var name in this)
          "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = void 0);
    },
    stop: function stop() {
      this.done = true;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type)
        throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done)
        throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = void 0), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i], record = entry.completion;
        if ("root" === entry.tryLoc)
          return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc)
              return handle(entry.catchLoc, true);
            if (this.prev < entry.finallyLoc)
              return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc)
              return handle(entry.catchLoc, true);
          } else {
            if (!hasFinally)
              throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc)
              return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function abrupt(type4, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type4 || "continue" === type4) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type4, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if ("throw" === record.type)
        throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc)
          return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName,
        nextLoc
      }, "next" === this.method && (this.arg = void 0), ContinueSentinel;
    }
  }, exports;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function() {
    var self2 = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self2, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf$1(subClass, superClass);
}
function _getPrototypeOf$1(o) {
  _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$1(o);
}
function _setPrototypeOf$1(o, p) {
  _setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$1(o, p);
}
function _isNativeReflectConstruct$1() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct$1()) {
    _construct = Reflect.construct.bind();
  } else {
    _construct = function _construct2(Parent2, args2, Class2) {
      var a = [null];
      a.push.apply(a, args2);
      var Constructor = Function.bind.apply(Parent2, a);
      var instance = new Constructor();
      if (Class2)
        _setPrototypeOf$1(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
  _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2))
      return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf$1(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf$1(Wrapper, Class2);
  };
  return _wrapNativeSuper(Class);
}
var formatRegExp = /%[sdj%]/g;
var warning$3 = function warning() {
};
if (typeof process !== "undefined" && process.env && process.env.NODE_ENV !== "production" && typeof window !== "undefined" && typeof document !== "undefined") {
  warning$3 = function warning3(type4, errors) {
    if (typeof console !== "undefined" && console.warn && typeof ASYNC_VALIDATOR_NO_WARNING === "undefined") {
      if (errors.every(function(e) {
        return typeof e === "string";
      })) {
        console.warn(type4, errors);
      }
    }
  };
}
function convertFieldsError(errors) {
  if (!errors || !errors.length)
    return null;
  var fields = {};
  errors.forEach(function(error) {
    var field = error.field;
    fields[field] = fields[field] || [];
    fields[field].push(error);
  });
  return fields;
}
function format(template) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  var i = 0;
  var len = args.length;
  if (typeof template === "function") {
    return template.apply(null, args);
  }
  if (typeof template === "string") {
    var str = template.replace(formatRegExp, function(x) {
      if (x === "%%") {
        return "%";
      }
      if (i >= len) {
        return x;
      }
      switch (x) {
        case "%s":
          return String(args[i++]);
        case "%d":
          return Number(args[i++]);
        case "%j":
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return "[Circular]";
          }
          break;
        default:
          return x;
      }
    });
    return str;
  }
  return template;
}
function isNativeStringType(type4) {
  return type4 === "string" || type4 === "url" || type4 === "hex" || type4 === "email" || type4 === "date" || type4 === "pattern";
}
function isEmptyValue(value, type4) {
  if (value === void 0 || value === null) {
    return true;
  }
  if (type4 === "array" && Array.isArray(value) && !value.length) {
    return true;
  }
  if (isNativeStringType(type4) && typeof value === "string" && !value) {
    return true;
  }
  return false;
}
function asyncParallelArray(arr, func, callback) {
  var results = [];
  var total = 0;
  var arrLength = arr.length;
  function count(errors) {
    results.push.apply(results, errors || []);
    total++;
    if (total === arrLength) {
      callback(results);
    }
  }
  arr.forEach(function(a) {
    func(a, count);
  });
}
function asyncSerialArray(arr, func, callback) {
  var index2 = 0;
  var arrLength = arr.length;
  function next2(errors) {
    if (errors && errors.length) {
      callback(errors);
      return;
    }
    var original = index2;
    index2 = index2 + 1;
    if (original < arrLength) {
      func(arr[original], next2);
    } else {
      callback([]);
    }
  }
  next2([]);
}
function flattenObjArr(objArr) {
  var ret = [];
  Object.keys(objArr).forEach(function(k) {
    ret.push.apply(ret, objArr[k] || []);
  });
  return ret;
}
var AsyncValidationError = /* @__PURE__ */ function(_Error) {
  _inheritsLoose(AsyncValidationError2, _Error);
  function AsyncValidationError2(errors, fields) {
    var _this;
    _this = _Error.call(this, "Async Validation Error") || this;
    _this.errors = errors;
    _this.fields = fields;
    return _this;
  }
  return AsyncValidationError2;
}(/* @__PURE__ */ _wrapNativeSuper(Error));
function asyncMap(objArr, option, func, callback, source) {
  if (option.first) {
    var _pending = new Promise(function(resolve, reject) {
      var next2 = function next3(errors) {
        callback(errors);
        return errors.length ? reject(new AsyncValidationError(errors, convertFieldsError(errors))) : resolve(source);
      };
      var flattenArr = flattenObjArr(objArr);
      asyncSerialArray(flattenArr, func, next2);
    });
    _pending["catch"](function(e) {
      return e;
    });
    return _pending;
  }
  var firstFields = option.firstFields === true ? Object.keys(objArr) : option.firstFields || [];
  var objArrKeys = Object.keys(objArr);
  var objArrLength = objArrKeys.length;
  var total = 0;
  var results = [];
  var pending = new Promise(function(resolve, reject) {
    var next2 = function next3(errors) {
      results.push.apply(results, errors);
      total++;
      if (total === objArrLength) {
        callback(results);
        return results.length ? reject(new AsyncValidationError(results, convertFieldsError(results))) : resolve(source);
      }
    };
    if (!objArrKeys.length) {
      callback(results);
      resolve(source);
    }
    objArrKeys.forEach(function(key) {
      var arr = objArr[key];
      if (firstFields.indexOf(key) !== -1) {
        asyncSerialArray(arr, func, next2);
      } else {
        asyncParallelArray(arr, func, next2);
      }
    });
  });
  pending["catch"](function(e) {
    return e;
  });
  return pending;
}
function isErrorObj(obj) {
  return !!(obj && obj.message !== void 0);
}
function getValue$1(value, path) {
  var v = value;
  for (var i = 0; i < path.length; i++) {
    if (v == void 0) {
      return v;
    }
    v = v[path[i]];
  }
  return v;
}
function complementError(rule, source) {
  return function(oe) {
    var fieldValue;
    if (rule.fullFields) {
      fieldValue = getValue$1(source, rule.fullFields);
    } else {
      fieldValue = source[oe.field || rule.fullField];
    }
    if (isErrorObj(oe)) {
      oe.field = oe.field || rule.fullField;
      oe.fieldValue = fieldValue;
      return oe;
    }
    return {
      message: typeof oe === "function" ? oe() : oe,
      fieldValue,
      field: oe.field || rule.fullField
    };
  };
}
function deepMerge(target, source) {
  if (source) {
    for (var s in source) {
      if (source.hasOwnProperty(s)) {
        var value = source[s];
        if (typeof value === "object" && typeof target[s] === "object") {
          target[s] = _extends({}, target[s], value);
        } else {
          target[s] = value;
        }
      }
    }
  }
  return target;
}
var required$1 = function required(rule, value, source, errors, options, type4) {
  if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value, type4 || rule.type))) {
    errors.push(format(options.messages.required, rule.fullField));
  }
};
var whitespace = function whitespace2(rule, value, source, errors, options) {
  if (/^\s+$/.test(value) || value === "") {
    errors.push(format(options.messages.whitespace, rule.fullField));
  }
};
var urlReg;
var getUrlRegex = function() {
  if (urlReg) {
    return urlReg;
  }
  var word = "[a-fA-F\\d:]";
  var b = function b2(options) {
    return options && options.includeBoundaries ? "(?:(?<=\\s|^)(?=" + word + ")|(?<=" + word + ")(?=\\s|$))" : "";
  };
  var v4 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
  var v6seg = "[a-fA-F\\d]{1,4}";
  var v6 = ("\n(?:\n(?:" + v6seg + ":){7}(?:" + v6seg + "|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:" + v6seg + ":){6}(?:" + v4 + "|:" + v6seg + "|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:" + v6seg + ":){5}(?::" + v4 + "|(?::" + v6seg + "){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:" + v6seg + ":){4}(?:(?::" + v6seg + "){0,1}:" + v4 + "|(?::" + v6seg + "){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:" + v6seg + ":){3}(?:(?::" + v6seg + "){0,2}:" + v4 + "|(?::" + v6seg + "){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:" + v6seg + ":){2}(?:(?::" + v6seg + "){0,3}:" + v4 + "|(?::" + v6seg + "){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:" + v6seg + ":){1}(?:(?::" + v6seg + "){0,4}:" + v4 + "|(?::" + v6seg + "){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::" + v6seg + "){0,5}:" + v4 + "|(?::" + v6seg + "){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n").replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
  var v46Exact = new RegExp("(?:^" + v4 + "$)|(?:^" + v6 + "$)");
  var v4exact = new RegExp("^" + v4 + "$");
  var v6exact = new RegExp("^" + v6 + "$");
  var ip = function ip2(options) {
    return options && options.exact ? v46Exact : new RegExp("(?:" + b(options) + v4 + b(options) + ")|(?:" + b(options) + v6 + b(options) + ")", "g");
  };
  ip.v4 = function(options) {
    return options && options.exact ? v4exact : new RegExp("" + b(options) + v4 + b(options), "g");
  };
  ip.v6 = function(options) {
    return options && options.exact ? v6exact : new RegExp("" + b(options) + v6 + b(options), "g");
  };
  var protocol = "(?:(?:[a-z]+:)?//)";
  var auth = "(?:\\S+(?::\\S*)?@)?";
  var ipv4 = ip.v4().source;
  var ipv6 = ip.v6().source;
  var host = "(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)";
  var domain = "(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*";
  var tld = "(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))";
  var port = "(?::\\d{2,5})?";
  var path = '(?:[/?#][^\\s"]*)?';
  var regex = "(?:" + protocol + "|www\\.)" + auth + "(?:localhost|" + ipv4 + "|" + ipv6 + "|" + host + domain + tld + ")" + port + path;
  urlReg = new RegExp("(?:^" + regex + "$)", "i");
  return urlReg;
};
var pattern$2 = {
  // http://emailregex.com/
  email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/,
  // url: new RegExp(
  //   '^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$',
  //   'i',
  // ),
  hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
};
var types = {
  integer: function integer(value) {
    return types.number(value) && parseInt(value, 10) === value;
  },
  "float": function float(value) {
    return types.number(value) && !types.integer(value);
  },
  array: function array(value) {
    return Array.isArray(value);
  },
  regexp: function regexp(value) {
    if (value instanceof RegExp) {
      return true;
    }
    try {
      return !!new RegExp(value);
    } catch (e) {
      return false;
    }
  },
  date: function date(value) {
    return typeof value.getTime === "function" && typeof value.getMonth === "function" && typeof value.getYear === "function" && !isNaN(value.getTime());
  },
  number: function number(value) {
    if (isNaN(value)) {
      return false;
    }
    return typeof value === "number";
  },
  object: function object(value) {
    return typeof value === "object" && !types.array(value);
  },
  method: function method(value) {
    return typeof value === "function";
  },
  email: function email(value) {
    return typeof value === "string" && value.length <= 320 && !!value.match(pattern$2.email);
  },
  url: function url(value) {
    return typeof value === "string" && value.length <= 2048 && !!value.match(getUrlRegex());
  },
  hex: function hex(value) {
    return typeof value === "string" && !!value.match(pattern$2.hex);
  }
};
var type$1 = function type(rule, value, source, errors, options) {
  if (rule.required && value === void 0) {
    required$1(rule, value, source, errors, options);
    return;
  }
  var custom = ["integer", "float", "array", "regexp", "object", "method", "email", "number", "date", "url", "hex"];
  var ruleType = rule.type;
  if (custom.indexOf(ruleType) > -1) {
    if (!types[ruleType](value)) {
      errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
    }
  } else if (ruleType && typeof value !== rule.type) {
    errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
  }
};
var range = function range2(rule, value, source, errors, options) {
  var len = typeof rule.len === "number";
  var min = typeof rule.min === "number";
  var max = typeof rule.max === "number";
  var spRegexp = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
  var val = value;
  var key = null;
  var num = typeof value === "number";
  var str = typeof value === "string";
  var arr = Array.isArray(value);
  if (num) {
    key = "number";
  } else if (str) {
    key = "string";
  } else if (arr) {
    key = "array";
  }
  if (!key) {
    return false;
  }
  if (arr) {
    val = value.length;
  }
  if (str) {
    val = value.replace(spRegexp, "_").length;
  }
  if (len) {
    if (val !== rule.len) {
      errors.push(format(options.messages[key].len, rule.fullField, rule.len));
    }
  } else if (min && !max && val < rule.min) {
    errors.push(format(options.messages[key].min, rule.fullField, rule.min));
  } else if (max && !min && val > rule.max) {
    errors.push(format(options.messages[key].max, rule.fullField, rule.max));
  } else if (min && max && (val < rule.min || val > rule.max)) {
    errors.push(format(options.messages[key].range, rule.fullField, rule.min, rule.max));
  }
};
var ENUM$1 = "enum";
var enumerable$1 = function enumerable(rule, value, source, errors, options) {
  rule[ENUM$1] = Array.isArray(rule[ENUM$1]) ? rule[ENUM$1] : [];
  if (rule[ENUM$1].indexOf(value) === -1) {
    errors.push(format(options.messages[ENUM$1], rule.fullField, rule[ENUM$1].join(", ")));
  }
};
var pattern$1 = function pattern(rule, value, source, errors, options) {
  if (rule.pattern) {
    if (rule.pattern instanceof RegExp) {
      rule.pattern.lastIndex = 0;
      if (!rule.pattern.test(value)) {
        errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
      }
    } else if (typeof rule.pattern === "string") {
      var _pattern = new RegExp(rule.pattern);
      if (!_pattern.test(value)) {
        errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
      }
    }
  }
};
var rules = {
  required: required$1,
  whitespace,
  type: type$1,
  range,
  "enum": enumerable$1,
  pattern: pattern$1
};
var string = function string2(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value, "string") && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options, "string");
    if (!isEmptyValue(value, "string")) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
      rules.pattern(rule, value, source, errors, options);
      if (rule.whitespace === true) {
        rules.whitespace(rule, value, source, errors, options);
      }
    }
  }
  callback(errors);
};
var method2 = function method3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var number2 = function number3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (value === "") {
      value = void 0;
    }
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var _boolean = function _boolean2(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var regexp2 = function regexp3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (!isEmptyValue(value)) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var integer2 = function integer3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var floatFn = function floatFn2(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var array2 = function array3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if ((value === void 0 || value === null) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options, "array");
    if (value !== void 0 && value !== null) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var object2 = function object3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var ENUM = "enum";
var enumerable2 = function enumerable3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules[ENUM](rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var pattern2 = function pattern3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value, "string") && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (!isEmptyValue(value, "string")) {
      rules.pattern(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var date2 = function date3(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value, "date") && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (!isEmptyValue(value, "date")) {
      var dateObject;
      if (value instanceof Date) {
        dateObject = value;
      } else {
        dateObject = new Date(value);
      }
      rules.type(rule, dateObject, source, errors, options);
      if (dateObject) {
        rules.range(rule, dateObject.getTime(), source, errors, options);
      }
    }
  }
  callback(errors);
};
var required2 = function required3(rule, value, callback, source, options) {
  var errors = [];
  var type4 = Array.isArray(value) ? "array" : typeof value;
  rules.required(rule, value, source, errors, options, type4);
  callback(errors);
};
var type2 = function type3(rule, value, callback, source, options) {
  var ruleType = rule.type;
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value, ruleType) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options, ruleType);
    if (!isEmptyValue(value, ruleType)) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
};
var any = function any2(rule, value, callback, source, options) {
  var errors = [];
  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
  }
  callback(errors);
};
var validators = {
  string,
  method: method2,
  number: number2,
  "boolean": _boolean,
  regexp: regexp2,
  integer: integer2,
  "float": floatFn,
  array: array2,
  object: object2,
  "enum": enumerable2,
  pattern: pattern2,
  date: date2,
  url: type2,
  hex: type2,
  email: type2,
  required: required2,
  any
};
function newMessages() {
  return {
    "default": "Validation error on field %s",
    required: "%s is required",
    "enum": "%s must be one of %s",
    whitespace: "%s cannot be empty",
    date: {
      format: "%s date %s is invalid for format %s",
      parse: "%s date could not be parsed, %s is invalid ",
      invalid: "%s date %s is invalid"
    },
    types: {
      string: "%s is not a %s",
      method: "%s is not a %s (function)",
      array: "%s is not an %s",
      object: "%s is not an %s",
      number: "%s is not a %s",
      date: "%s is not a %s",
      "boolean": "%s is not a %s",
      integer: "%s is not an %s",
      "float": "%s is not a %s",
      regexp: "%s is not a valid %s",
      email: "%s is not a valid %s",
      url: "%s is not a valid %s",
      hex: "%s is not a valid %s"
    },
    string: {
      len: "%s must be exactly %s characters",
      min: "%s must be at least %s characters",
      max: "%s cannot be longer than %s characters",
      range: "%s must be between %s and %s characters"
    },
    number: {
      len: "%s must equal %s",
      min: "%s cannot be less than %s",
      max: "%s cannot be greater than %s",
      range: "%s must be between %s and %s"
    },
    array: {
      len: "%s must be exactly %s in length",
      min: "%s cannot be less than %s in length",
      max: "%s cannot be greater than %s in length",
      range: "%s must be between %s and %s in length"
    },
    pattern: {
      mismatch: "%s value %s does not match pattern %s"
    },
    clone: function clone2() {
      var cloned = JSON.parse(JSON.stringify(this));
      cloned.clone = this.clone;
      return cloned;
    }
  };
}
var messages = newMessages();
var Schema = /* @__PURE__ */ function() {
  function Schema2(descriptor) {
    this.rules = null;
    this._messages = messages;
    this.define(descriptor);
  }
  var _proto = Schema2.prototype;
  _proto.define = function define(rules2) {
    var _this = this;
    if (!rules2) {
      throw new Error("Cannot configure a schema with no rules");
    }
    if (typeof rules2 !== "object" || Array.isArray(rules2)) {
      throw new Error("Rules must be an object");
    }
    this.rules = {};
    Object.keys(rules2).forEach(function(name) {
      var item = rules2[name];
      _this.rules[name] = Array.isArray(item) ? item : [item];
    });
  };
  _proto.messages = function messages2(_messages) {
    if (_messages) {
      this._messages = deepMerge(newMessages(), _messages);
    }
    return this._messages;
  };
  _proto.validate = function validate(source_, o, oc) {
    var _this2 = this;
    if (o === void 0) {
      o = {};
    }
    if (oc === void 0) {
      oc = function oc2() {
      };
    }
    var source = source_;
    var options = o;
    var callback = oc;
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    if (!this.rules || Object.keys(this.rules).length === 0) {
      if (callback) {
        callback(null, source);
      }
      return Promise.resolve(source);
    }
    function complete(results) {
      var errors = [];
      var fields = {};
      function add(e) {
        if (Array.isArray(e)) {
          var _errors;
          errors = (_errors = errors).concat.apply(_errors, e);
        } else {
          errors.push(e);
        }
      }
      for (var i = 0; i < results.length; i++) {
        add(results[i]);
      }
      if (!errors.length) {
        callback(null, source);
      } else {
        fields = convertFieldsError(errors);
        callback(errors, fields);
      }
    }
    if (options.messages) {
      var messages$1 = this.messages();
      if (messages$1 === messages) {
        messages$1 = newMessages();
      }
      deepMerge(messages$1, options.messages);
      options.messages = messages$1;
    } else {
      options.messages = this.messages();
    }
    var series = {};
    var keys = options.keys || Object.keys(this.rules);
    keys.forEach(function(z) {
      var arr = _this2.rules[z];
      var value = source[z];
      arr.forEach(function(r2) {
        var rule = r2;
        if (typeof rule.transform === "function") {
          if (source === source_) {
            source = _extends({}, source);
          }
          value = source[z] = rule.transform(value);
        }
        if (typeof rule === "function") {
          rule = {
            validator: rule
          };
        } else {
          rule = _extends({}, rule);
        }
        rule.validator = _this2.getValidationMethod(rule);
        if (!rule.validator) {
          return;
        }
        rule.field = z;
        rule.fullField = rule.fullField || z;
        rule.type = _this2.getType(rule);
        series[z] = series[z] || [];
        series[z].push({
          rule,
          value,
          source,
          field: z
        });
      });
    });
    var errorFields = {};
    return asyncMap(series, options, function(data2, doIt) {
      var rule = data2.rule;
      var deep = (rule.type === "object" || rule.type === "array") && (typeof rule.fields === "object" || typeof rule.defaultField === "object");
      deep = deep && (rule.required || !rule.required && data2.value);
      rule.field = data2.field;
      function addFullField(key, schema) {
        return _extends({}, schema, {
          fullField: rule.fullField + "." + key,
          fullFields: rule.fullFields ? [].concat(rule.fullFields, [key]) : [key]
        });
      }
      function cb(e) {
        if (e === void 0) {
          e = [];
        }
        var errorList = Array.isArray(e) ? e : [e];
        if (!options.suppressWarning && errorList.length) {
          Schema2.warning("async-validator:", errorList);
        }
        if (errorList.length && rule.message !== void 0) {
          errorList = [].concat(rule.message);
        }
        var filledErrors = errorList.map(complementError(rule, source));
        if (options.first && filledErrors.length) {
          errorFields[rule.field] = 1;
          return doIt(filledErrors);
        }
        if (!deep) {
          doIt(filledErrors);
        } else {
          if (rule.required && !data2.value) {
            if (rule.message !== void 0) {
              filledErrors = [].concat(rule.message).map(complementError(rule, source));
            } else if (options.error) {
              filledErrors = [options.error(rule, format(options.messages.required, rule.field))];
            }
            return doIt(filledErrors);
          }
          var fieldsSchema = {};
          if (rule.defaultField) {
            Object.keys(data2.value).map(function(key) {
              fieldsSchema[key] = rule.defaultField;
            });
          }
          fieldsSchema = _extends({}, fieldsSchema, data2.rule.fields);
          var paredFieldsSchema = {};
          Object.keys(fieldsSchema).forEach(function(field) {
            var fieldSchema = fieldsSchema[field];
            var fieldSchemaList = Array.isArray(fieldSchema) ? fieldSchema : [fieldSchema];
            paredFieldsSchema[field] = fieldSchemaList.map(addFullField.bind(null, field));
          });
          var schema = new Schema2(paredFieldsSchema);
          schema.messages(options.messages);
          if (data2.rule.options) {
            data2.rule.options.messages = options.messages;
            data2.rule.options.error = options.error;
          }
          schema.validate(data2.value, data2.rule.options || options, function(errs) {
            var finalErrors = [];
            if (filledErrors && filledErrors.length) {
              finalErrors.push.apply(finalErrors, filledErrors);
            }
            if (errs && errs.length) {
              finalErrors.push.apply(finalErrors, errs);
            }
            doIt(finalErrors.length ? finalErrors : null);
          });
        }
      }
      var res;
      if (rule.asyncValidator) {
        res = rule.asyncValidator(rule, data2.value, cb, data2.source, options);
      } else if (rule.validator) {
        try {
          res = rule.validator(rule, data2.value, cb, data2.source, options);
        } catch (error) {
          console.error == null ? void 0 : console.error(error);
          if (!options.suppressValidatorError) {
            setTimeout(function() {
              throw error;
            }, 0);
          }
          cb(error.message);
        }
        if (res === true) {
          cb();
        } else if (res === false) {
          cb(typeof rule.message === "function" ? rule.message(rule.fullField || rule.field) : rule.message || (rule.fullField || rule.field) + " fails");
        } else if (res instanceof Array) {
          cb(res);
        } else if (res instanceof Error) {
          cb(res.message);
        }
      }
      if (res && res.then) {
        res.then(function() {
          return cb();
        }, function(e) {
          return cb(e);
        });
      }
    }, function(results) {
      complete(results);
    }, source);
  };
  _proto.getType = function getType(rule) {
    if (rule.type === void 0 && rule.pattern instanceof RegExp) {
      rule.type = "pattern";
    }
    if (typeof rule.validator !== "function" && rule.type && !validators.hasOwnProperty(rule.type)) {
      throw new Error(format("Unknown rule type %s", rule.type));
    }
    return rule.type || "string";
  };
  _proto.getValidationMethod = function getValidationMethod(rule) {
    if (typeof rule.validator === "function") {
      return rule.validator;
    }
    var keys = Object.keys(rule);
    var messageIndex = keys.indexOf("message");
    if (messageIndex !== -1) {
      keys.splice(messageIndex, 1);
    }
    if (keys.length === 1 && keys[0] === "required") {
      return validators.required;
    }
    return validators[this.getType(rule)] || void 0;
  };
  return Schema2;
}();
Schema.register = function register(type4, validator) {
  if (typeof validator !== "function") {
    throw new Error("Cannot register a validator by type, validator is not a function");
  }
  validators[type4] = validator;
};
Schema.warning = warning$3;
Schema.messages = messages;
Schema.validators = validators;
var typeTemplate$1 = "'${name}' is not a valid ${type}";
var defaultValidateMessages = {
  default: "Validation error on field '${name}'",
  required: "'${name}' is required",
  enum: "'${name}' must be one of [${enum}]",
  whitespace: "'${name}' cannot be empty",
  date: {
    format: "'${name}' is invalid for format date",
    parse: "'${name}' could not be parsed as date",
    invalid: "'${name}' is invalid date"
  },
  types: {
    string: typeTemplate$1,
    method: typeTemplate$1,
    array: typeTemplate$1,
    object: typeTemplate$1,
    number: typeTemplate$1,
    date: typeTemplate$1,
    boolean: typeTemplate$1,
    integer: typeTemplate$1,
    float: typeTemplate$1,
    regexp: typeTemplate$1,
    email: typeTemplate$1,
    url: typeTemplate$1,
    hex: typeTemplate$1
  },
  string: {
    len: "'${name}' must be exactly ${len} characters",
    min: "'${name}' must be at least ${min} characters",
    max: "'${name}' cannot be longer than ${max} characters",
    range: "'${name}' must be between ${min} and ${max} characters"
  },
  number: {
    len: "'${name}' must equal ${len}",
    min: "'${name}' cannot be less than ${min}",
    max: "'${name}' cannot be greater than ${max}",
    range: "'${name}' must be between ${min} and ${max}"
  },
  array: {
    len: "'${name}' must be exactly ${len} in length",
    min: "'${name}' cannot be less than ${min} in length",
    max: "'${name}' cannot be greater than ${max} in length",
    range: "'${name}' must be between ${min} and ${max} in length"
  },
  pattern: {
    mismatch: "'${name}' does not match pattern ${pattern}"
  }
};
function get(entity, path) {
  var current = entity;
  for (var i = 0; i < path.length; i += 1) {
    if (current === null || current === void 0) {
      return void 0;
    }
    current = current[path[i]];
  }
  return current;
}
function _toArray(arr) {
  return _arrayWithHoles$1(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableRest$1();
}
function internalSet(entity, paths, value, removeIfUndefined) {
  if (!paths.length) {
    return value;
  }
  var _paths = _toArray(paths), path = _paths[0], restPath = _paths.slice(1);
  var clone2;
  if (!entity && typeof path === "number") {
    clone2 = [];
  } else if (Array.isArray(entity)) {
    clone2 = _toConsumableArray(entity);
  } else {
    clone2 = _objectSpread2$1({}, entity);
  }
  if (removeIfUndefined && value === void 0 && restPath.length === 1) {
    delete clone2[path][restPath[0]];
  } else {
    clone2[path] = internalSet(clone2[path], restPath, value, removeIfUndefined);
  }
  return clone2;
}
function set(entity, paths, value) {
  var removeIfUndefined = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  if (paths.length && removeIfUndefined && value === void 0 && !get(entity, paths.slice(0, -1))) {
    return entity;
  }
  return internalSet(entity, paths, value, removeIfUndefined);
}
function cloneDeep(val) {
  if (Array.isArray(val)) {
    return cloneArrayDeep(val);
  } else if (_typeof$3(val) === "object" && val !== null) {
    return cloneObjectDeep(val);
  }
  return val;
}
function cloneObjectDeep(val) {
  if (Object.getPrototypeOf(val) === Object.prototype) {
    var res = {};
    for (var key in val) {
      res[key] = cloneDeep(val[key]);
    }
    return res;
  }
  return val;
}
function cloneArrayDeep(val) {
  return val.map(function(item) {
    return cloneDeep(item);
  });
}
function getNamePath(path) {
  return toArray$2(path);
}
function cloneByNamePathList(store, namePathList) {
  var newStore = {};
  namePathList.forEach(function(namePath) {
    var value = get(store, namePath);
    newStore = set(newStore, namePath, value);
  });
  return newStore;
}
function containsNamePath(namePathList, namePath) {
  return namePathList && namePathList.some(function(path) {
    return matchNamePath(path, namePath);
  });
}
function isObject(obj) {
  return _typeof$3(obj) === "object" && obj !== null && Object.getPrototypeOf(obj) === Object.prototype;
}
function internalSetValues(store, values) {
  var newStore = Array.isArray(store) ? _toConsumableArray(store) : _objectSpread2$1({}, store);
  if (!values) {
    return newStore;
  }
  Object.keys(values).forEach(function(key) {
    var prevValue = newStore[key];
    var value = values[key];
    var recursive = isObject(prevValue) && isObject(value);
    newStore[key] = recursive ? internalSetValues(prevValue, value || {}) : cloneDeep(value);
  });
  return newStore;
}
function setValues(store) {
  for (var _len = arguments.length, restValues = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    restValues[_key - 1] = arguments[_key];
  }
  return restValues.reduce(function(current, newStore) {
    return internalSetValues(current, newStore);
  }, store);
}
function matchNamePath(namePath, changedNamePath) {
  if (!namePath || !changedNamePath || namePath.length !== changedNamePath.length) {
    return false;
  }
  return namePath.every(function(nameUnit, i) {
    return changedNamePath[i] === nameUnit;
  });
}
function isSimilar(source, target) {
  if (source === target) {
    return true;
  }
  if (!source && target || source && !target) {
    return false;
  }
  if (!source || !target || _typeof$3(source) !== "object" || _typeof$3(target) !== "object") {
    return false;
  }
  var sourceKeys = Object.keys(source);
  var targetKeys = Object.keys(target);
  var keys = new Set([].concat(sourceKeys, targetKeys));
  return _toConsumableArray(keys).every(function(key) {
    var sourceValue = source[key];
    var targetValue = target[key];
    if (typeof sourceValue === "function" && typeof targetValue === "function") {
      return true;
    }
    return sourceValue === targetValue;
  });
}
function defaultGetValueFromEvent(valuePropName) {
  var event = arguments.length <= 1 ? void 0 : arguments[1];
  if (event && event.target && _typeof$3(event.target) === "object" && valuePropName in event.target) {
    return event.target[valuePropName];
  }
  return event;
}
function move(array4, moveIndex, toIndex) {
  var length2 = array4.length;
  if (moveIndex < 0 || moveIndex >= length2 || toIndex < 0 || toIndex >= length2) {
    return array4;
  }
  var item = array4[moveIndex];
  var diff = moveIndex - toIndex;
  if (diff > 0) {
    return [].concat(_toConsumableArray(array4.slice(0, toIndex)), [item], _toConsumableArray(array4.slice(toIndex, moveIndex)), _toConsumableArray(array4.slice(moveIndex + 1, length2)));
  }
  if (diff < 0) {
    return [].concat(_toConsumableArray(array4.slice(0, moveIndex)), _toConsumableArray(array4.slice(moveIndex + 1, toIndex + 1)), [item], _toConsumableArray(array4.slice(toIndex + 1, length2)));
  }
  return array4;
}
var AsyncValidator = Schema;
function replaceMessage(template, kv) {
  return template.replace(/\$\{\w+\}/g, function(str) {
    var key = str.slice(2, -1);
    return kv[key];
  });
}
var CODE_LOGIC_ERROR = "CODE_LOGIC_ERROR";
function validateRule(_x, _x2, _x3, _x4, _x5) {
  return _validateRule.apply(this, arguments);
}
function _validateRule() {
  _validateRule = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee2(name, value, rule, options, messageVariables) {
    var cloneRule, originValidator, subRuleField, validator, messages2, result, subResults, kv, fillVariableResult;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1)
        switch (_context2.prev = _context2.next) {
          case 0:
            cloneRule = _objectSpread2$1({}, rule);
            delete cloneRule.ruleIndex;
            AsyncValidator.warning = function() {
              return void 0;
            };
            if (cloneRule.validator) {
              originValidator = cloneRule.validator;
              cloneRule.validator = function() {
                try {
                  return originValidator.apply(void 0, arguments);
                } catch (error) {
                  console.error(error);
                  return Promise.reject(CODE_LOGIC_ERROR);
                }
              };
            }
            subRuleField = null;
            if (cloneRule && cloneRule.type === "array" && cloneRule.defaultField) {
              subRuleField = cloneRule.defaultField;
              delete cloneRule.defaultField;
            }
            validator = new AsyncValidator(_defineProperty$3({}, name, [cloneRule]));
            messages2 = setValues({}, defaultValidateMessages, options.validateMessages);
            validator.messages(messages2);
            result = [];
            _context2.prev = 10;
            _context2.next = 13;
            return Promise.resolve(validator.validate(_defineProperty$3({}, name, value), _objectSpread2$1({}, options)));
          case 13:
            _context2.next = 18;
            break;
          case 15:
            _context2.prev = 15;
            _context2.t0 = _context2["catch"](10);
            if (_context2.t0.errors) {
              result = _context2.t0.errors.map(function(_ref4, index2) {
                var message = _ref4.message;
                var mergedMessage = message === CODE_LOGIC_ERROR ? messages2.default : message;
                return /* @__PURE__ */ React$2.isValidElement(mergedMessage) ? (
                  // Wrap ReactNode with `key`
                  /* @__PURE__ */ React$2.cloneElement(mergedMessage, {
                    key: "error_".concat(index2)
                  })
                ) : mergedMessage;
              });
            }
          case 18:
            if (!(!result.length && subRuleField)) {
              _context2.next = 23;
              break;
            }
            _context2.next = 21;
            return Promise.all(value.map(function(subValue, i) {
              return validateRule("".concat(name, ".").concat(i), subValue, subRuleField, options, messageVariables);
            }));
          case 21:
            subResults = _context2.sent;
            return _context2.abrupt("return", subResults.reduce(function(prev2, errors) {
              return [].concat(_toConsumableArray(prev2), _toConsumableArray(errors));
            }, []));
          case 23:
            kv = _objectSpread2$1(_objectSpread2$1({}, rule), {}, {
              name,
              enum: (rule.enum || []).join(", ")
            }, messageVariables);
            fillVariableResult = result.map(function(error) {
              if (typeof error === "string") {
                return replaceMessage(error, kv);
              }
              return error;
            });
            return _context2.abrupt("return", fillVariableResult);
          case 26:
          case "end":
            return _context2.stop();
        }
    }, _callee2, null, [[10, 15]]);
  }));
  return _validateRule.apply(this, arguments);
}
function validateRules(namePath, value, rules2, options, validateFirst, messageVariables) {
  var name = namePath.join(".");
  var filledRules = rules2.map(function(currentRule, ruleIndex) {
    var originValidatorFunc = currentRule.validator;
    var cloneRule = _objectSpread2$1(_objectSpread2$1({}, currentRule), {}, {
      ruleIndex
    });
    if (originValidatorFunc) {
      cloneRule.validator = function(rule, val, callback) {
        var hasPromise = false;
        var wrappedCallback = function wrappedCallback2() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          Promise.resolve().then(function() {
            warningOnce(!hasPromise, "Your validator function has already return a promise. `callback` will be ignored.");
            if (!hasPromise) {
              callback.apply(void 0, args);
            }
          });
        };
        var promise = originValidatorFunc(rule, val, wrappedCallback);
        hasPromise = promise && typeof promise.then === "function" && typeof promise.catch === "function";
        warningOnce(hasPromise, "`callback` is deprecated. Please return a promise instead.");
        if (hasPromise) {
          promise.then(function() {
            callback();
          }).catch(function(err) {
            callback(err || " ");
          });
        }
      };
    }
    return cloneRule;
  }).sort(function(_ref, _ref2) {
    var w1 = _ref.warningOnly, i1 = _ref.ruleIndex;
    var w2 = _ref2.warningOnly, i2 = _ref2.ruleIndex;
    if (!!w1 === !!w2) {
      return i1 - i2;
    }
    if (w1) {
      return 1;
    }
    return -1;
  });
  var summaryPromise;
  if (validateFirst === true) {
    summaryPromise = new Promise(/* @__PURE__ */ function() {
      var _ref3 = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee(resolve, reject) {
        var i, rule, errors;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1)
            switch (_context.prev = _context.next) {
              case 0:
                i = 0;
              case 1:
                if (!(i < filledRules.length)) {
                  _context.next = 12;
                  break;
                }
                rule = filledRules[i];
                _context.next = 5;
                return validateRule(name, value, rule, options, messageVariables);
              case 5:
                errors = _context.sent;
                if (!errors.length) {
                  _context.next = 9;
                  break;
                }
                reject([{
                  errors,
                  rule
                }]);
                return _context.abrupt("return");
              case 9:
                i += 1;
                _context.next = 1;
                break;
              case 12:
                resolve([]);
              case 13:
              case "end":
                return _context.stop();
            }
        }, _callee);
      }));
      return function(_x6, _x7) {
        return _ref3.apply(this, arguments);
      };
    }());
  } else {
    var rulePromises = filledRules.map(function(rule) {
      return validateRule(name, value, rule, options, messageVariables).then(function(errors) {
        return {
          errors,
          rule
        };
      });
    });
    summaryPromise = (validateFirst ? finishOnFirstFailed(rulePromises) : finishOnAllFailed(rulePromises)).then(function(errors) {
      return Promise.reject(errors);
    });
  }
  summaryPromise.catch(function(e) {
    return e;
  });
  return summaryPromise;
}
function finishOnAllFailed(_x8) {
  return _finishOnAllFailed.apply(this, arguments);
}
function _finishOnAllFailed() {
  _finishOnAllFailed = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee3(rulePromises) {
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1)
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", Promise.all(rulePromises).then(function(errorsList) {
              var _ref5;
              var errors = (_ref5 = []).concat.apply(_ref5, _toConsumableArray(errorsList));
              return errors;
            }));
          case 1:
          case "end":
            return _context3.stop();
        }
    }, _callee3);
  }));
  return _finishOnAllFailed.apply(this, arguments);
}
function finishOnFirstFailed(_x9) {
  return _finishOnFirstFailed.apply(this, arguments);
}
function _finishOnFirstFailed() {
  _finishOnFirstFailed = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee4(rulePromises) {
    var count;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1)
        switch (_context4.prev = _context4.next) {
          case 0:
            count = 0;
            return _context4.abrupt("return", new Promise(function(resolve) {
              rulePromises.forEach(function(promise) {
                promise.then(function(ruleError) {
                  if (ruleError.errors.length) {
                    resolve([ruleError]);
                  }
                  count += 1;
                  if (count === rulePromises.length) {
                    resolve([]);
                  }
                });
              });
            }));
          case 2:
          case "end":
            return _context4.stop();
        }
    }, _callee4);
  }));
  return _finishOnFirstFailed.apply(this, arguments);
}
var _excluded$s = ["name"];
var EMPTY_ERRORS = [];
function requireUpdate(shouldUpdate, prev2, next2, prevValue, nextValue, info) {
  if (typeof shouldUpdate === "function") {
    return shouldUpdate(prev2, next2, "source" in info ? {
      source: info.source
    } : {});
  }
  return prevValue !== nextValue;
}
var Field = /* @__PURE__ */ function(_React$Component) {
  _inherits$1(Field2, _React$Component);
  var _super = _createSuper$1(Field2);
  function Field2(props) {
    var _this;
    _classCallCheck$1(this, Field2);
    _this = _super.call(this, props);
    _this.state = {
      resetCount: 0
    };
    _this.cancelRegisterFunc = null;
    _this.mounted = false;
    _this.touched = false;
    _this.dirty = false;
    _this.validatePromise = void 0;
    _this.prevValidating = void 0;
    _this.errors = EMPTY_ERRORS;
    _this.warnings = EMPTY_ERRORS;
    _this.cancelRegister = function() {
      var _this$props = _this.props, preserve = _this$props.preserve, isListField = _this$props.isListField, name = _this$props.name;
      if (_this.cancelRegisterFunc) {
        _this.cancelRegisterFunc(isListField, preserve, getNamePath(name));
      }
      _this.cancelRegisterFunc = null;
    };
    _this.getNamePath = function() {
      var _this$props2 = _this.props, name = _this$props2.name, fieldContext = _this$props2.fieldContext;
      var _fieldContext$prefixN = fieldContext.prefixName, prefixName = _fieldContext$prefixN === void 0 ? [] : _fieldContext$prefixN;
      return name !== void 0 ? [].concat(_toConsumableArray(prefixName), _toConsumableArray(name)) : [];
    };
    _this.getRules = function() {
      var _this$props3 = _this.props, _this$props3$rules = _this$props3.rules, rules2 = _this$props3$rules === void 0 ? [] : _this$props3$rules, fieldContext = _this$props3.fieldContext;
      return rules2.map(function(rule) {
        if (typeof rule === "function") {
          return rule(fieldContext);
        }
        return rule;
      });
    };
    _this.refresh = function() {
      if (!_this.mounted)
        return;
      _this.setState(function(_ref) {
        var resetCount = _ref.resetCount;
        return {
          resetCount: resetCount + 1
        };
      });
    };
    _this.triggerMetaEvent = function(destroy) {
      var onMetaChange = _this.props.onMetaChange;
      onMetaChange === null || onMetaChange === void 0 ? void 0 : onMetaChange(_objectSpread2$1(_objectSpread2$1({}, _this.getMeta()), {}, {
        destroy
      }));
    };
    _this.onStoreChange = function(prevStore, namePathList, info) {
      var _this$props4 = _this.props, shouldUpdate = _this$props4.shouldUpdate, _this$props4$dependen = _this$props4.dependencies, dependencies = _this$props4$dependen === void 0 ? [] : _this$props4$dependen, onReset = _this$props4.onReset;
      var store = info.store;
      var namePath = _this.getNamePath();
      var prevValue = _this.getValue(prevStore);
      var curValue = _this.getValue(store);
      var namePathMatch = namePathList && containsNamePath(namePathList, namePath);
      if (info.type === "valueUpdate" && info.source === "external" && prevValue !== curValue) {
        _this.touched = true;
        _this.dirty = true;
        _this.validatePromise = null;
        _this.errors = EMPTY_ERRORS;
        _this.warnings = EMPTY_ERRORS;
        _this.triggerMetaEvent();
      }
      switch (info.type) {
        case "reset":
          if (!namePathList || namePathMatch) {
            _this.touched = false;
            _this.dirty = false;
            _this.validatePromise = void 0;
            _this.errors = EMPTY_ERRORS;
            _this.warnings = EMPTY_ERRORS;
            _this.triggerMetaEvent();
            onReset === null || onReset === void 0 ? void 0 : onReset();
            _this.refresh();
            return;
          }
          break;
        case "remove": {
          if (shouldUpdate) {
            _this.reRender();
            return;
          }
          break;
        }
        case "setField": {
          if (namePathMatch) {
            var data2 = info.data;
            if ("touched" in data2) {
              _this.touched = data2.touched;
            }
            if ("validating" in data2 && !("originRCField" in data2)) {
              _this.validatePromise = data2.validating ? Promise.resolve([]) : null;
            }
            if ("errors" in data2) {
              _this.errors = data2.errors || EMPTY_ERRORS;
            }
            if ("warnings" in data2) {
              _this.warnings = data2.warnings || EMPTY_ERRORS;
            }
            _this.dirty = true;
            _this.triggerMetaEvent();
            _this.reRender();
            return;
          }
          if (shouldUpdate && !namePath.length && requireUpdate(shouldUpdate, prevStore, store, prevValue, curValue, info)) {
            _this.reRender();
            return;
          }
          break;
        }
        case "dependenciesUpdate": {
          var dependencyList = dependencies.map(getNamePath);
          if (dependencyList.some(function(dependency) {
            return containsNamePath(info.relatedFields, dependency);
          })) {
            _this.reRender();
            return;
          }
          break;
        }
        default:
          if (namePathMatch || (!dependencies.length || namePath.length || shouldUpdate) && requireUpdate(shouldUpdate, prevStore, store, prevValue, curValue, info)) {
            _this.reRender();
            return;
          }
          break;
      }
      if (shouldUpdate === true) {
        _this.reRender();
      }
    };
    _this.validateRules = function(options) {
      var namePath = _this.getNamePath();
      var currentValue = _this.getValue();
      var rootPromise = Promise.resolve().then(function() {
        if (!_this.mounted) {
          return [];
        }
        var _this$props5 = _this.props, _this$props5$validate = _this$props5.validateFirst, validateFirst = _this$props5$validate === void 0 ? false : _this$props5$validate, messageVariables = _this$props5.messageVariables;
        var _ref2 = options || {}, triggerName = _ref2.triggerName;
        var filteredRules = _this.getRules();
        if (triggerName) {
          filteredRules = filteredRules.filter(function(rule) {
            return rule;
          }).filter(function(rule) {
            var validateTrigger = rule.validateTrigger;
            if (!validateTrigger) {
              return true;
            }
            var triggerList = toArray$2(validateTrigger);
            return triggerList.includes(triggerName);
          });
        }
        var promise = validateRules(namePath, currentValue, filteredRules, options, validateFirst, messageVariables);
        promise.catch(function(e) {
          return e;
        }).then(function() {
          var ruleErrors = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : EMPTY_ERRORS;
          if (_this.validatePromise === rootPromise) {
            var _ruleErrors$forEach;
            _this.validatePromise = null;
            var nextErrors = [];
            var nextWarnings = [];
            (_ruleErrors$forEach = ruleErrors.forEach) === null || _ruleErrors$forEach === void 0 ? void 0 : _ruleErrors$forEach.call(ruleErrors, function(_ref3) {
              var warningOnly = _ref3.rule.warningOnly, _ref3$errors = _ref3.errors, errors = _ref3$errors === void 0 ? EMPTY_ERRORS : _ref3$errors;
              if (warningOnly) {
                nextWarnings.push.apply(nextWarnings, _toConsumableArray(errors));
              } else {
                nextErrors.push.apply(nextErrors, _toConsumableArray(errors));
              }
            });
            _this.errors = nextErrors;
            _this.warnings = nextWarnings;
            _this.triggerMetaEvent();
            _this.reRender();
          }
        });
        return promise;
      });
      _this.validatePromise = rootPromise;
      _this.dirty = true;
      _this.errors = EMPTY_ERRORS;
      _this.warnings = EMPTY_ERRORS;
      _this.triggerMetaEvent();
      _this.reRender();
      return rootPromise;
    };
    _this.isFieldValidating = function() {
      return !!_this.validatePromise;
    };
    _this.isFieldTouched = function() {
      return _this.touched;
    };
    _this.isFieldDirty = function() {
      if (_this.dirty || _this.props.initialValue !== void 0) {
        return true;
      }
      var fieldContext = _this.props.fieldContext;
      var _fieldContext$getInte = fieldContext.getInternalHooks(HOOK_MARK), getInitialValue = _fieldContext$getInte.getInitialValue;
      if (getInitialValue(_this.getNamePath()) !== void 0) {
        return true;
      }
      return false;
    };
    _this.getErrors = function() {
      return _this.errors;
    };
    _this.getWarnings = function() {
      return _this.warnings;
    };
    _this.isListField = function() {
      return _this.props.isListField;
    };
    _this.isList = function() {
      return _this.props.isList;
    };
    _this.isPreserve = function() {
      return _this.props.preserve;
    };
    _this.getMeta = function() {
      _this.prevValidating = _this.isFieldValidating();
      var meta = {
        touched: _this.isFieldTouched(),
        validating: _this.prevValidating,
        errors: _this.errors,
        warnings: _this.warnings,
        name: _this.getNamePath(),
        validated: _this.validatePromise === null
      };
      return meta;
    };
    _this.getOnlyChild = function(children) {
      if (typeof children === "function") {
        var meta = _this.getMeta();
        return _objectSpread2$1(_objectSpread2$1({}, _this.getOnlyChild(children(_this.getControlled(), meta, _this.props.fieldContext))), {}, {
          isFunction: true
        });
      }
      var childList = toArray$3(children);
      if (childList.length !== 1 || !/* @__PURE__ */ React$2.isValidElement(childList[0])) {
        return {
          child: childList,
          isFunction: false
        };
      }
      return {
        child: childList[0],
        isFunction: false
      };
    };
    _this.getValue = function(store) {
      var getFieldsValue = _this.props.fieldContext.getFieldsValue;
      var namePath = _this.getNamePath();
      return get(store || getFieldsValue(true), namePath);
    };
    _this.getControlled = function() {
      var childProps = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var _this$props6 = _this.props, trigger = _this$props6.trigger, validateTrigger = _this$props6.validateTrigger, getValueFromEvent = _this$props6.getValueFromEvent, normalize2 = _this$props6.normalize, valuePropName = _this$props6.valuePropName, getValueProps = _this$props6.getValueProps, fieldContext = _this$props6.fieldContext;
      var mergedValidateTrigger = validateTrigger !== void 0 ? validateTrigger : fieldContext.validateTrigger;
      var namePath = _this.getNamePath();
      var getInternalHooks3 = fieldContext.getInternalHooks, getFieldsValue = fieldContext.getFieldsValue;
      var _getInternalHooks = getInternalHooks3(HOOK_MARK), dispatch = _getInternalHooks.dispatch;
      var value = _this.getValue();
      var mergedGetValueProps = getValueProps || function(val) {
        return _defineProperty$3({}, valuePropName, val);
      };
      var originTriggerFunc = childProps[trigger];
      var control = _objectSpread2$1(_objectSpread2$1({}, childProps), mergedGetValueProps(value));
      control[trigger] = function() {
        _this.touched = true;
        _this.dirty = true;
        _this.triggerMetaEvent();
        var newValue;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        if (getValueFromEvent) {
          newValue = getValueFromEvent.apply(void 0, args);
        } else {
          newValue = defaultGetValueFromEvent.apply(void 0, [valuePropName].concat(args));
        }
        if (normalize2) {
          newValue = normalize2(newValue, value, getFieldsValue(true));
        }
        dispatch({
          type: "updateValue",
          namePath,
          value: newValue
        });
        if (originTriggerFunc) {
          originTriggerFunc.apply(void 0, args);
        }
      };
      var validateTriggerList = toArray$2(mergedValidateTrigger || []);
      validateTriggerList.forEach(function(triggerName) {
        var originTrigger = control[triggerName];
        control[triggerName] = function() {
          if (originTrigger) {
            originTrigger.apply(void 0, arguments);
          }
          var rules2 = _this.props.rules;
          if (rules2 && rules2.length) {
            dispatch({
              type: "validateField",
              namePath,
              triggerName
            });
          }
        };
      });
      return control;
    };
    if (props.fieldContext) {
      var getInternalHooks2 = props.fieldContext.getInternalHooks;
      var _getInternalHooks2 = getInternalHooks2(HOOK_MARK), initEntityValue = _getInternalHooks2.initEntityValue;
      initEntityValue(_assertThisInitialized$1(_this));
    }
    return _this;
  }
  _createClass$1(Field2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props7 = this.props, shouldUpdate = _this$props7.shouldUpdate, fieldContext = _this$props7.fieldContext;
      this.mounted = true;
      if (fieldContext) {
        var getInternalHooks2 = fieldContext.getInternalHooks;
        var _getInternalHooks3 = getInternalHooks2(HOOK_MARK), registerField = _getInternalHooks3.registerField;
        this.cancelRegisterFunc = registerField(this);
      }
      if (shouldUpdate === true) {
        this.reRender();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.cancelRegister();
      this.triggerMetaEvent(true);
      this.mounted = false;
    }
  }, {
    key: "reRender",
    value: function reRender() {
      if (!this.mounted)
        return;
      this.forceUpdate();
    }
  }, {
    key: "render",
    value: function render2() {
      var resetCount = this.state.resetCount;
      var children = this.props.children;
      var _this$getOnlyChild = this.getOnlyChild(children), child = _this$getOnlyChild.child, isFunction2 = _this$getOnlyChild.isFunction;
      var returnChildNode;
      if (isFunction2) {
        returnChildNode = child;
      } else if (/* @__PURE__ */ React$2.isValidElement(child)) {
        returnChildNode = /* @__PURE__ */ React$2.cloneElement(child, this.getControlled(child.props));
      } else {
        warningOnce(!child, "`children` of Field is not validate ReactElement.");
        returnChildNode = child;
      }
      return /* @__PURE__ */ React$2.createElement(React$2.Fragment, {
        key: resetCount
      }, returnChildNode);
    }
  }]);
  return Field2;
}(React$2.Component);
Field.contextType = Context$1;
Field.defaultProps = {
  trigger: "onChange",
  valuePropName: "value"
};
function WrapperField(_ref5) {
  var name = _ref5.name, restProps = _objectWithoutProperties(_ref5, _excluded$s);
  var fieldContext = React$2.useContext(Context$1);
  var listContext = React$2.useContext(ListContext);
  var namePath = name !== void 0 ? getNamePath(name) : void 0;
  var key = "keep";
  if (!restProps.isListField) {
    key = "_".concat((namePath || []).join("_"));
  }
  if (process.env.NODE_ENV !== "production" && restProps.preserve === false && restProps.isListField && namePath.length <= 1) {
    warningOnce(false, "`preserve` should not apply on Form.List fields.");
  }
  return /* @__PURE__ */ React$2.createElement(Field, _extends$1({
    key,
    name: namePath,
    isListField: !!listContext
  }, restProps, {
    fieldContext
  }));
}
var List$1 = function List(_ref) {
  var name = _ref.name, initialValue = _ref.initialValue, children = _ref.children, rules2 = _ref.rules, validateTrigger = _ref.validateTrigger, isListField = _ref.isListField;
  var context = React$2.useContext(Context$1);
  var wrapperListContext = React$2.useContext(ListContext);
  var keyRef = React$2.useRef({
    keys: [],
    id: 0
  });
  var keyManager = keyRef.current;
  var prefixName = React$2.useMemo(function() {
    var parentPrefixName = getNamePath(context.prefixName) || [];
    return [].concat(_toConsumableArray(parentPrefixName), _toConsumableArray(getNamePath(name)));
  }, [context.prefixName, name]);
  var fieldContext = React$2.useMemo(function() {
    return _objectSpread2$1(_objectSpread2$1({}, context), {}, {
      prefixName
    });
  }, [context, prefixName]);
  var listContext = React$2.useMemo(function() {
    return {
      getKey: function getKey2(namePath) {
        var len = prefixName.length;
        var pathName = namePath[len];
        return [keyManager.keys[pathName], namePath.slice(len + 1)];
      }
    };
  }, [prefixName]);
  if (typeof children !== "function") {
    warningOnce(false, "Form.List only accepts function as children.");
    return null;
  }
  var shouldUpdate = function shouldUpdate2(prevValue, nextValue, _ref2) {
    var source = _ref2.source;
    if (source === "internal") {
      return false;
    }
    return prevValue !== nextValue;
  };
  return /* @__PURE__ */ React$2.createElement(ListContext.Provider, {
    value: listContext
  }, /* @__PURE__ */ React$2.createElement(Context$1.Provider, {
    value: fieldContext
  }, /* @__PURE__ */ React$2.createElement(WrapperField, {
    name: [],
    shouldUpdate,
    rules: rules2,
    validateTrigger,
    initialValue,
    isList: true,
    isListField: isListField !== null && isListField !== void 0 ? isListField : !!wrapperListContext
  }, function(_ref3, meta) {
    var _ref3$value = _ref3.value, value = _ref3$value === void 0 ? [] : _ref3$value, onChange = _ref3.onChange;
    var getFieldValue = context.getFieldValue;
    var getNewValue = function getNewValue2() {
      var values = getFieldValue(prefixName || []);
      return values || [];
    };
    var operations = {
      add: function add(defaultValue, index2) {
        var newValue = getNewValue();
        if (index2 >= 0 && index2 <= newValue.length) {
          keyManager.keys = [].concat(_toConsumableArray(keyManager.keys.slice(0, index2)), [keyManager.id], _toConsumableArray(keyManager.keys.slice(index2)));
          onChange([].concat(_toConsumableArray(newValue.slice(0, index2)), [defaultValue], _toConsumableArray(newValue.slice(index2))));
        } else {
          if (process.env.NODE_ENV !== "production" && (index2 < 0 || index2 > newValue.length)) {
            warningOnce(false, "The second parameter of the add function should be a valid positive number.");
          }
          keyManager.keys = [].concat(_toConsumableArray(keyManager.keys), [keyManager.id]);
          onChange([].concat(_toConsumableArray(newValue), [defaultValue]));
        }
        keyManager.id += 1;
      },
      remove: function remove(index2) {
        var newValue = getNewValue();
        var indexSet = new Set(Array.isArray(index2) ? index2 : [index2]);
        if (indexSet.size <= 0) {
          return;
        }
        keyManager.keys = keyManager.keys.filter(function(_, keysIndex) {
          return !indexSet.has(keysIndex);
        });
        onChange(newValue.filter(function(_, valueIndex) {
          return !indexSet.has(valueIndex);
        }));
      },
      move: function move$1(from2, to) {
        if (from2 === to) {
          return;
        }
        var newValue = getNewValue();
        if (from2 < 0 || from2 >= newValue.length || to < 0 || to >= newValue.length) {
          return;
        }
        keyManager.keys = move(keyManager.keys, from2, to);
        onChange(move(newValue, from2, to));
      }
    };
    var listValue = value || [];
    if (!Array.isArray(listValue)) {
      listValue = [];
      if (process.env.NODE_ENV !== "production") {
        warningOnce(false, "Current value of '".concat(prefixName.join(" > "), "' is not an array type."));
      }
    }
    return children(listValue.map(function(__, index2) {
      var key = keyManager.keys[index2];
      if (key === void 0) {
        keyManager.keys[index2] = keyManager.id;
        key = keyManager.keys[index2];
        keyManager.id += 1;
      }
      return {
        name: index2,
        key,
        isListField: true
      };
    }), operations, meta);
  })));
};
function allPromiseFinish(promiseList) {
  var hasError = false;
  var count = promiseList.length;
  var results = [];
  if (!promiseList.length) {
    return Promise.resolve([]);
  }
  return new Promise(function(resolve, reject) {
    promiseList.forEach(function(promise, index2) {
      promise.catch(function(e) {
        hasError = true;
        return e;
      }).then(function(result) {
        count -= 1;
        results[index2] = result;
        if (count > 0) {
          return;
        }
        if (hasError) {
          reject(results);
        }
        resolve(results);
      });
    });
  });
}
var SPLIT = "__@field_split__";
function normalize(namePath) {
  return namePath.map(function(cell) {
    return "".concat(_typeof$3(cell), ":").concat(cell);
  }).join(SPLIT);
}
var NameMap = /* @__PURE__ */ function() {
  function NameMap2() {
    _classCallCheck$1(this, NameMap2);
    this.kvs = /* @__PURE__ */ new Map();
  }
  _createClass$1(NameMap2, [{
    key: "set",
    value: function set2(key, value) {
      this.kvs.set(normalize(key), value);
    }
  }, {
    key: "get",
    value: function get2(key) {
      return this.kvs.get(normalize(key));
    }
  }, {
    key: "update",
    value: function update(key, updater) {
      var origin = this.get(key);
      var next2 = updater(origin);
      if (!next2) {
        this.delete(key);
      } else {
        this.set(key, next2);
      }
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      this.kvs.delete(normalize(key));
    }
    // Since we only use this in test, let simply realize this
  }, {
    key: "map",
    value: function map(callback) {
      return _toConsumableArray(this.kvs.entries()).map(function(_ref) {
        var _ref2 = _slicedToArray$1(_ref, 2), key = _ref2[0], value = _ref2[1];
        var cells = key.split(SPLIT);
        return callback({
          key: cells.map(function(cell) {
            var _cell$match = cell.match(/^([^:]*):(.*)$/), _cell$match2 = _slicedToArray$1(_cell$match, 3), type4 = _cell$match2[1], unit = _cell$match2[2];
            return type4 === "number" ? Number(unit) : unit;
          }),
          value
        });
      });
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var json = {};
      this.map(function(_ref3) {
        var key = _ref3.key, value = _ref3.value;
        json[key.join(".")] = value;
        return null;
      });
      return json;
    }
  }]);
  return NameMap2;
}();
var _excluded$r = ["name"];
var FormStore = /* @__PURE__ */ _createClass$1(function FormStore2(forceRootUpdate) {
  var _this = this;
  _classCallCheck$1(this, FormStore2);
  this.formHooked = false;
  this.forceRootUpdate = void 0;
  this.subscribable = true;
  this.store = {};
  this.fieldEntities = [];
  this.initialValues = {};
  this.callbacks = {};
  this.validateMessages = null;
  this.preserve = null;
  this.lastValidatePromise = null;
  this.getForm = function() {
    return {
      getFieldValue: _this.getFieldValue,
      getFieldsValue: _this.getFieldsValue,
      getFieldError: _this.getFieldError,
      getFieldWarning: _this.getFieldWarning,
      getFieldsError: _this.getFieldsError,
      isFieldsTouched: _this.isFieldsTouched,
      isFieldTouched: _this.isFieldTouched,
      isFieldValidating: _this.isFieldValidating,
      isFieldsValidating: _this.isFieldsValidating,
      resetFields: _this.resetFields,
      setFields: _this.setFields,
      setFieldValue: _this.setFieldValue,
      setFieldsValue: _this.setFieldsValue,
      validateFields: _this.validateFields,
      submit: _this.submit,
      _init: true,
      getInternalHooks: _this.getInternalHooks
    };
  };
  this.getInternalHooks = function(key) {
    if (key === HOOK_MARK) {
      _this.formHooked = true;
      return {
        dispatch: _this.dispatch,
        initEntityValue: _this.initEntityValue,
        registerField: _this.registerField,
        useSubscribe: _this.useSubscribe,
        setInitialValues: _this.setInitialValues,
        destroyForm: _this.destroyForm,
        setCallbacks: _this.setCallbacks,
        setValidateMessages: _this.setValidateMessages,
        getFields: _this.getFields,
        setPreserve: _this.setPreserve,
        getInitialValue: _this.getInitialValue,
        registerWatch: _this.registerWatch
      };
    }
    warningOnce(false, "`getInternalHooks` is internal usage. Should not call directly.");
    return null;
  };
  this.useSubscribe = function(subscribable) {
    _this.subscribable = subscribable;
  };
  this.prevWithoutPreserves = null;
  this.setInitialValues = function(initialValues, init) {
    _this.initialValues = initialValues || {};
    if (init) {
      var _this$prevWithoutPres;
      var nextStore = setValues({}, initialValues, _this.store);
      (_this$prevWithoutPres = _this.prevWithoutPreserves) === null || _this$prevWithoutPres === void 0 ? void 0 : _this$prevWithoutPres.map(function(_ref) {
        var namePath = _ref.key;
        nextStore = set(nextStore, namePath, get(initialValues, namePath));
      });
      _this.prevWithoutPreserves = null;
      _this.updateStore(nextStore);
    }
  };
  this.destroyForm = function() {
    var prevWithoutPreserves = new NameMap();
    _this.getFieldEntities(true).forEach(function(entity) {
      if (!_this.isMergedPreserve(entity.isPreserve())) {
        prevWithoutPreserves.set(entity.getNamePath(), true);
      }
    });
    _this.prevWithoutPreserves = prevWithoutPreserves;
  };
  this.getInitialValue = function(namePath) {
    var initValue = get(_this.initialValues, namePath);
    return namePath.length ? cloneDeep(initValue) : initValue;
  };
  this.setCallbacks = function(callbacks) {
    _this.callbacks = callbacks;
  };
  this.setValidateMessages = function(validateMessages) {
    _this.validateMessages = validateMessages;
  };
  this.setPreserve = function(preserve) {
    _this.preserve = preserve;
  };
  this.watchList = [];
  this.registerWatch = function(callback) {
    _this.watchList.push(callback);
    return function() {
      _this.watchList = _this.watchList.filter(function(fn) {
        return fn !== callback;
      });
    };
  };
  this.notifyWatch = function() {
    var namePath = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    if (_this.watchList.length) {
      var values = _this.getFieldsValue();
      var allValues = _this.getFieldsValue(true);
      _this.watchList.forEach(function(callback) {
        callback(values, allValues, namePath);
      });
    }
  };
  this.timeoutId = null;
  this.warningUnhooked = function() {
    if (process.env.NODE_ENV !== "production" && !_this.timeoutId && typeof window !== "undefined") {
      _this.timeoutId = setTimeout(function() {
        _this.timeoutId = null;
        if (!_this.formHooked) {
          warningOnce(false, "Instance created by `useForm` is not connected to any Form element. Forget to pass `form` prop?");
        }
      });
    }
  };
  this.updateStore = function(nextStore) {
    _this.store = nextStore;
  };
  this.getFieldEntities = function() {
    var pure = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
    if (!pure) {
      return _this.fieldEntities;
    }
    return _this.fieldEntities.filter(function(field) {
      return field.getNamePath().length;
    });
  };
  this.getFieldsMap = function() {
    var pure = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
    var cache = new NameMap();
    _this.getFieldEntities(pure).forEach(function(field) {
      var namePath = field.getNamePath();
      cache.set(namePath, field);
    });
    return cache;
  };
  this.getFieldEntitiesForNamePathList = function(nameList) {
    if (!nameList) {
      return _this.getFieldEntities(true);
    }
    var cache = _this.getFieldsMap(true);
    return nameList.map(function(name) {
      var namePath = getNamePath(name);
      return cache.get(namePath) || {
        INVALIDATE_NAME_PATH: getNamePath(name)
      };
    });
  };
  this.getFieldsValue = function(nameList, filterFunc) {
    _this.warningUnhooked();
    if (nameList === true && !filterFunc) {
      return _this.store;
    }
    var fieldEntities = _this.getFieldEntitiesForNamePathList(Array.isArray(nameList) ? nameList : null);
    var filteredNameList = [];
    fieldEntities.forEach(function(entity) {
      var _entity$isListField;
      var namePath = "INVALIDATE_NAME_PATH" in entity ? entity.INVALIDATE_NAME_PATH : entity.getNamePath();
      if (!nameList && ((_entity$isListField = entity.isListField) === null || _entity$isListField === void 0 ? void 0 : _entity$isListField.call(entity))) {
        return;
      }
      if (!filterFunc) {
        filteredNameList.push(namePath);
      } else {
        var meta = "getMeta" in entity ? entity.getMeta() : null;
        if (filterFunc(meta)) {
          filteredNameList.push(namePath);
        }
      }
    });
    return cloneByNamePathList(_this.store, filteredNameList.map(getNamePath));
  };
  this.getFieldValue = function(name) {
    _this.warningUnhooked();
    var namePath = getNamePath(name);
    return get(_this.store, namePath);
  };
  this.getFieldsError = function(nameList) {
    _this.warningUnhooked();
    var fieldEntities = _this.getFieldEntitiesForNamePathList(nameList);
    return fieldEntities.map(function(entity, index2) {
      if (entity && !("INVALIDATE_NAME_PATH" in entity)) {
        return {
          name: entity.getNamePath(),
          errors: entity.getErrors(),
          warnings: entity.getWarnings()
        };
      }
      return {
        name: getNamePath(nameList[index2]),
        errors: [],
        warnings: []
      };
    });
  };
  this.getFieldError = function(name) {
    _this.warningUnhooked();
    var namePath = getNamePath(name);
    var fieldError = _this.getFieldsError([namePath])[0];
    return fieldError.errors;
  };
  this.getFieldWarning = function(name) {
    _this.warningUnhooked();
    var namePath = getNamePath(name);
    var fieldError = _this.getFieldsError([namePath])[0];
    return fieldError.warnings;
  };
  this.isFieldsTouched = function() {
    _this.warningUnhooked();
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var arg0 = args[0], arg1 = args[1];
    var namePathList;
    var isAllFieldsTouched = false;
    if (args.length === 0) {
      namePathList = null;
    } else if (args.length === 1) {
      if (Array.isArray(arg0)) {
        namePathList = arg0.map(getNamePath);
        isAllFieldsTouched = false;
      } else {
        namePathList = null;
        isAllFieldsTouched = arg0;
      }
    } else {
      namePathList = arg0.map(getNamePath);
      isAllFieldsTouched = arg1;
    }
    var fieldEntities = _this.getFieldEntities(true);
    var isFieldTouched = function isFieldTouched2(field) {
      return field.isFieldTouched();
    };
    if (!namePathList) {
      return isAllFieldsTouched ? fieldEntities.every(isFieldTouched) : fieldEntities.some(isFieldTouched);
    }
    var map = new NameMap();
    namePathList.forEach(function(shortNamePath) {
      map.set(shortNamePath, []);
    });
    fieldEntities.forEach(function(field) {
      var fieldNamePath = field.getNamePath();
      namePathList.forEach(function(shortNamePath) {
        if (shortNamePath.every(function(nameUnit, i) {
          return fieldNamePath[i] === nameUnit;
        })) {
          map.update(shortNamePath, function(list) {
            return [].concat(_toConsumableArray(list), [field]);
          });
        }
      });
    });
    var isNamePathListTouched = function isNamePathListTouched2(entities) {
      return entities.some(isFieldTouched);
    };
    var namePathListEntities = map.map(function(_ref2) {
      var value = _ref2.value;
      return value;
    });
    return isAllFieldsTouched ? namePathListEntities.every(isNamePathListTouched) : namePathListEntities.some(isNamePathListTouched);
  };
  this.isFieldTouched = function(name) {
    _this.warningUnhooked();
    return _this.isFieldsTouched([name]);
  };
  this.isFieldsValidating = function(nameList) {
    _this.warningUnhooked();
    var fieldEntities = _this.getFieldEntities();
    if (!nameList) {
      return fieldEntities.some(function(testField) {
        return testField.isFieldValidating();
      });
    }
    var namePathList = nameList.map(getNamePath);
    return fieldEntities.some(function(testField) {
      var fieldNamePath = testField.getNamePath();
      return containsNamePath(namePathList, fieldNamePath) && testField.isFieldValidating();
    });
  };
  this.isFieldValidating = function(name) {
    _this.warningUnhooked();
    return _this.isFieldsValidating([name]);
  };
  this.resetWithFieldInitialValue = function() {
    var info = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var cache = new NameMap();
    var fieldEntities = _this.getFieldEntities(true);
    fieldEntities.forEach(function(field) {
      var initialValue = field.props.initialValue;
      var namePath = field.getNamePath();
      if (initialValue !== void 0) {
        var records = cache.get(namePath) || /* @__PURE__ */ new Set();
        records.add({
          entity: field,
          value: initialValue
        });
        cache.set(namePath, records);
      }
    });
    var resetWithFields = function resetWithFields2(entities) {
      entities.forEach(function(field) {
        var initialValue = field.props.initialValue;
        if (initialValue !== void 0) {
          var namePath = field.getNamePath();
          var formInitialValue = _this.getInitialValue(namePath);
          if (formInitialValue !== void 0) {
            warningOnce(false, "Form already set 'initialValues' with path '".concat(namePath.join("."), "'. Field can not overwrite it."));
          } else {
            var records = cache.get(namePath);
            if (records && records.size > 1) {
              warningOnce(false, "Multiple Field with path '".concat(namePath.join("."), "' set 'initialValue'. Can not decide which one to pick."));
            } else if (records) {
              var originValue = _this.getFieldValue(namePath);
              if (!info.skipExist || originValue === void 0) {
                _this.updateStore(set(_this.store, namePath, _toConsumableArray(records)[0].value));
              }
            }
          }
        }
      });
    };
    var requiredFieldEntities;
    if (info.entities) {
      requiredFieldEntities = info.entities;
    } else if (info.namePathList) {
      requiredFieldEntities = [];
      info.namePathList.forEach(function(namePath) {
        var records = cache.get(namePath);
        if (records) {
          var _requiredFieldEntitie;
          (_requiredFieldEntitie = requiredFieldEntities).push.apply(_requiredFieldEntitie, _toConsumableArray(_toConsumableArray(records).map(function(r2) {
            return r2.entity;
          })));
        }
      });
    } else {
      requiredFieldEntities = fieldEntities;
    }
    resetWithFields(requiredFieldEntities);
  };
  this.resetFields = function(nameList) {
    _this.warningUnhooked();
    var prevStore = _this.store;
    if (!nameList) {
      _this.updateStore(setValues({}, _this.initialValues));
      _this.resetWithFieldInitialValue();
      _this.notifyObservers(prevStore, null, {
        type: "reset"
      });
      _this.notifyWatch();
      return;
    }
    var namePathList = nameList.map(getNamePath);
    namePathList.forEach(function(namePath) {
      var initialValue = _this.getInitialValue(namePath);
      _this.updateStore(set(_this.store, namePath, initialValue));
    });
    _this.resetWithFieldInitialValue({
      namePathList
    });
    _this.notifyObservers(prevStore, namePathList, {
      type: "reset"
    });
    _this.notifyWatch(namePathList);
  };
  this.setFields = function(fields) {
    _this.warningUnhooked();
    var prevStore = _this.store;
    var namePathList = [];
    fields.forEach(function(fieldData) {
      var name = fieldData.name, data2 = _objectWithoutProperties(fieldData, _excluded$r);
      var namePath = getNamePath(name);
      namePathList.push(namePath);
      if ("value" in data2) {
        _this.updateStore(set(_this.store, namePath, data2.value));
      }
      _this.notifyObservers(prevStore, [namePath], {
        type: "setField",
        data: fieldData
      });
    });
    _this.notifyWatch(namePathList);
  };
  this.getFields = function() {
    var entities = _this.getFieldEntities(true);
    var fields = entities.map(function(field) {
      var namePath = field.getNamePath();
      var meta = field.getMeta();
      var fieldData = _objectSpread2$1(_objectSpread2$1({}, meta), {}, {
        name: namePath,
        value: _this.getFieldValue(namePath)
      });
      Object.defineProperty(fieldData, "originRCField", {
        value: true
      });
      return fieldData;
    });
    return fields;
  };
  this.initEntityValue = function(entity) {
    var initialValue = entity.props.initialValue;
    if (initialValue !== void 0) {
      var namePath = entity.getNamePath();
      var prevValue = get(_this.store, namePath);
      if (prevValue === void 0) {
        _this.updateStore(set(_this.store, namePath, initialValue));
      }
    }
  };
  this.isMergedPreserve = function(fieldPreserve) {
    var mergedPreserve = fieldPreserve !== void 0 ? fieldPreserve : _this.preserve;
    return mergedPreserve !== null && mergedPreserve !== void 0 ? mergedPreserve : true;
  };
  this.registerField = function(entity) {
    _this.fieldEntities.push(entity);
    var namePath = entity.getNamePath();
    _this.notifyWatch([namePath]);
    if (entity.props.initialValue !== void 0) {
      var prevStore = _this.store;
      _this.resetWithFieldInitialValue({
        entities: [entity],
        skipExist: true
      });
      _this.notifyObservers(prevStore, [entity.getNamePath()], {
        type: "valueUpdate",
        source: "internal"
      });
    }
    return function(isListField, preserve) {
      var subNamePath = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
      _this.fieldEntities = _this.fieldEntities.filter(function(item) {
        return item !== entity;
      });
      if (!_this.isMergedPreserve(preserve) && (!isListField || subNamePath.length > 1)) {
        var defaultValue = isListField ? void 0 : _this.getInitialValue(namePath);
        if (namePath.length && _this.getFieldValue(namePath) !== defaultValue && _this.fieldEntities.every(function(field) {
          return (
            // Only reset when no namePath exist
            !matchNamePath(field.getNamePath(), namePath)
          );
        })) {
          var _prevStore = _this.store;
          _this.updateStore(set(_prevStore, namePath, defaultValue, true));
          _this.notifyObservers(_prevStore, [namePath], {
            type: "remove"
          });
          _this.triggerDependenciesUpdate(_prevStore, namePath);
        }
      }
      _this.notifyWatch([namePath]);
    };
  };
  this.dispatch = function(action) {
    switch (action.type) {
      case "updateValue": {
        var namePath = action.namePath, value = action.value;
        _this.updateValue(namePath, value);
        break;
      }
      case "validateField": {
        var _namePath = action.namePath, triggerName = action.triggerName;
        _this.validateFields([_namePath], {
          triggerName
        });
        break;
      }
    }
  };
  this.notifyObservers = function(prevStore, namePathList, info) {
    if (_this.subscribable) {
      var mergedInfo = _objectSpread2$1(_objectSpread2$1({}, info), {}, {
        store: _this.getFieldsValue(true)
      });
      _this.getFieldEntities().forEach(function(_ref3) {
        var onStoreChange = _ref3.onStoreChange;
        onStoreChange(prevStore, namePathList, mergedInfo);
      });
    } else {
      _this.forceRootUpdate();
    }
  };
  this.triggerDependenciesUpdate = function(prevStore, namePath) {
    var childrenFields = _this.getDependencyChildrenFields(namePath);
    if (childrenFields.length) {
      _this.validateFields(childrenFields);
    }
    _this.notifyObservers(prevStore, childrenFields, {
      type: "dependenciesUpdate",
      relatedFields: [namePath].concat(_toConsumableArray(childrenFields))
    });
    return childrenFields;
  };
  this.updateValue = function(name, value) {
    var namePath = getNamePath(name);
    var prevStore = _this.store;
    _this.updateStore(set(_this.store, namePath, value));
    _this.notifyObservers(prevStore, [namePath], {
      type: "valueUpdate",
      source: "internal"
    });
    _this.notifyWatch([namePath]);
    var childrenFields = _this.triggerDependenciesUpdate(prevStore, namePath);
    var onValuesChange = _this.callbacks.onValuesChange;
    if (onValuesChange) {
      var changedValues = cloneByNamePathList(_this.store, [namePath]);
      onValuesChange(changedValues, _this.getFieldsValue());
    }
    _this.triggerOnFieldsChange([namePath].concat(_toConsumableArray(childrenFields)));
  };
  this.setFieldsValue = function(store) {
    _this.warningUnhooked();
    var prevStore = _this.store;
    if (store) {
      var nextStore = setValues(_this.store, store);
      _this.updateStore(nextStore);
    }
    _this.notifyObservers(prevStore, null, {
      type: "valueUpdate",
      source: "external"
    });
    _this.notifyWatch();
  };
  this.setFieldValue = function(name, value) {
    _this.setFields([{
      name,
      value
    }]);
  };
  this.getDependencyChildrenFields = function(rootNamePath) {
    var children = /* @__PURE__ */ new Set();
    var childrenFields = [];
    var dependencies2fields = new NameMap();
    _this.getFieldEntities().forEach(function(field) {
      var dependencies = field.props.dependencies;
      (dependencies || []).forEach(function(dependency) {
        var dependencyNamePath = getNamePath(dependency);
        dependencies2fields.update(dependencyNamePath, function() {
          var fields = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : /* @__PURE__ */ new Set();
          fields.add(field);
          return fields;
        });
      });
    });
    var fillChildren = function fillChildren2(namePath) {
      var fields = dependencies2fields.get(namePath) || /* @__PURE__ */ new Set();
      fields.forEach(function(field) {
        if (!children.has(field)) {
          children.add(field);
          var fieldNamePath = field.getNamePath();
          if (field.isFieldDirty() && fieldNamePath.length) {
            childrenFields.push(fieldNamePath);
            fillChildren2(fieldNamePath);
          }
        }
      });
    };
    fillChildren(rootNamePath);
    return childrenFields;
  };
  this.triggerOnFieldsChange = function(namePathList, filedErrors) {
    var onFieldsChange = _this.callbacks.onFieldsChange;
    if (onFieldsChange) {
      var fields = _this.getFields();
      if (filedErrors) {
        var cache = new NameMap();
        filedErrors.forEach(function(_ref4) {
          var name = _ref4.name, errors = _ref4.errors;
          cache.set(name, errors);
        });
        fields.forEach(function(field) {
          field.errors = cache.get(field.name) || field.errors;
        });
      }
      var changedFields = fields.filter(function(_ref5) {
        var fieldName = _ref5.name;
        return containsNamePath(namePathList, fieldName);
      });
      onFieldsChange(changedFields, fields);
    }
  };
  this.validateFields = function(nameList, options) {
    _this.warningUnhooked();
    var provideNameList = !!nameList;
    var namePathList = provideNameList ? nameList.map(getNamePath) : [];
    var promiseList = [];
    _this.getFieldEntities(true).forEach(function(field) {
      if (!provideNameList) {
        namePathList.push(field.getNamePath());
      }
      if ((options === null || options === void 0 ? void 0 : options.recursive) && provideNameList) {
        var namePath = field.getNamePath();
        if (
          // nameList[i] === undefined 说明是以 nameList 开头的
          // ['name'] -> ['name','list']
          namePath.every(function(nameUnit, i) {
            return nameList[i] === nameUnit || nameList[i] === void 0;
          })
        ) {
          namePathList.push(namePath);
        }
      }
      if (!field.props.rules || !field.props.rules.length) {
        return;
      }
      var fieldNamePath = field.getNamePath();
      if (!provideNameList || containsNamePath(namePathList, fieldNamePath)) {
        var promise = field.validateRules(_objectSpread2$1({
          validateMessages: _objectSpread2$1(_objectSpread2$1({}, defaultValidateMessages), _this.validateMessages)
        }, options));
        promiseList.push(promise.then(function() {
          return {
            name: fieldNamePath,
            errors: [],
            warnings: []
          };
        }).catch(function(ruleErrors) {
          var _ruleErrors$forEach;
          var mergedErrors = [];
          var mergedWarnings = [];
          (_ruleErrors$forEach = ruleErrors.forEach) === null || _ruleErrors$forEach === void 0 ? void 0 : _ruleErrors$forEach.call(ruleErrors, function(_ref6) {
            var warningOnly = _ref6.rule.warningOnly, errors = _ref6.errors;
            if (warningOnly) {
              mergedWarnings.push.apply(mergedWarnings, _toConsumableArray(errors));
            } else {
              mergedErrors.push.apply(mergedErrors, _toConsumableArray(errors));
            }
          });
          if (mergedErrors.length) {
            return Promise.reject({
              name: fieldNamePath,
              errors: mergedErrors,
              warnings: mergedWarnings
            });
          }
          return {
            name: fieldNamePath,
            errors: mergedErrors,
            warnings: mergedWarnings
          };
        }));
      }
    });
    var summaryPromise = allPromiseFinish(promiseList);
    _this.lastValidatePromise = summaryPromise;
    summaryPromise.catch(function(results) {
      return results;
    }).then(function(results) {
      var resultNamePathList = results.map(function(_ref7) {
        var name = _ref7.name;
        return name;
      });
      _this.notifyObservers(_this.store, resultNamePathList, {
        type: "validateFinish"
      });
      _this.triggerOnFieldsChange(resultNamePathList, results);
    });
    var returnPromise = summaryPromise.then(function() {
      if (_this.lastValidatePromise === summaryPromise) {
        return Promise.resolve(_this.getFieldsValue(namePathList));
      }
      return Promise.reject([]);
    }).catch(function(results) {
      var errorList = results.filter(function(result) {
        return result && result.errors.length;
      });
      return Promise.reject({
        values: _this.getFieldsValue(namePathList),
        errorFields: errorList,
        outOfDate: _this.lastValidatePromise !== summaryPromise
      });
    });
    returnPromise.catch(function(e) {
      return e;
    });
    _this.triggerOnFieldsChange(namePathList);
    return returnPromise;
  };
  this.submit = function() {
    _this.warningUnhooked();
    _this.validateFields().then(function(values) {
      var onFinish = _this.callbacks.onFinish;
      if (onFinish) {
        try {
          onFinish(values);
        } catch (err) {
          console.error(err);
        }
      }
    }).catch(function(e) {
      var onFinishFailed = _this.callbacks.onFinishFailed;
      if (onFinishFailed) {
        onFinishFailed(e);
      }
    });
  };
  this.forceRootUpdate = forceRootUpdate;
});
function useForm(form) {
  var formRef = React$2.useRef();
  var _React$useState = React$2.useState({}), _React$useState2 = _slicedToArray$1(_React$useState, 2), forceUpdate = _React$useState2[1];
  if (!formRef.current) {
    if (form) {
      formRef.current = form;
    } else {
      var forceReRender = function forceReRender2() {
        forceUpdate({});
      };
      var formStore = new FormStore(forceReRender);
      formRef.current = formStore.getForm();
    }
  }
  return [formRef.current];
}
var FormContext = /* @__PURE__ */ React$2.createContext({
  triggerFormChange: function triggerFormChange() {
  },
  triggerFormFinish: function triggerFormFinish() {
  },
  registerForm: function registerForm() {
  },
  unregisterForm: function unregisterForm() {
  }
});
var FormProvider = function FormProvider2(_ref) {
  var validateMessages = _ref.validateMessages, onFormChange = _ref.onFormChange, onFormFinish = _ref.onFormFinish, children = _ref.children;
  var formContext = React$2.useContext(FormContext);
  var formsRef = React$2.useRef({});
  return /* @__PURE__ */ React$2.createElement(FormContext.Provider, {
    value: _objectSpread2$1(_objectSpread2$1({}, formContext), {}, {
      validateMessages: _objectSpread2$1(_objectSpread2$1({}, formContext.validateMessages), validateMessages),
      // =========================================================
      // =                  Global Form Control                  =
      // =========================================================
      triggerFormChange: function triggerFormChange2(name, changedFields) {
        if (onFormChange) {
          onFormChange(name, {
            changedFields,
            forms: formsRef.current
          });
        }
        formContext.triggerFormChange(name, changedFields);
      },
      triggerFormFinish: function triggerFormFinish2(name, values) {
        if (onFormFinish) {
          onFormFinish(name, {
            values,
            forms: formsRef.current
          });
        }
        formContext.triggerFormFinish(name, values);
      },
      registerForm: function registerForm2(name, form) {
        if (name) {
          formsRef.current = _objectSpread2$1(_objectSpread2$1({}, formsRef.current), {}, _defineProperty$3({}, name, form));
        }
        formContext.registerForm(name, form);
      },
      unregisterForm: function unregisterForm2(name) {
        var newForms = _objectSpread2$1({}, formsRef.current);
        delete newForms[name];
        formsRef.current = newForms;
        formContext.unregisterForm(name);
      }
    })
  }, children);
};
var _excluded$q = ["name", "initialValues", "fields", "form", "preserve", "children", "component", "validateMessages", "validateTrigger", "onValuesChange", "onFieldsChange", "onFinish", "onFinishFailed"];
var Form = function Form2(_ref, ref) {
  var name = _ref.name, initialValues = _ref.initialValues, fields = _ref.fields, form = _ref.form, preserve = _ref.preserve, children = _ref.children, _ref$component = _ref.component, Component = _ref$component === void 0 ? "form" : _ref$component, validateMessages = _ref.validateMessages, _ref$validateTrigger = _ref.validateTrigger, validateTrigger = _ref$validateTrigger === void 0 ? "onChange" : _ref$validateTrigger, onValuesChange = _ref.onValuesChange, _onFieldsChange = _ref.onFieldsChange, _onFinish = _ref.onFinish, onFinishFailed = _ref.onFinishFailed, restProps = _objectWithoutProperties(_ref, _excluded$q);
  var formContext = React$2.useContext(FormContext);
  var _useForm = useForm(form), _useForm2 = _slicedToArray$1(_useForm, 1), formInstance = _useForm2[0];
  var _formInstance$getInte = formInstance.getInternalHooks(HOOK_MARK), useSubscribe = _formInstance$getInte.useSubscribe, setInitialValues = _formInstance$getInte.setInitialValues, setCallbacks = _formInstance$getInte.setCallbacks, setValidateMessages = _formInstance$getInte.setValidateMessages, setPreserve = _formInstance$getInte.setPreserve, destroyForm = _formInstance$getInte.destroyForm;
  React$2.useImperativeHandle(ref, function() {
    return formInstance;
  });
  React$2.useEffect(function() {
    formContext.registerForm(name, formInstance);
    return function() {
      formContext.unregisterForm(name);
    };
  }, [formContext, formInstance, name]);
  setValidateMessages(_objectSpread2$1(_objectSpread2$1({}, formContext.validateMessages), validateMessages));
  setCallbacks({
    onValuesChange,
    onFieldsChange: function onFieldsChange(changedFields) {
      formContext.triggerFormChange(name, changedFields);
      if (_onFieldsChange) {
        for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          rest[_key - 1] = arguments[_key];
        }
        _onFieldsChange.apply(void 0, [changedFields].concat(rest));
      }
    },
    onFinish: function onFinish(values2) {
      formContext.triggerFormFinish(name, values2);
      if (_onFinish) {
        _onFinish(values2);
      }
    },
    onFinishFailed
  });
  setPreserve(preserve);
  var mountRef = React$2.useRef(null);
  setInitialValues(initialValues, !mountRef.current);
  if (!mountRef.current) {
    mountRef.current = true;
  }
  React$2.useEffect(
    function() {
      return destroyForm;
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []
  );
  var childrenNode;
  var childrenRenderProps = typeof children === "function";
  if (childrenRenderProps) {
    var values = formInstance.getFieldsValue(true);
    childrenNode = children(values, formInstance);
  } else {
    childrenNode = children;
  }
  useSubscribe(!childrenRenderProps);
  var prevFieldsRef = React$2.useRef();
  React$2.useEffect(function() {
    if (!isSimilar(prevFieldsRef.current || [], fields || [])) {
      formInstance.setFields(fields || []);
    }
    prevFieldsRef.current = fields;
  }, [fields, formInstance]);
  var formContextValue = React$2.useMemo(function() {
    return _objectSpread2$1(_objectSpread2$1({}, formInstance), {}, {
      validateTrigger
    });
  }, [formInstance, validateTrigger]);
  var wrapperNode = /* @__PURE__ */ React$2.createElement(Context$1.Provider, {
    value: formContextValue
  }, childrenNode);
  if (Component === false) {
    return wrapperNode;
  }
  return /* @__PURE__ */ React$2.createElement(Component, _extends$1({}, restProps, {
    onSubmit: function onSubmit(event) {
      event.preventDefault();
      event.stopPropagation();
      formInstance.submit();
    },
    onReset: function onReset(event) {
      var _restProps$onReset;
      event.preventDefault();
      formInstance.resetFields();
      (_restProps$onReset = restProps.onReset) === null || _restProps$onReset === void 0 ? void 0 : _restProps$onReset.call(restProps, event);
    }
  }), wrapperNode);
};
function stringify(value) {
  try {
    return JSON.stringify(value);
  } catch (err) {
    return Math.random();
  }
}
var useWatchWarning = process.env.NODE_ENV !== "production" ? function(namePath) {
  var fullyStr = namePath.join("__RC_FIELD_FORM_SPLIT__");
  var nameStrRef = useRef(fullyStr);
  warningOnce(nameStrRef.current === fullyStr, "`useWatch` is not support dynamic `namePath`. Please provide static instead.");
} : function() {
};
function useWatch$1() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  var _args$ = args[0], dependencies = _args$ === void 0 ? [] : _args$, _args$2 = args[1], _form = _args$2 === void 0 ? {} : _args$2;
  var options = isFormInstance(_form) ? {
    form: _form
  } : _form;
  var form = options.form;
  var _useState = useState(), _useState2 = _slicedToArray$1(_useState, 2), value = _useState2[0], setValue = _useState2[1];
  var valueStr = useMemo$1(function() {
    return stringify(value);
  }, [value]);
  var valueStrRef = useRef(valueStr);
  valueStrRef.current = valueStr;
  var fieldContext = useContext(Context$1);
  var formInstance = form || fieldContext;
  var isValidForm = formInstance && formInstance._init;
  if (process.env.NODE_ENV !== "production") {
    warningOnce(args.length === 2 ? form ? isValidForm : true : isValidForm, "useWatch requires a form instance since it can not auto detect from context.");
  }
  var namePath = getNamePath(dependencies);
  var namePathRef = useRef(namePath);
  namePathRef.current = namePath;
  useWatchWarning(namePath);
  useEffect(
    function() {
      if (!isValidForm) {
        return;
      }
      var getFieldsValue = formInstance.getFieldsValue, getInternalHooks2 = formInstance.getInternalHooks;
      var _getInternalHooks = getInternalHooks2(HOOK_MARK), registerWatch = _getInternalHooks.registerWatch;
      var cancelRegister = registerWatch(function(values, allValues) {
        var newValue = get(options.preserve ? allValues : values, namePathRef.current);
        var nextValueStr = stringify(newValue);
        if (valueStrRef.current !== nextValueStr) {
          valueStrRef.current = nextValueStr;
          setValue(newValue);
        }
      });
      var initialValue = get(options.preserve ? getFieldsValue(true) : getFieldsValue(), namePathRef.current);
      setValue(initialValue);
      return cancelRegister;
    },
    // We do not need re-register since namePath content is the same
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [isValidForm]
  );
  return value;
}
var InternalForm = /* @__PURE__ */ React$2.forwardRef(Form);
var RefForm = InternalForm;
RefForm.FormProvider = FormProvider;
RefForm.Field = WrapperField;
RefForm.List = List$1;
RefForm.useForm = useForm;
RefForm.useWatch = useWatch$1;
function noop$2() {
}
let warning$1 = noop$2;
if (process.env.NODE_ENV !== "production") {
  warning$1 = (valid, component, message) => {
    warningOnce(valid, `[antd: ${component}] ${message}`);
    if (process.env.NODE_ENV === "test") {
      resetWarned();
    }
  };
}
const warning$2 = warning$1;
const enUS$1 = {
  // Options.jsx
  items_per_page: "/ page",
  jump_to: "Go to",
  jump_to_confirm: "confirm",
  page: "Page",
  // Pagination.jsx
  prev_page: "Previous Page",
  next_page: "Next Page",
  prev_5: "Previous 5 Pages",
  next_5: "Next 5 Pages",
  prev_3: "Previous 3 Pages",
  next_3: "Next 3 Pages",
  page_size: "Page Size"
};
var locale$2 = {
  locale: "en_US",
  today: "Today",
  now: "Now",
  backToToday: "Back to today",
  ok: "OK",
  clear: "Clear",
  month: "Month",
  year: "Year",
  timeSelect: "select time",
  dateSelect: "select date",
  weekSelect: "Choose a week",
  monthSelect: "Choose a month",
  yearSelect: "Choose a year",
  decadeSelect: "Choose a decade",
  yearFormat: "YYYY",
  dateFormat: "M/D/YYYY",
  dayFormat: "D",
  dateTimeFormat: "M/D/YYYY HH:mm:ss",
  monthBeforeYear: true,
  previousMonth: "Previous month (PageUp)",
  nextMonth: "Next month (PageDown)",
  previousYear: "Last year (Control + left)",
  nextYear: "Next year (Control + right)",
  previousDecade: "Last decade",
  nextDecade: "Next decade",
  previousCentury: "Last century",
  nextCentury: "Next century"
};
const locale$1 = {
  placeholder: "Select time",
  rangePlaceholder: ["Start time", "End time"]
};
const TimePicker = locale$1;
const locale = {
  lang: Object.assign({
    placeholder: "Select date",
    yearPlaceholder: "Select year",
    quarterPlaceholder: "Select quarter",
    monthPlaceholder: "Select month",
    weekPlaceholder: "Select week",
    rangePlaceholder: ["Start date", "End date"],
    rangeYearPlaceholder: ["Start year", "End year"],
    rangeQuarterPlaceholder: ["Start quarter", "End quarter"],
    rangeMonthPlaceholder: ["Start month", "End month"],
    rangeWeekPlaceholder: ["Start week", "End week"]
  }, locale$2),
  timePickerLocale: Object.assign({}, TimePicker)
};
const enUS = locale;
const typeTemplate = "${label} is not a valid ${type}";
const localeValues = {
  locale: "en",
  Pagination: enUS$1,
  DatePicker: enUS,
  TimePicker,
  Calendar: enUS,
  global: {
    placeholder: "Please select"
  },
  Table: {
    filterTitle: "Filter menu",
    filterConfirm: "OK",
    filterReset: "Reset",
    filterEmptyText: "No filters",
    filterCheckall: "Select all items",
    filterSearchPlaceholder: "Search in filters",
    emptyText: "No data",
    selectAll: "Select current page",
    selectInvert: "Invert current page",
    selectNone: "Clear all data",
    selectionAll: "Select all data",
    sortTitle: "Sort",
    expand: "Expand row",
    collapse: "Collapse row",
    triggerDesc: "Click to sort descending",
    triggerAsc: "Click to sort ascending",
    cancelSort: "Click to cancel sorting"
  },
  Tour: {
    Next: "Next",
    Previous: "Previous",
    Finish: "Finish"
  },
  Modal: {
    okText: "OK",
    cancelText: "Cancel",
    justOkText: "OK"
  },
  Popconfirm: {
    okText: "OK",
    cancelText: "Cancel"
  },
  Transfer: {
    titles: ["", ""],
    searchPlaceholder: "Search here",
    itemUnit: "item",
    itemsUnit: "items",
    remove: "Remove",
    selectCurrent: "Select current page",
    removeCurrent: "Remove current page",
    selectAll: "Select all data",
    removeAll: "Remove all data",
    selectInvert: "Invert current page"
  },
  Upload: {
    uploading: "Uploading...",
    removeFile: "Remove file",
    uploadError: "Upload error",
    previewFile: "Preview file",
    downloadFile: "Download file"
  },
  Empty: {
    description: "No data"
  },
  Icon: {
    icon: "icon"
  },
  Text: {
    edit: "Edit",
    copy: "Copy",
    copied: "Copied",
    expand: "Expand"
  },
  PageHeader: {
    back: "Back"
  },
  Form: {
    optional: "(optional)",
    defaultValidateMessages: {
      default: "Field validation error for ${label}",
      required: "Please enter ${label}",
      enum: "${label} must be one of [${enum}]",
      whitespace: "${label} cannot be a blank character",
      date: {
        format: "${label} date format is invalid",
        parse: "${label} cannot be converted to a date",
        invalid: "${label} is an invalid date"
      },
      types: {
        string: typeTemplate,
        method: typeTemplate,
        array: typeTemplate,
        object: typeTemplate,
        number: typeTemplate,
        date: typeTemplate,
        boolean: typeTemplate,
        integer: typeTemplate,
        float: typeTemplate,
        regexp: typeTemplate,
        email: typeTemplate,
        url: typeTemplate,
        hex: typeTemplate
      },
      string: {
        len: "${label} must be ${len} characters",
        min: "${label} must be at least ${min} characters",
        max: "${label} must be up to ${max} characters",
        range: "${label} must be between ${min}-${max} characters"
      },
      number: {
        len: "${label} must be equal to ${len}",
        min: "${label} must be minimum ${min}",
        max: "${label} must be maximum ${max}",
        range: "${label} must be between ${min}-${max}"
      },
      array: {
        len: "Must be ${len} ${label}",
        min: "At least ${min} ${label}",
        max: "At most ${max} ${label}",
        range: "The amount of ${label} must be between ${min}-${max}"
      },
      pattern: {
        mismatch: "${label} does not match the pattern ${pattern}"
      }
    }
  },
  Image: {
    preview: "Preview"
  },
  QRCode: {
    expired: "QR code expired",
    refresh: "Refresh"
  }
};
const defaultLocale = localeValues;
let runtimeLocale = Object.assign({}, defaultLocale.Modal);
function changeConfirmLocale(newLocale) {
  if (newLocale) {
    runtimeLocale = Object.assign(Object.assign({}, runtimeLocale), newLocale);
  } else {
    runtimeLocale = Object.assign({}, defaultLocale.Modal);
  }
}
const LocaleContext = /* @__PURE__ */ createContext(void 0);
const LocaleContext$1 = LocaleContext;
const useLocale = (componentName, defaultLocale$1) => {
  const fullLocale = React$2.useContext(LocaleContext$1);
  const getLocale = React$2.useMemo(() => {
    var _a;
    const locale2 = defaultLocale$1 || defaultLocale[componentName];
    const localeFromContext = (_a = fullLocale === null || fullLocale === void 0 ? void 0 : fullLocale[componentName]) !== null && _a !== void 0 ? _a : {};
    return Object.assign(Object.assign({}, typeof locale2 === "function" ? locale2() : locale2), localeFromContext || {});
  }, [componentName, defaultLocale$1, fullLocale]);
  const getLocaleCode = React$2.useMemo(() => {
    const localeCode = fullLocale === null || fullLocale === void 0 ? void 0 : fullLocale.locale;
    if ((fullLocale === null || fullLocale === void 0 ? void 0 : fullLocale.exist) && !localeCode) {
      return defaultLocale.locale;
    }
    return localeCode;
  }, [fullLocale]);
  return [getLocale, getLocaleCode];
};
const useLocale$1 = useLocale;
const ANT_MARK = "internalMark";
const LocaleProvider = (props) => {
  const {
    locale: locale2 = {},
    children,
    _ANT_MARK__
  } = props;
  if (process.env.NODE_ENV !== "production") {
    process.env.NODE_ENV !== "production" ? warning$2(_ANT_MARK__ === ANT_MARK, "LocaleProvider", "`LocaleProvider` is deprecated. Please use `locale` with `ConfigProvider` instead: http://u.ant.design/locale") : void 0;
  }
  React$2.useEffect(() => {
    changeConfirmLocale(locale2 && locale2.Modal);
    return () => {
      changeConfirmLocale();
    };
  }, [locale2]);
  const getMemoizedContextValue = React$2.useMemo(() => Object.assign(Object.assign({}, locale2), {
    exist: true
  }), [locale2]);
  return /* @__PURE__ */ React$2.createElement(LocaleContext$1.Provider, {
    value: getMemoizedContextValue
  }, children);
};
if (process.env.NODE_ENV !== "production") {
  LocaleProvider.displayName = "LocaleProvider";
}
const LocaleProvider$1 = LocaleProvider;
const version$1 = "5.4.6";
const PresetColors = ["blue", "purple", "cyan", "green", "magenta", "pink", "red", "orange", "yellow", "volcano", "geekblue", "lime", "gold"];
function bound01(n, max) {
  if (isOnePointZero(n)) {
    n = "100%";
  }
  var isPercent = isPercentage(n);
  n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));
  if (isPercent) {
    n = parseInt(String(n * max), 10) / 100;
  }
  if (Math.abs(n - max) < 1e-6) {
    return 1;
  }
  if (max === 360) {
    n = (n < 0 ? n % max + max : n % max) / parseFloat(String(max));
  } else {
    n = n % max / parseFloat(String(max));
  }
  return n;
}
function clamp01(val) {
  return Math.min(1, Math.max(0, val));
}
function isOnePointZero(n) {
  return typeof n === "string" && n.indexOf(".") !== -1 && parseFloat(n) === 1;
}
function isPercentage(n) {
  return typeof n === "string" && n.indexOf("%") !== -1;
}
function boundAlpha(a) {
  a = parseFloat(a);
  if (isNaN(a) || a < 0 || a > 1) {
    a = 1;
  }
  return a;
}
function convertToPercentage(n) {
  if (n <= 1) {
    return "".concat(Number(n) * 100, "%");
  }
  return n;
}
function pad2(c) {
  return c.length === 1 ? "0" + c : String(c);
}
function rgbToRgb(r2, g, b) {
  return {
    r: bound01(r2, 255) * 255,
    g: bound01(g, 255) * 255,
    b: bound01(b, 255) * 255
  };
}
function rgbToHsl(r2, g, b) {
  r2 = bound01(r2, 255);
  g = bound01(g, 255);
  b = bound01(b, 255);
  var max = Math.max(r2, g, b);
  var min = Math.min(r2, g, b);
  var h = 0;
  var s = 0;
  var l = (max + min) / 2;
  if (max === min) {
    s = 0;
    h = 0;
  } else {
    var d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r2:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r2) / d + 2;
        break;
      case b:
        h = (r2 - g) / d + 4;
        break;
    }
    h /= 6;
  }
  return { h, s, l };
}
function hue2rgb(p, q, t) {
  if (t < 0) {
    t += 1;
  }
  if (t > 1) {
    t -= 1;
  }
  if (t < 1 / 6) {
    return p + (q - p) * (6 * t);
  }
  if (t < 1 / 2) {
    return q;
  }
  if (t < 2 / 3) {
    return p + (q - p) * (2 / 3 - t) * 6;
  }
  return p;
}
function hslToRgb(h, s, l) {
  var r2;
  var g;
  var b;
  h = bound01(h, 360);
  s = bound01(s, 100);
  l = bound01(l, 100);
  if (s === 0) {
    g = l;
    b = l;
    r2 = l;
  } else {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    r2 = hue2rgb(p, q, h + 1 / 3);
    g = hue2rgb(p, q, h);
    b = hue2rgb(p, q, h - 1 / 3);
  }
  return { r: r2 * 255, g: g * 255, b: b * 255 };
}
function rgbToHsv(r2, g, b) {
  r2 = bound01(r2, 255);
  g = bound01(g, 255);
  b = bound01(b, 255);
  var max = Math.max(r2, g, b);
  var min = Math.min(r2, g, b);
  var h = 0;
  var v = max;
  var d = max - min;
  var s = max === 0 ? 0 : d / max;
  if (max === min) {
    h = 0;
  } else {
    switch (max) {
      case r2:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r2) / d + 2;
        break;
      case b:
        h = (r2 - g) / d + 4;
        break;
    }
    h /= 6;
  }
  return { h, s, v };
}
function hsvToRgb(h, s, v) {
  h = bound01(h, 360) * 6;
  s = bound01(s, 100);
  v = bound01(v, 100);
  var i = Math.floor(h);
  var f = h - i;
  var p = v * (1 - s);
  var q = v * (1 - f * s);
  var t = v * (1 - (1 - f) * s);
  var mod = i % 6;
  var r2 = [v, q, p, p, t, v][mod];
  var g = [t, v, v, q, p, p][mod];
  var b = [p, p, t, v, v, q][mod];
  return { r: r2 * 255, g: g * 255, b: b * 255 };
}
function rgbToHex(r2, g, b, allow3Char) {
  var hex2 = [
    pad2(Math.round(r2).toString(16)),
    pad2(Math.round(g).toString(16)),
    pad2(Math.round(b).toString(16))
  ];
  if (allow3Char && hex2[0].startsWith(hex2[0].charAt(1)) && hex2[1].startsWith(hex2[1].charAt(1)) && hex2[2].startsWith(hex2[2].charAt(1))) {
    return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0);
  }
  return hex2.join("");
}
function rgbaToHex(r2, g, b, a, allow4Char) {
  var hex2 = [
    pad2(Math.round(r2).toString(16)),
    pad2(Math.round(g).toString(16)),
    pad2(Math.round(b).toString(16)),
    pad2(convertDecimalToHex(a))
  ];
  if (allow4Char && hex2[0].startsWith(hex2[0].charAt(1)) && hex2[1].startsWith(hex2[1].charAt(1)) && hex2[2].startsWith(hex2[2].charAt(1)) && hex2[3].startsWith(hex2[3].charAt(1))) {
    return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0) + hex2[3].charAt(0);
  }
  return hex2.join("");
}
function convertDecimalToHex(d) {
  return Math.round(parseFloat(d) * 255).toString(16);
}
function convertHexToDecimal(h) {
  return parseIntFromHex(h) / 255;
}
function parseIntFromHex(val) {
  return parseInt(val, 16);
}
function numberInputToObject(color) {
  return {
    r: color >> 16,
    g: (color & 65280) >> 8,
    b: color & 255
  };
}
var names = {
  aliceblue: "#f0f8ff",
  antiquewhite: "#faebd7",
  aqua: "#00ffff",
  aquamarine: "#7fffd4",
  azure: "#f0ffff",
  beige: "#f5f5dc",
  bisque: "#ffe4c4",
  black: "#000000",
  blanchedalmond: "#ffebcd",
  blue: "#0000ff",
  blueviolet: "#8a2be2",
  brown: "#a52a2a",
  burlywood: "#deb887",
  cadetblue: "#5f9ea0",
  chartreuse: "#7fff00",
  chocolate: "#d2691e",
  coral: "#ff7f50",
  cornflowerblue: "#6495ed",
  cornsilk: "#fff8dc",
  crimson: "#dc143c",
  cyan: "#00ffff",
  darkblue: "#00008b",
  darkcyan: "#008b8b",
  darkgoldenrod: "#b8860b",
  darkgray: "#a9a9a9",
  darkgreen: "#006400",
  darkgrey: "#a9a9a9",
  darkkhaki: "#bdb76b",
  darkmagenta: "#8b008b",
  darkolivegreen: "#556b2f",
  darkorange: "#ff8c00",
  darkorchid: "#9932cc",
  darkred: "#8b0000",
  darksalmon: "#e9967a",
  darkseagreen: "#8fbc8f",
  darkslateblue: "#483d8b",
  darkslategray: "#2f4f4f",
  darkslategrey: "#2f4f4f",
  darkturquoise: "#00ced1",
  darkviolet: "#9400d3",
  deeppink: "#ff1493",
  deepskyblue: "#00bfff",
  dimgray: "#696969",
  dimgrey: "#696969",
  dodgerblue: "#1e90ff",
  firebrick: "#b22222",
  floralwhite: "#fffaf0",
  forestgreen: "#228b22",
  fuchsia: "#ff00ff",
  gainsboro: "#dcdcdc",
  ghostwhite: "#f8f8ff",
  goldenrod: "#daa520",
  gold: "#ffd700",
  gray: "#808080",
  green: "#008000",
  greenyellow: "#adff2f",
  grey: "#808080",
  honeydew: "#f0fff0",
  hotpink: "#ff69b4",
  indianred: "#cd5c5c",
  indigo: "#4b0082",
  ivory: "#fffff0",
  khaki: "#f0e68c",
  lavenderblush: "#fff0f5",
  lavender: "#e6e6fa",
  lawngreen: "#7cfc00",
  lemonchiffon: "#fffacd",
  lightblue: "#add8e6",
  lightcoral: "#f08080",
  lightcyan: "#e0ffff",
  lightgoldenrodyellow: "#fafad2",
  lightgray: "#d3d3d3",
  lightgreen: "#90ee90",
  lightgrey: "#d3d3d3",
  lightpink: "#ffb6c1",
  lightsalmon: "#ffa07a",
  lightseagreen: "#20b2aa",
  lightskyblue: "#87cefa",
  lightslategray: "#778899",
  lightslategrey: "#778899",
  lightsteelblue: "#b0c4de",
  lightyellow: "#ffffe0",
  lime: "#00ff00",
  limegreen: "#32cd32",
  linen: "#faf0e6",
  magenta: "#ff00ff",
  maroon: "#800000",
  mediumaquamarine: "#66cdaa",
  mediumblue: "#0000cd",
  mediumorchid: "#ba55d3",
  mediumpurple: "#9370db",
  mediumseagreen: "#3cb371",
  mediumslateblue: "#7b68ee",
  mediumspringgreen: "#00fa9a",
  mediumturquoise: "#48d1cc",
  mediumvioletred: "#c71585",
  midnightblue: "#191970",
  mintcream: "#f5fffa",
  mistyrose: "#ffe4e1",
  moccasin: "#ffe4b5",
  navajowhite: "#ffdead",
  navy: "#000080",
  oldlace: "#fdf5e6",
  olive: "#808000",
  olivedrab: "#6b8e23",
  orange: "#ffa500",
  orangered: "#ff4500",
  orchid: "#da70d6",
  palegoldenrod: "#eee8aa",
  palegreen: "#98fb98",
  paleturquoise: "#afeeee",
  palevioletred: "#db7093",
  papayawhip: "#ffefd5",
  peachpuff: "#ffdab9",
  peru: "#cd853f",
  pink: "#ffc0cb",
  plum: "#dda0dd",
  powderblue: "#b0e0e6",
  purple: "#800080",
  rebeccapurple: "#663399",
  red: "#ff0000",
  rosybrown: "#bc8f8f",
  royalblue: "#4169e1",
  saddlebrown: "#8b4513",
  salmon: "#fa8072",
  sandybrown: "#f4a460",
  seagreen: "#2e8b57",
  seashell: "#fff5ee",
  sienna: "#a0522d",
  silver: "#c0c0c0",
  skyblue: "#87ceeb",
  slateblue: "#6a5acd",
  slategray: "#708090",
  slategrey: "#708090",
  snow: "#fffafa",
  springgreen: "#00ff7f",
  steelblue: "#4682b4",
  tan: "#d2b48c",
  teal: "#008080",
  thistle: "#d8bfd8",
  tomato: "#ff6347",
  turquoise: "#40e0d0",
  violet: "#ee82ee",
  wheat: "#f5deb3",
  white: "#ffffff",
  whitesmoke: "#f5f5f5",
  yellow: "#ffff00",
  yellowgreen: "#9acd32"
};
function inputToRGB(color) {
  var rgb = { r: 0, g: 0, b: 0 };
  var a = 1;
  var s = null;
  var v = null;
  var l = null;
  var ok = false;
  var format2 = false;
  if (typeof color === "string") {
    color = stringInputToObject(color);
  }
  if (typeof color === "object") {
    if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
      rgb = rgbToRgb(color.r, color.g, color.b);
      ok = true;
      format2 = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
      s = convertToPercentage(color.s);
      v = convertToPercentage(color.v);
      rgb = hsvToRgb(color.h, s, v);
      ok = true;
      format2 = "hsv";
    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
      s = convertToPercentage(color.s);
      l = convertToPercentage(color.l);
      rgb = hslToRgb(color.h, s, l);
      ok = true;
      format2 = "hsl";
    }
    if (Object.prototype.hasOwnProperty.call(color, "a")) {
      a = color.a;
    }
  }
  a = boundAlpha(a);
  return {
    ok,
    format: color.format || format2,
    r: Math.min(255, Math.max(rgb.r, 0)),
    g: Math.min(255, Math.max(rgb.g, 0)),
    b: Math.min(255, Math.max(rgb.b, 0)),
    a
  };
}
var CSS_INTEGER = "[-\\+]?\\d+%?";
var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
var CSS_UNIT = "(?:".concat(CSS_NUMBER, ")|(?:").concat(CSS_INTEGER, ")");
var PERMISSIVE_MATCH3 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
var PERMISSIVE_MATCH4 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
var matchers = {
  CSS_UNIT: new RegExp(CSS_UNIT),
  rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
  rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
  hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
  hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
  hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
  hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
  hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
  hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
};
function stringInputToObject(color) {
  color = color.trim().toLowerCase();
  if (color.length === 0) {
    return false;
  }
  var named = false;
  if (names[color]) {
    color = names[color];
    named = true;
  } else if (color === "transparent") {
    return { r: 0, g: 0, b: 0, a: 0, format: "name" };
  }
  var match2 = matchers.rgb.exec(color);
  if (match2) {
    return { r: match2[1], g: match2[2], b: match2[3] };
  }
  match2 = matchers.rgba.exec(color);
  if (match2) {
    return { r: match2[1], g: match2[2], b: match2[3], a: match2[4] };
  }
  match2 = matchers.hsl.exec(color);
  if (match2) {
    return { h: match2[1], s: match2[2], l: match2[3] };
  }
  match2 = matchers.hsla.exec(color);
  if (match2) {
    return { h: match2[1], s: match2[2], l: match2[3], a: match2[4] };
  }
  match2 = matchers.hsv.exec(color);
  if (match2) {
    return { h: match2[1], s: match2[2], v: match2[3] };
  }
  match2 = matchers.hsva.exec(color);
  if (match2) {
    return { h: match2[1], s: match2[2], v: match2[3], a: match2[4] };
  }
  match2 = matchers.hex8.exec(color);
  if (match2) {
    return {
      r: parseIntFromHex(match2[1]),
      g: parseIntFromHex(match2[2]),
      b: parseIntFromHex(match2[3]),
      a: convertHexToDecimal(match2[4]),
      format: named ? "name" : "hex8"
    };
  }
  match2 = matchers.hex6.exec(color);
  if (match2) {
    return {
      r: parseIntFromHex(match2[1]),
      g: parseIntFromHex(match2[2]),
      b: parseIntFromHex(match2[3]),
      format: named ? "name" : "hex"
    };
  }
  match2 = matchers.hex4.exec(color);
  if (match2) {
    return {
      r: parseIntFromHex(match2[1] + match2[1]),
      g: parseIntFromHex(match2[2] + match2[2]),
      b: parseIntFromHex(match2[3] + match2[3]),
      a: convertHexToDecimal(match2[4] + match2[4]),
      format: named ? "name" : "hex8"
    };
  }
  match2 = matchers.hex3.exec(color);
  if (match2) {
    return {
      r: parseIntFromHex(match2[1] + match2[1]),
      g: parseIntFromHex(match2[2] + match2[2]),
      b: parseIntFromHex(match2[3] + match2[3]),
      format: named ? "name" : "hex"
    };
  }
  return false;
}
function isValidCSSUnit(color) {
  return Boolean(matchers.CSS_UNIT.exec(String(color)));
}
var TinyColor = (
  /** @class */
  function() {
    function TinyColor2(color, opts) {
      if (color === void 0) {
        color = "";
      }
      if (opts === void 0) {
        opts = {};
      }
      var _a;
      if (color instanceof TinyColor2) {
        return color;
      }
      if (typeof color === "number") {
        color = numberInputToObject(color);
      }
      this.originalInput = color;
      var rgb = inputToRGB(color);
      this.originalInput = color;
      this.r = rgb.r;
      this.g = rgb.g;
      this.b = rgb.b;
      this.a = rgb.a;
      this.roundA = Math.round(100 * this.a) / 100;
      this.format = (_a = opts.format) !== null && _a !== void 0 ? _a : rgb.format;
      this.gradientType = opts.gradientType;
      if (this.r < 1) {
        this.r = Math.round(this.r);
      }
      if (this.g < 1) {
        this.g = Math.round(this.g);
      }
      if (this.b < 1) {
        this.b = Math.round(this.b);
      }
      this.isValid = rgb.ok;
    }
    TinyColor2.prototype.isDark = function() {
      return this.getBrightness() < 128;
    };
    TinyColor2.prototype.isLight = function() {
      return !this.isDark();
    };
    TinyColor2.prototype.getBrightness = function() {
      var rgb = this.toRgb();
      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
    };
    TinyColor2.prototype.getLuminance = function() {
      var rgb = this.toRgb();
      var R;
      var G;
      var B;
      var RsRGB = rgb.r / 255;
      var GsRGB = rgb.g / 255;
      var BsRGB = rgb.b / 255;
      if (RsRGB <= 0.03928) {
        R = RsRGB / 12.92;
      } else {
        R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
      }
      if (GsRGB <= 0.03928) {
        G = GsRGB / 12.92;
      } else {
        G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
      }
      if (BsRGB <= 0.03928) {
        B = BsRGB / 12.92;
      } else {
        B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
      }
      return 0.2126 * R + 0.7152 * G + 0.0722 * B;
    };
    TinyColor2.prototype.getAlpha = function() {
      return this.a;
    };
    TinyColor2.prototype.setAlpha = function(alpha) {
      this.a = boundAlpha(alpha);
      this.roundA = Math.round(100 * this.a) / 100;
      return this;
    };
    TinyColor2.prototype.isMonochrome = function() {
      var s = this.toHsl().s;
      return s === 0;
    };
    TinyColor2.prototype.toHsv = function() {
      var hsv = rgbToHsv(this.r, this.g, this.b);
      return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };
    };
    TinyColor2.prototype.toHsvString = function() {
      var hsv = rgbToHsv(this.r, this.g, this.b);
      var h = Math.round(hsv.h * 360);
      var s = Math.round(hsv.s * 100);
      var v = Math.round(hsv.v * 100);
      return this.a === 1 ? "hsv(".concat(h, ", ").concat(s, "%, ").concat(v, "%)") : "hsva(".concat(h, ", ").concat(s, "%, ").concat(v, "%, ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toHsl = function() {
      var hsl = rgbToHsl(this.r, this.g, this.b);
      return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };
    };
    TinyColor2.prototype.toHslString = function() {
      var hsl = rgbToHsl(this.r, this.g, this.b);
      var h = Math.round(hsl.h * 360);
      var s = Math.round(hsl.s * 100);
      var l = Math.round(hsl.l * 100);
      return this.a === 1 ? "hsl(".concat(h, ", ").concat(s, "%, ").concat(l, "%)") : "hsla(".concat(h, ", ").concat(s, "%, ").concat(l, "%, ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toHex = function(allow3Char) {
      if (allow3Char === void 0) {
        allow3Char = false;
      }
      return rgbToHex(this.r, this.g, this.b, allow3Char);
    };
    TinyColor2.prototype.toHexString = function(allow3Char) {
      if (allow3Char === void 0) {
        allow3Char = false;
      }
      return "#" + this.toHex(allow3Char);
    };
    TinyColor2.prototype.toHex8 = function(allow4Char) {
      if (allow4Char === void 0) {
        allow4Char = false;
      }
      return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);
    };
    TinyColor2.prototype.toHex8String = function(allow4Char) {
      if (allow4Char === void 0) {
        allow4Char = false;
      }
      return "#" + this.toHex8(allow4Char);
    };
    TinyColor2.prototype.toHexShortString = function(allowShortChar) {
      if (allowShortChar === void 0) {
        allowShortChar = false;
      }
      return this.a === 1 ? this.toHexString(allowShortChar) : this.toHex8String(allowShortChar);
    };
    TinyColor2.prototype.toRgb = function() {
      return {
        r: Math.round(this.r),
        g: Math.round(this.g),
        b: Math.round(this.b),
        a: this.a
      };
    };
    TinyColor2.prototype.toRgbString = function() {
      var r2 = Math.round(this.r);
      var g = Math.round(this.g);
      var b = Math.round(this.b);
      return this.a === 1 ? "rgb(".concat(r2, ", ").concat(g, ", ").concat(b, ")") : "rgba(".concat(r2, ", ").concat(g, ", ").concat(b, ", ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toPercentageRgb = function() {
      var fmt = function(x) {
        return "".concat(Math.round(bound01(x, 255) * 100), "%");
      };
      return {
        r: fmt(this.r),
        g: fmt(this.g),
        b: fmt(this.b),
        a: this.a
      };
    };
    TinyColor2.prototype.toPercentageRgbString = function() {
      var rnd = function(x) {
        return Math.round(bound01(x, 255) * 100);
      };
      return this.a === 1 ? "rgb(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%)") : "rgba(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%, ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toName = function() {
      if (this.a === 0) {
        return "transparent";
      }
      if (this.a < 1) {
        return false;
      }
      var hex2 = "#" + rgbToHex(this.r, this.g, this.b, false);
      for (var _i = 0, _a = Object.entries(names); _i < _a.length; _i++) {
        var _b = _a[_i], key = _b[0], value = _b[1];
        if (hex2 === value) {
          return key;
        }
      }
      return false;
    };
    TinyColor2.prototype.toString = function(format2) {
      var formatSet = Boolean(format2);
      format2 = format2 !== null && format2 !== void 0 ? format2 : this.format;
      var formattedString = false;
      var hasAlpha = this.a < 1 && this.a >= 0;
      var needsAlphaFormat = !formatSet && hasAlpha && (format2.startsWith("hex") || format2 === "name");
      if (needsAlphaFormat) {
        if (format2 === "name" && this.a === 0) {
          return this.toName();
        }
        return this.toRgbString();
      }
      if (format2 === "rgb") {
        formattedString = this.toRgbString();
      }
      if (format2 === "prgb") {
        formattedString = this.toPercentageRgbString();
      }
      if (format2 === "hex" || format2 === "hex6") {
        formattedString = this.toHexString();
      }
      if (format2 === "hex3") {
        formattedString = this.toHexString(true);
      }
      if (format2 === "hex4") {
        formattedString = this.toHex8String(true);
      }
      if (format2 === "hex8") {
        formattedString = this.toHex8String();
      }
      if (format2 === "name") {
        formattedString = this.toName();
      }
      if (format2 === "hsl") {
        formattedString = this.toHslString();
      }
      if (format2 === "hsv") {
        formattedString = this.toHsvString();
      }
      return formattedString || this.toHexString();
    };
    TinyColor2.prototype.toNumber = function() {
      return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
    };
    TinyColor2.prototype.clone = function() {
      return new TinyColor2(this.toString());
    };
    TinyColor2.prototype.lighten = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.l += amount / 100;
      hsl.l = clamp01(hsl.l);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.brighten = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var rgb = this.toRgb();
      rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
      rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
      rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
      return new TinyColor2(rgb);
    };
    TinyColor2.prototype.darken = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.l -= amount / 100;
      hsl.l = clamp01(hsl.l);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.tint = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      return this.mix("white", amount);
    };
    TinyColor2.prototype.shade = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      return this.mix("black", amount);
    };
    TinyColor2.prototype.desaturate = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.s -= amount / 100;
      hsl.s = clamp01(hsl.s);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.saturate = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.s += amount / 100;
      hsl.s = clamp01(hsl.s);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.greyscale = function() {
      return this.desaturate(100);
    };
    TinyColor2.prototype.spin = function(amount) {
      var hsl = this.toHsl();
      var hue = (hsl.h + amount) % 360;
      hsl.h = hue < 0 ? 360 + hue : hue;
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.mix = function(color, amount) {
      if (amount === void 0) {
        amount = 50;
      }
      var rgb1 = this.toRgb();
      var rgb2 = new TinyColor2(color).toRgb();
      var p = amount / 100;
      var rgba = {
        r: (rgb2.r - rgb1.r) * p + rgb1.r,
        g: (rgb2.g - rgb1.g) * p + rgb1.g,
        b: (rgb2.b - rgb1.b) * p + rgb1.b,
        a: (rgb2.a - rgb1.a) * p + rgb1.a
      };
      return new TinyColor2(rgba);
    };
    TinyColor2.prototype.analogous = function(results, slices) {
      if (results === void 0) {
        results = 6;
      }
      if (slices === void 0) {
        slices = 30;
      }
      var hsl = this.toHsl();
      var part = 360 / slices;
      var ret = [this];
      for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
        hsl.h = (hsl.h + part) % 360;
        ret.push(new TinyColor2(hsl));
      }
      return ret;
    };
    TinyColor2.prototype.complement = function() {
      var hsl = this.toHsl();
      hsl.h = (hsl.h + 180) % 360;
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.monochromatic = function(results) {
      if (results === void 0) {
        results = 6;
      }
      var hsv = this.toHsv();
      var h = hsv.h;
      var s = hsv.s;
      var v = hsv.v;
      var res = [];
      var modification = 1 / results;
      while (results--) {
        res.push(new TinyColor2({ h, s, v }));
        v = (v + modification) % 1;
      }
      return res;
    };
    TinyColor2.prototype.splitcomplement = function() {
      var hsl = this.toHsl();
      var h = hsl.h;
      return [
        this,
        new TinyColor2({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),
        new TinyColor2({ h: (h + 216) % 360, s: hsl.s, l: hsl.l })
      ];
    };
    TinyColor2.prototype.onBackground = function(background) {
      var fg = this.toRgb();
      var bg = new TinyColor2(background).toRgb();
      var alpha = fg.a + bg.a * (1 - fg.a);
      return new TinyColor2({
        r: (fg.r * fg.a + bg.r * bg.a * (1 - fg.a)) / alpha,
        g: (fg.g * fg.a + bg.g * bg.a * (1 - fg.a)) / alpha,
        b: (fg.b * fg.a + bg.b * bg.a * (1 - fg.a)) / alpha,
        a: alpha
      });
    };
    TinyColor2.prototype.triad = function() {
      return this.polyad(3);
    };
    TinyColor2.prototype.tetrad = function() {
      return this.polyad(4);
    };
    TinyColor2.prototype.polyad = function(n) {
      var hsl = this.toHsl();
      var h = hsl.h;
      var result = [this];
      var increment = 360 / n;
      for (var i = 1; i < n; i++) {
        result.push(new TinyColor2({ h: (h + i * increment) % 360, s: hsl.s, l: hsl.l }));
      }
      return result;
    };
    TinyColor2.prototype.equals = function(color) {
      return this.toRgbString() === new TinyColor2(color).toRgbString();
    };
    return TinyColor2;
  }()
);
var hueStep = 2;
var saturationStep = 0.16;
var saturationStep2 = 0.05;
var brightnessStep1 = 0.05;
var brightnessStep2 = 0.15;
var lightColorCount = 5;
var darkColorCount = 4;
var darkColorMap = [{
  index: 7,
  opacity: 0.15
}, {
  index: 6,
  opacity: 0.25
}, {
  index: 5,
  opacity: 0.3
}, {
  index: 5,
  opacity: 0.45
}, {
  index: 5,
  opacity: 0.65
}, {
  index: 5,
  opacity: 0.85
}, {
  index: 4,
  opacity: 0.9
}, {
  index: 3,
  opacity: 0.95
}, {
  index: 2,
  opacity: 0.97
}, {
  index: 1,
  opacity: 0.98
}];
function toHsv(_ref) {
  var r2 = _ref.r, g = _ref.g, b = _ref.b;
  var hsv = rgbToHsv(r2, g, b);
  return {
    h: hsv.h * 360,
    s: hsv.s,
    v: hsv.v
  };
}
function toHex(_ref2) {
  var r2 = _ref2.r, g = _ref2.g, b = _ref2.b;
  return "#".concat(rgbToHex(r2, g, b, false));
}
function mix$1(rgb1, rgb2, amount) {
  var p = amount / 100;
  var rgb = {
    r: (rgb2.r - rgb1.r) * p + rgb1.r,
    g: (rgb2.g - rgb1.g) * p + rgb1.g,
    b: (rgb2.b - rgb1.b) * p + rgb1.b
  };
  return rgb;
}
function getHue(hsv, i, light) {
  var hue;
  if (Math.round(hsv.h) >= 60 && Math.round(hsv.h) <= 240) {
    hue = light ? Math.round(hsv.h) - hueStep * i : Math.round(hsv.h) + hueStep * i;
  } else {
    hue = light ? Math.round(hsv.h) + hueStep * i : Math.round(hsv.h) - hueStep * i;
  }
  if (hue < 0) {
    hue += 360;
  } else if (hue >= 360) {
    hue -= 360;
  }
  return hue;
}
function getSaturation(hsv, i, light) {
  if (hsv.h === 0 && hsv.s === 0) {
    return hsv.s;
  }
  var saturation;
  if (light) {
    saturation = hsv.s - saturationStep * i;
  } else if (i === darkColorCount) {
    saturation = hsv.s + saturationStep;
  } else {
    saturation = hsv.s + saturationStep2 * i;
  }
  if (saturation > 1) {
    saturation = 1;
  }
  if (light && i === lightColorCount && saturation > 0.1) {
    saturation = 0.1;
  }
  if (saturation < 0.06) {
    saturation = 0.06;
  }
  return Number(saturation.toFixed(2));
}
function getValue(hsv, i, light) {
  var value;
  if (light) {
    value = hsv.v + brightnessStep1 * i;
  } else {
    value = hsv.v - brightnessStep2 * i;
  }
  if (value > 1) {
    value = 1;
  }
  return Number(value.toFixed(2));
}
function generate$1(color) {
  var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var patterns = [];
  var pColor = inputToRGB(color);
  for (var i = lightColorCount; i > 0; i -= 1) {
    var hsv = toHsv(pColor);
    var colorString = toHex(inputToRGB({
      h: getHue(hsv, i, true),
      s: getSaturation(hsv, i, true),
      v: getValue(hsv, i, true)
    }));
    patterns.push(colorString);
  }
  patterns.push(toHex(pColor));
  for (var _i = 1; _i <= darkColorCount; _i += 1) {
    var _hsv = toHsv(pColor);
    var _colorString = toHex(inputToRGB({
      h: getHue(_hsv, _i),
      s: getSaturation(_hsv, _i),
      v: getValue(_hsv, _i)
    }));
    patterns.push(_colorString);
  }
  if (opts.theme === "dark") {
    return darkColorMap.map(function(_ref3) {
      var index2 = _ref3.index, opacity = _ref3.opacity;
      var darkColorString = toHex(mix$1(inputToRGB(opts.backgroundColor || "#141414"), inputToRGB(patterns[index2]), opacity * 100));
      return darkColorString;
    });
  }
  return patterns;
}
var presetPrimaryColors = {
  red: "#F5222D",
  volcano: "#FA541C",
  orange: "#FA8C16",
  gold: "#FAAD14",
  yellow: "#FADB14",
  lime: "#A0D911",
  green: "#52C41A",
  cyan: "#13C2C2",
  blue: "#1677FF",
  geekblue: "#2F54EB",
  purple: "#722ED1",
  magenta: "#EB2F96",
  grey: "#666666"
};
var presetPalettes = {};
var presetDarkPalettes = {};
Object.keys(presetPrimaryColors).forEach(function(key) {
  presetPalettes[key] = generate$1(presetPrimaryColors[key]);
  presetPalettes[key].primary = presetPalettes[key][5];
  presetDarkPalettes[key] = generate$1(presetPrimaryColors[key], {
    theme: "dark",
    backgroundColor: "#141414"
  });
  presetDarkPalettes[key].primary = presetDarkPalettes[key][5];
});
const genControlHeight = (token2) => {
  const {
    controlHeight
  } = token2;
  return {
    controlHeightSM: controlHeight * 0.75,
    controlHeightXS: controlHeight * 0.5,
    controlHeightLG: controlHeight * 1.25
  };
};
const genControlHeight$1 = genControlHeight;
function genSizeMapToken$1(token2) {
  const {
    sizeUnit,
    sizeStep
  } = token2;
  return {
    sizeXXL: sizeUnit * (sizeStep + 8),
    sizeXL: sizeUnit * (sizeStep + 4),
    sizeLG: sizeUnit * (sizeStep + 2),
    sizeMD: sizeUnit * (sizeStep + 1),
    sizeMS: sizeUnit * sizeStep,
    size: sizeUnit * sizeStep,
    sizeSM: sizeUnit * (sizeStep - 1),
    sizeXS: sizeUnit * (sizeStep - 2),
    sizeXXS: sizeUnit * (sizeStep - 3)
    // 4
  };
}
const defaultPresetColors = {
  blue: "#1677ff",
  purple: "#722ED1",
  cyan: "#13C2C2",
  green: "#52C41A",
  magenta: "#EB2F96",
  pink: "#eb2f96",
  red: "#F5222D",
  orange: "#FA8C16",
  yellow: "#FADB14",
  volcano: "#FA541C",
  geekblue: "#2F54EB",
  gold: "#FAAD14",
  lime: "#A0D911"
};
const seedToken = Object.assign(Object.assign({}, defaultPresetColors), {
  // Color
  colorPrimary: "#1677ff",
  colorSuccess: "#52c41a",
  colorWarning: "#faad14",
  colorError: "#ff4d4f",
  colorInfo: "#1677ff",
  colorTextBase: "",
  colorBgBase: "",
  // Font
  fontFamily: `-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial,
'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',
'Noto Color Emoji'`,
  fontFamilyCode: `'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace`,
  fontSize: 14,
  // Line
  lineWidth: 1,
  lineType: "solid",
  // Motion
  motionUnit: 0.1,
  motionBase: 0,
  motionEaseOutCirc: "cubic-bezier(0.08, 0.82, 0.17, 1)",
  motionEaseInOutCirc: "cubic-bezier(0.78, 0.14, 0.15, 0.86)",
  motionEaseOut: "cubic-bezier(0.215, 0.61, 0.355, 1)",
  motionEaseInOut: "cubic-bezier(0.645, 0.045, 0.355, 1)",
  motionEaseOutBack: "cubic-bezier(0.12, 0.4, 0.29, 1.46)",
  motionEaseInBack: "cubic-bezier(0.71, -0.46, 0.88, 0.6)",
  motionEaseInQuint: "cubic-bezier(0.755, 0.05, 0.855, 0.06)",
  motionEaseOutQuint: "cubic-bezier(0.23, 1, 0.32, 1)",
  // Radius
  borderRadius: 6,
  // Size
  sizeUnit: 4,
  sizeStep: 4,
  sizePopupArrow: 16,
  // Control Base
  controlHeight: 32,
  // zIndex
  zIndexBase: 0,
  zIndexPopupBase: 1e3,
  // Image
  opacityImage: 1,
  // Wireframe
  wireframe: false
});
function genColorMapToken(seed, _ref) {
  let {
    generateColorPalettes: generateColorPalettes2,
    generateNeutralColorPalettes: generateNeutralColorPalettes2
  } = _ref;
  const {
    colorSuccess: colorSuccessBase,
    colorWarning: colorWarningBase,
    colorError: colorErrorBase,
    colorInfo: colorInfoBase,
    colorPrimary: colorPrimaryBase,
    colorBgBase,
    colorTextBase
  } = seed;
  const primaryColors = generateColorPalettes2(colorPrimaryBase);
  const successColors = generateColorPalettes2(colorSuccessBase);
  const warningColors = generateColorPalettes2(colorWarningBase);
  const errorColors = generateColorPalettes2(colorErrorBase);
  const infoColors = generateColorPalettes2(colorInfoBase);
  const neutralColors = generateNeutralColorPalettes2(colorBgBase, colorTextBase);
  return Object.assign(Object.assign({}, neutralColors), {
    colorPrimaryBg: primaryColors[1],
    colorPrimaryBgHover: primaryColors[2],
    colorPrimaryBorder: primaryColors[3],
    colorPrimaryBorderHover: primaryColors[4],
    colorPrimaryHover: primaryColors[5],
    colorPrimary: primaryColors[6],
    colorPrimaryActive: primaryColors[7],
    colorPrimaryTextHover: primaryColors[8],
    colorPrimaryText: primaryColors[9],
    colorPrimaryTextActive: primaryColors[10],
    colorSuccessBg: successColors[1],
    colorSuccessBgHover: successColors[2],
    colorSuccessBorder: successColors[3],
    colorSuccessBorderHover: successColors[4],
    colorSuccessHover: successColors[4],
    colorSuccess: successColors[6],
    colorSuccessActive: successColors[7],
    colorSuccessTextHover: successColors[8],
    colorSuccessText: successColors[9],
    colorSuccessTextActive: successColors[10],
    colorErrorBg: errorColors[1],
    colorErrorBgHover: errorColors[2],
    colorErrorBorder: errorColors[3],
    colorErrorBorderHover: errorColors[4],
    colorErrorHover: errorColors[5],
    colorError: errorColors[6],
    colorErrorActive: errorColors[7],
    colorErrorTextHover: errorColors[8],
    colorErrorText: errorColors[9],
    colorErrorTextActive: errorColors[10],
    colorWarningBg: warningColors[1],
    colorWarningBgHover: warningColors[2],
    colorWarningBorder: warningColors[3],
    colorWarningBorderHover: warningColors[4],
    colorWarningHover: warningColors[4],
    colorWarning: warningColors[6],
    colorWarningActive: warningColors[7],
    colorWarningTextHover: warningColors[8],
    colorWarningText: warningColors[9],
    colorWarningTextActive: warningColors[10],
    colorInfoBg: infoColors[1],
    colorInfoBgHover: infoColors[2],
    colorInfoBorder: infoColors[3],
    colorInfoBorderHover: infoColors[4],
    colorInfoHover: infoColors[4],
    colorInfo: infoColors[6],
    colorInfoActive: infoColors[7],
    colorInfoTextHover: infoColors[8],
    colorInfoText: infoColors[9],
    colorInfoTextActive: infoColors[10],
    colorBgMask: new TinyColor("#000").setAlpha(0.45).toRgbString(),
    colorWhite: "#fff"
  });
}
const genRadius = (radiusBase) => {
  let radiusLG = radiusBase;
  let radiusSM = radiusBase;
  let radiusXS = radiusBase;
  let radiusOuter = radiusBase;
  if (radiusBase < 6 && radiusBase >= 5) {
    radiusLG = radiusBase + 1;
  } else if (radiusBase < 16 && radiusBase >= 6) {
    radiusLG = radiusBase + 2;
  } else if (radiusBase >= 16) {
    radiusLG = 16;
  }
  if (radiusBase < 7 && radiusBase >= 5) {
    radiusSM = 4;
  } else if (radiusBase < 8 && radiusBase >= 7) {
    radiusSM = 5;
  } else if (radiusBase < 14 && radiusBase >= 8) {
    radiusSM = 6;
  } else if (radiusBase < 16 && radiusBase >= 14) {
    radiusSM = 7;
  } else if (radiusBase >= 16) {
    radiusSM = 8;
  }
  if (radiusBase < 6 && radiusBase >= 2) {
    radiusXS = 1;
  } else if (radiusBase >= 6) {
    radiusXS = 2;
  }
  if (radiusBase > 4 && radiusBase < 8) {
    radiusOuter = 4;
  } else if (radiusBase >= 8) {
    radiusOuter = 6;
  }
  return {
    borderRadius: radiusBase > 16 ? 16 : radiusBase,
    borderRadiusXS: radiusXS,
    borderRadiusSM: radiusSM,
    borderRadiusLG: radiusLG,
    borderRadiusOuter: radiusOuter
  };
};
const genRadius$1 = genRadius;
function genCommonMapToken(token2) {
  const {
    motionUnit,
    motionBase,
    borderRadius,
    lineWidth
  } = token2;
  return Object.assign({
    // motion
    motionDurationFast: `${(motionBase + motionUnit).toFixed(1)}s`,
    motionDurationMid: `${(motionBase + motionUnit * 2).toFixed(1)}s`,
    motionDurationSlow: `${(motionBase + motionUnit * 3).toFixed(1)}s`,
    // line
    lineWidthBold: lineWidth + 1
  }, genRadius$1(borderRadius));
}
const getAlphaColor$2 = (baseColor, alpha) => new TinyColor(baseColor).setAlpha(alpha).toRgbString();
const getSolidColor$1 = (baseColor, brightness) => {
  const instance = new TinyColor(baseColor);
  return instance.darken(brightness).toHexString();
};
const generateColorPalettes$1 = (baseColor) => {
  const colors = generate$1(baseColor);
  return {
    1: colors[0],
    2: colors[1],
    3: colors[2],
    4: colors[3],
    5: colors[4],
    6: colors[5],
    7: colors[6],
    8: colors[4],
    9: colors[5],
    10: colors[6]
    // 8: colors[7],
    // 9: colors[8],
    // 10: colors[9],
  };
};
const generateNeutralColorPalettes$1 = (bgBaseColor, textBaseColor) => {
  const colorBgBase = bgBaseColor || "#fff";
  const colorTextBase = textBaseColor || "#000";
  return {
    colorBgBase,
    colorTextBase,
    colorText: getAlphaColor$2(colorTextBase, 0.88),
    colorTextSecondary: getAlphaColor$2(colorTextBase, 0.65),
    colorTextTertiary: getAlphaColor$2(colorTextBase, 0.45),
    colorTextQuaternary: getAlphaColor$2(colorTextBase, 0.25),
    colorFill: getAlphaColor$2(colorTextBase, 0.15),
    colorFillSecondary: getAlphaColor$2(colorTextBase, 0.06),
    colorFillTertiary: getAlphaColor$2(colorTextBase, 0.04),
    colorFillQuaternary: getAlphaColor$2(colorTextBase, 0.02),
    colorBgLayout: getSolidColor$1(colorBgBase, 4),
    colorBgContainer: getSolidColor$1(colorBgBase, 0),
    colorBgElevated: getSolidColor$1(colorBgBase, 0),
    colorBgSpotlight: getAlphaColor$2(colorTextBase, 0.85),
    colorBorder: getSolidColor$1(colorBgBase, 15),
    colorBorderSecondary: getSolidColor$1(colorBgBase, 6)
  };
};
function getFontSizes(base) {
  const fontSizes = new Array(10).fill(null).map((_, index2) => {
    const i = index2 - 1;
    const baseSize = base * Math.pow(2.71828, i / 5);
    const intSize = index2 > 1 ? Math.floor(baseSize) : Math.ceil(baseSize);
    return Math.floor(intSize / 2) * 2;
  });
  fontSizes[1] = base;
  return fontSizes.map((size) => {
    const height = size + 8;
    return {
      size,
      lineHeight: height / size
    };
  });
}
const genFontMapToken = (fontSize) => {
  const fontSizePairs = getFontSizes(fontSize);
  const fontSizes = fontSizePairs.map((pair) => pair.size);
  const lineHeights = fontSizePairs.map((pair) => pair.lineHeight);
  return {
    fontSizeSM: fontSizes[0],
    fontSize: fontSizes[1],
    fontSizeLG: fontSizes[2],
    fontSizeXL: fontSizes[3],
    fontSizeHeading1: fontSizes[6],
    fontSizeHeading2: fontSizes[5],
    fontSizeHeading3: fontSizes[4],
    fontSizeHeading4: fontSizes[3],
    fontSizeHeading5: fontSizes[2],
    lineHeight: lineHeights[1],
    lineHeightLG: lineHeights[2],
    lineHeightSM: lineHeights[0],
    lineHeightHeading1: lineHeights[6],
    lineHeightHeading2: lineHeights[5],
    lineHeightHeading3: lineHeights[4],
    lineHeightHeading4: lineHeights[3],
    lineHeightHeading5: lineHeights[2]
  };
};
const genFontMapToken$1 = genFontMapToken;
function derivative$2(token2) {
  const colorPalettes = Object.keys(defaultPresetColors).map((colorKey) => {
    const colors = generate$1(token2[colorKey]);
    return new Array(10).fill(1).reduce((prev2, _, i) => {
      prev2[`${colorKey}-${i + 1}`] = colors[i];
      prev2[`${colorKey}${i + 1}`] = colors[i];
      return prev2;
    }, {});
  }).reduce((prev2, cur) => {
    prev2 = Object.assign(Object.assign({}, prev2), cur);
    return prev2;
  }, {});
  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, token2), colorPalettes), genColorMapToken(token2, {
    generateColorPalettes: generateColorPalettes$1,
    generateNeutralColorPalettes: generateNeutralColorPalettes$1
  })), genFontMapToken$1(token2.fontSize)), genSizeMapToken$1(token2)), genControlHeight$1(token2)), genCommonMapToken(token2));
}
function isStableColor(color) {
  return color >= 0 && color <= 255;
}
function getAlphaColor$1(frontColor, backgroundColor) {
  const {
    r: fR,
    g: fG,
    b: fB,
    a: originAlpha
  } = new TinyColor(frontColor).toRgb();
  if (originAlpha < 1) {
    return frontColor;
  }
  const {
    r: bR,
    g: bG,
    b: bB
  } = new TinyColor(backgroundColor).toRgb();
  for (let fA = 0.01; fA <= 1; fA += 0.01) {
    const r2 = Math.round((fR - bR * (1 - fA)) / fA);
    const g = Math.round((fG - bG * (1 - fA)) / fA);
    const b = Math.round((fB - bB * (1 - fA)) / fA);
    if (isStableColor(r2) && isStableColor(g) && isStableColor(b)) {
      return new TinyColor({
        r: r2,
        g,
        b,
        a: Math.round(fA * 100) / 100
      }).toRgbString();
    }
  }
  return new TinyColor({
    r: fR,
    g: fG,
    b: fB,
    a: 1
  }).toRgbString();
}
var __rest$g = globalThis && globalThis.__rest || function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function formatToken(derivativeToken) {
  const {
    override
  } = derivativeToken, restToken = __rest$g(derivativeToken, ["override"]);
  const overrideTokens = Object.assign({}, override);
  Object.keys(seedToken).forEach((token2) => {
    delete overrideTokens[token2];
  });
  const mergedToken = Object.assign(Object.assign({}, restToken), overrideTokens);
  const screenXS = 480;
  const screenSM = 576;
  const screenMD = 768;
  const screenLG = 992;
  const screenXL = 1200;
  const screenXXL = 1600;
  const aliasToken = Object.assign(Object.assign(Object.assign({}, mergedToken), {
    colorLink: mergedToken.colorInfoText,
    colorLinkHover: mergedToken.colorInfoHover,
    colorLinkActive: mergedToken.colorInfoActive,
    // ============== Background ============== //
    colorFillContent: mergedToken.colorFillSecondary,
    colorFillContentHover: mergedToken.colorFill,
    colorFillAlter: mergedToken.colorFillQuaternary,
    colorBgContainerDisabled: mergedToken.colorFillTertiary,
    // ============== Split ============== //
    colorBorderBg: mergedToken.colorBgContainer,
    colorSplit: getAlphaColor$1(mergedToken.colorBorderSecondary, mergedToken.colorBgContainer),
    // ============== Text ============== //
    colorTextPlaceholder: mergedToken.colorTextQuaternary,
    colorTextDisabled: mergedToken.colorTextQuaternary,
    colorTextHeading: mergedToken.colorText,
    colorTextLabel: mergedToken.colorTextSecondary,
    colorTextDescription: mergedToken.colorTextTertiary,
    colorTextLightSolid: mergedToken.colorWhite,
    colorHighlight: mergedToken.colorError,
    colorBgTextHover: mergedToken.colorFillSecondary,
    colorBgTextActive: mergedToken.colorFill,
    colorIcon: mergedToken.colorTextTertiary,
    colorIconHover: mergedToken.colorText,
    colorErrorOutline: getAlphaColor$1(mergedToken.colorErrorBg, mergedToken.colorBgContainer),
    colorWarningOutline: getAlphaColor$1(mergedToken.colorWarningBg, mergedToken.colorBgContainer),
    // Font
    fontSizeIcon: mergedToken.fontSizeSM,
    // Line
    lineWidthFocus: mergedToken.lineWidth * 4,
    // Control
    lineWidth: mergedToken.lineWidth,
    controlOutlineWidth: mergedToken.lineWidth * 2,
    // Checkbox size and expand icon size
    controlInteractiveSize: mergedToken.controlHeight / 2,
    controlItemBgHover: mergedToken.colorFillTertiary,
    controlItemBgActive: mergedToken.colorPrimaryBg,
    controlItemBgActiveHover: mergedToken.colorPrimaryBgHover,
    controlItemBgActiveDisabled: mergedToken.colorFill,
    controlTmpOutline: mergedToken.colorFillQuaternary,
    controlOutline: getAlphaColor$1(mergedToken.colorPrimaryBg, mergedToken.colorBgContainer),
    lineType: mergedToken.lineType,
    borderRadius: mergedToken.borderRadius,
    borderRadiusXS: mergedToken.borderRadiusXS,
    borderRadiusSM: mergedToken.borderRadiusSM,
    borderRadiusLG: mergedToken.borderRadiusLG,
    fontWeightStrong: 600,
    opacityLoading: 0.65,
    linkDecoration: "none",
    linkHoverDecoration: "none",
    linkFocusDecoration: "none",
    controlPaddingHorizontal: 12,
    controlPaddingHorizontalSM: 8,
    paddingXXS: mergedToken.sizeXXS,
    paddingXS: mergedToken.sizeXS,
    paddingSM: mergedToken.sizeSM,
    padding: mergedToken.size,
    paddingMD: mergedToken.sizeMD,
    paddingLG: mergedToken.sizeLG,
    paddingXL: mergedToken.sizeXL,
    paddingContentHorizontalLG: mergedToken.sizeLG,
    paddingContentVerticalLG: mergedToken.sizeMS,
    paddingContentHorizontal: mergedToken.sizeMS,
    paddingContentVertical: mergedToken.sizeSM,
    paddingContentHorizontalSM: mergedToken.size,
    paddingContentVerticalSM: mergedToken.sizeXS,
    marginXXS: mergedToken.sizeXXS,
    marginXS: mergedToken.sizeXS,
    marginSM: mergedToken.sizeSM,
    margin: mergedToken.size,
    marginMD: mergedToken.sizeMD,
    marginLG: mergedToken.sizeLG,
    marginXL: mergedToken.sizeXL,
    marginXXL: mergedToken.sizeXXL,
    boxShadow: `
      0 6px 16px 0 rgba(0, 0, 0, 0.08),
      0 3px 6px -4px rgba(0, 0, 0, 0.12),
      0 9px 28px 8px rgba(0, 0, 0, 0.05)
    `,
    boxShadowSecondary: `
      0 6px 16px 0 rgba(0, 0, 0, 0.08),
      0 3px 6px -4px rgba(0, 0, 0, 0.12),
      0 9px 28px 8px rgba(0, 0, 0, 0.05)
    `,
    boxShadowTertiary: `
      0 1px 2px 0 rgba(0, 0, 0, 0.03),
      0 1px 6px -1px rgba(0, 0, 0, 0.02),
      0 2px 4px 0 rgba(0, 0, 0, 0.02)
    `,
    screenXS,
    screenXSMin: screenXS,
    screenXSMax: screenSM - 1,
    screenSM,
    screenSMMin: screenSM,
    screenSMMax: screenMD - 1,
    screenMD,
    screenMDMin: screenMD,
    screenMDMax: screenLG - 1,
    screenLG,
    screenLGMin: screenLG,
    screenLGMax: screenXL - 1,
    screenXL,
    screenXLMin: screenXL,
    screenXLMax: screenXXL - 1,
    screenXXL,
    screenXXLMin: screenXXL,
    boxShadowPopoverArrow: "2px 2px 5px rgba(0, 0, 0, 0.05)",
    boxShadowCard: `
      0 1px 2px -2px ${new TinyColor("rgba(0, 0, 0, 0.16)").toRgbString()},
      0 3px 6px 0 ${new TinyColor("rgba(0, 0, 0, 0.12)").toRgbString()},
      0 5px 12px 4px ${new TinyColor("rgba(0, 0, 0, 0.09)").toRgbString()}
    `,
    boxShadowDrawerRight: `
      -6px 0 16px 0 rgba(0, 0, 0, 0.08),
      -3px 0 6px -4px rgba(0, 0, 0, 0.12),
      -9px 0 28px 8px rgba(0, 0, 0, 0.05)
    `,
    boxShadowDrawerLeft: `
      6px 0 16px 0 rgba(0, 0, 0, 0.08),
      3px 0 6px -4px rgba(0, 0, 0, 0.12),
      9px 0 28px 8px rgba(0, 0, 0, 0.05)
    `,
    boxShadowDrawerUp: `
      0 6px 16px 0 rgba(0, 0, 0, 0.08),
      0 3px 6px -4px rgba(0, 0, 0, 0.12),
      0 9px 28px 8px rgba(0, 0, 0, 0.05)
    `,
    boxShadowDrawerDown: `
      0 -6px 16px 0 rgba(0, 0, 0, 0.08),
      0 -3px 6px -4px rgba(0, 0, 0, 0.12),
      0 -9px 28px 8px rgba(0, 0, 0, 0.05)
    `,
    boxShadowTabsOverflowLeft: "inset 10px 0 8px -8px rgba(0, 0, 0, 0.08)",
    boxShadowTabsOverflowRight: "inset -10px 0 8px -8px rgba(0, 0, 0, 0.08)",
    boxShadowTabsOverflowTop: "inset 0 10px 8px -8px rgba(0, 0, 0, 0.08)",
    boxShadowTabsOverflowBottom: "inset 0 -10px 8px -8px rgba(0, 0, 0, 0.08)"
  }), overrideTokens);
  return aliasToken;
}
const defaultIconPrefixCls = "anticon";
const defaultGetPrefixCls = (suffixCls, customizePrefixCls) => {
  if (customizePrefixCls)
    return customizePrefixCls;
  return suffixCls ? `ant-${suffixCls}` : "ant";
};
const ConfigContext = /* @__PURE__ */ React$2.createContext({
  // We provide a default function for Context without provider
  getPrefixCls: defaultGetPrefixCls,
  iconPrefixCls: defaultIconPrefixCls
});
const roundedArrow = (width, innerRadius, outerRadius, bgColor, boxShadow) => {
  const unitWidth = width / 2;
  const ax = 0;
  const ay = unitWidth;
  const bx = outerRadius * 1 / Math.sqrt(2);
  const by = unitWidth - outerRadius * (1 - 1 / Math.sqrt(2));
  const cx = unitWidth - innerRadius * (1 / Math.sqrt(2));
  const cy = outerRadius * (Math.sqrt(2) - 1) + innerRadius * (1 / Math.sqrt(2));
  const dx = 2 * unitWidth - cx;
  const dy = cy;
  const ex = 2 * unitWidth - bx;
  const ey = by;
  const fx = 2 * unitWidth - ax;
  const fy = ay;
  const shadowWidth = unitWidth * Math.sqrt(2) + outerRadius * (Math.sqrt(2) - 2);
  const polygonOffset = outerRadius * (Math.sqrt(2) - 1);
  return {
    pointerEvents: "none",
    width,
    height: width,
    overflow: "hidden",
    "&::before": {
      position: "absolute",
      bottom: 0,
      insetInlineStart: 0,
      width,
      height: width / 2,
      background: bgColor,
      clipPath: {
        _multi_value_: true,
        value: [`polygon(${polygonOffset}px 100%, 50% ${polygonOffset}px, ${2 * unitWidth - polygonOffset}px 100%, ${polygonOffset}px 100%)`, `path('M ${ax} ${ay} A ${outerRadius} ${outerRadius} 0 0 0 ${bx} ${by} L ${cx} ${cy} A ${innerRadius} ${innerRadius} 0 0 1 ${dx} ${dy} L ${ex} ${ey} A ${outerRadius} ${outerRadius} 0 0 0 ${fx} ${fy} Z')`]
      },
      content: '""'
    },
    "&::after": {
      content: '""',
      position: "absolute",
      width: shadowWidth,
      height: shadowWidth,
      bottom: 0,
      insetInline: 0,
      margin: "auto",
      borderRadius: {
        _skip_check_: true,
        value: `0 0 ${innerRadius}px 0`
      },
      transform: "translateY(50%) rotate(-135deg)",
      boxShadow,
      zIndex: 0,
      background: "transparent"
    }
  };
};
const textEllipsis = {
  overflow: "hidden",
  whiteSpace: "nowrap",
  textOverflow: "ellipsis"
};
const resetComponent = (token2) => ({
  boxSizing: "border-box",
  margin: 0,
  padding: 0,
  color: token2.colorText,
  fontSize: token2.fontSize,
  // font-variant: @font-variant-base;
  lineHeight: token2.lineHeight,
  listStyle: "none",
  // font-feature-settings: @font-feature-settings-base;
  fontFamily: token2.fontFamily
});
const resetIcon = () => ({
  display: "inline-flex",
  alignItems: "center",
  color: "inherit",
  fontStyle: "normal",
  lineHeight: 0,
  textAlign: "center",
  textTransform: "none",
  // for SVG icon, see https://blog.prototypr.io/align-svg-icons-to-text-and-say-goodbye-to-font-icons-d44b3d7b26b4
  verticalAlign: "-0.125em",
  textRendering: "optimizeLegibility",
  "-webkit-font-smoothing": "antialiased",
  "-moz-osx-font-smoothing": "grayscale",
  "> *": {
    lineHeight: 1
  },
  svg: {
    display: "inline-block"
  }
});
const clearFix = () => ({
  // https://github.com/ant-design/ant-design/issues/21301#issuecomment-583955229
  "&::before": {
    display: "table",
    content: '""'
  },
  "&::after": {
    // https://github.com/ant-design/ant-design/issues/21864
    display: "table",
    clear: "both",
    content: '""'
  }
});
const genLinkStyle = (token2) => ({
  a: {
    color: token2.colorLink,
    textDecoration: token2.linkDecoration,
    backgroundColor: "transparent",
    outline: "none",
    cursor: "pointer",
    transition: `color ${token2.motionDurationSlow}`,
    "-webkit-text-decoration-skip": "objects",
    "&:hover": {
      color: token2.colorLinkHover
    },
    "&:active": {
      color: token2.colorLinkActive
    },
    [`&:active,
  &:hover`]: {
      textDecoration: token2.linkHoverDecoration,
      outline: 0
    },
    // https://github.com/ant-design/ant-design/issues/22503
    "&:focus": {
      textDecoration: token2.linkFocusDecoration,
      outline: 0
    },
    "&[disabled]": {
      color: token2.colorTextDisabled,
      cursor: "not-allowed"
    }
  }
});
const genCommonStyle = (token2, componentPrefixCls) => {
  const {
    fontFamily,
    fontSize
  } = token2;
  const rootPrefixSelector = `[class^="${componentPrefixCls}"], [class*=" ${componentPrefixCls}"]`;
  return {
    [rootPrefixSelector]: {
      fontFamily,
      fontSize,
      boxSizing: "border-box",
      "&::before, &::after": {
        boxSizing: "border-box"
      },
      [rootPrefixSelector]: {
        boxSizing: "border-box",
        "&::before, &::after": {
          boxSizing: "border-box"
        }
      }
    }
  };
};
const genFocusOutline = (token2) => ({
  outline: `${token2.lineWidthFocus}px solid ${token2.colorPrimaryBorder}`,
  outlineOffset: 1,
  transition: "outline-offset 0s, outline 0s"
});
const genFocusStyle = (token2) => ({
  "&:focus-visible": Object.assign({}, genFocusOutline(token2))
});
function genComponentStyleHook(component, styleFn, getDefaultToken, options) {
  return (prefixCls) => {
    const [theme2, token2, hashId] = useToken$2();
    const {
      getPrefixCls,
      iconPrefixCls,
      csp
    } = useContext(ConfigContext);
    const rootPrefixCls = getPrefixCls();
    const sharedConfig2 = {
      theme: theme2,
      token: token2,
      hashId,
      nonce: () => csp === null || csp === void 0 ? void 0 : csp.nonce
    };
    useStyleRegister(Object.assign(Object.assign({}, sharedConfig2), {
      path: ["Shared", rootPrefixCls]
    }), () => [{
      // Link
      "&": genLinkStyle(token2)
    }]);
    return [useStyleRegister(Object.assign(Object.assign({}, sharedConfig2), {
      path: [component, prefixCls, iconPrefixCls]
    }), () => {
      const {
        token: proxyToken,
        flush
      } = statisticToken(token2);
      const defaultComponentToken = typeof getDefaultToken === "function" ? getDefaultToken(proxyToken) : getDefaultToken;
      const mergedComponentToken = Object.assign(Object.assign({}, defaultComponentToken), token2[component]);
      const componentCls = `.${prefixCls}`;
      const mergedToken = merge(proxyToken, {
        componentCls,
        prefixCls,
        iconCls: `.${iconPrefixCls}`,
        antCls: `.${rootPrefixCls}`
      }, mergedComponentToken);
      const styleInterpolation = styleFn(mergedToken, {
        hashId,
        prefixCls,
        rootPrefixCls,
        iconPrefixCls,
        overrideComponentToken: token2[component]
      });
      flush(component, mergedComponentToken);
      return [(options === null || options === void 0 ? void 0 : options.resetStyle) === false ? null : genCommonStyle(token2, prefixCls), styleInterpolation];
    }), hashId];
  };
}
const enableStatistic = process.env.NODE_ENV !== "production" || typeof CSSINJS_STATISTIC !== "undefined";
let recording = true;
function merge() {
  for (var _len = arguments.length, objs = new Array(_len), _key = 0; _key < _len; _key++) {
    objs[_key] = arguments[_key];
  }
  if (!enableStatistic) {
    return Object.assign.apply(Object, [{}].concat(objs));
  }
  recording = false;
  const ret = {};
  objs.forEach((obj) => {
    const keys = Object.keys(obj);
    keys.forEach((key) => {
      Object.defineProperty(ret, key, {
        configurable: true,
        enumerable: true,
        get: () => obj[key]
      });
    });
  });
  recording = true;
  return ret;
}
function noop$1() {
}
function statisticToken(token2) {
  let tokenKeys2;
  let proxy = token2;
  let flush = noop$1;
  if (enableStatistic) {
    tokenKeys2 = /* @__PURE__ */ new Set();
    proxy = new Proxy(token2, {
      get(obj, prop) {
        if (recording) {
          tokenKeys2.add(prop);
        }
        return obj[prop];
      }
    });
    flush = (componentName, componentToken) => {
      ({
        global: Array.from(tokenKeys2),
        component: componentToken
      });
    };
  }
  return {
    token: proxy,
    keys: tokenKeys2,
    flush
  };
}
function genPresetColor(token2, genCss) {
  return PresetColors.reduce((prev2, colorKey) => {
    const lightColor = token2[`${colorKey}1`];
    const lightBorderColor = token2[`${colorKey}3`];
    const darkColor = token2[`${colorKey}6`];
    const textColor = token2[`${colorKey}7`];
    return Object.assign(Object.assign({}, prev2), genCss(colorKey, {
      lightColor,
      lightBorderColor,
      darkColor,
      textColor
    }));
  }, {});
}
const defaultTheme = createTheme(derivative$2);
const defaultConfig = {
  token: seedToken,
  hashed: true
};
const DesignTokenContext = /* @__PURE__ */ React__default.createContext(defaultConfig);
function useToken$2() {
  const {
    token: rootDesignToken,
    hashed,
    theme: theme2,
    components
  } = React__default.useContext(DesignTokenContext);
  const salt = `${version$1}-${hashed || ""}`;
  const mergedTheme = theme2 || defaultTheme;
  const [token2, hashId] = useCacheToken(mergedTheme, [seedToken, rootDesignToken], {
    salt,
    override: Object.assign({
      override: rootDesignToken
    }, components),
    formatToken
  });
  return [mergedTheme, token2, hashed ? hashId : ""];
}
const dynamicStyleMark = `-ant-${Date.now()}-${Math.random()}`;
function getStyle$1(globalPrefixCls2, theme2) {
  const variables = {};
  const formatColor = (color, updater) => {
    let clone2 = color.clone();
    clone2 = (updater === null || updater === void 0 ? void 0 : updater(clone2)) || clone2;
    return clone2.toRgbString();
  };
  const fillColor = (colorVal, type4) => {
    const baseColor = new TinyColor(colorVal);
    const colorPalettes = generate$1(baseColor.toRgbString());
    variables[`${type4}-color`] = formatColor(baseColor);
    variables[`${type4}-color-disabled`] = colorPalettes[1];
    variables[`${type4}-color-hover`] = colorPalettes[4];
    variables[`${type4}-color-active`] = colorPalettes[6];
    variables[`${type4}-color-outline`] = baseColor.clone().setAlpha(0.2).toRgbString();
    variables[`${type4}-color-deprecated-bg`] = colorPalettes[0];
    variables[`${type4}-color-deprecated-border`] = colorPalettes[2];
  };
  if (theme2.primaryColor) {
    fillColor(theme2.primaryColor, "primary");
    const primaryColor = new TinyColor(theme2.primaryColor);
    const primaryColors = generate$1(primaryColor.toRgbString());
    primaryColors.forEach((color, index2) => {
      variables[`primary-${index2 + 1}`] = color;
    });
    variables["primary-color-deprecated-l-35"] = formatColor(primaryColor, (c) => c.lighten(35));
    variables["primary-color-deprecated-l-20"] = formatColor(primaryColor, (c) => c.lighten(20));
    variables["primary-color-deprecated-t-20"] = formatColor(primaryColor, (c) => c.tint(20));
    variables["primary-color-deprecated-t-50"] = formatColor(primaryColor, (c) => c.tint(50));
    variables["primary-color-deprecated-f-12"] = formatColor(primaryColor, (c) => c.setAlpha(c.getAlpha() * 0.12));
    const primaryActiveColor = new TinyColor(primaryColors[0]);
    variables["primary-color-active-deprecated-f-30"] = formatColor(primaryActiveColor, (c) => c.setAlpha(c.getAlpha() * 0.3));
    variables["primary-color-active-deprecated-d-02"] = formatColor(primaryActiveColor, (c) => c.darken(2));
  }
  if (theme2.successColor) {
    fillColor(theme2.successColor, "success");
  }
  if (theme2.warningColor) {
    fillColor(theme2.warningColor, "warning");
  }
  if (theme2.errorColor) {
    fillColor(theme2.errorColor, "error");
  }
  if (theme2.infoColor) {
    fillColor(theme2.infoColor, "info");
  }
  const cssList = Object.keys(variables).map((key) => `--${globalPrefixCls2}-${key}: ${variables[key]};`);
  return `
  :root {
    ${cssList.join("\n")}
  }
  `.trim();
}
function registerTheme(globalPrefixCls2, theme2) {
  const style2 = getStyle$1(globalPrefixCls2, theme2);
  if (canUseDom()) {
    updateCSS(style2, `${dynamicStyleMark}-dynamic-theme`);
  } else {
    process.env.NODE_ENV !== "production" ? warning$2(false, "ConfigProvider", "SSR do not support dynamic theme with css variables.") : void 0;
  }
}
const DisabledContext = /* @__PURE__ */ React$2.createContext(false);
const DisabledContextProvider = (_ref) => {
  let {
    children,
    disabled
  } = _ref;
  const originDisabled = React$2.useContext(DisabledContext);
  return /* @__PURE__ */ React$2.createElement(DisabledContext.Provider, {
    value: disabled !== null && disabled !== void 0 ? disabled : originDisabled
  }, children);
};
const DisabledContext$1 = DisabledContext;
const SizeContext = /* @__PURE__ */ React$2.createContext(void 0);
const SizeContextProvider = (_ref) => {
  let {
    children,
    size
  } = _ref;
  const originSize = React$2.useContext(SizeContext);
  return /* @__PURE__ */ React$2.createElement(SizeContext.Provider, {
    value: size || originSize
  }, children);
};
const SizeContext$1 = SizeContext;
function useConfig() {
  const componentDisabled = useContext(DisabledContext$1);
  const componentSize = useContext(SizeContext$1);
  return {
    componentDisabled,
    componentSize
  };
}
function useTheme(theme2, parentTheme) {
  const themeConfig = theme2 || {};
  const parentThemeConfig = themeConfig.inherit === false || !parentTheme ? defaultConfig : parentTheme;
  const mergedTheme = useMemo(() => {
    if (!theme2) {
      return parentTheme;
    }
    const mergedComponents = Object.assign({}, parentThemeConfig.components);
    Object.keys(theme2.components || {}).forEach((componentName) => {
      mergedComponents[componentName] = Object.assign(Object.assign({}, mergedComponents[componentName]), theme2.components[componentName]);
    });
    return Object.assign(Object.assign(Object.assign({}, parentThemeConfig), themeConfig), {
      token: Object.assign(Object.assign({}, parentThemeConfig.token), themeConfig.token),
      components: mergedComponents
    });
  }, [themeConfig, parentThemeConfig], (prev2, next2) => prev2.some((prevTheme, index2) => {
    const nextTheme = next2[index2];
    return !isEqual(prevTheme, nextTheme, true);
  }));
  return mergedTheme;
}
const useStyle$9 = (iconPrefixCls, csp) => {
  const [theme2, token2] = useToken$2();
  return useStyleRegister({
    theme: theme2,
    token: token2,
    hashId: "",
    path: ["ant-design-icons", iconPrefixCls],
    nonce: () => csp === null || csp === void 0 ? void 0 : csp.nonce
  }, () => [{
    [`.${iconPrefixCls}`]: Object.assign(Object.assign({}, resetIcon()), {
      [`.${iconPrefixCls} .${iconPrefixCls}-icon`]: {
        display: "block"
      }
    })
  }]);
};
const useStyle$a = useStyle$9;
var __rest$f = globalThis && globalThis.__rest || function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
let existThemeConfig = false;
process.env.NODE_ENV !== "production" ? (componentName) => {
  process.env.NODE_ENV !== "production" ? warning$2(!existThemeConfig, componentName, `Static function can not consume context like dynamic theme. Please use 'App' component instead.`) : void 0;
} : (
  /* istanbul ignore next */
  null
);
const PASSED_PROPS = ["getTargetContainer", "getPopupContainer", "renderEmpty", "pageHeader", "input", "pagination", "form", "select"];
const defaultPrefixCls = "ant";
let globalPrefixCls;
function getGlobalPrefixCls() {
  return globalPrefixCls || defaultPrefixCls;
}
const setGlobalConfig = (_ref) => {
  let {
    prefixCls,
    iconPrefixCls,
    theme: theme2
  } = _ref;
  if (prefixCls !== void 0) {
    globalPrefixCls = prefixCls;
  }
  if (theme2) {
    registerTheme(getGlobalPrefixCls(), theme2);
  }
};
const ProviderChildren = (props) => {
  const {
    children,
    csp: customCsp,
    autoInsertSpaceInButton,
    form,
    locale: locale2,
    componentSize,
    direction,
    space,
    virtual,
    dropdownMatchSelectWidth,
    legacyLocale,
    parentContext,
    iconPrefixCls: customIconPrefixCls,
    theme: theme2,
    componentDisabled
  } = props;
  const getPrefixCls = React$2.useCallback((suffixCls, customizePrefixCls) => {
    const {
      prefixCls
    } = props;
    if (customizePrefixCls)
      return customizePrefixCls;
    const mergedPrefixCls = prefixCls || parentContext.getPrefixCls("");
    return suffixCls ? `${mergedPrefixCls}-${suffixCls}` : mergedPrefixCls;
  }, [parentContext.getPrefixCls, props.prefixCls]);
  const iconPrefixCls = customIconPrefixCls || parentContext.iconPrefixCls || defaultIconPrefixCls;
  const shouldWrapSSR = iconPrefixCls !== parentContext.iconPrefixCls;
  const csp = customCsp || parentContext.csp;
  const wrapSSR = useStyle$a(iconPrefixCls, csp);
  const mergedTheme = useTheme(theme2, parentContext.theme);
  if (process.env.NODE_ENV !== "production") {
    existThemeConfig = existThemeConfig || !!mergedTheme;
  }
  const baseConfig = {
    csp,
    autoInsertSpaceInButton,
    locale: locale2 || legacyLocale,
    direction,
    space,
    virtual,
    dropdownMatchSelectWidth,
    getPrefixCls,
    iconPrefixCls,
    theme: mergedTheme
  };
  const config = Object.assign({}, parentContext);
  Object.keys(baseConfig).forEach((key) => {
    if (baseConfig[key] !== void 0) {
      config[key] = baseConfig[key];
    }
  });
  PASSED_PROPS.forEach((propName) => {
    const propValue = props[propName];
    if (propValue) {
      config[propName] = propValue;
    }
  });
  const memoedConfig = useMemo(() => config, config, (prevConfig, currentConfig) => {
    const prevKeys = Object.keys(prevConfig);
    const currentKeys = Object.keys(currentConfig);
    return prevKeys.length !== currentKeys.length || prevKeys.some((key) => prevConfig[key] !== currentConfig[key]);
  });
  const memoIconContextValue = React$2.useMemo(() => ({
    prefixCls: iconPrefixCls,
    csp
  }), [iconPrefixCls, csp]);
  let childNode = shouldWrapSSR ? wrapSSR(children) : children;
  const validateMessages = React$2.useMemo(() => {
    var _a, _b, _c;
    return setValues({}, ((_a = defaultLocale.Form) === null || _a === void 0 ? void 0 : _a.defaultValidateMessages) || {}, ((_c = (_b = memoedConfig.locale) === null || _b === void 0 ? void 0 : _b.Form) === null || _c === void 0 ? void 0 : _c.defaultValidateMessages) || {}, (form === null || form === void 0 ? void 0 : form.validateMessages) || {});
  }, [memoedConfig, form === null || form === void 0 ? void 0 : form.validateMessages]);
  if (Object.keys(validateMessages).length > 0) {
    childNode = /* @__PURE__ */ React$2.createElement(FormProvider, {
      validateMessages
    }, children);
  }
  if (locale2) {
    childNode = /* @__PURE__ */ React$2.createElement(LocaleProvider$1, {
      locale: locale2,
      _ANT_MARK__: ANT_MARK
    }, childNode);
  }
  if (iconPrefixCls || csp) {
    childNode = /* @__PURE__ */ React$2.createElement(Context$2.Provider, {
      value: memoIconContextValue
    }, childNode);
  }
  if (componentSize) {
    childNode = /* @__PURE__ */ React$2.createElement(SizeContextProvider, {
      size: componentSize
    }, childNode);
  }
  const memoTheme = React$2.useMemo(() => {
    const _a = mergedTheme || {}, {
      algorithm,
      token: token2
    } = _a, rest = __rest$f(_a, ["algorithm", "token"]);
    const themeObj = algorithm && (!Array.isArray(algorithm) || algorithm.length > 0) ? createTheme(algorithm) : void 0;
    return Object.assign(Object.assign({}, rest), {
      theme: themeObj,
      token: Object.assign(Object.assign({}, seedToken), token2)
    });
  }, [mergedTheme]);
  if (theme2) {
    childNode = /* @__PURE__ */ React$2.createElement(DesignTokenContext.Provider, {
      value: memoTheme
    }, childNode);
  }
  if (componentDisabled !== void 0) {
    childNode = /* @__PURE__ */ React$2.createElement(DisabledContextProvider, {
      disabled: componentDisabled
    }, childNode);
  }
  return /* @__PURE__ */ React$2.createElement(ConfigContext.Provider, {
    value: memoedConfig
  }, childNode);
};
const ConfigProvider = (props) => {
  const context = React$2.useContext(ConfigContext);
  const antLocale = React$2.useContext(LocaleContext$1);
  return /* @__PURE__ */ React$2.createElement(ProviderChildren, Object.assign({
    parentContext: context,
    legacyLocale: antLocale
  }, props));
};
ConfigProvider.ConfigContext = ConfigContext;
ConfigProvider.SizeContext = SizeContext$1;
ConfigProvider.config = setGlobalConfig;
ConfigProvider.useConfig = useConfig;
Object.defineProperty(ConfigProvider, "SizeContext", {
  get: () => {
    process.env.NODE_ENV !== "production" ? warning$2(false, "ConfigProvider", "ConfigProvider.SizeContext is deprecated. Please use `ConfigProvider.useConfig().componentSize` instead.") : void 0;
    return SizeContext$1;
  }
});
if (process.env.NODE_ENV !== "production") {
  ConfigProvider.displayName = "ConfigProvider";
}
const ConfigProvider$1 = ConfigProvider;
var raf = function raf2(callback) {
  return +setTimeout(callback, 16);
};
var caf = function caf2(num) {
  return clearTimeout(num);
};
if (typeof window !== "undefined" && "requestAnimationFrame" in window) {
  raf = function raf3(callback) {
    return window.requestAnimationFrame(callback);
  };
  caf = function caf3(handle) {
    return window.cancelAnimationFrame(handle);
  };
}
var rafUUID = 0;
var rafIds = /* @__PURE__ */ new Map();
function cleanup(id) {
  rafIds.delete(id);
}
var wrapperRaf = function wrapperRaf2(callback) {
  var times = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
  rafUUID += 1;
  var id = rafUUID;
  function callRef(leftTimes) {
    if (leftTimes === 0) {
      cleanup(id);
      callback();
    } else {
      var realId = raf(function() {
        callRef(leftTimes - 1);
      });
      rafIds.set(id, realId);
    }
  }
  callRef(times);
  return id;
};
wrapperRaf.cancel = function(id) {
  var realId = rafIds.get(id);
  cleanup(realId);
  return caf(realId);
};
function addEventListenerWrap(target, eventType, cb, option) {
  var callback = ReactDOM__default.unstable_batchedUpdates ? function run(e) {
    ReactDOM__default.unstable_batchedUpdates(cb, e);
  } : cb;
  if (target.addEventListener) {
    target.addEventListener(eventType, callback, option);
  }
  return {
    remove: function remove() {
      if (target.removeEventListener) {
        target.removeEventListener(eventType, callback, option);
      }
    }
  };
}
function warning2(valid, message) {
  warningOnce(valid, "[@ant-design/icons] ".concat(message));
}
function isIconDefinition(target) {
  return _typeof$3(target) === "object" && typeof target.name === "string" && typeof target.theme === "string" && (_typeof$3(target.icon) === "object" || typeof target.icon === "function");
}
function normalizeAttrs() {
  var attrs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return Object.keys(attrs).reduce(function(acc, key) {
    var val = attrs[key];
    switch (key) {
      case "class":
        acc.className = val;
        delete acc.class;
        break;
      default:
        acc[key] = val;
    }
    return acc;
  }, {});
}
function generate(node2, key, rootProps) {
  if (!rootProps) {
    return /* @__PURE__ */ React__default.createElement(node2.tag, _objectSpread2$1({
      key
    }, normalizeAttrs(node2.attrs)), (node2.children || []).map(function(child, index2) {
      return generate(child, "".concat(key, "-").concat(node2.tag, "-").concat(index2));
    }));
  }
  return /* @__PURE__ */ React__default.createElement(node2.tag, _objectSpread2$1(_objectSpread2$1({
    key
  }, normalizeAttrs(node2.attrs)), rootProps), (node2.children || []).map(function(child, index2) {
    return generate(child, "".concat(key, "-").concat(node2.tag, "-").concat(index2));
  }));
}
function getSecondaryColor(primaryColor) {
  return generate$1(primaryColor)[0];
}
function normalizeTwoToneColors(twoToneColor) {
  if (!twoToneColor) {
    return [];
  }
  return Array.isArray(twoToneColor) ? twoToneColor : [twoToneColor];
}
var svgBaseProps = {
  width: "1em",
  height: "1em",
  fill: "currentColor",
  "aria-hidden": "true",
  focusable: "false"
};
var iconStyles = "\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n";
var useInsertStyles = function useInsertStyles2() {
  var styleStr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : iconStyles;
  var _useContext = useContext(Context$2), csp = _useContext.csp, prefixCls = _useContext.prefixCls;
  var mergedStyleStr = styleStr;
  if (prefixCls) {
    mergedStyleStr = mergedStyleStr.replace(/anticon/g, prefixCls);
  }
  useEffect(function() {
    updateCSS(mergedStyleStr, "@ant-design-icons", {
      prepend: true,
      csp
    });
  }, []);
};
var _excluded$p = ["icon", "className", "onClick", "style", "primaryColor", "secondaryColor"];
var twoToneColorPalette = {
  primaryColor: "#333",
  secondaryColor: "#E6E6E6",
  calculated: false
};
function setTwoToneColors(_ref) {
  var primaryColor = _ref.primaryColor, secondaryColor = _ref.secondaryColor;
  twoToneColorPalette.primaryColor = primaryColor;
  twoToneColorPalette.secondaryColor = secondaryColor || getSecondaryColor(primaryColor);
  twoToneColorPalette.calculated = !!secondaryColor;
}
function getTwoToneColors() {
  return _objectSpread2$1({}, twoToneColorPalette);
}
var IconBase = function IconBase2(props) {
  var icon = props.icon, className = props.className, onClick = props.onClick, style2 = props.style, primaryColor = props.primaryColor, secondaryColor = props.secondaryColor, restProps = _objectWithoutProperties(props, _excluded$p);
  var colors = twoToneColorPalette;
  if (primaryColor) {
    colors = {
      primaryColor,
      secondaryColor: secondaryColor || getSecondaryColor(primaryColor)
    };
  }
  useInsertStyles();
  warning2(isIconDefinition(icon), "icon should be icon definiton, but got ".concat(icon));
  if (!isIconDefinition(icon)) {
    return null;
  }
  var target = icon;
  if (target && typeof target.icon === "function") {
    target = _objectSpread2$1(_objectSpread2$1({}, target), {}, {
      icon: target.icon(colors.primaryColor, colors.secondaryColor)
    });
  }
  return generate(target.icon, "svg-".concat(target.name), _objectSpread2$1({
    className,
    onClick,
    style: style2,
    "data-icon": target.name,
    width: "1em",
    height: "1em",
    fill: "currentColor",
    "aria-hidden": "true"
  }, restProps));
};
IconBase.displayName = "IconReact";
IconBase.getTwoToneColors = getTwoToneColors;
IconBase.setTwoToneColors = setTwoToneColors;
const ReactIcon = IconBase;
function setTwoToneColor(twoToneColor) {
  var _normalizeTwoToneColo = normalizeTwoToneColors(twoToneColor), _normalizeTwoToneColo2 = _slicedToArray$1(_normalizeTwoToneColo, 2), primaryColor = _normalizeTwoToneColo2[0], secondaryColor = _normalizeTwoToneColo2[1];
  return ReactIcon.setTwoToneColors({
    primaryColor,
    secondaryColor
  });
}
function getTwoToneColor() {
  var colors = ReactIcon.getTwoToneColors();
  if (!colors.calculated) {
    return colors.primaryColor;
  }
  return [colors.primaryColor, colors.secondaryColor];
}
var _excluded$o = ["className", "icon", "spin", "rotate", "tabIndex", "onClick", "twoToneColor"];
setTwoToneColor("#1890ff");
var Icon$3 = /* @__PURE__ */ React$2.forwardRef(function(props, ref) {
  var _classNames;
  var className = props.className, icon = props.icon, spin = props.spin, rotate = props.rotate, tabIndex = props.tabIndex, onClick = props.onClick, twoToneColor = props.twoToneColor, restProps = _objectWithoutProperties(props, _excluded$o);
  var _React$useContext = React$2.useContext(Context$2), _React$useContext$pre = _React$useContext.prefixCls, prefixCls = _React$useContext$pre === void 0 ? "anticon" : _React$useContext$pre, rootClassName = _React$useContext.rootClassName;
  var classString = classNames(rootClassName, prefixCls, (_classNames = {}, _defineProperty$3(_classNames, "".concat(prefixCls, "-").concat(icon.name), !!icon.name), _defineProperty$3(_classNames, "".concat(prefixCls, "-spin"), !!spin || icon.name === "loading"), _classNames), className);
  var iconTabIndex = tabIndex;
  if (iconTabIndex === void 0 && onClick) {
    iconTabIndex = -1;
  }
  var svgStyle = rotate ? {
    msTransform: "rotate(".concat(rotate, "deg)"),
    transform: "rotate(".concat(rotate, "deg)")
  } : void 0;
  var _normalizeTwoToneColo = normalizeTwoToneColors(twoToneColor), _normalizeTwoToneColo2 = _slicedToArray$1(_normalizeTwoToneColo, 2), primaryColor = _normalizeTwoToneColo2[0], secondaryColor = _normalizeTwoToneColo2[1];
  return /* @__PURE__ */ React$2.createElement("span", _objectSpread2$1(_objectSpread2$1({
    role: "img",
    "aria-label": icon.name
  }, restProps), {}, {
    ref,
    tabIndex: iconTabIndex,
    onClick,
    className: classString
  }), /* @__PURE__ */ React$2.createElement(ReactIcon, {
    icon,
    primaryColor,
    secondaryColor,
    style: svgStyle
  }));
});
Icon$3.displayName = "AntdIcon";
Icon$3.getTwoToneColor = getTwoToneColor;
Icon$3.setTwoToneColor = setTwoToneColor;
const AntdIcon = Icon$3;
var CloseCircleFilled$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z" } }] }, "name": "close-circle", "theme": "filled" };
const CloseCircleFilledSvg = CloseCircleFilled$2;
var CloseCircleFilled = function CloseCircleFilled2(props, ref) {
  return /* @__PURE__ */ React$2.createElement(AntdIcon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
    ref,
    icon: CloseCircleFilledSvg
  }));
};
CloseCircleFilled.displayName = "CloseCircleFilled";
const CloseCircleFilled$1 = /* @__PURE__ */ React$2.forwardRef(CloseCircleFilled);
var CloseOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z" } }] }, "name": "close", "theme": "outlined" };
const CloseOutlinedSvg = CloseOutlined$2;
var CloseOutlined = function CloseOutlined2(props, ref) {
  return /* @__PURE__ */ React$2.createElement(AntdIcon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
    ref,
    icon: CloseOutlinedSvg
  }));
};
CloseOutlined.displayName = "CloseOutlined";
const CloseOutlined$1 = /* @__PURE__ */ React$2.forwardRef(CloseOutlined);
var Context = /* @__PURE__ */ React$2.createContext({});
var DomWrapper = /* @__PURE__ */ function(_React$Component) {
  _inherits$1(DomWrapper2, _React$Component);
  var _super = _createSuper$1(DomWrapper2);
  function DomWrapper2() {
    _classCallCheck$1(this, DomWrapper2);
    return _super.apply(this, arguments);
  }
  _createClass$1(DomWrapper2, [{
    key: "render",
    value: function render2() {
      return this.props.children;
    }
  }]);
  return DomWrapper2;
}(React$2.Component);
function useSafeState(defaultValue) {
  var destroyRef = React$2.useRef(false);
  var _React$useState = React$2.useState(defaultValue), _React$useState2 = _slicedToArray$1(_React$useState, 2), value = _React$useState2[0], setValue = _React$useState2[1];
  React$2.useEffect(function() {
    destroyRef.current = false;
    return function() {
      destroyRef.current = true;
    };
  }, []);
  function safeSetState(updater, ignoreDestroy) {
    if (ignoreDestroy && destroyRef.current) {
      return;
    }
    setValue(updater);
  }
  return [value, safeSetState];
}
var STATUS_NONE = "none";
var STATUS_APPEAR = "appear";
var STATUS_ENTER = "enter";
var STATUS_LEAVE = "leave";
var STEP_NONE = "none";
var STEP_PREPARE = "prepare";
var STEP_START = "start";
var STEP_ACTIVE = "active";
var STEP_ACTIVATED = "end";
var STEP_PREPARED = "prepared";
function makePrefixMap(styleProp, eventName) {
  var prefixes2 = {};
  prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes2["Webkit".concat(styleProp)] = "webkit".concat(eventName);
  prefixes2["Moz".concat(styleProp)] = "moz".concat(eventName);
  prefixes2["ms".concat(styleProp)] = "MS".concat(eventName);
  prefixes2["O".concat(styleProp)] = "o".concat(eventName.toLowerCase());
  return prefixes2;
}
function getVendorPrefixes(domSupport, win) {
  var prefixes2 = {
    animationend: makePrefixMap("Animation", "AnimationEnd"),
    transitionend: makePrefixMap("Transition", "TransitionEnd")
  };
  if (domSupport) {
    if (!("AnimationEvent" in win)) {
      delete prefixes2.animationend.animation;
    }
    if (!("TransitionEvent" in win)) {
      delete prefixes2.transitionend.transition;
    }
  }
  return prefixes2;
}
var vendorPrefixes = getVendorPrefixes(canUseDom(), typeof window !== "undefined" ? window : {});
var style = {};
if (canUseDom()) {
  var _document$createEleme = document.createElement("div");
  style = _document$createEleme.style;
}
var prefixedEventNames = {};
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  }
  var prefixMap = vendorPrefixes[eventName];
  if (prefixMap) {
    var stylePropList = Object.keys(prefixMap);
    var len = stylePropList.length;
    for (var i = 0; i < len; i += 1) {
      var styleProp = stylePropList[i];
      if (Object.prototype.hasOwnProperty.call(prefixMap, styleProp) && styleProp in style) {
        prefixedEventNames[eventName] = prefixMap[styleProp];
        return prefixedEventNames[eventName];
      }
    }
  }
  return "";
}
var internalAnimationEndName = getVendorPrefixedEventName("animationend");
var internalTransitionEndName = getVendorPrefixedEventName("transitionend");
var supportTransition = !!(internalAnimationEndName && internalTransitionEndName);
var animationEndName = internalAnimationEndName || "animationend";
var transitionEndName = internalTransitionEndName || "transitionend";
function getTransitionName$2(transitionName, transitionType) {
  if (!transitionName)
    return null;
  if (_typeof$3(transitionName) === "object") {
    var type4 = transitionType.replace(/-\w/g, function(match2) {
      return match2[1].toUpperCase();
    });
    return transitionName[type4];
  }
  return "".concat(transitionName, "-").concat(transitionType);
}
const useDomMotionEvents = function(callback) {
  var cacheElementRef = useRef();
  var callbackRef = useRef(callback);
  callbackRef.current = callback;
  var onInternalMotionEnd = React$2.useCallback(function(event) {
    callbackRef.current(event);
  }, []);
  function removeMotionEvents(element) {
    if (element) {
      element.removeEventListener(transitionEndName, onInternalMotionEnd);
      element.removeEventListener(animationEndName, onInternalMotionEnd);
    }
  }
  function patchMotionEvents(element) {
    if (cacheElementRef.current && cacheElementRef.current !== element) {
      removeMotionEvents(cacheElementRef.current);
    }
    if (element && element !== cacheElementRef.current) {
      element.addEventListener(transitionEndName, onInternalMotionEnd);
      element.addEventListener(animationEndName, onInternalMotionEnd);
      cacheElementRef.current = element;
    }
  }
  React$2.useEffect(function() {
    return function() {
      removeMotionEvents(cacheElementRef.current);
    };
  }, []);
  return [patchMotionEvents, removeMotionEvents];
};
var useIsomorphicLayoutEffect = canUseDom() ? useLayoutEffect$2 : useEffect;
const useNextFrame = function() {
  var nextFrameRef = React$2.useRef(null);
  function cancelNextFrame() {
    wrapperRaf.cancel(nextFrameRef.current);
  }
  function nextFrame(callback) {
    var delay = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2;
    cancelNextFrame();
    var nextFrameId = wrapperRaf(function() {
      if (delay <= 1) {
        callback({
          isCanceled: function isCanceled() {
            return nextFrameId !== nextFrameRef.current;
          }
        });
      } else {
        nextFrame(callback, delay - 1);
      }
    });
    nextFrameRef.current = nextFrameId;
  }
  React$2.useEffect(function() {
    return function() {
      cancelNextFrame();
    };
  }, []);
  return [nextFrame, cancelNextFrame];
};
var FULL_STEP_QUEUE = [STEP_PREPARE, STEP_START, STEP_ACTIVE, STEP_ACTIVATED];
var SIMPLE_STEP_QUEUE = [STEP_PREPARE, STEP_PREPARED];
var SkipStep = false;
var DoStep = true;
function isActive(step) {
  return step === STEP_ACTIVE || step === STEP_ACTIVATED;
}
const useStepQueue = function(status, prepareOnly, callback) {
  var _useState = useSafeState(STEP_NONE), _useState2 = _slicedToArray$1(_useState, 2), step = _useState2[0], setStep = _useState2[1];
  var _useNextFrame = useNextFrame(), _useNextFrame2 = _slicedToArray$1(_useNextFrame, 2), nextFrame = _useNextFrame2[0], cancelNextFrame = _useNextFrame2[1];
  function startQueue() {
    setStep(STEP_PREPARE, true);
  }
  var STEP_QUEUE = prepareOnly ? SIMPLE_STEP_QUEUE : FULL_STEP_QUEUE;
  useIsomorphicLayoutEffect(function() {
    if (step !== STEP_NONE && step !== STEP_ACTIVATED) {
      var index2 = STEP_QUEUE.indexOf(step);
      var nextStep = STEP_QUEUE[index2 + 1];
      var result = callback(step);
      if (result === SkipStep) {
        setStep(nextStep, true);
      } else if (nextStep) {
        nextFrame(function(info) {
          function doNext() {
            if (info.isCanceled())
              return;
            setStep(nextStep, true);
          }
          if (result === true) {
            doNext();
          } else {
            Promise.resolve(result).then(doNext);
          }
        });
      }
    }
  }, [status, step]);
  React$2.useEffect(function() {
    return function() {
      cancelNextFrame();
    };
  }, []);
  return [startQueue, step];
};
function useStatus(supportMotion, visible, getElement2, _ref) {
  var _ref$motionEnter = _ref.motionEnter, motionEnter = _ref$motionEnter === void 0 ? true : _ref$motionEnter, _ref$motionAppear = _ref.motionAppear, motionAppear = _ref$motionAppear === void 0 ? true : _ref$motionAppear, _ref$motionLeave = _ref.motionLeave, motionLeave = _ref$motionLeave === void 0 ? true : _ref$motionLeave, motionDeadline = _ref.motionDeadline, motionLeaveImmediately = _ref.motionLeaveImmediately, onAppearPrepare = _ref.onAppearPrepare, onEnterPrepare = _ref.onEnterPrepare, onLeavePrepare = _ref.onLeavePrepare, onAppearStart = _ref.onAppearStart, onEnterStart = _ref.onEnterStart, onLeaveStart = _ref.onLeaveStart, onAppearActive = _ref.onAppearActive, onEnterActive = _ref.onEnterActive, onLeaveActive = _ref.onLeaveActive, onAppearEnd = _ref.onAppearEnd, onEnterEnd = _ref.onEnterEnd, onLeaveEnd = _ref.onLeaveEnd, onVisibleChanged = _ref.onVisibleChanged;
  var _useState = useSafeState(), _useState2 = _slicedToArray$1(_useState, 2), asyncVisible = _useState2[0], setAsyncVisible = _useState2[1];
  var _useState3 = useSafeState(STATUS_NONE), _useState4 = _slicedToArray$1(_useState3, 2), status = _useState4[0], setStatus = _useState4[1];
  var _useState5 = useSafeState(null), _useState6 = _slicedToArray$1(_useState5, 2), style2 = _useState6[0], setStyle = _useState6[1];
  var mountedRef = useRef(false);
  var deadlineRef = useRef(null);
  function getDomElement() {
    return getElement2();
  }
  var activeRef = useRef(false);
  function updateMotionEndStatus() {
    setStatus(STATUS_NONE, true);
    setStyle(null, true);
  }
  function onInternalMotionEnd(event) {
    var element = getDomElement();
    if (event && !event.deadline && event.target !== element) {
      return;
    }
    var currentActive = activeRef.current;
    var canEnd;
    if (status === STATUS_APPEAR && currentActive) {
      canEnd = onAppearEnd === null || onAppearEnd === void 0 ? void 0 : onAppearEnd(element, event);
    } else if (status === STATUS_ENTER && currentActive) {
      canEnd = onEnterEnd === null || onEnterEnd === void 0 ? void 0 : onEnterEnd(element, event);
    } else if (status === STATUS_LEAVE && currentActive) {
      canEnd = onLeaveEnd === null || onLeaveEnd === void 0 ? void 0 : onLeaveEnd(element, event);
    }
    if (status !== STATUS_NONE && currentActive && canEnd !== false) {
      updateMotionEndStatus();
    }
  }
  var _useDomMotionEvents = useDomMotionEvents(onInternalMotionEnd), _useDomMotionEvents2 = _slicedToArray$1(_useDomMotionEvents, 1), patchMotionEvents = _useDomMotionEvents2[0];
  var getEventHandlers = function getEventHandlers2(targetStatus) {
    var _ref2, _ref3, _ref4;
    switch (targetStatus) {
      case STATUS_APPEAR:
        return _ref2 = {}, _defineProperty$3(_ref2, STEP_PREPARE, onAppearPrepare), _defineProperty$3(_ref2, STEP_START, onAppearStart), _defineProperty$3(_ref2, STEP_ACTIVE, onAppearActive), _ref2;
      case STATUS_ENTER:
        return _ref3 = {}, _defineProperty$3(_ref3, STEP_PREPARE, onEnterPrepare), _defineProperty$3(_ref3, STEP_START, onEnterStart), _defineProperty$3(_ref3, STEP_ACTIVE, onEnterActive), _ref3;
      case STATUS_LEAVE:
        return _ref4 = {}, _defineProperty$3(_ref4, STEP_PREPARE, onLeavePrepare), _defineProperty$3(_ref4, STEP_START, onLeaveStart), _defineProperty$3(_ref4, STEP_ACTIVE, onLeaveActive), _ref4;
      default:
        return {};
    }
  };
  var eventHandlers = React$2.useMemo(function() {
    return getEventHandlers(status);
  }, [status]);
  var _useStepQueue = useStepQueue(status, !supportMotion, function(newStep) {
    if (newStep === STEP_PREPARE) {
      var onPrepare = eventHandlers[STEP_PREPARE];
      if (!onPrepare) {
        return SkipStep;
      }
      return onPrepare(getDomElement());
    }
    if (step in eventHandlers) {
      var _eventHandlers$step;
      setStyle(((_eventHandlers$step = eventHandlers[step]) === null || _eventHandlers$step === void 0 ? void 0 : _eventHandlers$step.call(eventHandlers, getDomElement(), null)) || null);
    }
    if (step === STEP_ACTIVE) {
      patchMotionEvents(getDomElement());
      if (motionDeadline > 0) {
        clearTimeout(deadlineRef.current);
        deadlineRef.current = setTimeout(function() {
          onInternalMotionEnd({
            deadline: true
          });
        }, motionDeadline);
      }
    }
    if (step === STEP_PREPARED) {
      updateMotionEndStatus();
    }
    return DoStep;
  }), _useStepQueue2 = _slicedToArray$1(_useStepQueue, 2), startStep = _useStepQueue2[0], step = _useStepQueue2[1];
  var active = isActive(step);
  activeRef.current = active;
  useIsomorphicLayoutEffect(function() {
    setAsyncVisible(visible);
    var isMounted = mountedRef.current;
    mountedRef.current = true;
    var nextStatus;
    if (!isMounted && visible && motionAppear) {
      nextStatus = STATUS_APPEAR;
    }
    if (isMounted && visible && motionEnter) {
      nextStatus = STATUS_ENTER;
    }
    if (isMounted && !visible && motionLeave || !isMounted && motionLeaveImmediately && !visible && motionLeave) {
      nextStatus = STATUS_LEAVE;
    }
    var nextEventHandlers = getEventHandlers(nextStatus);
    if (nextStatus && (supportMotion || nextEventHandlers[STEP_PREPARE])) {
      setStatus(nextStatus);
      startStep();
    } else {
      setStatus(STATUS_NONE);
    }
  }, [visible]);
  useEffect(function() {
    if (
      // Cancel appear
      status === STATUS_APPEAR && !motionAppear || // Cancel enter
      status === STATUS_ENTER && !motionEnter || // Cancel leave
      status === STATUS_LEAVE && !motionLeave
    ) {
      setStatus(STATUS_NONE);
    }
  }, [motionAppear, motionEnter, motionLeave]);
  useEffect(function() {
    return function() {
      mountedRef.current = false;
      clearTimeout(deadlineRef.current);
    };
  }, []);
  var firstMountChangeRef = React$2.useRef(false);
  useEffect(function() {
    if (asyncVisible) {
      firstMountChangeRef.current = true;
    }
    if (asyncVisible !== void 0 && status === STATUS_NONE) {
      if (firstMountChangeRef.current || asyncVisible) {
        onVisibleChanged === null || onVisibleChanged === void 0 ? void 0 : onVisibleChanged(asyncVisible);
      }
      firstMountChangeRef.current = true;
    }
  }, [asyncVisible, status]);
  var mergedStyle = style2;
  if (eventHandlers[STEP_PREPARE] && step === STEP_START) {
    mergedStyle = _objectSpread2$1({
      transition: "none"
    }, mergedStyle);
  }
  return [status, step, mergedStyle, asyncVisible !== null && asyncVisible !== void 0 ? asyncVisible : visible];
}
function genCSSMotion(config) {
  var transitionSupport = config;
  if (_typeof$3(config) === "object") {
    transitionSupport = config.transitionSupport;
  }
  function isSupportTransition(props, contextMotion) {
    return !!(props.motionName && transitionSupport && contextMotion !== false);
  }
  var CSSMotion2 = /* @__PURE__ */ React$2.forwardRef(function(props, ref) {
    var _props$visible = props.visible, visible = _props$visible === void 0 ? true : _props$visible, _props$removeOnLeave = props.removeOnLeave, removeOnLeave = _props$removeOnLeave === void 0 ? true : _props$removeOnLeave, forceRender = props.forceRender, children = props.children, motionName = props.motionName, leavedClassName = props.leavedClassName, eventProps = props.eventProps;
    var _React$useContext = React$2.useContext(Context), contextMotion = _React$useContext.motion;
    var supportMotion = isSupportTransition(props, contextMotion);
    var nodeRef = useRef();
    var wrapperNodeRef = useRef();
    function getDomElement() {
      try {
        return nodeRef.current instanceof HTMLElement ? nodeRef.current : findDOMNode$1(wrapperNodeRef.current);
      } catch (e) {
        return null;
      }
    }
    var _useStatus = useStatus(supportMotion, visible, getDomElement, props), _useStatus2 = _slicedToArray$1(_useStatus, 4), status = _useStatus2[0], statusStep = _useStatus2[1], statusStyle = _useStatus2[2], mergedVisible = _useStatus2[3];
    var renderedRef = React$2.useRef(mergedVisible);
    if (mergedVisible) {
      renderedRef.current = true;
    }
    var setNodeRef = React$2.useCallback(function(node2) {
      nodeRef.current = node2;
      fillRef(ref, node2);
    }, [ref]);
    var motionChildren;
    var mergedProps = _objectSpread2$1(_objectSpread2$1({}, eventProps), {}, {
      visible
    });
    if (!children) {
      motionChildren = null;
    } else if (status === STATUS_NONE) {
      if (mergedVisible) {
        motionChildren = children(_objectSpread2$1({}, mergedProps), setNodeRef);
      } else if (!removeOnLeave && renderedRef.current && leavedClassName) {
        motionChildren = children(_objectSpread2$1(_objectSpread2$1({}, mergedProps), {}, {
          className: leavedClassName
        }), setNodeRef);
      } else if (forceRender || !removeOnLeave && !leavedClassName) {
        motionChildren = children(_objectSpread2$1(_objectSpread2$1({}, mergedProps), {}, {
          style: {
            display: "none"
          }
        }), setNodeRef);
      } else {
        motionChildren = null;
      }
    } else {
      var _classNames;
      var statusSuffix;
      if (statusStep === STEP_PREPARE) {
        statusSuffix = "prepare";
      } else if (isActive(statusStep)) {
        statusSuffix = "active";
      } else if (statusStep === STEP_START) {
        statusSuffix = "start";
      }
      var motionCls = getTransitionName$2(motionName, "".concat(status, "-").concat(statusSuffix));
      motionChildren = children(_objectSpread2$1(_objectSpread2$1({}, mergedProps), {}, {
        className: classNames(getTransitionName$2(motionName, status), (_classNames = {}, _defineProperty$3(_classNames, motionCls, motionCls && statusSuffix), _defineProperty$3(_classNames, motionName, typeof motionName === "string"), _classNames)),
        style: statusStyle
      }), setNodeRef);
    }
    if (/* @__PURE__ */ React$2.isValidElement(motionChildren) && supportRef(motionChildren)) {
      var _ref = motionChildren, originNodeRef = _ref.ref;
      if (!originNodeRef) {
        motionChildren = /* @__PURE__ */ React$2.cloneElement(motionChildren, {
          ref: setNodeRef
        });
      }
    }
    return /* @__PURE__ */ React$2.createElement(DomWrapper, {
      ref: wrapperNodeRef
    }, motionChildren);
  });
  CSSMotion2.displayName = "CSSMotion";
  return CSSMotion2;
}
const CSSMotion = genCSSMotion(supportTransition);
var STATUS_ADD = "add";
var STATUS_KEEP = "keep";
var STATUS_REMOVE = "remove";
var STATUS_REMOVED = "removed";
function wrapKeyToObject(key) {
  var keyObj;
  if (key && _typeof$3(key) === "object" && "key" in key) {
    keyObj = key;
  } else {
    keyObj = {
      key
    };
  }
  return _objectSpread2$1(_objectSpread2$1({}, keyObj), {}, {
    key: String(keyObj.key)
  });
}
function parseKeys() {
  var keys = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  return keys.map(wrapKeyToObject);
}
function diffKeys() {
  var prevKeys = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var currentKeys = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  var list = [];
  var currentIndex = 0;
  var currentLen = currentKeys.length;
  var prevKeyObjects = parseKeys(prevKeys);
  var currentKeyObjects = parseKeys(currentKeys);
  prevKeyObjects.forEach(function(keyObj) {
    var hit = false;
    for (var i = currentIndex; i < currentLen; i += 1) {
      var currentKeyObj = currentKeyObjects[i];
      if (currentKeyObj.key === keyObj.key) {
        if (currentIndex < i) {
          list = list.concat(currentKeyObjects.slice(currentIndex, i).map(function(obj) {
            return _objectSpread2$1(_objectSpread2$1({}, obj), {}, {
              status: STATUS_ADD
            });
          }));
          currentIndex = i;
        }
        list.push(_objectSpread2$1(_objectSpread2$1({}, currentKeyObj), {}, {
          status: STATUS_KEEP
        }));
        currentIndex += 1;
        hit = true;
        break;
      }
    }
    if (!hit) {
      list.push(_objectSpread2$1(_objectSpread2$1({}, keyObj), {}, {
        status: STATUS_REMOVE
      }));
    }
  });
  if (currentIndex < currentLen) {
    list = list.concat(currentKeyObjects.slice(currentIndex).map(function(obj) {
      return _objectSpread2$1(_objectSpread2$1({}, obj), {}, {
        status: STATUS_ADD
      });
    }));
  }
  var keys = {};
  list.forEach(function(_ref) {
    var key = _ref.key;
    keys[key] = (keys[key] || 0) + 1;
  });
  var duplicatedKeys = Object.keys(keys).filter(function(key) {
    return keys[key] > 1;
  });
  duplicatedKeys.forEach(function(matchKey) {
    list = list.filter(function(_ref2) {
      var key = _ref2.key, status = _ref2.status;
      return key !== matchKey || status !== STATUS_REMOVE;
    });
    list.forEach(function(node2) {
      if (node2.key === matchKey) {
        node2.status = STATUS_KEEP;
      }
    });
  });
  return list;
}
var _excluded$n = ["component", "children", "onVisibleChanged", "onAllRemoved"], _excluded2$5 = ["status"];
var MOTION_PROP_NAMES = ["eventProps", "visible", "children", "motionName", "motionAppear", "motionEnter", "motionLeave", "motionLeaveImmediately", "motionDeadline", "removeOnLeave", "leavedClassName", "onAppearStart", "onAppearActive", "onAppearEnd", "onEnterStart", "onEnterActive", "onEnterEnd", "onLeaveStart", "onLeaveActive", "onLeaveEnd"];
function genCSSMotionList(transitionSupport) {
  var CSSMotion$1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : CSSMotion;
  var CSSMotionList = /* @__PURE__ */ function(_React$Component) {
    _inherits$1(CSSMotionList2, _React$Component);
    var _super = _createSuper$1(CSSMotionList2);
    function CSSMotionList2() {
      var _this;
      _classCallCheck$1(this, CSSMotionList2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _defineProperty$3(_assertThisInitialized$1(_this), "state", {
        keyEntities: []
      });
      _defineProperty$3(_assertThisInitialized$1(_this), "removeKey", function(removeKey) {
        var keyEntities = _this.state.keyEntities;
        var nextKeyEntities = keyEntities.map(function(entity) {
          if (entity.key !== removeKey)
            return entity;
          return _objectSpread2$1(_objectSpread2$1({}, entity), {}, {
            status: STATUS_REMOVED
          });
        });
        _this.setState({
          keyEntities: nextKeyEntities
        });
        return nextKeyEntities.filter(function(_ref) {
          var status = _ref.status;
          return status !== STATUS_REMOVED;
        }).length;
      });
      return _this;
    }
    _createClass$1(CSSMotionList2, [{
      key: "render",
      value: function render2() {
        var _this2 = this;
        var keyEntities = this.state.keyEntities;
        var _this$props = this.props, component = _this$props.component, children = _this$props.children, _onVisibleChanged = _this$props.onVisibleChanged, onAllRemoved = _this$props.onAllRemoved, restProps = _objectWithoutProperties(_this$props, _excluded$n);
        var Component = component || React$2.Fragment;
        var motionProps = {};
        MOTION_PROP_NAMES.forEach(function(prop) {
          motionProps[prop] = restProps[prop];
          delete restProps[prop];
        });
        delete restProps.keys;
        return /* @__PURE__ */ React$2.createElement(Component, restProps, keyEntities.map(function(_ref2) {
          var status = _ref2.status, eventProps = _objectWithoutProperties(_ref2, _excluded2$5);
          var visible = status === STATUS_ADD || status === STATUS_KEEP;
          return /* @__PURE__ */ React$2.createElement(CSSMotion$1, _extends$1({}, motionProps, {
            key: eventProps.key,
            visible,
            eventProps,
            onVisibleChanged: function onVisibleChanged(changedVisible) {
              _onVisibleChanged === null || _onVisibleChanged === void 0 ? void 0 : _onVisibleChanged(changedVisible, {
                key: eventProps.key
              });
              if (!changedVisible) {
                var restKeysCount = _this2.removeKey(eventProps.key);
                if (restKeysCount === 0 && onAllRemoved) {
                  onAllRemoved();
                }
              }
            }
          }), children);
        }));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(_ref3, _ref4) {
        var keys = _ref3.keys;
        var keyEntities = _ref4.keyEntities;
        var parsedKeyObjects = parseKeys(keys);
        var mixedKeyEntities = diffKeys(keyEntities, parsedKeyObjects);
        return {
          keyEntities: mixedKeyEntities.filter(function(entity) {
            var prevEntity = keyEntities.find(function(_ref5) {
              var key = _ref5.key;
              return entity.key === key;
            });
            if (prevEntity && prevEntity.status === STATUS_REMOVED && entity.status === STATUS_REMOVE) {
              return false;
            }
            return true;
          })
        };
      }
      // ZombieJ: Return the count of rest keys. It's safe to refactor if need more info.
    }]);
    return CSSMotionList2;
  }(React$2.Component);
  _defineProperty$3(CSSMotionList, "defaultProps", {
    component: "div"
  });
  return CSSMotionList;
}
genCSSMotionList(supportTransition);
const {
  isValidElement
} = React$2;
function isFragment(child) {
  return child && isValidElement(child) && child.type === React$2.Fragment;
}
function replaceElement(element, replacement, props) {
  if (!isValidElement(element)) {
    return replacement;
  }
  return /* @__PURE__ */ React$2.cloneElement(element, typeof props === "function" ? props(element.props || {}) : props);
}
function cloneElement(element, props) {
  return replaceElement(element, element, props);
}
function useEvent(callback) {
  var fnRef = React$2.useRef();
  fnRef.current = callback;
  var memoFn = React$2.useCallback(function() {
    var _fnRef$current;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return (_fnRef$current = fnRef.current) === null || _fnRef$current === void 0 ? void 0 : _fnRef$current.call.apply(_fnRef$current, [fnRef].concat(args));
  }, []);
  return memoFn;
}
var KeyCode = {
  /**
   * MAC_ENTER
   */
  MAC_ENTER: 3,
  /**
   * BACKSPACE
   */
  BACKSPACE: 8,
  /**
   * TAB
   */
  TAB: 9,
  /**
   * NUMLOCK on FF/Safari Mac
   */
  NUM_CENTER: 12,
  // NUMLOCK on FF/Safari Mac
  /**
   * ENTER
   */
  ENTER: 13,
  /**
   * SHIFT
   */
  SHIFT: 16,
  /**
   * CTRL
   */
  CTRL: 17,
  /**
   * ALT
   */
  ALT: 18,
  /**
   * PAUSE
   */
  PAUSE: 19,
  /**
   * CAPS_LOCK
   */
  CAPS_LOCK: 20,
  /**
   * ESC
   */
  ESC: 27,
  /**
   * SPACE
   */
  SPACE: 32,
  /**
   * PAGE_UP
   */
  PAGE_UP: 33,
  // also NUM_NORTH_EAST
  /**
   * PAGE_DOWN
   */
  PAGE_DOWN: 34,
  // also NUM_SOUTH_EAST
  /**
   * END
   */
  END: 35,
  // also NUM_SOUTH_WEST
  /**
   * HOME
   */
  HOME: 36,
  // also NUM_NORTH_WEST
  /**
   * LEFT
   */
  LEFT: 37,
  // also NUM_WEST
  /**
   * UP
   */
  UP: 38,
  // also NUM_NORTH
  /**
   * RIGHT
   */
  RIGHT: 39,
  // also NUM_EAST
  /**
   * DOWN
   */
  DOWN: 40,
  // also NUM_SOUTH
  /**
   * PRINT_SCREEN
   */
  PRINT_SCREEN: 44,
  /**
   * INSERT
   */
  INSERT: 45,
  // also NUM_INSERT
  /**
   * DELETE
   */
  DELETE: 46,
  // also NUM_DELETE
  /**
   * ZERO
   */
  ZERO: 48,
  /**
   * ONE
   */
  ONE: 49,
  /**
   * TWO
   */
  TWO: 50,
  /**
   * THREE
   */
  THREE: 51,
  /**
   * FOUR
   */
  FOUR: 52,
  /**
   * FIVE
   */
  FIVE: 53,
  /**
   * SIX
   */
  SIX: 54,
  /**
   * SEVEN
   */
  SEVEN: 55,
  /**
   * EIGHT
   */
  EIGHT: 56,
  /**
   * NINE
   */
  NINE: 57,
  /**
   * QUESTION_MARK
   */
  QUESTION_MARK: 63,
  // needs localization
  /**
   * A
   */
  A: 65,
  /**
   * B
   */
  B: 66,
  /**
   * C
   */
  C: 67,
  /**
   * D
   */
  D: 68,
  /**
   * E
   */
  E: 69,
  /**
   * F
   */
  F: 70,
  /**
   * G
   */
  G: 71,
  /**
   * H
   */
  H: 72,
  /**
   * I
   */
  I: 73,
  /**
   * J
   */
  J: 74,
  /**
   * K
   */
  K: 75,
  /**
   * L
   */
  L: 76,
  /**
   * M
   */
  M: 77,
  /**
   * N
   */
  N: 78,
  /**
   * O
   */
  O: 79,
  /**
   * P
   */
  P: 80,
  /**
   * Q
   */
  Q: 81,
  /**
   * R
   */
  R: 82,
  /**
   * S
   */
  S: 83,
  /**
   * T
   */
  T: 84,
  /**
   * U
   */
  U: 85,
  /**
   * V
   */
  V: 86,
  /**
   * W
   */
  W: 87,
  /**
   * X
   */
  X: 88,
  /**
   * Y
   */
  Y: 89,
  /**
   * Z
   */
  Z: 90,
  /**
   * META
   */
  META: 91,
  // WIN_KEY_LEFT
  /**
   * WIN_KEY_RIGHT
   */
  WIN_KEY_RIGHT: 92,
  /**
   * CONTEXT_MENU
   */
  CONTEXT_MENU: 93,
  /**
   * NUM_ZERO
   */
  NUM_ZERO: 96,
  /**
   * NUM_ONE
   */
  NUM_ONE: 97,
  /**
   * NUM_TWO
   */
  NUM_TWO: 98,
  /**
   * NUM_THREE
   */
  NUM_THREE: 99,
  /**
   * NUM_FOUR
   */
  NUM_FOUR: 100,
  /**
   * NUM_FIVE
   */
  NUM_FIVE: 101,
  /**
   * NUM_SIX
   */
  NUM_SIX: 102,
  /**
   * NUM_SEVEN
   */
  NUM_SEVEN: 103,
  /**
   * NUM_EIGHT
   */
  NUM_EIGHT: 104,
  /**
   * NUM_NINE
   */
  NUM_NINE: 105,
  /**
   * NUM_MULTIPLY
   */
  NUM_MULTIPLY: 106,
  /**
   * NUM_PLUS
   */
  NUM_PLUS: 107,
  /**
   * NUM_MINUS
   */
  NUM_MINUS: 109,
  /**
   * NUM_PERIOD
   */
  NUM_PERIOD: 110,
  /**
   * NUM_DIVISION
   */
  NUM_DIVISION: 111,
  /**
   * F1
   */
  F1: 112,
  /**
   * F2
   */
  F2: 113,
  /**
   * F3
   */
  F3: 114,
  /**
   * F4
   */
  F4: 115,
  /**
   * F5
   */
  F5: 116,
  /**
   * F6
   */
  F6: 117,
  /**
   * F7
   */
  F7: 118,
  /**
   * F8
   */
  F8: 119,
  /**
   * F9
   */
  F9: 120,
  /**
   * F10
   */
  F10: 121,
  /**
   * F11
   */
  F11: 122,
  /**
   * F12
   */
  F12: 123,
  /**
   * NUMLOCK
   */
  NUMLOCK: 144,
  /**
   * SEMICOLON
   */
  SEMICOLON: 186,
  // needs localization
  /**
   * DASH
   */
  DASH: 189,
  // needs localization
  /**
   * EQUALS
   */
  EQUALS: 187,
  // needs localization
  /**
   * COMMA
   */
  COMMA: 188,
  // needs localization
  /**
   * PERIOD
   */
  PERIOD: 190,
  // needs localization
  /**
   * SLASH
   */
  SLASH: 191,
  // needs localization
  /**
   * APOSTROPHE
   */
  APOSTROPHE: 192,
  // needs localization
  /**
   * SINGLE_QUOTE
   */
  SINGLE_QUOTE: 222,
  // needs localization
  /**
   * OPEN_SQUARE_BRACKET
   */
  OPEN_SQUARE_BRACKET: 219,
  // needs localization
  /**
   * BACKSLASH
   */
  BACKSLASH: 220,
  // needs localization
  /**
   * CLOSE_SQUARE_BRACKET
   */
  CLOSE_SQUARE_BRACKET: 221,
  // needs localization
  /**
   * WIN_KEY
   */
  WIN_KEY: 224,
  /**
   * MAC_FF_META
   */
  MAC_FF_META: 224,
  // Firefox (Gecko) fires this for the meta key instead of 91
  /**
   * WIN_IME
   */
  WIN_IME: 229,
  // ======================== Function ========================
  /**
   * whether text and modified key is entered at the same time.
   */
  isTextModifyingKeyEvent: function isTextModifyingKeyEvent(e) {
    var keyCode = e.keyCode;
    if (e.altKey && !e.ctrlKey || e.metaKey || // Function keys don't generate text
    keyCode >= KeyCode.F1 && keyCode <= KeyCode.F12) {
      return false;
    }
    switch (keyCode) {
      case KeyCode.ALT:
      case KeyCode.CAPS_LOCK:
      case KeyCode.CONTEXT_MENU:
      case KeyCode.CTRL:
      case KeyCode.DOWN:
      case KeyCode.END:
      case KeyCode.ESC:
      case KeyCode.HOME:
      case KeyCode.INSERT:
      case KeyCode.LEFT:
      case KeyCode.MAC_FF_META:
      case KeyCode.META:
      case KeyCode.NUMLOCK:
      case KeyCode.NUM_CENTER:
      case KeyCode.PAGE_DOWN:
      case KeyCode.PAGE_UP:
      case KeyCode.PAUSE:
      case KeyCode.PRINT_SCREEN:
      case KeyCode.RIGHT:
      case KeyCode.SHIFT:
      case KeyCode.UP:
      case KeyCode.WIN_KEY:
      case KeyCode.WIN_KEY_RIGHT:
        return false;
      default:
        return true;
    }
  },
  /**
   * whether character is entered.
   */
  isCharacterKey: function isCharacterKey(keyCode) {
    if (keyCode >= KeyCode.ZERO && keyCode <= KeyCode.NINE) {
      return true;
    }
    if (keyCode >= KeyCode.NUM_ZERO && keyCode <= KeyCode.NUM_MULTIPLY) {
      return true;
    }
    if (keyCode >= KeyCode.A && keyCode <= KeyCode.Z) {
      return true;
    }
    if (window.navigator.userAgent.indexOf("WebKit") !== -1 && keyCode === 0) {
      return true;
    }
    switch (keyCode) {
      case KeyCode.SPACE:
      case KeyCode.QUESTION_MARK:
      case KeyCode.NUM_PLUS:
      case KeyCode.NUM_MINUS:
      case KeyCode.NUM_PERIOD:
      case KeyCode.NUM_DIVISION:
      case KeyCode.SEMICOLON:
      case KeyCode.DASH:
      case KeyCode.EQUALS:
      case KeyCode.COMMA:
      case KeyCode.PERIOD:
      case KeyCode.SLASH:
      case KeyCode.APOSTROPHE:
      case KeyCode.SINGLE_QUOTE:
      case KeyCode.OPEN_SQUARE_BRACKET:
      case KeyCode.BACKSLASH:
      case KeyCode.CLOSE_SQUARE_BRACKET:
        return true;
      default:
        return false;
    }
  }
};
var LoadingOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z" } }] }, "name": "loading", "theme": "outlined" };
const LoadingOutlinedSvg = LoadingOutlined$2;
var LoadingOutlined = function LoadingOutlined2(props, ref) {
  return /* @__PURE__ */ React$2.createElement(AntdIcon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
    ref,
    icon: LoadingOutlinedSvg
  }));
};
LoadingOutlined.displayName = "LoadingOutlined";
const LoadingOutlined$1 = /* @__PURE__ */ React$2.forwardRef(LoadingOutlined);
var fullClone = _objectSpread2$1({}, ReactDOM);
var version = fullClone.version, reactRender = fullClone.render, unmountComponentAtNode = fullClone.unmountComponentAtNode;
var createRoot;
try {
  var mainVersion = Number((version || "").split(".")[0]);
  if (mainVersion >= 18) {
    createRoot = fullClone.createRoot;
  }
} catch (e) {
}
function toggleWarning(skip) {
  var __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = fullClone.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  if (__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED && _typeof$3(__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === "object") {
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.usingClientEntryPoint = skip;
  }
}
var MARK = "__rc_react_root__";
function modernRender(node2, container) {
  toggleWarning(true);
  var root = container[MARK] || createRoot(container);
  toggleWarning(false);
  root.render(node2);
  container[MARK] = root;
}
function legacyRender(node2, container) {
  reactRender(node2, container);
}
function render(node2, container) {
  if (createRoot) {
    modernRender(node2, container);
    return;
  }
  legacyRender(node2, container);
}
function modernUnmount(_x) {
  return _modernUnmount.apply(this, arguments);
}
function _modernUnmount() {
  _modernUnmount = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee(container) {
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1)
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", Promise.resolve().then(function() {
              var _container$MARK;
              (_container$MARK = container[MARK]) === null || _container$MARK === void 0 ? void 0 : _container$MARK.unmount();
              delete container[MARK];
            }));
          case 1:
          case "end":
            return _context.stop();
        }
    }, _callee);
  }));
  return _modernUnmount.apply(this, arguments);
}
function legacyUnmount(container) {
  unmountComponentAtNode(container);
}
function unmount(_x2) {
  return _unmount.apply(this, arguments);
}
function _unmount() {
  _unmount = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee2(container) {
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1)
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(createRoot !== void 0)) {
              _context2.next = 2;
              break;
            }
            return _context2.abrupt("return", modernUnmount(container));
          case 2:
            legacyUnmount(container);
          case 3:
          case "end":
            return _context2.stop();
        }
    }, _callee2);
  }));
  return _unmount.apply(this, arguments);
}
const isVisible = function(element) {
  if (!element) {
    return false;
  }
  if (element instanceof Element) {
    if (element.offsetParent) {
      return true;
    }
    if (element.getBBox) {
      var _getBBox = element.getBBox(), width = _getBBox.width, height = _getBBox.height;
      if (width || height) {
        return true;
      }
    }
    if (element.getBoundingClientRect) {
      var _element$getBoundingC = element.getBoundingClientRect(), _width = _element$getBoundingC.width, _height = _element$getBoundingC.height;
      if (_width || _height) {
        return true;
      }
    }
  }
  return false;
};
const genWaveStyle = (token2) => {
  const {
    componentCls,
    colorPrimary
  } = token2;
  return {
    [componentCls]: {
      position: "absolute",
      background: "transparent",
      pointerEvents: "none",
      boxSizing: "border-box",
      color: `var(--wave-color, ${colorPrimary})`,
      boxShadow: `0 0 0 0 currentcolor`,
      opacity: 0.2,
      // =================== Motion ===================
      "&.wave-motion-appear": {
        transition: [`box-shadow 0.4s ${token2.motionEaseOutCirc}`, `opacity 2s ${token2.motionEaseOutCirc}`].join(","),
        "&-active": {
          boxShadow: `0 0 0 6px currentcolor`,
          opacity: 0
        }
      }
    }
  };
};
const useStyle$8 = genComponentStyleHook("Wave", (token2) => [genWaveStyle(token2)]);
function isNotGrey(color) {
  const match2 = (color || "").match(/rgba?\((\d*), (\d*), (\d*)(, [\d.]*)?\)/);
  if (match2 && match2[1] && match2[2] && match2[3]) {
    return !(match2[1] === match2[2] && match2[2] === match2[3]);
  }
  return true;
}
function isValidWaveColor(color) {
  return color && color !== "#fff" && color !== "#ffffff" && color !== "rgb(255, 255, 255)" && color !== "rgba(255, 255, 255, 1)" && isNotGrey(color) && !/rgba\((?:\d*, ){3}0\)/.test(color) && // any transparent rgba color
  color !== "transparent";
}
function getTargetWaveColor(node2) {
  const {
    borderTopColor,
    borderColor,
    backgroundColor
  } = getComputedStyle(node2);
  if (isValidWaveColor(borderTopColor)) {
    return borderTopColor;
  }
  if (isValidWaveColor(borderColor)) {
    return borderColor;
  }
  if (isValidWaveColor(backgroundColor)) {
    return backgroundColor;
  }
  return null;
}
function validateNum(value) {
  return Number.isNaN(value) ? 0 : value;
}
const WaveEffect = (props) => {
  const {
    className,
    target
  } = props;
  const divRef = React$2.useRef(null);
  const [color, setWaveColor] = React$2.useState(null);
  const [borderRadius, setBorderRadius] = React$2.useState([]);
  const [left, setLeft] = React$2.useState(0);
  const [top, setTop] = React$2.useState(0);
  const [width, setWidth] = React$2.useState(0);
  const [height, setHeight] = React$2.useState(0);
  const [enabled, setEnabled] = React$2.useState(false);
  const waveStyle = {
    left,
    top,
    width,
    height,
    borderRadius: borderRadius.map((radius) => `${radius}px`).join(" ")
  };
  if (color) {
    waveStyle["--wave-color"] = color;
  }
  function syncPos() {
    const nodeStyle = getComputedStyle(target);
    setWaveColor(getTargetWaveColor(target));
    const isStatic = nodeStyle.position === "static";
    const {
      borderLeftWidth,
      borderTopWidth
    } = nodeStyle;
    setLeft(isStatic ? target.offsetLeft : validateNum(-parseFloat(borderLeftWidth)));
    setTop(isStatic ? target.offsetTop : validateNum(-parseFloat(borderTopWidth)));
    setWidth(target.offsetWidth);
    setHeight(target.offsetHeight);
    const {
      borderTopLeftRadius,
      borderTopRightRadius,
      borderBottomLeftRadius,
      borderBottomRightRadius
    } = nodeStyle;
    setBorderRadius([borderTopLeftRadius, borderTopRightRadius, borderBottomRightRadius, borderBottomLeftRadius].map((radius) => validateNum(parseFloat(radius))));
  }
  React$2.useEffect(() => {
    if (target) {
      const id = wrapperRaf(() => {
        syncPos();
        setEnabled(true);
      });
      let resizeObserver2;
      if (typeof ResizeObserver !== "undefined") {
        resizeObserver2 = new ResizeObserver(syncPos);
        resizeObserver2.observe(target);
      }
      return () => {
        wrapperRaf.cancel(id);
        resizeObserver2 === null || resizeObserver2 === void 0 ? void 0 : resizeObserver2.disconnect();
      };
    }
  }, []);
  if (!enabled) {
    return null;
  }
  return /* @__PURE__ */ React$2.createElement(CSSMotion, {
    visible: true,
    motionAppear: true,
    motionName: "wave-motion",
    motionDeadline: 5e3,
    onAppearEnd: (_, event) => {
      var _a;
      if (event.deadline || event.propertyName === "opacity") {
        const holder = (_a = divRef.current) === null || _a === void 0 ? void 0 : _a.parentElement;
        unmount(holder).then(() => {
          holder === null || holder === void 0 ? void 0 : holder.remove();
        });
      }
      return false;
    }
  }, (_ref) => {
    let {
      className: motionClassName
    } = _ref;
    return /* @__PURE__ */ React$2.createElement("div", {
      ref: divRef,
      className: classNames(className, motionClassName),
      style: waveStyle
    });
  });
};
function showWaveEffect(node2, className) {
  const holder = document.createElement("div");
  holder.style.position = "absolute";
  holder.style.left = `0px`;
  holder.style.top = `0px`;
  node2 === null || node2 === void 0 ? void 0 : node2.insertBefore(holder, node2 === null || node2 === void 0 ? void 0 : node2.firstChild);
  render(/* @__PURE__ */ React$2.createElement(WaveEffect, {
    target: node2,
    className
  }), holder);
}
function useWave(nodeRef, className) {
  function showWave() {
    const node2 = nodeRef.current;
    showWaveEffect(node2, className);
  }
  return showWave;
}
const Wave = (props) => {
  const {
    children,
    disabled
  } = props;
  const {
    getPrefixCls
  } = useContext(ConfigContext);
  const containerRef = useRef(null);
  const prefixCls = getPrefixCls("wave");
  const [, hashId] = useStyle$8(prefixCls);
  const showWave = useWave(containerRef, classNames(prefixCls, hashId));
  React__default.useEffect(() => {
    const node2 = containerRef.current;
    if (!node2 || node2.nodeType !== 1 || disabled) {
      return;
    }
    const onClick = (e) => {
      if (e.target.tagName === "INPUT" || !isVisible(e.target) || // No need wave
      !node2.getAttribute || node2.getAttribute("disabled") || node2.disabled || node2.className.includes("disabled") || node2.className.includes("-leave")) {
        return;
      }
      showWave();
    };
    node2.addEventListener("click", onClick, true);
    return () => {
      node2.removeEventListener("click", onClick, true);
    };
  }, [disabled]);
  if (!/* @__PURE__ */ React__default.isValidElement(children)) {
    return children !== null && children !== void 0 ? children : null;
  }
  const ref = supportRef(children) ? composeRef(children.ref, containerRef) : containerRef;
  return cloneElement(children, {
    ref
  });
};
if (process.env.NODE_ENV !== "production") {
  Wave.displayName = "Wave";
}
const Wave$1 = Wave;
const genSpaceCompactStyle = (token2) => {
  const {
    componentCls
  } = token2;
  return {
    [componentCls]: {
      display: "inline-flex",
      "&-block": {
        display: "flex",
        width: "100%"
      },
      "&-vertical": {
        flexDirection: "column"
      }
    }
  };
};
const genSpaceCompactStyle$1 = genSpaceCompactStyle;
const genSpaceStyle = (token2) => {
  const {
    componentCls
  } = token2;
  return {
    [componentCls]: {
      display: "inline-flex",
      "&-rtl": {
        direction: "rtl"
      },
      "&-vertical": {
        flexDirection: "column"
      },
      "&-align": {
        flexDirection: "column",
        "&-center": {
          alignItems: "center"
        },
        "&-start": {
          alignItems: "flex-start"
        },
        "&-end": {
          alignItems: "flex-end"
        },
        "&-baseline": {
          alignItems: "baseline"
        }
      },
      [`${componentCls}-item:empty`]: {
        display: "none"
      }
    }
  };
};
const useStyle$7 = genComponentStyleHook("Space", (token2) => [genSpaceStyle(token2), genSpaceCompactStyle$1(token2)], () => ({}), {
  // Space component don't apply extra font style
  // https://github.com/ant-design/ant-design/issues/40315
  resetStyle: false
});
var __rest$e = globalThis && globalThis.__rest || function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
const SpaceCompactItemContext = /* @__PURE__ */ React$2.createContext(null);
const useCompactItemContext = (prefixCls, direction) => {
  const compactItemContext = React$2.useContext(SpaceCompactItemContext);
  const compactItemClassnames = React$2.useMemo(() => {
    if (!compactItemContext)
      return "";
    const {
      compactDirection,
      isFirstItem,
      isLastItem
    } = compactItemContext;
    const separator = compactDirection === "vertical" ? "-vertical-" : "-";
    return classNames({
      [`${prefixCls}-compact${separator}item`]: true,
      [`${prefixCls}-compact${separator}first-item`]: isFirstItem,
      [`${prefixCls}-compact${separator}last-item`]: isLastItem,
      [`${prefixCls}-compact${separator}item-rtl`]: direction === "rtl"
    });
  }, [prefixCls, direction, compactItemContext]);
  return {
    compactSize: compactItemContext === null || compactItemContext === void 0 ? void 0 : compactItemContext.compactSize,
    compactDirection: compactItemContext === null || compactItemContext === void 0 ? void 0 : compactItemContext.compactDirection,
    compactItemClassnames
  };
};
const NoCompactStyle = (_ref) => {
  let {
    children
  } = _ref;
  return /* @__PURE__ */ React$2.createElement(SpaceCompactItemContext.Provider, {
    value: null
  }, children);
};
const CompactItem = (_a) => {
  var {
    children
  } = _a, otherProps = __rest$e(_a, ["children"]);
  return /* @__PURE__ */ React$2.createElement(SpaceCompactItemContext.Provider, {
    value: otherProps
  }, children);
};
const Compact = (props) => {
  const {
    getPrefixCls,
    direction: directionConfig
  } = React$2.useContext(ConfigContext);
  const {
    size = "middle",
    direction,
    block,
    prefixCls: customizePrefixCls,
    className,
    rootClassName,
    children
  } = props, restProps = __rest$e(props, ["size", "direction", "block", "prefixCls", "className", "rootClassName", "children"]);
  const prefixCls = getPrefixCls("space-compact", customizePrefixCls);
  const [wrapSSR, hashId] = useStyle$7(prefixCls);
  const clx = classNames(prefixCls, hashId, {
    [`${prefixCls}-rtl`]: directionConfig === "rtl",
    [`${prefixCls}-block`]: block,
    [`${prefixCls}-vertical`]: direction === "vertical"
  }, className, rootClassName);
  const compactItemContext = React$2.useContext(SpaceCompactItemContext);
  const childNodes = toArray$3(children);
  const nodes = React$2.useMemo(() => childNodes.map((child, i) => {
    const key = child && child.key || `${prefixCls}-item-${i}`;
    return /* @__PURE__ */ React$2.createElement(CompactItem, {
      key,
      compactSize: size,
      compactDirection: direction,
      isFirstItem: i === 0 && (!compactItemContext || (compactItemContext === null || compactItemContext === void 0 ? void 0 : compactItemContext.isFirstItem)),
      isLastItem: i === childNodes.length - 1 && (!compactItemContext || (compactItemContext === null || compactItemContext === void 0 ? void 0 : compactItemContext.isLastItem))
    }, child);
  }), [size, childNodes, compactItemContext]);
  if (childNodes.length === 0) {
    return null;
  }
  return wrapSSR(/* @__PURE__ */ React$2.createElement("div", Object.assign({
    className: clx
  }, restProps), nodes));
};
const Compact$1 = Compact;
const getCollapsedWidth = () => ({
  width: 0,
  opacity: 0,
  transform: "scale(0)"
});
const getRealWidth = (node2) => ({
  width: node2.scrollWidth,
  opacity: 1,
  transform: "scale(1)"
});
const LoadingIcon = (_ref) => {
  let {
    prefixCls,
    loading,
    existIcon
  } = _ref;
  const visible = !!loading;
  if (existIcon) {
    return /* @__PURE__ */ React__default.createElement("span", {
      className: `${prefixCls}-loading-icon`
    }, /* @__PURE__ */ React__default.createElement(LoadingOutlined$1, null));
  }
  return /* @__PURE__ */ React__default.createElement(CSSMotion, {
    visible,
    // We do not really use this motionName
    motionName: `${prefixCls}-loading-icon-motion`,
    removeOnLeave: true,
    onAppearStart: getCollapsedWidth,
    onAppearActive: getRealWidth,
    onEnterStart: getCollapsedWidth,
    onEnterActive: getRealWidth,
    onLeaveStart: getRealWidth,
    onLeaveActive: getCollapsedWidth
  }, (_ref2, ref) => {
    let {
      className,
      style: style2
    } = _ref2;
    return /* @__PURE__ */ React__default.createElement("span", {
      className: `${prefixCls}-loading-icon`,
      style: style2,
      ref
    }, /* @__PURE__ */ React__default.createElement(LoadingOutlined$1, {
      className
    }));
  });
};
const LoadingIcon$1 = LoadingIcon;
var __rest$d = globalThis && globalThis.__rest || function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
const GroupSizeContext = /* @__PURE__ */ React$2.createContext(void 0);
const ButtonGroup = (props) => {
  const {
    getPrefixCls,
    direction
  } = React$2.useContext(ConfigContext);
  const {
    prefixCls: customizePrefixCls,
    size,
    className
  } = props, others = __rest$d(props, ["prefixCls", "size", "className"]);
  const prefixCls = getPrefixCls("btn-group", customizePrefixCls);
  const [, , hashId] = useToken$2();
  let sizeCls = "";
  switch (size) {
    case "large":
      sizeCls = "lg";
      break;
    case "small":
      sizeCls = "sm";
      break;
    case "middle":
    case void 0:
      break;
    default:
      process.env.NODE_ENV !== "production" ? warning$2(!size, "Button.Group", "Invalid prop `size`.") : void 0;
  }
  const classes = classNames(prefixCls, {
    [`${prefixCls}-${sizeCls}`]: sizeCls,
    [`${prefixCls}-rtl`]: direction === "rtl"
  }, className, hashId);
  return /* @__PURE__ */ React$2.createElement(GroupSizeContext.Provider, {
    value: size
  }, /* @__PURE__ */ React$2.createElement("div", Object.assign({}, others, {
    className: classes
  })));
};
const Group = ButtonGroup;
const rxTwoCNChar = /^[\u4e00-\u9fa5]{2}$/;
const isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);
function isString(str) {
  return typeof str === "string";
}
function isUnBorderedButtonType(type4) {
  return type4 === "text" || type4 === "link";
}
function splitCNCharsBySpace(child, needInserted) {
  if (child === null || child === void 0) {
    return;
  }
  const SPACE = needInserted ? " " : "";
  if (typeof child !== "string" && typeof child !== "number" && isString(child.type) && isTwoCNChar(child.props.children)) {
    return cloneElement(child, {
      children: child.props.children.split("").join(SPACE)
    });
  }
  if (typeof child === "string") {
    return isTwoCNChar(child) ? /* @__PURE__ */ React__default.createElement("span", null, child.split("").join(SPACE)) : /* @__PURE__ */ React__default.createElement("span", null, child);
  }
  if (isFragment(child)) {
    return /* @__PURE__ */ React__default.createElement("span", null, child);
  }
  return child;
}
function spaceChildren(children, needInserted) {
  let isPrevChildPure = false;
  const childList = [];
  React__default.Children.forEach(children, (child) => {
    const type4 = typeof child;
    const isCurrentChildPure = type4 === "string" || type4 === "number";
    if (isPrevChildPure && isCurrentChildPure) {
      const lastIndex = childList.length - 1;
      const lastChild = childList[lastIndex];
      childList[lastIndex] = `${lastChild}${child}`;
    } else {
      childList.push(child);
    }
    isPrevChildPure = isCurrentChildPure;
  });
  return React__default.Children.map(childList, (child) => splitCNCharsBySpace(child, needInserted));
}
const genButtonBorderStyle = (buttonTypeCls, borderColor) => ({
  // Border
  [`> span, > ${buttonTypeCls}`]: {
    "&:not(:last-child)": {
      [`&, & > ${buttonTypeCls}`]: {
        "&:not(:disabled)": {
          borderInlineEndColor: borderColor
        }
      }
    },
    "&:not(:first-child)": {
      [`&, & > ${buttonTypeCls}`]: {
        "&:not(:disabled)": {
          borderInlineStartColor: borderColor
        }
      }
    }
  }
});
const genGroupStyle = (token2) => {
  const {
    componentCls,
    fontSize,
    lineWidth,
    colorPrimaryHover,
    colorErrorHover
  } = token2;
  return {
    [`${componentCls}-group`]: [
      {
        position: "relative",
        display: "inline-flex",
        // Border
        [`> span, > ${componentCls}`]: {
          "&:not(:last-child)": {
            [`&, & > ${componentCls}`]: {
              borderStartEndRadius: 0,
              borderEndEndRadius: 0
            }
          },
          "&:not(:first-child)": {
            marginInlineStart: -lineWidth,
            [`&, & > ${componentCls}`]: {
              borderStartStartRadius: 0,
              borderEndStartRadius: 0
            }
          }
        },
        [componentCls]: {
          position: "relative",
          zIndex: 1,
          [`&:hover,
          &:focus,
          &:active`]: {
            zIndex: 2
          },
          "&[disabled]": {
            zIndex: 0
          }
        },
        [`${componentCls}-icon-only`]: {
          fontSize
        }
      },
      // Border Color
      genButtonBorderStyle(`${componentCls}-primary`, colorPrimaryHover),
      genButtonBorderStyle(`${componentCls}-danger`, colorErrorHover)
    ]
  };
};
const genGroupStyle$1 = genGroupStyle;
function compactItemBorder(token2, parentCls, options) {
  const {
    focusElCls,
    focus,
    borderElCls
  } = options;
  const childCombinator = borderElCls ? "> *" : "";
  const hoverEffects = ["hover", focus ? "focus" : null, "active"].filter(Boolean).map((n) => `&:${n} ${childCombinator}`).join(",");
  return {
    [`&-item:not(${parentCls}-last-item)`]: {
      marginInlineEnd: -token2.lineWidth
    },
    "&-item": Object.assign(Object.assign({
      [hoverEffects]: {
        zIndex: 2
      }
    }, focusElCls ? {
      [`&${focusElCls}`]: {
        zIndex: 2
      }
    } : {}), {
      [`&[disabled] ${childCombinator}`]: {
        zIndex: 0
      }
    })
  };
}
function compactItemBorderRadius(prefixCls, parentCls, options) {
  const {
    borderElCls
  } = options;
  const childCombinator = borderElCls ? `> ${borderElCls}` : "";
  return {
    [`&-item:not(${parentCls}-first-item):not(${parentCls}-last-item) ${childCombinator}`]: {
      borderRadius: 0
    },
    [`&-item:not(${parentCls}-last-item)${parentCls}-first-item`]: {
      [`& ${childCombinator}, &${prefixCls}-sm ${childCombinator}, &${prefixCls}-lg ${childCombinator}`]: {
        borderStartEndRadius: 0,
        borderEndEndRadius: 0
      }
    },
    [`&-item:not(${parentCls}-first-item)${parentCls}-last-item`]: {
      [`& ${childCombinator}, &${prefixCls}-sm ${childCombinator}, &${prefixCls}-lg ${childCombinator}`]: {
        borderStartStartRadius: 0,
        borderEndStartRadius: 0
      }
    }
  };
}
function genCompactItemStyle(token2) {
  let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
    focus: true
  };
  const {
    componentCls
  } = token2;
  const compactCls = `${componentCls}-compact`;
  return {
    [compactCls]: Object.assign(Object.assign({}, compactItemBorder(token2, compactCls, options)), compactItemBorderRadius(componentCls, compactCls, options))
  };
}
function compactItemVerticalBorder(token2, parentCls) {
  return {
    // border collapse
    [`&-item:not(${parentCls}-last-item)`]: {
      marginBottom: -token2.lineWidth
    },
    "&-item": {
      "&:hover,&:focus,&:active": {
        zIndex: 2
      },
      "&[disabled]": {
        zIndex: 0
      }
    }
  };
}
function compactItemBorderVerticalRadius(prefixCls, parentCls) {
  return {
    [`&-item:not(${parentCls}-first-item):not(${parentCls}-last-item)`]: {
      borderRadius: 0
    },
    [`&-item${parentCls}-first-item:not(${parentCls}-last-item)`]: {
      [`&, &${prefixCls}-sm, &${prefixCls}-lg`]: {
        borderEndEndRadius: 0,
        borderEndStartRadius: 0
      }
    },
    [`&-item${parentCls}-last-item:not(${parentCls}-first-item)`]: {
      [`&, &${prefixCls}-sm, &${prefixCls}-lg`]: {
        borderStartStartRadius: 0,
        borderStartEndRadius: 0
      }
    }
  };
}
function genCompactItemVerticalStyle(token2) {
  const compactCls = `${token2.componentCls}-compact-vertical`;
  return {
    [compactCls]: Object.assign(Object.assign({}, compactItemVerticalBorder(token2, compactCls)), compactItemBorderVerticalRadius(token2.componentCls, compactCls))
  };
}
const genSharedButtonStyle = (token2) => {
  const {
    componentCls,
    iconCls
  } = token2;
  return {
    [componentCls]: {
      outline: "none",
      position: "relative",
      display: "inline-block",
      fontWeight: 400,
      whiteSpace: "nowrap",
      textAlign: "center",
      backgroundImage: "none",
      backgroundColor: "transparent",
      border: `${token2.lineWidth}px ${token2.lineType} transparent`,
      cursor: "pointer",
      transition: `all ${token2.motionDurationMid} ${token2.motionEaseInOut}`,
      userSelect: "none",
      touchAction: "manipulation",
      lineHeight: token2.lineHeight,
      color: token2.colorText,
      "> span": {
        display: "inline-block"
      },
      // Leave a space between icon and text.
      [`> ${iconCls} + span, > span + ${iconCls}`]: {
        marginInlineStart: token2.marginXS
      },
      "> a": {
        color: "currentColor"
      },
      "&:not(:disabled)": Object.assign({}, genFocusStyle(token2)),
      // make `btn-icon-only` not too narrow
      [`&-icon-only${componentCls}-compact-item`]: {
        flex: "none"
      },
      // Special styles for Primary Button
      [`&-compact-item${componentCls}-primary`]: {
        [`&:not([disabled]) + ${componentCls}-compact-item${componentCls}-primary:not([disabled])`]: {
          position: "relative",
          "&:before": {
            position: "absolute",
            top: -token2.lineWidth,
            insetInlineStart: -token2.lineWidth,
            display: "inline-block",
            width: token2.lineWidth,
            height: `calc(100% + ${token2.lineWidth * 2}px)`,
            backgroundColor: token2.colorPrimaryHover,
            content: '""'
          }
        }
      },
      // Special styles for Primary Button
      "&-compact-vertical-item": {
        [`&${componentCls}-primary`]: {
          [`&:not([disabled]) + ${componentCls}-compact-vertical-item${componentCls}-primary:not([disabled])`]: {
            position: "relative",
            "&:before": {
              position: "absolute",
              top: -token2.lineWidth,
              insetInlineStart: -token2.lineWidth,
              display: "inline-block",
              width: `calc(100% + ${token2.lineWidth * 2}px)`,
              height: token2.lineWidth,
              backgroundColor: token2.colorPrimaryHover,
              content: '""'
            }
          }
        }
      }
    }
  };
};
const genHoverActiveButtonStyle = (hoverStyle, activeStyle) => ({
  "&:not(:disabled)": {
    "&:hover": hoverStyle,
    "&:active": activeStyle
  }
});
const genCircleButtonStyle = (token2) => ({
  minWidth: token2.controlHeight,
  paddingInlineStart: 0,
  paddingInlineEnd: 0,
  borderRadius: "50%"
});
const genRoundButtonStyle = (token2) => ({
  borderRadius: token2.controlHeight,
  paddingInlineStart: token2.controlHeight / 2,
  paddingInlineEnd: token2.controlHeight / 2
});
const genDisabledStyle = (token2) => ({
  cursor: "not-allowed",
  borderColor: token2.colorBorder,
  color: token2.colorTextDisabled,
  backgroundColor: token2.colorBgContainerDisabled,
  boxShadow: "none"
});
const genGhostButtonStyle = (btnCls, textColor, borderColor, textColorDisabled, borderColorDisabled, hoverStyle, activeStyle) => ({
  [`&${btnCls}-background-ghost`]: Object.assign(Object.assign({
    color: textColor || void 0,
    backgroundColor: "transparent",
    borderColor: borderColor || void 0,
    boxShadow: "none"
  }, genHoverActiveButtonStyle(Object.assign({
    backgroundColor: "transparent"
  }, hoverStyle), Object.assign({
    backgroundColor: "transparent"
  }, activeStyle))), {
    "&:disabled": {
      cursor: "not-allowed",
      color: textColorDisabled || void 0,
      borderColor: borderColorDisabled || void 0
    }
  })
});
const genSolidDisabledButtonStyle = (token2) => ({
  "&:disabled": Object.assign({}, genDisabledStyle(token2))
});
const genSolidButtonStyle = (token2) => Object.assign({}, genSolidDisabledButtonStyle(token2));
const genPureDisabledButtonStyle = (token2) => ({
  "&:disabled": {
    cursor: "not-allowed",
    color: token2.colorTextDisabled
  }
});
const genDefaultButtonStyle = (token2) => Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, genSolidButtonStyle(token2)), {
  backgroundColor: token2.colorBgContainer,
  borderColor: token2.colorBorder,
  boxShadow: `0 ${token2.controlOutlineWidth}px 0 ${token2.controlTmpOutline}`
}), genHoverActiveButtonStyle({
  color: token2.colorPrimaryHover,
  borderColor: token2.colorPrimaryHover
}, {
  color: token2.colorPrimaryActive,
  borderColor: token2.colorPrimaryActive
})), genGhostButtonStyle(token2.componentCls, token2.colorBgContainer, token2.colorBgContainer, token2.colorTextDisabled, token2.colorBorder)), {
  [`&${token2.componentCls}-dangerous`]: Object.assign(Object.assign(Object.assign({
    color: token2.colorError,
    borderColor: token2.colorError
  }, genHoverActiveButtonStyle({
    color: token2.colorErrorHover,
    borderColor: token2.colorErrorBorderHover
  }, {
    color: token2.colorErrorActive,
    borderColor: token2.colorErrorActive
  })), genGhostButtonStyle(token2.componentCls, token2.colorError, token2.colorError, token2.colorTextDisabled, token2.colorBorder)), genSolidDisabledButtonStyle(token2))
});
const genPrimaryButtonStyle = (token2) => Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, genSolidButtonStyle(token2)), {
  color: token2.colorTextLightSolid,
  backgroundColor: token2.colorPrimary,
  boxShadow: `0 ${token2.controlOutlineWidth}px 0 ${token2.controlOutline}`
}), genHoverActiveButtonStyle({
  color: token2.colorTextLightSolid,
  backgroundColor: token2.colorPrimaryHover
}, {
  color: token2.colorTextLightSolid,
  backgroundColor: token2.colorPrimaryActive
})), genGhostButtonStyle(token2.componentCls, token2.colorPrimary, token2.colorPrimary, token2.colorTextDisabled, token2.colorBorder, {
  color: token2.colorPrimaryHover,
  borderColor: token2.colorPrimaryHover
}, {
  color: token2.colorPrimaryActive,
  borderColor: token2.colorPrimaryActive
})), {
  [`&${token2.componentCls}-dangerous`]: Object.assign(Object.assign(Object.assign({
    backgroundColor: token2.colorError,
    boxShadow: `0 ${token2.controlOutlineWidth}px 0 ${token2.colorErrorOutline}`
  }, genHoverActiveButtonStyle({
    backgroundColor: token2.colorErrorHover
  }, {
    backgroundColor: token2.colorErrorActive
  })), genGhostButtonStyle(token2.componentCls, token2.colorError, token2.colorError, token2.colorTextDisabled, token2.colorBorder, {
    color: token2.colorErrorHover,
    borderColor: token2.colorErrorHover
  }, {
    color: token2.colorErrorActive,
    borderColor: token2.colorErrorActive
  })), genSolidDisabledButtonStyle(token2))
});
const genDashedButtonStyle = (token2) => Object.assign(Object.assign({}, genDefaultButtonStyle(token2)), {
  borderStyle: "dashed"
});
const genLinkButtonStyle = (token2) => Object.assign(Object.assign(Object.assign({
  color: token2.colorLink
}, genHoverActiveButtonStyle({
  color: token2.colorLinkHover
}, {
  color: token2.colorLinkActive
})), genPureDisabledButtonStyle(token2)), {
  [`&${token2.componentCls}-dangerous`]: Object.assign(Object.assign({
    color: token2.colorError
  }, genHoverActiveButtonStyle({
    color: token2.colorErrorHover
  }, {
    color: token2.colorErrorActive
  })), genPureDisabledButtonStyle(token2))
});
const genTextButtonStyle = (token2) => Object.assign(Object.assign(Object.assign({}, genHoverActiveButtonStyle({
  color: token2.colorText,
  backgroundColor: token2.colorBgTextHover
}, {
  color: token2.colorText,
  backgroundColor: token2.colorBgTextActive
})), genPureDisabledButtonStyle(token2)), {
  [`&${token2.componentCls}-dangerous`]: Object.assign(Object.assign({
    color: token2.colorError
  }, genPureDisabledButtonStyle(token2)), genHoverActiveButtonStyle({
    color: token2.colorErrorHover,
    backgroundColor: token2.colorErrorBg
  }, {
    color: token2.colorErrorHover,
    backgroundColor: token2.colorErrorBg
  }))
});
const genDisabledButtonStyle = (token2) => Object.assign(Object.assign({}, genDisabledStyle(token2)), {
  [`&${token2.componentCls}:hover`]: Object.assign({}, genDisabledStyle(token2))
});
const genTypeButtonStyle = (token2) => {
  const {
    componentCls
  } = token2;
  return {
    [`${componentCls}-default`]: genDefaultButtonStyle(token2),
    [`${componentCls}-primary`]: genPrimaryButtonStyle(token2),
    [`${componentCls}-dashed`]: genDashedButtonStyle(token2),
    [`${componentCls}-link`]: genLinkButtonStyle(token2),
    [`${componentCls}-text`]: genTextButtonStyle(token2),
    [`${componentCls}-disabled`]: genDisabledButtonStyle(token2)
  };
};
const genSizeButtonStyle = function(token2) {
  let sizePrefixCls = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  const {
    componentCls,
    iconCls,
    controlHeight,
    fontSize,
    lineHeight,
    lineWidth,
    borderRadius,
    buttonPaddingHorizontal
  } = token2;
  const paddingVertical = Math.max(0, (controlHeight - fontSize * lineHeight) / 2 - lineWidth);
  const paddingHorizontal = buttonPaddingHorizontal - lineWidth;
  const iconOnlyCls = `${componentCls}-icon-only`;
  return [
    // Size
    {
      [`${componentCls}${sizePrefixCls}`]: {
        fontSize,
        height: controlHeight,
        padding: `${paddingVertical}px ${paddingHorizontal}px`,
        borderRadius,
        [`&${iconOnlyCls}`]: {
          width: controlHeight,
          paddingInlineStart: 0,
          paddingInlineEnd: 0,
          [`&${componentCls}-round`]: {
            width: "auto"
          },
          "> span": {
            transform: "scale(1.143)"
            // 14px -> 16px
          }
        },
        // Loading
        [`&${componentCls}-loading`]: {
          opacity: token2.opacityLoading,
          cursor: "default"
        },
        [`${componentCls}-loading-icon`]: {
          transition: `width ${token2.motionDurationSlow} ${token2.motionEaseInOut}, opacity ${token2.motionDurationSlow} ${token2.motionEaseInOut}`
        },
        [`&:not(${iconOnlyCls}) ${componentCls}-loading-icon > ${iconCls}`]: {
          marginInlineEnd: token2.marginXS
        }
      }
    },
    // Shape - patch prefixCls again to override solid border radius style
    {
      [`${componentCls}${componentCls}-circle${sizePrefixCls}`]: genCircleButtonStyle(token2)
    },
    {
      [`${componentCls}${componentCls}-round${sizePrefixCls}`]: genRoundButtonStyle(token2)
    }
  ];
};
const genSizeBaseButtonStyle = (token2) => genSizeButtonStyle(token2);
const genSizeSmallButtonStyle = (token2) => {
  const smallToken = merge(token2, {
    controlHeight: token2.controlHeightSM,
    padding: token2.paddingXS,
    buttonPaddingHorizontal: 8,
    borderRadius: token2.borderRadiusSM
  });
  return genSizeButtonStyle(smallToken, `${token2.componentCls}-sm`);
};
const genSizeLargeButtonStyle = (token2) => {
  const largeToken = merge(token2, {
    controlHeight: token2.controlHeightLG,
    fontSize: token2.fontSizeLG,
    borderRadius: token2.borderRadiusLG
  });
  return genSizeButtonStyle(largeToken, `${token2.componentCls}-lg`);
};
const genBlockButtonStyle = (token2) => {
  const {
    componentCls
  } = token2;
  return {
    [componentCls]: {
      [`&${componentCls}-block`]: {
        width: "100%"
      }
    }
  };
};
const useStyle$6 = genComponentStyleHook("Button", (token2) => {
  const {
    controlTmpOutline,
    paddingContentHorizontal
  } = token2;
  const buttonToken = merge(token2, {
    colorOutlineDefault: controlTmpOutline,
    buttonPaddingHorizontal: paddingContentHorizontal
  });
  return [
    // Shared
    genSharedButtonStyle(buttonToken),
    // Size
    genSizeSmallButtonStyle(buttonToken),
    genSizeBaseButtonStyle(buttonToken),
    genSizeLargeButtonStyle(buttonToken),
    // Block
    genBlockButtonStyle(buttonToken),
    // Group (type, ghost, danger, disabled, loading)
    genTypeButtonStyle(buttonToken),
    // Button Group
    genGroupStyle$1(buttonToken),
    // Space Compact
    genCompactItemStyle(token2),
    genCompactItemVerticalStyle(token2)
  ];
});
var __rest$c = globalThis && globalThis.__rest || function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function getLoadingConfig(loading) {
  if (typeof loading === "object" && loading) {
    const delay = loading === null || loading === void 0 ? void 0 : loading.delay;
    const isDelay = !Number.isNaN(delay) && typeof delay === "number";
    return {
      loading: false,
      delay: isDelay ? delay : 0
    };
  }
  return {
    loading: !!loading,
    delay: 0
  };
}
const InternalButton = (props, ref) => {
  const {
    loading = false,
    prefixCls: customizePrefixCls,
    type: type4 = "default",
    danger,
    shape = "default",
    size: customizeSize,
    disabled: customDisabled,
    className,
    rootClassName,
    children,
    icon,
    ghost = false,
    block = false,
    // React does not recognize the `htmlType` prop on a DOM element. Here we pick it out of `rest`.
    htmlType = "button"
  } = props, rest = __rest$c(props, ["loading", "prefixCls", "type", "danger", "shape", "size", "disabled", "className", "rootClassName", "children", "icon", "ghost", "block", "htmlType"]);
  const {
    getPrefixCls,
    autoInsertSpaceInButton,
    direction
  } = React$2.useContext(ConfigContext);
  const prefixCls = getPrefixCls("btn", customizePrefixCls);
  const [wrapSSR, hashId] = useStyle$6(prefixCls);
  const size = React$2.useContext(SizeContext$1);
  const disabled = React$2.useContext(DisabledContext$1);
  const mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;
  const groupSize = React$2.useContext(GroupSizeContext);
  const loadingOrDelay = React$2.useMemo(() => getLoadingConfig(loading), [loading]);
  const [innerLoading, setLoading] = React$2.useState(loadingOrDelay.loading);
  const [hasTwoCNChar, setHasTwoCNChar] = React$2.useState(false);
  const internalRef = /* @__PURE__ */ React$2.createRef();
  const buttonRef = ref || internalRef;
  const isNeedInserted = () => React$2.Children.count(children) === 1 && !icon && !isUnBorderedButtonType(type4);
  const fixTwoCNChar = () => {
    if (!buttonRef || !buttonRef.current || autoInsertSpaceInButton === false) {
      return;
    }
    const buttonText = buttonRef.current.textContent;
    if (isNeedInserted() && isTwoCNChar(buttonText)) {
      if (!hasTwoCNChar) {
        setHasTwoCNChar(true);
      }
    } else if (hasTwoCNChar) {
      setHasTwoCNChar(false);
    }
  };
  React$2.useEffect(() => {
    let delayTimer = null;
    if (loadingOrDelay.delay > 0) {
      delayTimer = setTimeout(() => {
        delayTimer = null;
        setLoading(true);
      }, loadingOrDelay.delay);
    } else {
      setLoading(loadingOrDelay.loading);
    }
    function cleanupTimer() {
      if (delayTimer) {
        clearTimeout(delayTimer);
        delayTimer = null;
      }
    }
    return cleanupTimer;
  }, [loadingOrDelay]);
  React$2.useEffect(fixTwoCNChar, [buttonRef]);
  const handleClick = (e) => {
    const {
      onClick
    } = props;
    if (innerLoading || mergedDisabled) {
      e.preventDefault();
      return;
    }
    onClick === null || onClick === void 0 ? void 0 : onClick(e);
  };
  process.env.NODE_ENV !== "production" ? warning$2(!(typeof icon === "string" && icon.length > 2), "Button", `\`icon\` is using ReactNode instead of string naming in v4. Please check \`${icon}\` at https://ant.design/components/icon`) : void 0;
  process.env.NODE_ENV !== "production" ? warning$2(!(ghost && isUnBorderedButtonType(type4)), "Button", "`link` or `text` button can't be a `ghost` button.") : void 0;
  const autoInsertSpace = autoInsertSpaceInButton !== false;
  const {
    compactSize,
    compactItemClassnames
  } = useCompactItemContext(prefixCls, direction);
  const sizeClassNameMap = {
    large: "lg",
    small: "sm",
    middle: void 0
  };
  const sizeFullname = compactSize || groupSize || customizeSize || size;
  const sizeCls = sizeFullname ? sizeClassNameMap[sizeFullname] || "" : "";
  const iconType = innerLoading ? "loading" : icon;
  const linkButtonRestProps = omit(rest, ["navigate"]);
  const hrefAndDisabled = linkButtonRestProps.href !== void 0 && mergedDisabled;
  const classes = classNames(prefixCls, hashId, {
    [`${prefixCls}-${shape}`]: shape !== "default" && shape,
    [`${prefixCls}-${type4}`]: type4,
    [`${prefixCls}-${sizeCls}`]: sizeCls,
    [`${prefixCls}-icon-only`]: !children && children !== 0 && !!iconType,
    [`${prefixCls}-background-ghost`]: ghost && !isUnBorderedButtonType(type4),
    [`${prefixCls}-loading`]: innerLoading,
    [`${prefixCls}-two-chinese-chars`]: hasTwoCNChar && autoInsertSpace && !innerLoading,
    [`${prefixCls}-block`]: block,
    [`${prefixCls}-dangerous`]: !!danger,
    [`${prefixCls}-rtl`]: direction === "rtl",
    [`${prefixCls}-disabled`]: hrefAndDisabled
  }, compactItemClassnames, className, rootClassName);
  const iconNode = icon && !innerLoading ? icon : /* @__PURE__ */ React$2.createElement(LoadingIcon$1, {
    existIcon: !!icon,
    prefixCls,
    loading: !!innerLoading
  });
  const kids = children || children === 0 ? spaceChildren(children, isNeedInserted() && autoInsertSpace) : null;
  if (linkButtonRestProps.href !== void 0) {
    return wrapSSR(/* @__PURE__ */ React$2.createElement("a", Object.assign({}, linkButtonRestProps, {
      className: classes,
      onClick: handleClick,
      ref: buttonRef
    }), iconNode, kids));
  }
  let buttonNode = /* @__PURE__ */ React$2.createElement("button", Object.assign({}, rest, {
    type: htmlType,
    className: classes,
    onClick: handleClick,
    disabled: mergedDisabled,
    ref: buttonRef
  }), iconNode, kids);
  if (!isUnBorderedButtonType(type4)) {
    buttonNode = /* @__PURE__ */ React$2.createElement(Wave$1, {
      disabled: !!innerLoading
    }, buttonNode);
  }
  return wrapSSR(buttonNode);
};
const Button = /* @__PURE__ */ React$2.forwardRef(InternalButton);
if (process.env.NODE_ENV !== "production") {
  Button.displayName = "Button";
}
Button.Group = Group;
Button.__ANT_BUTTON = true;
const Button$1 = Button;
const getCollapsedHeight = () => ({
  height: 0,
  opacity: 0
});
const getRealHeight = (node2) => {
  const {
    scrollHeight
  } = node2;
  return {
    height: scrollHeight,
    opacity: 1
  };
};
const getCurrentHeight = (node2) => ({
  height: node2 ? node2.offsetHeight : 0
});
const skipOpacityTransition = (_, event) => (event === null || event === void 0 ? void 0 : event.deadline) === true || event.propertyName === "height";
const initCollapseMotion = function() {
  let rootCls = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "ant";
  return {
    motionName: `${rootCls}-motion-collapse`,
    onAppearStart: getCollapsedHeight,
    onEnterStart: getCollapsedHeight,
    onAppearActive: getRealHeight,
    onEnterActive: getRealHeight,
    onLeaveStart: getCurrentHeight,
    onLeaveActive: getCollapsedHeight,
    onAppearEnd: skipOpacityTransition,
    onEnterEnd: skipOpacityTransition,
    onLeaveEnd: skipOpacityTransition,
    motionDeadline: 500
  };
};
const getTransitionDirection = (placement) => {
  if (placement !== void 0 && (placement === "topLeft" || placement === "topRight")) {
    return `slide-down`;
  }
  return `slide-up`;
};
const getTransitionName$1 = (rootPrefixCls, motion, transitionName) => {
  if (transitionName !== void 0) {
    return transitionName;
  }
  return `${rootPrefixCls}-${motion}`;
};
var OrderContext = /* @__PURE__ */ React$2.createContext(null);
var useLayoutEffect$1 = process.env.NODE_ENV !== "test" && canUseDom() ? React$2.useLayoutEffect : React$2.useEffect;
var useLayoutUpdateEffect = function useLayoutUpdateEffect2(callback, deps) {
  var firstMountRef = React$2.useRef(true);
  useLayoutEffect$1(function() {
    if (!firstMountRef.current) {
      return callback();
    }
  }, deps);
  useLayoutEffect$1(function() {
    firstMountRef.current = false;
    return function() {
      firstMountRef.current = true;
    };
  }, []);
};
var EMPTY_LIST$1 = [];
function useDom(render2, debug) {
  var _React$useState = React$2.useState(function() {
    if (!canUseDom()) {
      return null;
    }
    var defaultEle = document.createElement("div");
    if (process.env.NODE_ENV !== "production" && debug) {
      defaultEle.setAttribute("data-debug", debug);
    }
    return defaultEle;
  }), _React$useState2 = _slicedToArray$1(_React$useState, 1), ele = _React$useState2[0];
  var appendedRef = React$2.useRef(false);
  var queueCreate = React$2.useContext(OrderContext);
  var _React$useState3 = React$2.useState(EMPTY_LIST$1), _React$useState4 = _slicedToArray$1(_React$useState3, 2), queue = _React$useState4[0], setQueue = _React$useState4[1];
  var mergedQueueCreate = queueCreate || (appendedRef.current ? void 0 : function(appendFn) {
    setQueue(function(origin) {
      var newQueue = [appendFn].concat(_toConsumableArray(origin));
      return newQueue;
    });
  });
  function append2() {
    if (!ele.parentElement) {
      document.body.appendChild(ele);
    }
    appendedRef.current = true;
  }
  function cleanup2() {
    var _ele$parentElement;
    (_ele$parentElement = ele.parentElement) === null || _ele$parentElement === void 0 ? void 0 : _ele$parentElement.removeChild(ele);
    appendedRef.current = false;
  }
  useLayoutEffect$1(function() {
    if (render2) {
      if (queueCreate) {
        queueCreate(append2);
      } else {
        append2();
      }
    } else {
      cleanup2();
    }
    return cleanup2;
  }, [render2]);
  useLayoutEffect$1(function() {
    if (queue.length) {
      queue.forEach(function(appendFn) {
        return appendFn();
      });
      setQueue(EMPTY_LIST$1);
    }
  }, [queue]);
  return [ele, mergedQueueCreate];
}
var cached;
function getScrollBarSize(fresh) {
  if (typeof document === "undefined") {
    return 0;
  }
  if (fresh || cached === void 0) {
    var inner = document.createElement("div");
    inner.style.width = "100%";
    inner.style.height = "200px";
    var outer = document.createElement("div");
    var outerStyle = outer.style;
    outerStyle.position = "absolute";
    outerStyle.top = "0";
    outerStyle.left = "0";
    outerStyle.pointerEvents = "none";
    outerStyle.visibility = "hidden";
    outerStyle.width = "200px";
    outerStyle.height = "150px";
    outerStyle.overflow = "hidden";
    outer.appendChild(inner);
    document.body.appendChild(outer);
    var widthContained = inner.offsetWidth;
    outer.style.overflow = "scroll";
    var widthScroll = inner.offsetWidth;
    if (widthContained === widthScroll) {
      widthScroll = outer.clientWidth;
    }
    document.body.removeChild(outer);
    cached = widthContained - widthScroll;
  }
  return cached;
}
function isBodyOverflowing() {
  return document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight) && window.innerWidth > document.body.offsetWidth;
}
var UNIQUE_ID = "rc-util-locker-".concat(Date.now());
var uuid$2 = 0;
function useScrollLocker(lock) {
  var mergedLock = !!lock;
  var _React$useState = React$2.useState(function() {
    uuid$2 += 1;
    return "".concat(UNIQUE_ID, "_").concat(uuid$2);
  }), _React$useState2 = _slicedToArray$1(_React$useState, 1), id = _React$useState2[0];
  useLayoutEffect$1(function() {
    if (mergedLock) {
      var scrollbarSize = getScrollBarSize();
      var isOverflow = isBodyOverflowing();
      updateCSS("\nhtml body {\n  overflow-y: hidden;\n  ".concat(isOverflow ? "width: calc(100% - ".concat(scrollbarSize, "px);") : "", "\n}"), id);
    } else {
      removeCSS(id);
    }
    return function() {
      removeCSS(id);
    };
  }, [mergedLock, id]);
}
var inline = false;
function inlineMock(nextInline) {
  if (typeof nextInline === "boolean") {
    inline = nextInline;
  }
  return inline;
}
var getPortalContainer = function getPortalContainer2(getContainer2) {
  if (getContainer2 === false) {
    return false;
  }
  if (!canUseDom() || !getContainer2) {
    return null;
  }
  if (typeof getContainer2 === "string") {
    return document.querySelector(getContainer2);
  }
  if (typeof getContainer2 === "function") {
    return getContainer2();
  }
  return getContainer2;
};
var Portal$1 = /* @__PURE__ */ React$2.forwardRef(function(props, ref) {
  var open = props.open, autoLock = props.autoLock, getContainer2 = props.getContainer, debug = props.debug, _props$autoDestroy = props.autoDestroy, autoDestroy = _props$autoDestroy === void 0 ? true : _props$autoDestroy, children = props.children;
  var _React$useState = React$2.useState(open), _React$useState2 = _slicedToArray$1(_React$useState, 2), shouldRender = _React$useState2[0], setShouldRender = _React$useState2[1];
  var mergedRender = shouldRender || open;
  if (process.env.NODE_ENV !== "production") {
    warningOnce(canUseDom() || !open, "Portal only work in client side. Please call 'useEffect' to show Portal instead default render in SSR.");
  }
  React$2.useEffect(function() {
    if (autoDestroy || open) {
      setShouldRender(open);
    }
  }, [open, autoDestroy]);
  var _React$useState3 = React$2.useState(function() {
    return getPortalContainer(getContainer2);
  }), _React$useState4 = _slicedToArray$1(_React$useState3, 2), innerContainer = _React$useState4[0], setInnerContainer = _React$useState4[1];
  React$2.useEffect(function() {
    var customizeContainer = getPortalContainer(getContainer2);
    setInnerContainer(customizeContainer !== null && customizeContainer !== void 0 ? customizeContainer : null);
  });
  var _useDom = useDom(mergedRender && !innerContainer, debug), _useDom2 = _slicedToArray$1(_useDom, 2), defaultContainer = _useDom2[0], queueCreate = _useDom2[1];
  var mergedContainer = innerContainer !== null && innerContainer !== void 0 ? innerContainer : defaultContainer;
  useScrollLocker(autoLock && open && canUseDom() && (mergedContainer === defaultContainer || mergedContainer === document.body));
  var childRef = null;
  if (children && supportRef(children) && ref) {
    var _ref = children;
    childRef = _ref.ref;
  }
  var mergedRef = useComposeRef(childRef, ref);
  if (!mergedRender || !canUseDom() || innerContainer === void 0) {
    return null;
  }
  var renderInline = mergedContainer === false || inlineMock();
  var reffedChildren = children;
  if (ref) {
    reffedChildren = /* @__PURE__ */ React$2.cloneElement(children, {
      ref: mergedRef
    });
  }
  return /* @__PURE__ */ React$2.createElement(OrderContext.Provider, {
    value: queueCreate
  }, renderInline ? reffedChildren : /* @__PURE__ */ createPortal(reffedChildren, mergedContainer));
});
if (process.env.NODE_ENV !== "production") {
  Portal$1.displayName = "Portal";
}
function getUseId() {
  var fullClone2 = _objectSpread2$1({}, React$2);
  return fullClone2.useId;
}
var uuid$1 = 0;
function useId$1(id) {
  var _React$useState = React$2.useState("ssr-id"), _React$useState2 = _slicedToArray$1(_React$useState, 2), innerId = _React$useState2[0], setInnerId = _React$useState2[1];
  var useOriginId = getUseId();
  var reactNativeId = useOriginId === null || useOriginId === void 0 ? void 0 : useOriginId();
  React$2.useEffect(function() {
    if (!useOriginId) {
      var nextId = uuid$1;
      uuid$1 += 1;
      setInnerId("rc_unique_".concat(nextId));
    }
  }, []);
  if (id) {
    return id;
  }
  if (process.env.NODE_ENV === "test") {
    return "test-id";
  }
  return reactNativeId || innerId;
}
var attributes = "accept acceptCharset accessKey action allowFullScreen allowTransparency\n    alt async autoComplete autoFocus autoPlay capture cellPadding cellSpacing challenge\n    charSet checked classID className colSpan cols content contentEditable contextMenu\n    controls coords crossOrigin data dateTime default defer dir disabled download draggable\n    encType form formAction formEncType formMethod formNoValidate formTarget frameBorder\n    headers height hidden high href hrefLang htmlFor httpEquiv icon id inputMode integrity\n    is keyParams keyType kind label lang list loop low manifest marginHeight marginWidth max maxLength media\n    mediaGroup method min minLength multiple muted name noValidate nonce open\n    optimum pattern placeholder poster preload radioGroup readOnly rel required\n    reversed role rowSpan rows sandbox scope scoped scrolling seamless selected\n    shape size sizes span spellCheck src srcDoc srcLang srcSet start step style\n    summary tabIndex target title type useMap value width wmode wrap";
var eventsName = "onCopy onCut onPaste onCompositionEnd onCompositionStart onCompositionUpdate onKeyDown\n    onKeyPress onKeyUp onFocus onBlur onChange onInput onSubmit onClick onContextMenu onDoubleClick\n    onDrag onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop onMouseDown\n    onMouseEnter onMouseLeave onMouseMove onMouseOut onMouseOver onMouseUp onSelect onTouchCancel\n    onTouchEnd onTouchMove onTouchStart onScroll onWheel onAbort onCanPlay onCanPlayThrough\n    onDurationChange onEmptied onEncrypted onEnded onError onLoadedData onLoadedMetadata\n    onLoadStart onPause onPlay onPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend onTimeUpdate onVolumeChange onWaiting onLoad onError";
var propList = "".concat(attributes, " ").concat(eventsName).split(/[\s\n]+/);
var ariaPrefix = "aria-";
var dataPrefix = "data-";
function match(key, prefix) {
  return key.indexOf(prefix) === 0;
}
function pickAttrs(props) {
  var ariaOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  var mergedConfig;
  if (ariaOnly === false) {
    mergedConfig = {
      aria: true,
      data: true,
      attr: true
    };
  } else if (ariaOnly === true) {
    mergedConfig = {
      aria: true
    };
  } else {
    mergedConfig = _objectSpread2$1({}, ariaOnly);
  }
  var attrs = {};
  Object.keys(props).forEach(function(key) {
    if (
      // Aria
      mergedConfig.aria && (key === "role" || match(key, ariaPrefix)) || // Data
      mergedConfig.data && match(key, dataPrefix) || // Attr
      mergedConfig.attr && propList.includes(key)
    ) {
      attrs[key] = props[key];
    }
  });
  return attrs;
}
const FormItemInputContext = /* @__PURE__ */ React$2.createContext({});
const canUseDocElement = () => canUseDom() && window.document.documentElement;
let flexGapSupported;
const detectFlexGapSupported = () => {
  if (!canUseDocElement()) {
    return false;
  }
  if (flexGapSupported !== void 0) {
    return flexGapSupported;
  }
  const flex = document.createElement("div");
  flex.style.display = "flex";
  flex.style.flexDirection = "column";
  flex.style.rowGap = "1px";
  flex.appendChild(document.createElement("div"));
  flex.appendChild(document.createElement("div"));
  document.body.appendChild(flex);
  flexGapSupported = flex.scrollHeight === 1;
  document.body.removeChild(flex);
  return flexGapSupported;
};
const initMotionCommon = (duration) => ({
  animationDuration: duration,
  animationFillMode: "both"
});
const initMotionCommonLeave = (duration) => ({
  animationDuration: duration,
  animationFillMode: "both"
});
const initMotion = function(motionCls, inKeyframes, outKeyframes, duration) {
  let sameLevel = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
  const sameLevelPrefix = sameLevel ? "&" : "";
  return {
    [`
      ${sameLevelPrefix}${motionCls}-enter,
      ${sameLevelPrefix}${motionCls}-appear
    `]: Object.assign(Object.assign({}, initMotionCommon(duration)), {
      animationPlayState: "paused"
    }),
    [`${sameLevelPrefix}${motionCls}-leave`]: Object.assign(Object.assign({}, initMotionCommonLeave(duration)), {
      animationPlayState: "paused"
    }),
    [`
      ${sameLevelPrefix}${motionCls}-enter${motionCls}-enter-active,
      ${sameLevelPrefix}${motionCls}-appear${motionCls}-appear-active
    `]: {
      animationName: inKeyframes,
      animationPlayState: "running"
    },
    [`${sameLevelPrefix}${motionCls}-leave${motionCls}-leave-active`]: {
      animationName: outKeyframes,
      animationPlayState: "running",
      pointerEvents: "none"
    }
  };
};
const moveDownIn = new Keyframe("antMoveDownIn", {
  "0%": {
    transform: "translate3d(0, 100%, 0)",
    transformOrigin: "0 0",
    opacity: 0
  },
  "100%": {
    transform: "translate3d(0, 0, 0)",
    transformOrigin: "0 0",
    opacity: 1
  }
});
const moveDownOut = new Keyframe("antMoveDownOut", {
  "0%": {
    transform: "translate3d(0, 0, 0)",
    transformOrigin: "0 0",
    opacity: 1
  },
  "100%": {
    transform: "translate3d(0, 100%, 0)",
    transformOrigin: "0 0",
    opacity: 0
  }
});
const moveLeftIn = new Keyframe("antMoveLeftIn", {
  "0%": {
    transform: "translate3d(-100%, 0, 0)",
    transformOrigin: "0 0",
    opacity: 0
  },
  "100%": {
    transform: "translate3d(0, 0, 0)",
    transformOrigin: "0 0",
    opacity: 1
  }
});
const moveLeftOut = new Keyframe("antMoveLeftOut", {
  "0%": {
    transform: "translate3d(0, 0, 0)",
    transformOrigin: "0 0",
    opacity: 1
  },
  "100%": {
    transform: "translate3d(-100%, 0, 0)",
    transformOrigin: "0 0",
    opacity: 0
  }
});
const moveRightIn = new Keyframe("antMoveRightIn", {
  "0%": {
    transform: "translate3d(100%, 0, 0)",
    transformOrigin: "0 0",
    opacity: 0
  },
  "100%": {
    transform: "translate3d(0, 0, 0)",
    transformOrigin: "0 0",
    opacity: 1
  }
});
const moveRightOut = new Keyframe("antMoveRightOut", {
  "0%": {
    transform: "translate3d(0, 0, 0)",
    transformOrigin: "0 0",
    opacity: 1
  },
  "100%": {
    transform: "translate3d(100%, 0, 0)",
    transformOrigin: "0 0",
    opacity: 0
  }
});
const moveUpIn = new Keyframe("antMoveUpIn", {
  "0%": {
    transform: "translate3d(0, -100%, 0)",
    transformOrigin: "0 0",
    opacity: 0
  },
  "100%": {
    transform: "translate3d(0, 0, 0)",
    transformOrigin: "0 0",
    opacity: 1
  }
});
const moveUpOut = new Keyframe("antMoveUpOut", {
  "0%": {
    transform: "translate3d(0, 0, 0)",
    transformOrigin: "0 0",
    opacity: 1
  },
  "100%": {
    transform: "translate3d(0, -100%, 0)",
    transformOrigin: "0 0",
    opacity: 0
  }
});
const moveMotion = {
  "move-up": {
    inKeyframes: moveUpIn,
    outKeyframes: moveUpOut
  },
  "move-down": {
    inKeyframes: moveDownIn,
    outKeyframes: moveDownOut
  },
  "move-left": {
    inKeyframes: moveLeftIn,
    outKeyframes: moveLeftOut
  },
  "move-right": {
    inKeyframes: moveRightIn,
    outKeyframes: moveRightOut
  }
};
const initMoveMotion = (token2, motionName) => {
  const {
    antCls
  } = token2;
  const motionCls = `${antCls}-${motionName}`;
  const {
    inKeyframes,
    outKeyframes
  } = moveMotion[motionName];
  return [initMotion(motionCls, inKeyframes, outKeyframes, token2.motionDurationMid), {
    [`
        ${motionCls}-enter,
        ${motionCls}-appear
      `]: {
      opacity: 0,
      animationTimingFunction: token2.motionEaseOutCirc
    },
    [`${motionCls}-leave`]: {
      animationTimingFunction: token2.motionEaseInOutCirc
    }
  }];
};
const slideUpIn = new Keyframe("antSlideUpIn", {
  "0%": {
    transform: "scaleY(0.8)",
    transformOrigin: "0% 0%",
    opacity: 0
  },
  "100%": {
    transform: "scaleY(1)",
    transformOrigin: "0% 0%",
    opacity: 1
  }
});
const slideUpOut = new Keyframe("antSlideUpOut", {
  "0%": {
    transform: "scaleY(1)",
    transformOrigin: "0% 0%",
    opacity: 1
  },
  "100%": {
    transform: "scaleY(0.8)",
    transformOrigin: "0% 0%",
    opacity: 0
  }
});
const slideDownIn = new Keyframe("antSlideDownIn", {
  "0%": {
    transform: "scaleY(0.8)",
    transformOrigin: "100% 100%",
    opacity: 0
  },
  "100%": {
    transform: "scaleY(1)",
    transformOrigin: "100% 100%",
    opacity: 1
  }
});
const slideDownOut = new Keyframe("antSlideDownOut", {
  "0%": {
    transform: "scaleY(1)",
    transformOrigin: "100% 100%",
    opacity: 1
  },
  "100%": {
    transform: "scaleY(0.8)",
    transformOrigin: "100% 100%",
    opacity: 0
  }
});
const slideLeftIn = new Keyframe("antSlideLeftIn", {
  "0%": {
    transform: "scaleX(0.8)",
    transformOrigin: "0% 0%",
    opacity: 0
  },
  "100%": {
    transform: "scaleX(1)",
    transformOrigin: "0% 0%",
    opacity: 1
  }
});
const slideLeftOut = new Keyframe("antSlideLeftOut", {
  "0%": {
    transform: "scaleX(1)",
    transformOrigin: "0% 0%",
    opacity: 1
  },
  "100%": {
    transform: "scaleX(0.8)",
    transformOrigin: "0% 0%",
    opacity: 0
  }
});
const slideRightIn = new Keyframe("antSlideRightIn", {
  "0%": {
    transform: "scaleX(0.8)",
    transformOrigin: "100% 0%",
    opacity: 0
  },
  "100%": {
    transform: "scaleX(1)",
    transformOrigin: "100% 0%",
    opacity: 1
  }
});
const slideRightOut = new Keyframe("antSlideRightOut", {
  "0%": {
    transform: "scaleX(1)",
    transformOrigin: "100% 0%",
    opacity: 1
  },
  "100%": {
    transform: "scaleX(0.8)",
    transformOrigin: "100% 0%",
    opacity: 0
  }
});
const slideMotion = {
  "slide-up": {
    inKeyframes: slideUpIn,
    outKeyframes: slideUpOut
  },
  "slide-down": {
    inKeyframes: slideDownIn,
    outKeyframes: slideDownOut
  },
  "slide-left": {
    inKeyframes: slideLeftIn,
    outKeyframes: slideLeftOut
  },
  "slide-right": {
    inKeyframes: slideRightIn,
    outKeyframes: slideRightOut
  }
};
const initSlideMotion = (token2, motionName) => {
  const {
    antCls
  } = token2;
  const motionCls = `${antCls}-${motionName}`;
  const {
    inKeyframes,
    outKeyframes
  } = slideMotion[motionName];
  return [initMotion(motionCls, inKeyframes, outKeyframes, token2.motionDurationMid), {
    [`
      ${motionCls}-enter,
      ${motionCls}-appear
    `]: {
      transform: "scale(0)",
      transformOrigin: "0% 0%",
      opacity: 0,
      animationTimingFunction: token2.motionEaseOutQuint,
      [`&-prepare`]: {
        transform: "scale(1)"
      }
    },
    [`${motionCls}-leave`]: {
      animationTimingFunction: token2.motionEaseInQuint
    }
  }];
};
const zoomIn = new Keyframe("antZoomIn", {
  "0%": {
    transform: "scale(0.2)",
    opacity: 0
  },
  "100%": {
    transform: "scale(1)",
    opacity: 1
  }
});
const zoomOut = new Keyframe("antZoomOut", {
  "0%": {
    transform: "scale(1)"
  },
  "100%": {
    transform: "scale(0.2)",
    opacity: 0
  }
});
const zoomBigIn = new Keyframe("antZoomBigIn", {
  "0%": {
    transform: "scale(0.8)",
    opacity: 0
  },
  "100%": {
    transform: "scale(1)",
    opacity: 1
  }
});
const zoomBigOut = new Keyframe("antZoomBigOut", {
  "0%": {
    transform: "scale(1)"
  },
  "100%": {
    transform: "scale(0.8)",
    opacity: 0
  }
});
const zoomUpIn = new Keyframe("antZoomUpIn", {
  "0%": {
    transform: "scale(0.8)",
    transformOrigin: "50% 0%",
    opacity: 0
  },
  "100%": {
    transform: "scale(1)",
    transformOrigin: "50% 0%"
  }
});
const zoomUpOut = new Keyframe("antZoomUpOut", {
  "0%": {
    transform: "scale(1)",
    transformOrigin: "50% 0%"
  },
  "100%": {
    transform: "scale(0.8)",
    transformOrigin: "50% 0%",
    opacity: 0
  }
});
const zoomLeftIn = new Keyframe("antZoomLeftIn", {
  "0%": {
    transform: "scale(0.8)",
    transformOrigin: "0% 50%",
    opacity: 0
  },
  "100%": {
    transform: "scale(1)",
    transformOrigin: "0% 50%"
  }
});
const zoomLeftOut = new Keyframe("antZoomLeftOut", {
  "0%": {
    transform: "scale(1)",
    transformOrigin: "0% 50%"
  },
  "100%": {
    transform: "scale(0.8)",
    transformOrigin: "0% 50%",
    opacity: 0
  }
});
const zoomRightIn = new Keyframe("antZoomRightIn", {
  "0%": {
    transform: "scale(0.8)",
    transformOrigin: "100% 50%",
    opacity: 0
  },
  "100%": {
    transform: "scale(1)",
    transformOrigin: "100% 50%"
  }
});
const zoomRightOut = new Keyframe("antZoomRightOut", {
  "0%": {
    transform: "scale(1)",
    transformOrigin: "100% 50%"
  },
  "100%": {
    transform: "scale(0.8)",
    transformOrigin: "100% 50%",
    opacity: 0
  }
});
const zoomDownIn = new Keyframe("antZoomDownIn", {
  "0%": {
    transform: "scale(0.8)",
    transformOrigin: "50% 100%",
    opacity: 0
  },
  "100%": {
    transform: "scale(1)",
    transformOrigin: "50% 100%"
  }
});
const zoomDownOut = new Keyframe("antZoomDownOut", {
  "0%": {
    transform: "scale(1)",
    transformOrigin: "50% 100%"
  },
  "100%": {
    transform: "scale(0.8)",
    transformOrigin: "50% 100%",
    opacity: 0
  }
});
const zoomMotion = {
  zoom: {
    inKeyframes: zoomIn,
    outKeyframes: zoomOut
  },
  "zoom-big": {
    inKeyframes: zoomBigIn,
    outKeyframes: zoomBigOut
  },
  "zoom-big-fast": {
    inKeyframes: zoomBigIn,
    outKeyframes: zoomBigOut
  },
  "zoom-left": {
    inKeyframes: zoomLeftIn,
    outKeyframes: zoomLeftOut
  },
  "zoom-right": {
    inKeyframes: zoomRightIn,
    outKeyframes: zoomRightOut
  },
  "zoom-up": {
    inKeyframes: zoomUpIn,
    outKeyframes: zoomUpOut
  },
  "zoom-down": {
    inKeyframes: zoomDownIn,
    outKeyframes: zoomDownOut
  }
};
const initZoomMotion = (token2, motionName) => {
  const {
    antCls
  } = token2;
  const motionCls = `${antCls}-${motionName}`;
  const {
    inKeyframes,
    outKeyframes
  } = zoomMotion[motionName];
  return [initMotion(motionCls, inKeyframes, outKeyframes, motionName === "zoom-big-fast" ? token2.motionDurationFast : token2.motionDurationMid), {
    [`
        ${motionCls}-enter,
        ${motionCls}-appear
      `]: {
      transform: "scale(0)",
      opacity: 0,
      animationTimingFunction: token2.motionEaseOutCirc,
      "&-prepare": {
        transform: "none"
      }
    },
    [`${motionCls}-leave`]: {
      animationTimingFunction: token2.motionEaseInOutCirc
    }
  }];
};
const genCollapseMotion = (token2) => ({
  [token2.componentCls]: {
    // For common/openAnimation
    [`${token2.antCls}-motion-collapse-legacy`]: {
      overflow: "hidden",
      "&-active": {
        transition: `height ${token2.motionDurationMid} ${token2.motionEaseInOut},
        opacity ${token2.motionDurationMid} ${token2.motionEaseInOut} !important`
      }
    },
    [`${token2.antCls}-motion-collapse`]: {
      overflow: "hidden",
      transition: `height ${token2.motionDurationMid} ${token2.motionEaseInOut},
        opacity ${token2.motionDurationMid} ${token2.motionEaseInOut} !important`
    }
  }
});
const genCollapseMotion$1 = genCollapseMotion;
function hasValue$1(value) {
  return value !== void 0;
}
function useMergedState(defaultStateValue, option) {
  var _ref = option || {}, defaultValue = _ref.defaultValue, value = _ref.value, onChange = _ref.onChange, postState = _ref.postState;
  var _useState = useSafeState(function() {
    if (hasValue$1(value)) {
      return value;
    } else if (hasValue$1(defaultValue)) {
      return typeof defaultValue === "function" ? defaultValue() : defaultValue;
    } else {
      return typeof defaultStateValue === "function" ? defaultStateValue() : defaultStateValue;
    }
  }), _useState2 = _slicedToArray$1(_useState, 2), innerValue = _useState2[0], setInnerValue = _useState2[1];
  var mergedValue = value !== void 0 ? value : innerValue;
  var postMergedValue = postState ? postState(mergedValue) : mergedValue;
  var onChangeFn = useEvent(onChange);
  var _useState3 = useSafeState([mergedValue]), _useState4 = _slicedToArray$1(_useState3, 2), prevValue = _useState4[0], setPrevValue = _useState4[1];
  useLayoutUpdateEffect(function() {
    var prev2 = prevValue[0];
    if (innerValue !== prev2) {
      onChangeFn(innerValue, prev2);
    }
  }, [prevValue]);
  useLayoutUpdateEffect(function() {
    if (!hasValue$1(value)) {
      setInnerValue(value);
    }
  }, [value]);
  var triggerChange = useEvent(function(updater, ignoreDestroy) {
    setInnerValue(updater, ignoreDestroy);
    setPrevValue([mergedValue], ignoreDestroy);
  });
  return [postMergedValue, triggerChange];
}
const isMobile = function() {
  if (typeof navigator === "undefined" || typeof window === "undefined") {
    return false;
  }
  var agent = navigator.userAgent || navigator.vendor || window.opera;
  return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(agent) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(agent === null || agent === void 0 ? void 0 : agent.substr(0, 4));
};
var BaseSelectContext = /* @__PURE__ */ React$2.createContext(null);
function useBaseProps() {
  return React$2.useContext(BaseSelectContext);
}
function useDelayReset() {
  var timeout = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;
  var _React$useState = React$2.useState(false), _React$useState2 = _slicedToArray$1(_React$useState, 2), bool = _React$useState2[0], setBool = _React$useState2[1];
  var delayRef = React$2.useRef(null);
  var cancelLatest = function cancelLatest2() {
    window.clearTimeout(delayRef.current);
  };
  React$2.useEffect(function() {
    return cancelLatest;
  }, []);
  var delaySetBool = function delaySetBool2(value, callback) {
    cancelLatest();
    delayRef.current = window.setTimeout(function() {
      setBool(value);
      if (callback) {
        callback();
      }
    }, timeout);
  };
  return [bool, delaySetBool, cancelLatest];
}
function useLock() {
  var duration = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 250;
  var lockRef = React$2.useRef(null);
  var timeoutRef = React$2.useRef(null);
  React$2.useEffect(function() {
    return function() {
      window.clearTimeout(timeoutRef.current);
    };
  }, []);
  function doLock(locked) {
    if (locked || lockRef.current === null) {
      lockRef.current = locked;
    }
    window.clearTimeout(timeoutRef.current);
    timeoutRef.current = window.setTimeout(function() {
      lockRef.current = null;
    }, duration);
  }
  return [function() {
    return lockRef.current;
  }, doLock];
}
function useSelectTriggerControl(elements, open, triggerOpen, customizedTrigger) {
  var propsRef = React$2.useRef(null);
  propsRef.current = {
    open,
    triggerOpen,
    customizedTrigger
  };
  React$2.useEffect(function() {
    function onGlobalMouseDown(event) {
      var _propsRef$current;
      if ((_propsRef$current = propsRef.current) !== null && _propsRef$current !== void 0 && _propsRef$current.customizedTrigger) {
        return;
      }
      var target = event.target;
      if (target.shadowRoot && event.composed) {
        target = event.composedPath()[0] || target;
      }
      if (propsRef.current.open && elements().filter(function(element) {
        return element;
      }).every(function(element) {
        return !element.contains(target) && element !== target;
      })) {
        propsRef.current.triggerOpen(false);
      }
    }
    window.addEventListener("mousedown", onGlobalMouseDown);
    return function() {
      return window.removeEventListener("mousedown", onGlobalMouseDown);
    };
  }, []);
}
var _excluded$m = ["prefixCls", "invalidate", "item", "renderItem", "responsive", "responsiveDisabled", "registerSize", "itemKey", "className", "style", "children", "display", "order", "component"];
var UNDEFINED = void 0;
function InternalItem(props, ref) {
  var prefixCls = props.prefixCls, invalidate = props.invalidate, item = props.item, renderItem = props.renderItem, responsive = props.responsive, responsiveDisabled = props.responsiveDisabled, registerSize = props.registerSize, itemKey2 = props.itemKey, className = props.className, style2 = props.style, children = props.children, display = props.display, order = props.order, _props$component = props.component, Component = _props$component === void 0 ? "div" : _props$component, restProps = _objectWithoutProperties(props, _excluded$m);
  var mergedHidden = responsive && !display;
  function internalRegisterSize(width) {
    registerSize(itemKey2, width);
  }
  React$2.useEffect(function() {
    return function() {
      internalRegisterSize(null);
    };
  }, []);
  var childNode = renderItem && item !== UNDEFINED ? renderItem(item) : children;
  var overflowStyle;
  if (!invalidate) {
    overflowStyle = {
      opacity: mergedHidden ? 0 : 1,
      height: mergedHidden ? 0 : UNDEFINED,
      overflowY: mergedHidden ? "hidden" : UNDEFINED,
      order: responsive ? order : UNDEFINED,
      pointerEvents: mergedHidden ? "none" : UNDEFINED,
      position: mergedHidden ? "absolute" : UNDEFINED
    };
  }
  var overflowProps = {};
  if (mergedHidden) {
    overflowProps["aria-hidden"] = true;
  }
  var itemNode = /* @__PURE__ */ React$2.createElement(Component, _extends$1({
    className: classNames(!invalidate && prefixCls, className),
    style: _objectSpread2$1(_objectSpread2$1({}, overflowStyle), style2)
  }, overflowProps, restProps, {
    ref
  }), childNode);
  if (responsive) {
    itemNode = /* @__PURE__ */ React$2.createElement(RefResizeObserver, {
      onResize: function onResize2(_ref) {
        var offsetWidth = _ref.offsetWidth;
        internalRegisterSize(offsetWidth);
      },
      disabled: responsiveDisabled
    }, itemNode);
  }
  return itemNode;
}
var Item$3 = /* @__PURE__ */ React$2.forwardRef(InternalItem);
Item$3.displayName = "Item";
function channelUpdate(callback) {
  if (typeof MessageChannel === "undefined") {
    wrapperRaf(callback);
  } else {
    var channel = new MessageChannel();
    channel.port1.onmessage = function() {
      return callback();
    };
    channel.port2.postMessage(void 0);
  }
}
function useBatcher() {
  var updateFuncRef = React$2.useRef(null);
  var notifyEffectUpdate = function notifyEffectUpdate2(callback) {
    if (!updateFuncRef.current) {
      updateFuncRef.current = [];
      channelUpdate(function() {
        unstable_batchedUpdates(function() {
          updateFuncRef.current.forEach(function(fn) {
            fn();
          });
          updateFuncRef.current = null;
        });
      });
    }
    updateFuncRef.current.push(callback);
  };
  return notifyEffectUpdate;
}
function useEffectState(notifyEffectUpdate, defaultValue) {
  var _React$useState = React$2.useState(defaultValue), _React$useState2 = _slicedToArray$1(_React$useState, 2), stateValue = _React$useState2[0], setStateValue = _React$useState2[1];
  var setEffectVal = useEvent(function(nextValue) {
    notifyEffectUpdate(function() {
      setStateValue(nextValue);
    });
  });
  return [stateValue, setEffectVal];
}
var _excluded$l = ["component"], _excluded2$4 = ["className"], _excluded3$1 = ["className"];
var InternalRawItem = function InternalRawItem2(props, ref) {
  var context = React$2.useContext(OverflowContext);
  if (!context) {
    var _props$component = props.component, Component = _props$component === void 0 ? "div" : _props$component, _restProps = _objectWithoutProperties(props, _excluded$l);
    return /* @__PURE__ */ React$2.createElement(Component, _extends$1({}, _restProps, {
      ref
    }));
  }
  var contextClassName = context.className, restContext = _objectWithoutProperties(context, _excluded2$4);
  var className = props.className, restProps = _objectWithoutProperties(props, _excluded3$1);
  return /* @__PURE__ */ React$2.createElement(OverflowContext.Provider, {
    value: null
  }, /* @__PURE__ */ React$2.createElement(Item$3, _extends$1({
    ref,
    className: classNames(contextClassName, className)
  }, restContext, restProps)));
};
var RawItem = /* @__PURE__ */ React$2.forwardRef(InternalRawItem);
RawItem.displayName = "RawItem";
var _excluded$k = ["prefixCls", "data", "renderItem", "renderRawItem", "itemKey", "itemWidth", "ssr", "style", "className", "maxCount", "renderRest", "renderRawRest", "suffix", "component", "itemComponent", "onVisibleChange"];
var OverflowContext = /* @__PURE__ */ React$2.createContext(null);
var RESPONSIVE = "responsive";
var INVALIDATE = "invalidate";
function defaultRenderRest(omittedItems) {
  return "+ ".concat(omittedItems.length, " ...");
}
function Overflow(props, ref) {
  var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-overflow" : _props$prefixCls, _props$data = props.data, data2 = _props$data === void 0 ? [] : _props$data, renderItem = props.renderItem, renderRawItem = props.renderRawItem, itemKey2 = props.itemKey, _props$itemWidth = props.itemWidth, itemWidth = _props$itemWidth === void 0 ? 10 : _props$itemWidth, ssr = props.ssr, style2 = props.style, className = props.className, maxCount = props.maxCount, renderRest = props.renderRest, renderRawRest = props.renderRawRest, suffix = props.suffix, _props$component = props.component, Component = _props$component === void 0 ? "div" : _props$component, itemComponent = props.itemComponent, onVisibleChange = props.onVisibleChange, restProps = _objectWithoutProperties(props, _excluded$k);
  var fullySSR = ssr === "full";
  var notifyEffectUpdate = useBatcher();
  var _useEffectState = useEffectState(notifyEffectUpdate, null), _useEffectState2 = _slicedToArray$1(_useEffectState, 2), containerWidth = _useEffectState2[0], setContainerWidth = _useEffectState2[1];
  var mergedContainerWidth = containerWidth || 0;
  var _useEffectState3 = useEffectState(notifyEffectUpdate, /* @__PURE__ */ new Map()), _useEffectState4 = _slicedToArray$1(_useEffectState3, 2), itemWidths = _useEffectState4[0], setItemWidths = _useEffectState4[1];
  var _useEffectState5 = useEffectState(notifyEffectUpdate, 0), _useEffectState6 = _slicedToArray$1(_useEffectState5, 2), prevRestWidth = _useEffectState6[0], setPrevRestWidth = _useEffectState6[1];
  var _useEffectState7 = useEffectState(notifyEffectUpdate, 0), _useEffectState8 = _slicedToArray$1(_useEffectState7, 2), restWidth = _useEffectState8[0], setRestWidth = _useEffectState8[1];
  var _useEffectState9 = useEffectState(notifyEffectUpdate, 0), _useEffectState10 = _slicedToArray$1(_useEffectState9, 2), suffixWidth = _useEffectState10[0], setSuffixWidth = _useEffectState10[1];
  var _useState = useState(null), _useState2 = _slicedToArray$1(_useState, 2), suffixFixedStart = _useState2[0], setSuffixFixedStart = _useState2[1];
  var _useState3 = useState(null), _useState4 = _slicedToArray$1(_useState3, 2), displayCount = _useState4[0], setDisplayCount = _useState4[1];
  var mergedDisplayCount = React$2.useMemo(function() {
    if (displayCount === null && fullySSR) {
      return Number.MAX_SAFE_INTEGER;
    }
    return displayCount || 0;
  }, [displayCount, containerWidth]);
  var _useState5 = useState(false), _useState6 = _slicedToArray$1(_useState5, 2), restReady = _useState6[0], setRestReady = _useState6[1];
  var itemPrefixCls = "".concat(prefixCls, "-item");
  var mergedRestWidth = Math.max(prevRestWidth, restWidth);
  var isResponsive = maxCount === RESPONSIVE;
  var shouldResponsive = data2.length && isResponsive;
  var invalidate = maxCount === INVALIDATE;
  var showRest = shouldResponsive || typeof maxCount === "number" && data2.length > maxCount;
  var mergedData = useMemo$1(function() {
    var items = data2;
    if (shouldResponsive) {
      if (containerWidth === null && fullySSR) {
        items = data2;
      } else {
        items = data2.slice(0, Math.min(data2.length, mergedContainerWidth / itemWidth));
      }
    } else if (typeof maxCount === "number") {
      items = data2.slice(0, maxCount);
    }
    return items;
  }, [data2, itemWidth, containerWidth, maxCount, shouldResponsive]);
  var omittedItems = useMemo$1(function() {
    if (shouldResponsive) {
      return data2.slice(mergedDisplayCount + 1);
    }
    return data2.slice(mergedData.length);
  }, [data2, mergedData, shouldResponsive, mergedDisplayCount]);
  var getKey2 = useCallback(function(item, index2) {
    var _ref;
    if (typeof itemKey2 === "function") {
      return itemKey2(item);
    }
    return (_ref = itemKey2 && (item === null || item === void 0 ? void 0 : item[itemKey2])) !== null && _ref !== void 0 ? _ref : index2;
  }, [itemKey2]);
  var mergedRenderItem = useCallback(renderItem || function(item) {
    return item;
  }, [renderItem]);
  function updateDisplayCount(count, suffixFixedStartVal, notReady) {
    if (displayCount === count && (suffixFixedStartVal === void 0 || suffixFixedStartVal === suffixFixedStart)) {
      return;
    }
    setDisplayCount(count);
    if (!notReady) {
      setRestReady(count < data2.length - 1);
      onVisibleChange === null || onVisibleChange === void 0 ? void 0 : onVisibleChange(count);
    }
    if (suffixFixedStartVal !== void 0) {
      setSuffixFixedStart(suffixFixedStartVal);
    }
  }
  function onOverflowResize(_, element) {
    setContainerWidth(element.clientWidth);
  }
  function registerSize(key, width) {
    setItemWidths(function(origin) {
      var clone2 = new Map(origin);
      if (width === null) {
        clone2.delete(key);
      } else {
        clone2.set(key, width);
      }
      return clone2;
    });
  }
  function registerOverflowSize(_, width) {
    setRestWidth(width);
    setPrevRestWidth(restWidth);
  }
  function registerSuffixSize(_, width) {
    setSuffixWidth(width);
  }
  function getItemWidth(index2) {
    return itemWidths.get(getKey2(mergedData[index2], index2));
  }
  useLayoutEffect$1(function() {
    if (mergedContainerWidth && typeof mergedRestWidth === "number" && mergedData) {
      var totalWidth = suffixWidth;
      var len = mergedData.length;
      var lastIndex = len - 1;
      if (!len) {
        updateDisplayCount(0, null);
        return;
      }
      for (var i = 0; i < len; i += 1) {
        var currentItemWidth = getItemWidth(i);
        if (fullySSR) {
          currentItemWidth = currentItemWidth || 0;
        }
        if (currentItemWidth === void 0) {
          updateDisplayCount(i - 1, void 0, true);
          break;
        }
        totalWidth += currentItemWidth;
        if (
          // Only one means `totalWidth` is the final width
          lastIndex === 0 && totalWidth <= mergedContainerWidth || // Last two width will be the final width
          i === lastIndex - 1 && totalWidth + getItemWidth(lastIndex) <= mergedContainerWidth
        ) {
          updateDisplayCount(lastIndex, null);
          break;
        } else if (totalWidth + mergedRestWidth > mergedContainerWidth) {
          updateDisplayCount(i - 1, totalWidth - currentItemWidth - suffixWidth + restWidth);
          break;
        }
      }
      if (suffix && getItemWidth(0) + suffixWidth > mergedContainerWidth) {
        setSuffixFixedStart(null);
      }
    }
  }, [mergedContainerWidth, itemWidths, restWidth, suffixWidth, getKey2, mergedData]);
  var displayRest = restReady && !!omittedItems.length;
  var suffixStyle = {};
  if (suffixFixedStart !== null && shouldResponsive) {
    suffixStyle = {
      position: "absolute",
      left: suffixFixedStart,
      top: 0
    };
  }
  var itemSharedProps = {
    prefixCls: itemPrefixCls,
    responsive: shouldResponsive,
    component: itemComponent,
    invalidate
  };
  var internalRenderItemNode = renderRawItem ? function(item, index2) {
    var key = getKey2(item, index2);
    return /* @__PURE__ */ React$2.createElement(OverflowContext.Provider, {
      key,
      value: _objectSpread2$1(_objectSpread2$1({}, itemSharedProps), {}, {
        order: index2,
        item,
        itemKey: key,
        registerSize,
        display: index2 <= mergedDisplayCount
      })
    }, renderRawItem(item, index2));
  } : function(item, index2) {
    var key = getKey2(item, index2);
    return /* @__PURE__ */ React$2.createElement(Item$3, _extends$1({}, itemSharedProps, {
      order: index2,
      key,
      item,
      renderItem: mergedRenderItem,
      itemKey: key,
      registerSize,
      display: index2 <= mergedDisplayCount
    }));
  };
  var restNode;
  var restContextProps = {
    order: displayRest ? mergedDisplayCount : Number.MAX_SAFE_INTEGER,
    className: "".concat(itemPrefixCls, "-rest"),
    registerSize: registerOverflowSize,
    display: displayRest
  };
  if (!renderRawRest) {
    var mergedRenderRest = renderRest || defaultRenderRest;
    restNode = /* @__PURE__ */ React$2.createElement(Item$3, _extends$1({}, itemSharedProps, restContextProps), typeof mergedRenderRest === "function" ? mergedRenderRest(omittedItems) : mergedRenderRest);
  } else if (renderRawRest) {
    restNode = /* @__PURE__ */ React$2.createElement(OverflowContext.Provider, {
      value: _objectSpread2$1(_objectSpread2$1({}, itemSharedProps), restContextProps)
    }, renderRawRest(omittedItems));
  }
  var overflowNode = /* @__PURE__ */ React$2.createElement(Component, _extends$1({
    className: classNames(!invalidate && prefixCls, className),
    style: style2,
    ref
  }, restProps), mergedData.map(internalRenderItemNode), showRest ? restNode : null, suffix && /* @__PURE__ */ React$2.createElement(Item$3, _extends$1({}, itemSharedProps, {
    responsive: isResponsive,
    responsiveDisabled: !shouldResponsive,
    order: mergedDisplayCount,
    className: "".concat(itemPrefixCls, "-suffix"),
    registerSize: registerSuffixSize,
    display: true,
    style: suffixStyle
  }), suffix));
  if (isResponsive) {
    overflowNode = /* @__PURE__ */ React$2.createElement(RefResizeObserver, {
      onResize: onOverflowResize,
      disabled: !shouldResponsive
    }, overflowNode);
  }
  return overflowNode;
}
var ForwardOverflow = /* @__PURE__ */ React$2.forwardRef(Overflow);
ForwardOverflow.displayName = "Overflow";
ForwardOverflow.Item = RawItem;
ForwardOverflow.RESPONSIVE = RESPONSIVE;
ForwardOverflow.INVALIDATE = INVALIDATE;
var TransBtn = function TransBtn2(_ref) {
  var className = _ref.className, customizeIcon = _ref.customizeIcon, customizeIconProps = _ref.customizeIconProps, _onMouseDown = _ref.onMouseDown, onClick = _ref.onClick, children = _ref.children;
  var icon;
  if (typeof customizeIcon === "function") {
    icon = customizeIcon(customizeIconProps);
  } else {
    icon = customizeIcon;
  }
  return /* @__PURE__ */ React$2.createElement("span", {
    className,
    onMouseDown: function onMouseDown2(event) {
      event.preventDefault();
      if (_onMouseDown) {
        _onMouseDown(event);
      }
    },
    style: {
      userSelect: "none",
      WebkitUserSelect: "none"
    },
    unselectable: "on",
    onClick,
    "aria-hidden": true
  }, icon !== void 0 ? icon : /* @__PURE__ */ React$2.createElement("span", {
    className: classNames(className.split(/\s+/).map(function(cls) {
      return "".concat(cls, "-icon");
    }))
  }, children));
};
var Input = function Input2(_ref, ref) {
  var _inputNode2, _inputNode2$props;
  var prefixCls = _ref.prefixCls, id = _ref.id, inputElement = _ref.inputElement, disabled = _ref.disabled, tabIndex = _ref.tabIndex, autoFocus = _ref.autoFocus, autoComplete = _ref.autoComplete, editable = _ref.editable, activeDescendantId = _ref.activeDescendantId, value = _ref.value, maxLength = _ref.maxLength, _onKeyDown = _ref.onKeyDown, _onMouseDown = _ref.onMouseDown, _onChange = _ref.onChange, onPaste = _ref.onPaste, _onCompositionStart = _ref.onCompositionStart, _onCompositionEnd = _ref.onCompositionEnd, open = _ref.open, attrs = _ref.attrs;
  var inputNode = inputElement || /* @__PURE__ */ React$2.createElement("input", null);
  var _inputNode = inputNode, originRef = _inputNode.ref, originProps = _inputNode.props;
  var onOriginKeyDown = originProps.onKeyDown, onOriginChange = originProps.onChange, onOriginMouseDown = originProps.onMouseDown, onOriginCompositionStart = originProps.onCompositionStart, onOriginCompositionEnd = originProps.onCompositionEnd, style2 = originProps.style;
  warning$4(!("maxLength" in inputNode.props), "Passing 'maxLength' to input element directly may not work because input in BaseSelect is controlled.");
  inputNode = /* @__PURE__ */ React$2.cloneElement(inputNode, _objectSpread2$1(_objectSpread2$1(_objectSpread2$1({
    type: "search"
  }, originProps), {}, {
    // Override over origin props
    id,
    ref: composeRef(ref, originRef),
    disabled,
    tabIndex,
    autoComplete: autoComplete || "off",
    autoFocus,
    className: classNames("".concat(prefixCls, "-selection-search-input"), (_inputNode2 = inputNode) === null || _inputNode2 === void 0 ? void 0 : (_inputNode2$props = _inputNode2.props) === null || _inputNode2$props === void 0 ? void 0 : _inputNode2$props.className),
    role: "combobox",
    "aria-expanded": open,
    "aria-haspopup": "listbox",
    "aria-owns": "".concat(id, "_list"),
    "aria-autocomplete": "list",
    "aria-controls": "".concat(id, "_list"),
    "aria-activedescendant": activeDescendantId
  }, attrs), {}, {
    value: editable ? value : "",
    maxLength,
    readOnly: !editable,
    unselectable: !editable ? "on" : null,
    style: _objectSpread2$1(_objectSpread2$1({}, style2), {}, {
      opacity: editable ? null : 0
    }),
    onKeyDown: function onKeyDown(event) {
      _onKeyDown(event);
      if (onOriginKeyDown) {
        onOriginKeyDown(event);
      }
    },
    onMouseDown: function onMouseDown2(event) {
      _onMouseDown(event);
      if (onOriginMouseDown) {
        onOriginMouseDown(event);
      }
    },
    onChange: function onChange(event) {
      _onChange(event);
      if (onOriginChange) {
        onOriginChange(event);
      }
    },
    onCompositionStart: function onCompositionStart(event) {
      _onCompositionStart(event);
      if (onOriginCompositionStart) {
        onOriginCompositionStart(event);
      }
    },
    onCompositionEnd: function onCompositionEnd(event) {
      _onCompositionEnd(event);
      if (onOriginCompositionEnd) {
        onOriginCompositionEnd(event);
      }
    },
    onPaste
  }));
  return inputNode;
};
var RefInput = /* @__PURE__ */ React$2.forwardRef(Input);
RefInput.displayName = "Input";
function toArray$1(value) {
  if (Array.isArray(value)) {
    return value;
  }
  return value !== void 0 ? [value] : [];
}
var isClient = typeof window !== "undefined" && window.document && window.document.documentElement;
var isBrowserClient$1 = process.env.NODE_ENV !== "test" && isClient;
function hasValue(value) {
  return value !== void 0 && value !== null;
}
function isTitleType$1(title) {
  return ["string", "number"].includes(_typeof$3(title));
}
function getTitle(item) {
  var title = void 0;
  if (item) {
    if (isTitleType$1(item.title)) {
      title = item.title.toString();
    } else if (isTitleType$1(item.label)) {
      title = item.label.toString();
    }
  }
  return title;
}
function useLayoutEffect(effect, deps) {
  if (isBrowserClient$1) {
    React$2.useLayoutEffect(effect, deps);
  } else {
    React$2.useEffect(effect, deps);
  }
}
function itemKey(value) {
  var _value$key;
  return (_value$key = value.key) !== null && _value$key !== void 0 ? _value$key : value.value;
}
var onPreventMouseDown = function onPreventMouseDown2(event) {
  event.preventDefault();
  event.stopPropagation();
};
var SelectSelector = function SelectSelector2(props) {
  var id = props.id, prefixCls = props.prefixCls, values = props.values, open = props.open, searchValue = props.searchValue, autoClearSearchValue = props.autoClearSearchValue, inputRef = props.inputRef, placeholder = props.placeholder, disabled = props.disabled, mode = props.mode, showSearch = props.showSearch, autoFocus = props.autoFocus, autoComplete = props.autoComplete, activeDescendantId = props.activeDescendantId, tabIndex = props.tabIndex, removeIcon = props.removeIcon, maxTagCount = props.maxTagCount, maxTagTextLength = props.maxTagTextLength, _props$maxTagPlacehol = props.maxTagPlaceholder, maxTagPlaceholder = _props$maxTagPlacehol === void 0 ? function(omittedValues) {
    return "+ ".concat(omittedValues.length, " ...");
  } : _props$maxTagPlacehol, tagRender = props.tagRender, onToggleOpen = props.onToggleOpen, onRemove = props.onRemove, onInputChange = props.onInputChange, onInputPaste = props.onInputPaste, onInputKeyDown = props.onInputKeyDown, onInputMouseDown = props.onInputMouseDown, onInputCompositionStart = props.onInputCompositionStart, onInputCompositionEnd = props.onInputCompositionEnd;
  var measureRef = React$2.useRef(null);
  var _useState = useState(0), _useState2 = _slicedToArray$1(_useState, 2), inputWidth = _useState2[0], setInputWidth = _useState2[1];
  var _useState3 = useState(false), _useState4 = _slicedToArray$1(_useState3, 2), focused = _useState4[0], setFocused = _useState4[1];
  var selectionPrefixCls = "".concat(prefixCls, "-selection");
  var inputValue = open || mode === "multiple" && autoClearSearchValue === false || mode === "tags" ? searchValue : "";
  var inputEditable = mode === "tags" || mode === "multiple" && autoClearSearchValue === false || showSearch && (open || focused);
  useLayoutEffect(function() {
    setInputWidth(measureRef.current.scrollWidth);
  }, [inputValue]);
  function defaultRenderSelector(item, content, itemDisabled, closable, onClose) {
    return /* @__PURE__ */ React$2.createElement("span", {
      className: classNames("".concat(selectionPrefixCls, "-item"), _defineProperty$3({}, "".concat(selectionPrefixCls, "-item-disabled"), itemDisabled)),
      title: getTitle(item)
    }, /* @__PURE__ */ React$2.createElement("span", {
      className: "".concat(selectionPrefixCls, "-item-content")
    }, content), closable && /* @__PURE__ */ React$2.createElement(TransBtn, {
      className: "".concat(selectionPrefixCls, "-item-remove"),
      onMouseDown: onPreventMouseDown,
      onClick: onClose,
      customizeIcon: removeIcon
    }, "×"));
  }
  function customizeRenderSelector(value, content, itemDisabled, closable, onClose) {
    var onMouseDown2 = function onMouseDown3(e) {
      onPreventMouseDown(e);
      onToggleOpen(!open);
    };
    return /* @__PURE__ */ React$2.createElement("span", {
      onMouseDown: onMouseDown2
    }, tagRender({
      label: content,
      value,
      disabled: itemDisabled,
      closable,
      onClose
    }));
  }
  function renderItem(valueItem) {
    var itemDisabled = valueItem.disabled, label = valueItem.label, value = valueItem.value;
    var closable = !disabled && !itemDisabled;
    var displayLabel = label;
    if (typeof maxTagTextLength === "number") {
      if (typeof label === "string" || typeof label === "number") {
        var strLabel = String(displayLabel);
        if (strLabel.length > maxTagTextLength) {
          displayLabel = "".concat(strLabel.slice(0, maxTagTextLength), "...");
        }
      }
    }
    var onClose = function onClose2(event) {
      if (event)
        event.stopPropagation();
      onRemove(valueItem);
    };
    return typeof tagRender === "function" ? customizeRenderSelector(value, displayLabel, itemDisabled, closable, onClose) : defaultRenderSelector(valueItem, displayLabel, itemDisabled, closable, onClose);
  }
  function renderRest(omittedValues) {
    var content = typeof maxTagPlaceholder === "function" ? maxTagPlaceholder(omittedValues) : maxTagPlaceholder;
    return defaultRenderSelector({
      title: content
    }, content, false);
  }
  var inputNode = /* @__PURE__ */ React$2.createElement("div", {
    className: "".concat(selectionPrefixCls, "-search"),
    style: {
      width: inputWidth
    },
    onFocus: function onFocus() {
      setFocused(true);
    },
    onBlur: function onBlur() {
      setFocused(false);
    }
  }, /* @__PURE__ */ React$2.createElement(RefInput, {
    ref: inputRef,
    open,
    prefixCls,
    id,
    inputElement: null,
    disabled,
    autoFocus,
    autoComplete,
    editable: inputEditable,
    activeDescendantId,
    value: inputValue,
    onKeyDown: onInputKeyDown,
    onMouseDown: onInputMouseDown,
    onChange: onInputChange,
    onPaste: onInputPaste,
    onCompositionStart: onInputCompositionStart,
    onCompositionEnd: onInputCompositionEnd,
    tabIndex,
    attrs: pickAttrs(props, true)
  }), /* @__PURE__ */ React$2.createElement("span", {
    ref: measureRef,
    className: "".concat(selectionPrefixCls, "-search-mirror"),
    "aria-hidden": true
  }, inputValue, " "));
  var selectionNode = /* @__PURE__ */ React$2.createElement(ForwardOverflow, {
    prefixCls: "".concat(selectionPrefixCls, "-overflow"),
    data: values,
    renderItem,
    renderRest,
    suffix: inputNode,
    itemKey,
    maxCount: maxTagCount
  });
  return /* @__PURE__ */ React$2.createElement(React$2.Fragment, null, selectionNode, !values.length && !inputValue && /* @__PURE__ */ React$2.createElement("span", {
    className: "".concat(selectionPrefixCls, "-placeholder")
  }, placeholder));
};
var SingleSelector = function SingleSelector2(props) {
  var inputElement = props.inputElement, prefixCls = props.prefixCls, id = props.id, inputRef = props.inputRef, disabled = props.disabled, autoFocus = props.autoFocus, autoComplete = props.autoComplete, activeDescendantId = props.activeDescendantId, mode = props.mode, open = props.open, values = props.values, placeholder = props.placeholder, tabIndex = props.tabIndex, showSearch = props.showSearch, searchValue = props.searchValue, activeValue = props.activeValue, maxLength = props.maxLength, onInputKeyDown = props.onInputKeyDown, onInputMouseDown = props.onInputMouseDown, onInputChange = props.onInputChange, onInputPaste = props.onInputPaste, onInputCompositionStart = props.onInputCompositionStart, onInputCompositionEnd = props.onInputCompositionEnd, title = props.title;
  var _React$useState = React$2.useState(false), _React$useState2 = _slicedToArray$1(_React$useState, 2), inputChanged = _React$useState2[0], setInputChanged = _React$useState2[1];
  var combobox = mode === "combobox";
  var inputEditable = combobox || showSearch;
  var item = values[0];
  var inputValue = searchValue || "";
  if (combobox && activeValue && !inputChanged) {
    inputValue = activeValue;
  }
  React$2.useEffect(function() {
    if (combobox) {
      setInputChanged(false);
    }
  }, [combobox, activeValue]);
  var hasTextInput = mode !== "combobox" && !open && !showSearch ? false : !!inputValue;
  var selectionTitle = title === void 0 ? getTitle(item) : title;
  var renderPlaceholder = function renderPlaceholder2() {
    if (item) {
      return null;
    }
    var hiddenStyle = hasTextInput ? {
      visibility: "hidden"
    } : void 0;
    return /* @__PURE__ */ React$2.createElement("span", {
      className: "".concat(prefixCls, "-selection-placeholder"),
      style: hiddenStyle
    }, placeholder);
  };
  return /* @__PURE__ */ React$2.createElement(React$2.Fragment, null, /* @__PURE__ */ React$2.createElement("span", {
    className: "".concat(prefixCls, "-selection-search")
  }, /* @__PURE__ */ React$2.createElement(RefInput, {
    ref: inputRef,
    prefixCls,
    id,
    open,
    inputElement,
    disabled,
    autoFocus,
    autoComplete,
    editable: inputEditable,
    activeDescendantId,
    value: inputValue,
    onKeyDown: onInputKeyDown,
    onMouseDown: onInputMouseDown,
    onChange: function onChange(e) {
      setInputChanged(true);
      onInputChange(e);
    },
    onPaste: onInputPaste,
    onCompositionStart: onInputCompositionStart,
    onCompositionEnd: onInputCompositionEnd,
    tabIndex,
    attrs: pickAttrs(props, true),
    maxLength: combobox ? maxLength : void 0
  })), !combobox && item ? /* @__PURE__ */ React$2.createElement("span", {
    className: "".concat(prefixCls, "-selection-item"),
    title: selectionTitle,
    style: hasTextInput ? {
      visibility: "hidden"
    } : void 0
  }, item.label) : null, renderPlaceholder());
};
function isValidateOpenKey(currentKeyCode) {
  return ![
    // System function button
    KeyCode.ESC,
    KeyCode.SHIFT,
    KeyCode.BACKSPACE,
    KeyCode.TAB,
    KeyCode.WIN_KEY,
    KeyCode.ALT,
    KeyCode.META,
    KeyCode.WIN_KEY_RIGHT,
    KeyCode.CTRL,
    KeyCode.SEMICOLON,
    KeyCode.EQUALS,
    KeyCode.CAPS_LOCK,
    KeyCode.CONTEXT_MENU,
    // F1-F12
    KeyCode.F1,
    KeyCode.F2,
    KeyCode.F3,
    KeyCode.F4,
    KeyCode.F5,
    KeyCode.F6,
    KeyCode.F7,
    KeyCode.F8,
    KeyCode.F9,
    KeyCode.F10,
    KeyCode.F11,
    KeyCode.F12
  ].includes(currentKeyCode);
}
var Selector = function Selector2(props, ref) {
  var inputRef = useRef(null);
  var compositionStatusRef = useRef(false);
  var prefixCls = props.prefixCls, open = props.open, mode = props.mode, showSearch = props.showSearch, tokenWithEnter = props.tokenWithEnter, autoClearSearchValue = props.autoClearSearchValue, onSearch = props.onSearch, onSearchSubmit = props.onSearchSubmit, onToggleOpen = props.onToggleOpen, onInputKeyDown = props.onInputKeyDown, domRef = props.domRef;
  React$2.useImperativeHandle(ref, function() {
    return {
      focus: function focus() {
        inputRef.current.focus();
      },
      blur: function blur() {
        inputRef.current.blur();
      }
    };
  });
  var _useLock = useLock(0), _useLock2 = _slicedToArray$1(_useLock, 2), getInputMouseDown = _useLock2[0], setInputMouseDown = _useLock2[1];
  var onInternalInputKeyDown = function onInternalInputKeyDown2(event) {
    var which = event.which;
    if (which === KeyCode.UP || which === KeyCode.DOWN) {
      event.preventDefault();
    }
    if (onInputKeyDown) {
      onInputKeyDown(event);
    }
    if (which === KeyCode.ENTER && mode === "tags" && !compositionStatusRef.current && !open) {
      onSearchSubmit === null || onSearchSubmit === void 0 ? void 0 : onSearchSubmit(event.target.value);
    }
    if (isValidateOpenKey(which)) {
      onToggleOpen(true);
    }
  };
  var onInternalInputMouseDown = function onInternalInputMouseDown2() {
    setInputMouseDown(true);
  };
  var pastedTextRef = useRef(null);
  var triggerOnSearch = function triggerOnSearch2(value) {
    if (onSearch(value, true, compositionStatusRef.current) !== false) {
      onToggleOpen(true);
    }
  };
  var onInputCompositionStart = function onInputCompositionStart2() {
    compositionStatusRef.current = true;
  };
  var onInputCompositionEnd = function onInputCompositionEnd2(e) {
    compositionStatusRef.current = false;
    if (mode !== "combobox") {
      triggerOnSearch(e.target.value);
    }
  };
  var onInputChange = function onInputChange2(event) {
    var value = event.target.value;
    if (tokenWithEnter && pastedTextRef.current && /[\r\n]/.test(pastedTextRef.current)) {
      var replacedText = pastedTextRef.current.replace(/[\r\n]+$/, "").replace(/\r\n/g, " ").replace(/[\r\n]/g, " ");
      value = value.replace(replacedText, pastedTextRef.current);
    }
    pastedTextRef.current = null;
    triggerOnSearch(value);
  };
  var onInputPaste = function onInputPaste2(e) {
    var clipboardData = e.clipboardData;
    var value = clipboardData.getData("text");
    pastedTextRef.current = value;
  };
  var onClick = function onClick2(_ref) {
    var target = _ref.target;
    if (target !== inputRef.current) {
      var isIE = document.body.style.msTouchAction !== void 0;
      if (isIE) {
        setTimeout(function() {
          inputRef.current.focus();
        });
      } else {
        inputRef.current.focus();
      }
    }
  };
  var onMouseDown2 = function onMouseDown3(event) {
    var inputMouseDown = getInputMouseDown();
    if (event.target !== inputRef.current && !inputMouseDown && mode !== "combobox") {
      event.preventDefault();
    }
    if (mode !== "combobox" && (!showSearch || !inputMouseDown) || !open) {
      if (open && autoClearSearchValue !== false) {
        onSearch("", true, false);
      }
      onToggleOpen();
    }
  };
  var sharedProps = {
    inputRef,
    onInputKeyDown: onInternalInputKeyDown,
    onInputMouseDown: onInternalInputMouseDown,
    onInputChange,
    onInputPaste,
    onInputCompositionStart,
    onInputCompositionEnd
  };
  var selectNode = mode === "multiple" || mode === "tags" ? /* @__PURE__ */ React$2.createElement(SelectSelector, _extends$1({}, props, sharedProps)) : /* @__PURE__ */ React$2.createElement(SingleSelector, _extends$1({}, props, sharedProps));
  return /* @__PURE__ */ React$2.createElement("div", {
    ref: domRef,
    className: "".concat(prefixCls, "-selector"),
    onClick,
    onMouseDown: onMouseDown2
  }, selectNode);
};
var ForwardSelector = /* @__PURE__ */ React$2.forwardRef(Selector);
ForwardSelector.displayName = "Selector";
var TriggerContext$1 = /* @__PURE__ */ React$2.createContext(null);
function toArray(val) {
  return val ? Array.isArray(val) ? val : [val] : [];
}
function useAction(mobile, action, showAction, hideAction) {
  return React$2.useMemo(function() {
    var mergedShowAction = toArray(showAction !== null && showAction !== void 0 ? showAction : action);
    var mergedHideAction = toArray(hideAction !== null && hideAction !== void 0 ? hideAction : action);
    var showActionSet = new Set(mergedShowAction);
    var hideActionSet = new Set(mergedHideAction);
    if (mobile) {
      if (showActionSet.has("hover")) {
        showActionSet.delete("hover");
        showActionSet.add("click");
      }
      if (hideActionSet.has("hover")) {
        hideActionSet.delete("hover");
        hideActionSet.add("click");
      }
    }
    return [showActionSet, hideActionSet];
  }, [mobile, action, showAction, hideAction]);
}
function isPointsEq$1() {
  var a1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var a2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  var isAlignPoint = arguments.length > 2 ? arguments[2] : void 0;
  if (isAlignPoint) {
    return a1[0] === a2[0];
  }
  return a1[0] === a2[0] && a1[1] === a2[1];
}
function getAlignPopupClassName$1(builtinPlacements, prefixCls, align, isAlignPoint) {
  var points = align.points;
  var placements2 = Object.keys(builtinPlacements);
  for (var i = 0; i < placements2.length; i += 1) {
    var _builtinPlacements$pl;
    var placement = placements2[i];
    if (isPointsEq$1((_builtinPlacements$pl = builtinPlacements[placement]) === null || _builtinPlacements$pl === void 0 ? void 0 : _builtinPlacements$pl.points, points, isAlignPoint)) {
      return "".concat(prefixCls, "-placement-").concat(placement);
    }
  }
  return "";
}
function getMotion$2(prefixCls, motion, animation, transitionName) {
  if (motion) {
    return motion;
  }
  if (animation) {
    return {
      motionName: "".concat(prefixCls, "-").concat(animation)
    };
  }
  if (transitionName) {
    return {
      motionName: transitionName
    };
  }
  return null;
}
function getWin(ele) {
  return ele.ownerDocument.defaultView;
}
function collectScroller(ele) {
  var scrollerList = [];
  var current = ele === null || ele === void 0 ? void 0 : ele.parentElement;
  var scrollStyle = ["hidden", "scroll", "auto"];
  while (current) {
    var _getWin$getComputedSt = getWin(current).getComputedStyle(current), overflowX = _getWin$getComputedSt.overflowX, overflowY = _getWin$getComputedSt.overflowY;
    if (scrollStyle.includes(overflowX) || scrollStyle.includes(overflowY)) {
      scrollerList.push(current);
    }
    current = current.parentElement;
  }
  return scrollerList;
}
function toNum(num) {
  return Number.isNaN(num) ? 1 : num;
}
function getVisibleArea(initArea, scrollerList) {
  var visibleArea = _objectSpread2$1({}, initArea);
  (scrollerList || []).forEach(function(ele) {
    if (ele instanceof HTMLBodyElement) {
      return;
    }
    var _getWin$getComputedSt2 = getWin(ele).getComputedStyle(ele), position2 = _getWin$getComputedSt2.position;
    if (position2 === "static") {
      return;
    }
    var eleRect = ele.getBoundingClientRect();
    var eleOutHeight = ele.offsetHeight, eleInnerHeight = ele.clientHeight, eleOutWidth = ele.offsetWidth, eleInnerWidth = ele.clientWidth;
    var scaleX = toNum(Math.round(eleRect.width / eleOutWidth * 1e3) / 1e3);
    var scaleY = toNum(Math.round(eleRect.height / eleOutHeight * 1e3) / 1e3);
    var eleScrollWidth = (eleOutWidth - eleInnerWidth) * scaleX;
    var eleScrollHeight = (eleOutHeight - eleInnerHeight) * scaleY;
    var eleRight = eleRect.x + eleRect.width - eleScrollWidth;
    var eleBottom = eleRect.y + eleRect.height - eleScrollHeight;
    visibleArea.left = Math.max(visibleArea.left, eleRect.x);
    visibleArea.top = Math.max(visibleArea.top, eleRect.y);
    visibleArea.right = Math.min(visibleArea.right, eleRight);
    visibleArea.bottom = Math.min(visibleArea.bottom, eleBottom);
  });
  return visibleArea;
}
function splitPoints() {
  var points = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  return [points[0], points[1]];
}
function getAlignPoint(rect, points) {
  var topBottom = points[0];
  var leftRight = points[1];
  var x;
  var y;
  if (topBottom === "t") {
    y = rect.y;
  } else if (topBottom === "b") {
    y = rect.y + rect.height;
  } else {
    y = rect.y + rect.height / 2;
  }
  if (leftRight === "l") {
    x = rect.x;
  } else if (leftRight === "r") {
    x = rect.x + rect.width;
  } else {
    x = rect.x + rect.width / 2;
  }
  return {
    x,
    y
  };
}
function reversePoints(points, index2) {
  var reverseMap = {
    t: "b",
    b: "t",
    l: "r",
    r: "l"
  };
  return points.map(function(point, i) {
    if (i === index2) {
      return reverseMap[point] || "c";
    }
    return point;
  }).join("");
}
function useAlign(open, popupEle, target, placement, builtinPlacements, popupAlign, onPopupAlign) {
  var _React$useState = React$2.useState({
    ready: false,
    offsetX: 0,
    offsetY: 0,
    arrowX: 0,
    arrowY: 0,
    scaleX: 1,
    scaleY: 1,
    align: builtinPlacements[placement] || {}
  }), _React$useState2 = _slicedToArray$1(_React$useState, 2), offsetInfo = _React$useState2[0], setOffsetInfo = _React$useState2[1];
  var alignCountRef = React$2.useRef(0);
  var scrollerList = React$2.useMemo(function() {
    if (!popupEle) {
      return [];
    }
    return collectScroller(popupEle);
  }, [popupEle]);
  var prevFlipRef = React$2.useRef({});
  var resetFlipCache = function resetFlipCache2() {
    prevFlipRef.current = {};
  };
  if (!open) {
    resetFlipCache();
  }
  var onAlign = useEvent(function() {
    if (popupEle && target && open) {
      let getIntersectionVisibleArea = function(offsetX, offsetY) {
        var l = popupRect.x + offsetX;
        var t = popupRect.y + offsetY;
        var r2 = l + popupWidth;
        var b = t + popupHeight;
        var visibleL = Math.max(l, visibleArea.left);
        var visibleT = Math.max(t, visibleArea.top);
        var visibleR = Math.min(r2, visibleArea.right);
        var visibleB = Math.min(b, visibleArea.bottom);
        return Math.max(0, (visibleR - visibleL) * (visibleB - visibleT));
      }, syncNextPopupPosition = function() {
        nextPopupY = popupRect.y + nextOffsetY;
        nextPopupBottom = nextPopupY + popupHeight;
        nextPopupX = popupRect.x + nextOffsetX;
        nextPopupRight = nextPopupX + popupWidth;
      };
      var popupElement = popupEle;
      var originLeft = popupElement.style.left;
      var originTop = popupElement.style.top;
      var doc = popupElement.ownerDocument;
      var win = getWin(popupElement);
      var placementInfo = _objectSpread2$1(_objectSpread2$1({}, builtinPlacements[placement]), popupAlign);
      popupElement.style.left = "0";
      popupElement.style.top = "0";
      var targetRect;
      if (Array.isArray(target)) {
        targetRect = {
          x: target[0],
          y: target[1],
          width: 0,
          height: 0
        };
      } else {
        var rect = target.getBoundingClientRect();
        targetRect = {
          x: rect.x,
          y: rect.y,
          width: rect.width,
          height: rect.height
        };
      }
      var popupRect = popupElement.getBoundingClientRect();
      var _win$getComputedStyle = win.getComputedStyle(popupElement), width = _win$getComputedStyle.width, height = _win$getComputedStyle.height;
      var _doc$documentElement = doc.documentElement, clientWidth = _doc$documentElement.clientWidth, clientHeight = _doc$documentElement.clientHeight, scrollWidth = _doc$documentElement.scrollWidth, scrollHeight = _doc$documentElement.scrollHeight, scrollTop = _doc$documentElement.scrollTop, scrollLeft = _doc$documentElement.scrollLeft;
      var popupHeight = popupRect.height;
      var popupWidth = popupRect.width;
      var targetHeight = targetRect.height;
      var targetWidth = targetRect.width;
      var visibleArea = placementInfo.htmlRegion === "scroll" ? (
        // Scroll region should take scrollLeft & scrollTop into account
        {
          left: -scrollLeft,
          top: -scrollTop,
          right: scrollWidth - scrollLeft,
          bottom: scrollHeight - scrollTop
        }
      ) : {
        left: 0,
        top: 0,
        right: clientWidth,
        bottom: clientHeight
      };
      visibleArea = getVisibleArea(visibleArea, scrollerList);
      popupElement.style.left = originLeft;
      popupElement.style.top = originTop;
      var _scaleX = toNum(Math.round(popupWidth / parseFloat(width) * 1e3) / 1e3);
      var _scaleY = toNum(Math.round(popupHeight / parseFloat(height) * 1e3) / 1e3);
      if (_scaleX === 0 || _scaleY === 0 || isDOM(target) && !isVisible(target)) {
        return;
      }
      var offset2 = placementInfo.offset, targetOffset2 = placementInfo.targetOffset;
      var _ref = offset2 || [], _ref2 = _slicedToArray$1(_ref, 2), _ref2$ = _ref2[0], popupOffsetX = _ref2$ === void 0 ? 0 : _ref2$, _ref2$2 = _ref2[1], popupOffsetY = _ref2$2 === void 0 ? 0 : _ref2$2;
      var _ref3 = targetOffset2 || [], _ref4 = _slicedToArray$1(_ref3, 2), _ref4$ = _ref4[0], targetOffsetX = _ref4$ === void 0 ? 0 : _ref4$, _ref4$2 = _ref4[1], targetOffsetY = _ref4$2 === void 0 ? 0 : _ref4$2;
      targetRect.x += targetOffsetX;
      targetRect.y += targetOffsetY;
      var _ref5 = placementInfo.points || [], _ref6 = _slicedToArray$1(_ref5, 2), popupPoint = _ref6[0], targetPoint = _ref6[1];
      var targetPoints = splitPoints(targetPoint);
      var popupPoints = splitPoints(popupPoint);
      var targetAlignPoint = getAlignPoint(targetRect, targetPoints);
      var popupAlignPoint = getAlignPoint(popupRect, popupPoints);
      var nextAlignInfo = _objectSpread2$1({}, placementInfo);
      var nextOffsetX = targetAlignPoint.x - popupAlignPoint.x + popupOffsetX;
      var nextOffsetY = targetAlignPoint.y - popupAlignPoint.y + popupOffsetY;
      var originIntersectionVisibleArea = getIntersectionVisibleArea(nextOffsetX, nextOffsetY);
      var targetAlignPointTL = getAlignPoint(targetRect, ["t", "l"]);
      var popupAlignPointTL = getAlignPoint(popupRect, ["t", "l"]);
      var targetAlignPointBR = getAlignPoint(targetRect, ["b", "r"]);
      var popupAlignPointBR = getAlignPoint(popupRect, ["b", "r"]);
      var overflow = placementInfo.overflow || {};
      var adjustX = overflow.adjustX, adjustY = overflow.adjustY, shiftX = overflow.shiftX, shiftY = overflow.shiftY;
      var supportAdjust = function supportAdjust2(val) {
        if (typeof val === "boolean") {
          return val;
        }
        return val >= 0;
      };
      var nextPopupY;
      var nextPopupBottom;
      var nextPopupX;
      var nextPopupRight;
      syncNextPopupPosition();
      var needAdjustY = supportAdjust(adjustY);
      var sameTB = popupPoints[0] === targetPoints[0];
      if (needAdjustY && popupPoints[0] === "t" && (nextPopupBottom > visibleArea.bottom || prevFlipRef.current.bt)) {
        var tmpNextOffsetY = nextOffsetY;
        if (sameTB) {
          tmpNextOffsetY -= popupHeight - targetHeight;
        } else {
          tmpNextOffsetY = targetAlignPointTL.y - popupAlignPointBR.y - popupOffsetY;
        }
        if (getIntersectionVisibleArea(nextOffsetX, tmpNextOffsetY) >= originIntersectionVisibleArea) {
          prevFlipRef.current.bt = true;
          nextOffsetY = tmpNextOffsetY;
          nextAlignInfo.points = [reversePoints(popupPoints, 0), reversePoints(targetPoints, 0)];
        } else {
          prevFlipRef.current.bt = false;
        }
      }
      if (needAdjustY && popupPoints[0] === "b" && (nextPopupY < visibleArea.top || prevFlipRef.current.tb)) {
        var _tmpNextOffsetY = nextOffsetY;
        if (sameTB) {
          _tmpNextOffsetY += popupHeight - targetHeight;
        } else {
          _tmpNextOffsetY = targetAlignPointBR.y - popupAlignPointTL.y - popupOffsetY;
        }
        if (getIntersectionVisibleArea(nextOffsetX, _tmpNextOffsetY) >= originIntersectionVisibleArea) {
          prevFlipRef.current.tb = true;
          nextOffsetY = _tmpNextOffsetY;
          nextAlignInfo.points = [reversePoints(popupPoints, 0), reversePoints(targetPoints, 0)];
        } else {
          prevFlipRef.current.tb = false;
        }
      }
      var needAdjustX = supportAdjust(adjustX);
      var sameLR = popupPoints[1] === targetPoints[1];
      if (needAdjustX && popupPoints[1] === "l" && (nextPopupRight > visibleArea.right || prevFlipRef.current.rl)) {
        var tmpNextOffsetX = nextOffsetX;
        if (sameLR) {
          tmpNextOffsetX -= popupWidth - targetWidth;
        } else {
          tmpNextOffsetX = targetAlignPointTL.x - popupAlignPointBR.x - popupOffsetX;
        }
        if (getIntersectionVisibleArea(tmpNextOffsetX, nextOffsetY) >= originIntersectionVisibleArea) {
          prevFlipRef.current.rl = true;
          nextOffsetX = tmpNextOffsetX;
          nextAlignInfo.points = [reversePoints(popupPoints, 1), reversePoints(targetPoints, 1)];
        } else {
          prevFlipRef.current.rl = false;
        }
      }
      if (needAdjustX && popupPoints[1] === "r" && (nextPopupX < visibleArea.left || prevFlipRef.current.lr)) {
        var _tmpNextOffsetX = nextOffsetX;
        if (sameLR) {
          _tmpNextOffsetX += popupWidth - targetWidth;
        } else {
          _tmpNextOffsetX = targetAlignPointBR.x - popupAlignPointTL.x - popupOffsetX;
        }
        if (getIntersectionVisibleArea(_tmpNextOffsetX, nextOffsetY) >= originIntersectionVisibleArea) {
          prevFlipRef.current.lr = true;
          nextOffsetX = _tmpNextOffsetX;
          nextAlignInfo.points = [reversePoints(popupPoints, 1), reversePoints(targetPoints, 1)];
        } else {
          prevFlipRef.current.lr = false;
        }
      }
      syncNextPopupPosition();
      var numShiftX = shiftX === true ? 0 : shiftX;
      if (typeof numShiftX === "number") {
        if (nextPopupX < visibleArea.left) {
          nextOffsetX -= nextPopupX - visibleArea.left;
          if (targetRect.x + targetWidth < visibleArea.left + numShiftX) {
            nextOffsetX += targetRect.x - visibleArea.left + targetWidth - numShiftX;
          }
        }
        if (nextPopupRight > visibleArea.right) {
          nextOffsetX -= nextPopupRight - visibleArea.right;
          if (targetRect.x > visibleArea.right - numShiftX) {
            nextOffsetX += targetRect.x - visibleArea.right + numShiftX;
          }
        }
      }
      var numShiftY = shiftY === true ? 0 : shiftY;
      if (typeof numShiftY === "number") {
        if (nextPopupY < visibleArea.top) {
          nextOffsetY -= nextPopupY - visibleArea.top;
          if (targetRect.y + targetHeight < visibleArea.top + numShiftY) {
            nextOffsetY += targetRect.y - visibleArea.top + targetHeight - numShiftY;
          }
        }
        if (nextPopupBottom > visibleArea.bottom) {
          nextOffsetY -= nextPopupBottom - visibleArea.bottom;
          if (targetRect.y > visibleArea.bottom - numShiftY) {
            nextOffsetY += targetRect.y - visibleArea.bottom + numShiftY;
          }
        }
      }
      var popupLeft = popupRect.x + nextOffsetX;
      var popupRight = popupLeft + popupWidth;
      var popupTop = popupRect.y + nextOffsetY;
      var popupBottom = popupTop + popupHeight;
      var targetLeft = targetRect.x;
      var targetRight = targetLeft + targetWidth;
      var targetTop = targetRect.y;
      var targetBottom = targetTop + targetHeight;
      var maxLeft = Math.max(popupLeft, targetLeft);
      var minRight = Math.min(popupRight, targetRight);
      var xCenter = (maxLeft + minRight) / 2;
      var nextArrowX = xCenter - popupLeft;
      var maxTop = Math.max(popupTop, targetTop);
      var minBottom = Math.min(popupBottom, targetBottom);
      var yCenter = (maxTop + minBottom) / 2;
      var nextArrowY = yCenter - popupTop;
      onPopupAlign === null || onPopupAlign === void 0 ? void 0 : onPopupAlign(popupEle, nextAlignInfo);
      setOffsetInfo({
        ready: true,
        offsetX: nextOffsetX / _scaleX,
        offsetY: nextOffsetY / _scaleY,
        arrowX: nextArrowX / _scaleX,
        arrowY: nextArrowY / _scaleY,
        scaleX: _scaleX,
        scaleY: _scaleY,
        align: nextAlignInfo
      });
    }
  });
  var triggerAlign = function triggerAlign2() {
    alignCountRef.current += 1;
    var id = alignCountRef.current;
    Promise.resolve().then(function() {
      if (alignCountRef.current === id) {
        onAlign();
      }
    });
  };
  var resetReady = function resetReady2() {
    setOffsetInfo(function(ori) {
      return _objectSpread2$1(_objectSpread2$1({}, ori), {}, {
        ready: false
      });
    });
  };
  useLayoutEffect$1(resetReady, [placement]);
  useLayoutEffect$1(function() {
    if (!open) {
      resetReady();
    }
  }, [open]);
  return [offsetInfo.ready, offsetInfo.offsetX, offsetInfo.offsetY, offsetInfo.arrowX, offsetInfo.arrowY, offsetInfo.scaleX, offsetInfo.scaleY, offsetInfo.align, triggerAlign];
}
function useWatch(open, target, popup, onAlign) {
  useLayoutEffect$1(function() {
    if (open && target && popup) {
      let notifyScroll = function() {
        onAlign();
      };
      var targetElement = target;
      var popupElement = popup;
      var targetScrollList = collectScroller(targetElement);
      var popupScrollList = collectScroller(popupElement);
      var win = getWin(popupElement);
      var mergedList = new Set([win].concat(_toConsumableArray(targetScrollList), _toConsumableArray(popupScrollList)));
      mergedList.forEach(function(scroller) {
        scroller.addEventListener("scroll", notifyScroll, {
          passive: true
        });
      });
      win.addEventListener("resize", notifyScroll, {
        passive: true
      });
      onAlign();
      return function() {
        mergedList.forEach(function(scroller) {
          scroller.removeEventListener("scroll", notifyScroll);
          win.removeEventListener("resize", notifyScroll);
        });
      };
    }
  }, [open, target, popup]);
}
function Arrow(props) {
  var prefixCls = props.prefixCls, align = props.align, arrow = props.arrow;
  var _ref = arrow || {}, _ref$x = _ref.x, x = _ref$x === void 0 ? 0 : _ref$x, _ref$y = _ref.y, y = _ref$y === void 0 ? 0 : _ref$y, className = _ref.className;
  var arrowRef = React$2.useRef();
  if (!align || !align.points) {
    return null;
  }
  var alignStyle = {
    position: "absolute"
  };
  if (align.autoArrow !== false) {
    var popupPoints = align.points[0];
    var targetPoints = align.points[1];
    var popupTB = popupPoints[0];
    var popupLR = popupPoints[1];
    var targetTB = targetPoints[0];
    var targetLR = targetPoints[1];
    if (popupTB === targetTB || !["t", "b"].includes(popupTB)) {
      alignStyle.top = y;
    } else if (popupTB === "t") {
      alignStyle.top = 0;
    } else {
      alignStyle.bottom = 0;
    }
    if (popupLR === targetLR || !["l", "r"].includes(popupLR)) {
      alignStyle.left = x;
    } else if (popupLR === "l") {
      alignStyle.left = 0;
    } else {
      alignStyle.right = 0;
    }
  }
  return /* @__PURE__ */ React$2.createElement("div", {
    ref: arrowRef,
    className: classNames("".concat(prefixCls, "-arrow"), className),
    style: alignStyle
  });
}
function Mask$1(props) {
  var prefixCls = props.prefixCls, open = props.open, zIndex = props.zIndex, mask = props.mask, motion = props.motion;
  if (!mask) {
    return null;
  }
  return /* @__PURE__ */ React.createElement(CSSMotion, _extends$1({}, motion, {
    motionAppear: true,
    visible: open,
    removeOnLeave: true
  }), function(_ref) {
    var className = _ref.className;
    return /* @__PURE__ */ React.createElement("div", {
      style: {
        zIndex
      },
      className: classNames("".concat(prefixCls, "-mask"), className)
    });
  });
}
var PopupContent = /* @__PURE__ */ React$2.memo(function(_ref) {
  var children = _ref.children;
  return children;
}, function(_, next2) {
  return next2.cache;
});
if (process.env.NODE_ENV !== "production") {
  PopupContent.displayName = "PopupContent";
}
var Popup$2 = /* @__PURE__ */ React$2.forwardRef(function(props, ref) {
  var popup = props.popup, className = props.className, prefixCls = props.prefixCls, style2 = props.style, target = props.target, _onVisibleChanged = props.onVisibleChanged, open = props.open, keepDom = props.keepDom, onClick = props.onClick, mask = props.mask, arrow = props.arrow, align = props.align, motion = props.motion, maskMotion = props.maskMotion, forceRender = props.forceRender, getPopupContainer = props.getPopupContainer, autoDestroy = props.autoDestroy, Portal2 = props.portal, zIndex = props.zIndex, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, ready = props.ready, offsetX = props.offsetX, offsetY = props.offsetY, onAlign = props.onAlign, onPrepare = props.onPrepare, stretch = props.stretch, targetWidth = props.targetWidth, targetHeight = props.targetHeight;
  var childNode = typeof popup === "function" ? popup() : popup;
  var isNodeVisible = open || keepDom;
  var getPopupContainerNeedParams = (getPopupContainer === null || getPopupContainer === void 0 ? void 0 : getPopupContainer.length) > 0;
  var _React$useState = React$2.useState(!getPopupContainer || !getPopupContainerNeedParams), _React$useState2 = _slicedToArray$1(_React$useState, 2), show = _React$useState2[0], setShow = _React$useState2[1];
  useLayoutEffect$1(function() {
    if (!show && getPopupContainerNeedParams && target) {
      setShow(true);
    }
  }, [show, getPopupContainerNeedParams, target]);
  if (!show) {
    return null;
  }
  var offsetStyle = ready || !open ? {
    left: offsetX,
    top: offsetY
  } : {
    left: "-1000vw",
    top: "-1000vh"
  };
  var miscStyle = {};
  if (stretch) {
    if (stretch.includes("height") && targetHeight) {
      miscStyle.height = targetHeight;
    } else if (stretch.includes("minHeight") && targetHeight) {
      miscStyle.minHeight = targetHeight;
    }
    if (stretch.includes("width") && targetWidth) {
      miscStyle.width = targetWidth;
    } else if (stretch.includes("minWidth") && targetWidth) {
      miscStyle.minWidth = targetWidth;
    }
  }
  if (!open) {
    miscStyle.pointerEvents = "none";
  }
  return /* @__PURE__ */ React$2.createElement(Portal2, {
    open: forceRender || isNodeVisible,
    getContainer: getPopupContainer && function() {
      return getPopupContainer(target);
    },
    autoDestroy
  }, /* @__PURE__ */ React$2.createElement(Mask$1, {
    prefixCls,
    open,
    zIndex,
    mask,
    motion: maskMotion
  }), /* @__PURE__ */ React$2.createElement(RefResizeObserver, {
    onResize: onAlign,
    disabled: !open
  }, function(resizeObserverRef) {
    return /* @__PURE__ */ React$2.createElement(CSSMotion, _extends$1({
      motionAppear: true,
      motionEnter: true,
      motionLeave: true,
      removeOnLeave: false,
      forceRender,
      leavedClassName: "".concat(prefixCls, "-hidden")
    }, motion, {
      onAppearPrepare: onPrepare,
      onEnterPrepare: onPrepare,
      visible: open,
      onVisibleChanged: function onVisibleChanged(nextVisible) {
        var _motion$onVisibleChan;
        motion === null || motion === void 0 ? void 0 : (_motion$onVisibleChan = motion.onVisibleChanged) === null || _motion$onVisibleChan === void 0 ? void 0 : _motion$onVisibleChan.call(motion, nextVisible);
        _onVisibleChanged(nextVisible);
      }
    }), function(_ref, motionRef) {
      var motionClassName = _ref.className, motionStyle = _ref.style;
      var cls = classNames(prefixCls, motionClassName, className);
      return /* @__PURE__ */ React$2.createElement("div", {
        ref: composeRef(resizeObserverRef, ref, motionRef),
        className: cls,
        style: _objectSpread2$1(_objectSpread2$1(_objectSpread2$1(_objectSpread2$1({}, offsetStyle), miscStyle), motionStyle), {}, {
          boxSizing: "border-box",
          zIndex
        }, style2),
        onMouseEnter,
        onMouseLeave,
        onClick
      }, arrow && /* @__PURE__ */ React$2.createElement(Arrow, {
        prefixCls,
        arrow,
        align
      }), /* @__PURE__ */ React$2.createElement(PopupContent, {
        cache: !open
      }, childNode));
    });
  }));
});
if (process.env.NODE_ENV !== "production") {
  Popup$2.displayName = "Popup";
}
var TriggerWrapper = /* @__PURE__ */ React$2.forwardRef(function(props, ref) {
  var children = props.children, getTriggerDOMNode = props.getTriggerDOMNode;
  var canUseRef = supportRef(children);
  var setRef = React$2.useCallback(function(node2) {
    fillRef(ref, getTriggerDOMNode ? getTriggerDOMNode(node2) : node2);
  }, [getTriggerDOMNode]);
  var mergedRef = useComposeRef(setRef, children.ref);
  return canUseRef ? /* @__PURE__ */ React$2.cloneElement(children, {
    ref: mergedRef
  }) : children;
});
if (process.env.NODE_ENV !== "production") {
  TriggerWrapper.displayName = "TriggerWrapper";
}
var _excluded$j = ["prefixCls", "children", "action", "showAction", "hideAction", "popupVisible", "defaultPopupVisible", "onPopupVisibleChange", "afterPopupVisibleChange", "mouseEnterDelay", "mouseLeaveDelay", "focusDelay", "blurDelay", "mask", "maskClosable", "getPopupContainer", "forceRender", "autoDestroy", "destroyPopupOnHide", "popup", "popupClassName", "popupStyle", "popupPlacement", "builtinPlacements", "popupAlign", "zIndex", "stretch", "getPopupClassNameFromAlign", "alignPoint", "onPopupClick", "onPopupAlign", "arrow", "popupMotion", "maskMotion", "popupTransitionName", "popupAnimation", "maskTransitionName", "maskAnimation", "className", "getTriggerDOMNode"];
function generateTrigger$1() {
  var PortalComponent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Portal$1;
  var Trigger2 = /* @__PURE__ */ React$2.forwardRef(function(props, ref) {
    var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-trigger-popup" : _props$prefixCls, children = props.children, _props$action = props.action, action = _props$action === void 0 ? "hover" : _props$action, showAction = props.showAction, hideAction = props.hideAction, popupVisible = props.popupVisible, defaultPopupVisible = props.defaultPopupVisible, onPopupVisibleChange = props.onPopupVisibleChange, afterPopupVisibleChange = props.afterPopupVisibleChange, mouseEnterDelay = props.mouseEnterDelay, _props$mouseLeaveDela = props.mouseLeaveDelay, mouseLeaveDelay = _props$mouseLeaveDela === void 0 ? 0.1 : _props$mouseLeaveDela, focusDelay = props.focusDelay, blurDelay = props.blurDelay, mask = props.mask, _props$maskClosable = props.maskClosable, maskClosable = _props$maskClosable === void 0 ? true : _props$maskClosable, getPopupContainer = props.getPopupContainer, forceRender = props.forceRender, autoDestroy = props.autoDestroy, destroyPopupOnHide = props.destroyPopupOnHide, popup = props.popup, popupClassName = props.popupClassName, popupStyle = props.popupStyle, popupPlacement = props.popupPlacement, _props$builtinPlaceme = props.builtinPlacements, builtinPlacements = _props$builtinPlaceme === void 0 ? {} : _props$builtinPlaceme, popupAlign = props.popupAlign, zIndex = props.zIndex, stretch = props.stretch, getPopupClassNameFromAlign = props.getPopupClassNameFromAlign, alignPoint2 = props.alignPoint, onPopupClick = props.onPopupClick, onPopupAlign = props.onPopupAlign, arrow = props.arrow, popupMotion = props.popupMotion, maskMotion = props.maskMotion, popupTransitionName = props.popupTransitionName, popupAnimation = props.popupAnimation, maskTransitionName = props.maskTransitionName, maskAnimation = props.maskAnimation, className = props.className, getTriggerDOMNode = props.getTriggerDOMNode, restProps = _objectWithoutProperties(props, _excluded$j);
    var mergedAutoDestroy = autoDestroy || destroyPopupOnHide || false;
    var _React$useState = React$2.useState(false), _React$useState2 = _slicedToArray$1(_React$useState, 2), mobile = _React$useState2[0], setMobile = _React$useState2[1];
    useLayoutEffect$1(function() {
      setMobile(isMobile());
    }, []);
    var subPopupElements = React$2.useRef({});
    var parentContext = React$2.useContext(TriggerContext$1);
    var context = React$2.useMemo(function() {
      return {
        registerSubPopup: function registerSubPopup(id2, subPopupEle) {
          subPopupElements.current[id2] = subPopupEle;
          parentContext === null || parentContext === void 0 ? void 0 : parentContext.registerSubPopup(id2, subPopupEle);
        }
      };
    }, [parentContext]);
    var id = useId$1();
    var _React$useState3 = React$2.useState(null), _React$useState4 = _slicedToArray$1(_React$useState3, 2), popupEle = _React$useState4[0], setPopupEle = _React$useState4[1];
    var setPopupRef = useEvent(function(node2) {
      if (isDOM(node2) && popupEle !== node2) {
        setPopupEle(node2);
      }
      parentContext === null || parentContext === void 0 ? void 0 : parentContext.registerSubPopup(id, node2);
    });
    var _React$useState5 = React$2.useState(null), _React$useState6 = _slicedToArray$1(_React$useState5, 2), targetEle = _React$useState6[0], setTargetEle = _React$useState6[1];
    var setTargetRef = useEvent(function(node2) {
      if (isDOM(node2) && targetEle !== node2) {
        setTargetEle(node2);
      }
    });
    var child = React$2.Children.only(children);
    var originChildProps = (child === null || child === void 0 ? void 0 : child.props) || {};
    var cloneProps = {};
    var inPopupOrChild = useEvent(function(ele) {
      var _childDOM$getRootNode, _popupEle$getRootNode;
      var childDOM = targetEle;
      return (childDOM === null || childDOM === void 0 ? void 0 : childDOM.contains(ele)) || (childDOM === null || childDOM === void 0 ? void 0 : (_childDOM$getRootNode = childDOM.getRootNode()) === null || _childDOM$getRootNode === void 0 ? void 0 : _childDOM$getRootNode.host) === ele || ele === childDOM || (popupEle === null || popupEle === void 0 ? void 0 : popupEle.contains(ele)) || (popupEle === null || popupEle === void 0 ? void 0 : (_popupEle$getRootNode = popupEle.getRootNode()) === null || _popupEle$getRootNode === void 0 ? void 0 : _popupEle$getRootNode.host) === ele || ele === popupEle || Object.values(subPopupElements.current).some(function(subPopupEle) {
        return (subPopupEle === null || subPopupEle === void 0 ? void 0 : subPopupEle.contains(ele)) || ele === subPopupEle;
      });
    });
    var mergePopupMotion = getMotion$2(prefixCls, popupMotion, popupAnimation, popupTransitionName);
    var mergeMaskMotion = getMotion$2(prefixCls, maskMotion, maskAnimation, maskTransitionName);
    var _React$useState7 = React$2.useState(defaultPopupVisible || false), _React$useState8 = _slicedToArray$1(_React$useState7, 2), internalOpen = _React$useState8[0], setInternalOpen = _React$useState8[1];
    var mergedOpen = popupVisible !== null && popupVisible !== void 0 ? popupVisible : internalOpen;
    var setMergedOpen = useEvent(function(nextOpen) {
      if (popupVisible === void 0) {
        setInternalOpen(nextOpen);
      }
    });
    useLayoutEffect$1(function() {
      setInternalOpen(popupVisible || false);
    }, [popupVisible]);
    var openRef = React$2.useRef(mergedOpen);
    openRef.current = mergedOpen;
    var internalTriggerOpen = useEvent(function(nextOpen) {
      if (mergedOpen !== nextOpen) {
        setMergedOpen(nextOpen);
        onPopupVisibleChange === null || onPopupVisibleChange === void 0 ? void 0 : onPopupVisibleChange(nextOpen);
      }
    });
    var delayRef = React$2.useRef();
    var clearDelay = function clearDelay2() {
      clearTimeout(delayRef.current);
    };
    var triggerOpen = function triggerOpen2(nextOpen) {
      var delay = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      clearDelay();
      if (delay === 0) {
        internalTriggerOpen(nextOpen);
      } else {
        delayRef.current = setTimeout(function() {
          internalTriggerOpen(nextOpen);
        }, delay * 1e3);
      }
    };
    React$2.useEffect(function() {
      return clearDelay;
    }, []);
    var _React$useState9 = React$2.useState(false), _React$useState10 = _slicedToArray$1(_React$useState9, 2), inMotion = _React$useState10[0], setInMotion = _React$useState10[1];
    var mountRef = React$2.useRef(true);
    useLayoutEffect$1(function() {
      if (!mountRef.current || mergedOpen) {
        setInMotion(true);
      }
      mountRef.current = true;
    }, [mergedOpen]);
    var _React$useState11 = React$2.useState(null), _React$useState12 = _slicedToArray$1(_React$useState11, 2), motionPrepareResolve = _React$useState12[0], setMotionPrepareResolve = _React$useState12[1];
    var _React$useState13 = React$2.useState([0, 0]), _React$useState14 = _slicedToArray$1(_React$useState13, 2), mousePos = _React$useState14[0], setMousePos = _React$useState14[1];
    var setMousePosByEvent = function setMousePosByEvent2(event) {
      setMousePos([event.clientX, event.clientY]);
    };
    var _useAlign = useAlign(mergedOpen, popupEle, alignPoint2 ? mousePos : targetEle, popupPlacement, builtinPlacements, popupAlign, onPopupAlign), _useAlign2 = _slicedToArray$1(_useAlign, 9), ready = _useAlign2[0], offsetX = _useAlign2[1], offsetY = _useAlign2[2], arrowX = _useAlign2[3], arrowY = _useAlign2[4], scaleX = _useAlign2[5], scaleY = _useAlign2[6], alignInfo = _useAlign2[7], onAlign = _useAlign2[8];
    var triggerAlign = useEvent(function() {
      if (!inMotion) {
        onAlign();
      }
    });
    useWatch(mergedOpen, targetEle, popupEle, triggerAlign);
    useLayoutEffect$1(function() {
      triggerAlign();
    }, [mousePos]);
    useLayoutEffect$1(function() {
      if (mergedOpen && !(builtinPlacements !== null && builtinPlacements !== void 0 && builtinPlacements[popupPlacement])) {
        triggerAlign();
      }
    }, [JSON.stringify(popupAlign)]);
    var alignedClassName = React$2.useMemo(function() {
      var baseClassName2 = getAlignPopupClassName$1(builtinPlacements, prefixCls, alignInfo, alignPoint2);
      return classNames(baseClassName2, getPopupClassNameFromAlign === null || getPopupClassNameFromAlign === void 0 ? void 0 : getPopupClassNameFromAlign(alignInfo));
    }, [alignInfo, getPopupClassNameFromAlign, builtinPlacements, prefixCls, alignPoint2]);
    React$2.useImperativeHandle(ref, function() {
      return {
        forceAlign: triggerAlign
      };
    });
    var onVisibleChanged = function onVisibleChanged2(visible) {
      setInMotion(false);
      onAlign();
      afterPopupVisibleChange === null || afterPopupVisibleChange === void 0 ? void 0 : afterPopupVisibleChange(visible);
    };
    var onPrepare = function onPrepare2() {
      return new Promise(function(resolve) {
        setMotionPrepareResolve(function() {
          return resolve;
        });
      });
    };
    useLayoutEffect$1(function() {
      if (motionPrepareResolve) {
        onAlign();
        motionPrepareResolve();
        setMotionPrepareResolve(null);
      }
    }, [motionPrepareResolve]);
    var _React$useState15 = React$2.useState(0), _React$useState16 = _slicedToArray$1(_React$useState15, 2), targetWidth = _React$useState16[0], setTargetWidth = _React$useState16[1];
    var _React$useState17 = React$2.useState(0), _React$useState18 = _slicedToArray$1(_React$useState17, 2), targetHeight = _React$useState18[0], setTargetHeight = _React$useState18[1];
    var onTargetResize = function onTargetResize2(_, ele) {
      triggerAlign();
      if (stretch) {
        var rect = ele.getBoundingClientRect();
        setTargetWidth(rect.width);
        setTargetHeight(rect.height);
      }
    };
    var _useAction = useAction(mobile, action, showAction, hideAction), _useAction2 = _slicedToArray$1(_useAction, 2), showActions = _useAction2[0], hideActions = _useAction2[1];
    var wrapperAction = function wrapperAction2(eventName, nextOpen, delay, preEvent) {
      cloneProps[eventName] = function(event) {
        var _originChildProps$eve;
        preEvent === null || preEvent === void 0 ? void 0 : preEvent(event);
        triggerOpen(nextOpen, delay);
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        (_originChildProps$eve = originChildProps[eventName]) === null || _originChildProps$eve === void 0 ? void 0 : _originChildProps$eve.call.apply(_originChildProps$eve, [originChildProps, event].concat(args));
      };
    };
    var clickToShow = showActions.has("click");
    var clickToHide = hideActions.has("click") || hideActions.has("contextMenu");
    if (clickToShow || clickToHide) {
      cloneProps.onClick = function(event) {
        var _originChildProps$onC;
        if (openRef.current && clickToHide) {
          triggerOpen(false);
        } else if (!openRef.current && clickToShow) {
          setMousePosByEvent(event);
          triggerOpen(true);
        }
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        (_originChildProps$onC = originChildProps.onClick) === null || _originChildProps$onC === void 0 ? void 0 : _originChildProps$onC.call.apply(_originChildProps$onC, [originChildProps, event].concat(args));
      };
    }
    React$2.useEffect(function() {
      if (clickToHide && popupEle && (!mask || maskClosable)) {
        var onWindowClick = function onWindowClick2(_ref) {
          var target = _ref.target;
          if (openRef.current && !inPopupOrChild(target)) {
            triggerOpen(false);
          }
        };
        var win = getWin(popupEle);
        var targetRoot = targetEle === null || targetEle === void 0 ? void 0 : targetEle.getRootNode();
        win.addEventListener("click", onWindowClick);
        var inShadow = targetRoot && targetRoot !== targetEle.ownerDocument;
        if (inShadow) {
          targetRoot.addEventListener("click", onWindowClick);
        }
        if (process.env.NODE_ENV !== "production") {
          var popupRoot = popupEle.getRootNode();
          warningOnce(targetRoot === popupRoot, "trigger element and popup element should in same shadow root.");
        }
        return function() {
          win.removeEventListener("click", onWindowClick);
          if (inShadow) {
            targetRoot.removeEventListener("click", onWindowClick);
          }
        };
      }
    }, [clickToHide, targetEle, popupEle, mask, maskClosable]);
    var hoverToShow = showActions.has("hover");
    var hoverToHide = hideActions.has("hover");
    var onPopupMouseEnter;
    var onPopupMouseLeave;
    if (hoverToShow) {
      wrapperAction("onMouseEnter", true, mouseEnterDelay, function(event) {
        setMousePosByEvent(event);
      });
      onPopupMouseEnter = function onPopupMouseEnter2() {
        triggerOpen(true, mouseEnterDelay);
      };
      if (alignPoint2) {
        cloneProps.onMouseMove = function(event) {
          var _originChildProps$onM;
          (_originChildProps$onM = originChildProps.onMouseMove) === null || _originChildProps$onM === void 0 ? void 0 : _originChildProps$onM.call(originChildProps, event);
        };
      }
    }
    if (hoverToHide) {
      wrapperAction("onMouseLeave", false, mouseLeaveDelay);
      onPopupMouseLeave = function onPopupMouseLeave2() {
        triggerOpen(false, mouseLeaveDelay);
      };
    }
    if (showActions.has("focus")) {
      wrapperAction("onFocus", true, focusDelay);
    }
    if (hideActions.has("focus")) {
      wrapperAction("onBlur", false, blurDelay);
    }
    if (showActions.has("contextMenu")) {
      cloneProps.onContextMenu = function(event) {
        var _originChildProps$onC2;
        setMousePosByEvent(event);
        triggerOpen(true);
        event.preventDefault();
        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          args[_key3 - 1] = arguments[_key3];
        }
        (_originChildProps$onC2 = originChildProps.onContextMenu) === null || _originChildProps$onC2 === void 0 ? void 0 : _originChildProps$onC2.call.apply(_originChildProps$onC2, [originChildProps, event].concat(args));
      };
    }
    if (className) {
      cloneProps.className = classNames(originChildProps.className, className);
    }
    var mergedChildrenProps = _objectSpread2$1(_objectSpread2$1({}, originChildProps), cloneProps);
    var passedProps = {};
    var passedEventList = ["onContextMenu", "onClick", "onMouseDown", "onTouchStart", "onMouseEnter", "onMouseLeave", "onFocus", "onBlur"];
    passedEventList.forEach(function(eventName) {
      if (restProps[eventName]) {
        passedProps[eventName] = function() {
          var _mergedChildrenProps$;
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }
          (_mergedChildrenProps$ = mergedChildrenProps[eventName]) === null || _mergedChildrenProps$ === void 0 ? void 0 : _mergedChildrenProps$.call.apply(_mergedChildrenProps$, [mergedChildrenProps].concat(args));
          restProps[eventName].apply(restProps, args);
        };
      }
    });
    var triggerNode = /* @__PURE__ */ React$2.cloneElement(child, _objectSpread2$1(_objectSpread2$1({}, mergedChildrenProps), passedProps));
    var innerArrow = arrow ? _objectSpread2$1(_objectSpread2$1({}, arrow !== true ? arrow : {}), {}, {
      x: arrowX,
      y: arrowY
    }) : null;
    return /* @__PURE__ */ React$2.createElement(React$2.Fragment, null, /* @__PURE__ */ React$2.createElement(RefResizeObserver, {
      disabled: !mergedOpen,
      ref: setTargetRef,
      onResize: onTargetResize
    }, /* @__PURE__ */ React$2.createElement(TriggerWrapper, {
      getTriggerDOMNode
    }, triggerNode)), /* @__PURE__ */ React$2.createElement(TriggerContext$1.Provider, {
      value: context
    }, /* @__PURE__ */ React$2.createElement(Popup$2, {
      portal: PortalComponent,
      ref: setPopupRef,
      prefixCls,
      popup,
      className: classNames(popupClassName, alignedClassName),
      style: popupStyle,
      target: targetEle,
      onMouseEnter: onPopupMouseEnter,
      onMouseLeave: onPopupMouseLeave,
      zIndex,
      open: mergedOpen,
      keepDom: inMotion,
      onClick: onPopupClick,
      mask,
      motion: mergePopupMotion,
      maskMotion: mergeMaskMotion,
      onVisibleChanged,
      onPrepare,
      forceRender,
      autoDestroy: mergedAutoDestroy,
      getPopupContainer,
      align: alignInfo,
      arrow: innerArrow,
      ready,
      offsetX,
      offsetY,
      onAlign: triggerAlign,
      stretch,
      targetWidth: targetWidth / scaleX,
      targetHeight: targetHeight / scaleY
    })));
  });
  if (process.env.NODE_ENV !== "production") {
    Trigger2.displayName = "Trigger";
  }
  return Trigger2;
}
const Trigger$1 = generateTrigger$1(Portal$1);
var _excluded$i = ["prefixCls", "disabled", "visible", "children", "popupElement", "containerWidth", "animation", "transitionName", "dropdownStyle", "dropdownClassName", "direction", "placement", "builtinPlacements", "dropdownMatchSelectWidth", "dropdownRender", "dropdownAlign", "getPopupContainer", "empty", "getTriggerDOMNode", "onPopupVisibleChange", "onPopupMouseEnter"];
var getBuiltInPlacements = function getBuiltInPlacements2(dropdownMatchSelectWidth) {
  var adjustX = dropdownMatchSelectWidth === true ? 0 : 1;
  return {
    bottomLeft: {
      points: ["tl", "bl"],
      offset: [0, 4],
      overflow: {
        adjustX,
        adjustY: 1
      },
      htmlRegion: "scroll"
    },
    bottomRight: {
      points: ["tr", "br"],
      offset: [0, 4],
      overflow: {
        adjustX,
        adjustY: 1
      },
      htmlRegion: "scroll"
    },
    topLeft: {
      points: ["bl", "tl"],
      offset: [0, -4],
      overflow: {
        adjustX,
        adjustY: 1
      },
      htmlRegion: "scroll"
    },
    topRight: {
      points: ["br", "tr"],
      offset: [0, -4],
      overflow: {
        adjustX,
        adjustY: 1
      },
      htmlRegion: "scroll"
    }
  };
};
var SelectTrigger = function SelectTrigger2(props, ref) {
  var prefixCls = props.prefixCls;
  props.disabled;
  var visible = props.visible, children = props.children, popupElement = props.popupElement, containerWidth = props.containerWidth, animation = props.animation, transitionName = props.transitionName, dropdownStyle = props.dropdownStyle, dropdownClassName = props.dropdownClassName, _props$direction = props.direction, direction = _props$direction === void 0 ? "ltr" : _props$direction, placement = props.placement, builtinPlacements = props.builtinPlacements, dropdownMatchSelectWidth = props.dropdownMatchSelectWidth, dropdownRender = props.dropdownRender, dropdownAlign = props.dropdownAlign, getPopupContainer = props.getPopupContainer, empty = props.empty, getTriggerDOMNode = props.getTriggerDOMNode, onPopupVisibleChange = props.onPopupVisibleChange, onPopupMouseEnter = props.onPopupMouseEnter, restProps = _objectWithoutProperties(props, _excluded$i);
  var dropdownPrefixCls = "".concat(prefixCls, "-dropdown");
  var popupNode = popupElement;
  if (dropdownRender) {
    popupNode = dropdownRender(popupElement);
  }
  var mergedBuiltinPlacements = React$2.useMemo(function() {
    return builtinPlacements || getBuiltInPlacements(dropdownMatchSelectWidth);
  }, [builtinPlacements, dropdownMatchSelectWidth]);
  var mergedTransitionName = animation ? "".concat(dropdownPrefixCls, "-").concat(animation) : transitionName;
  var popupRef = React$2.useRef(null);
  React$2.useImperativeHandle(ref, function() {
    return {
      getPopupElement: function getPopupElement() {
        return popupRef.current;
      }
    };
  });
  var popupStyle = _objectSpread2$1({
    minWidth: containerWidth
  }, dropdownStyle);
  if (typeof dropdownMatchSelectWidth === "number") {
    popupStyle.width = dropdownMatchSelectWidth;
  } else if (dropdownMatchSelectWidth) {
    popupStyle.width = containerWidth;
  }
  return /* @__PURE__ */ React$2.createElement(Trigger$1, _extends$1({}, restProps, {
    showAction: onPopupVisibleChange ? ["click"] : [],
    hideAction: onPopupVisibleChange ? ["click"] : [],
    popupPlacement: placement || (direction === "rtl" ? "bottomRight" : "bottomLeft"),
    builtinPlacements: mergedBuiltinPlacements,
    prefixCls: dropdownPrefixCls,
    popupTransitionName: mergedTransitionName,
    popup: /* @__PURE__ */ React$2.createElement("div", {
      ref: popupRef,
      onMouseEnter: onPopupMouseEnter
    }, popupNode),
    popupAlign: dropdownAlign,
    popupVisible: visible,
    getPopupContainer,
    popupClassName: classNames(dropdownClassName, _defineProperty$3({}, "".concat(dropdownPrefixCls, "-empty"), empty)),
    popupStyle,
    getTriggerDOMNode,
    onPopupVisibleChange
  }), children);
};
var RefSelectTrigger = /* @__PURE__ */ React$2.forwardRef(SelectTrigger);
RefSelectTrigger.displayName = "SelectTrigger";
function getKey$1(data2, index2) {
  var key = data2.key;
  var value;
  if ("value" in data2) {
    value = data2.value;
  }
  if (key !== null && key !== void 0) {
    return key;
  }
  if (value !== void 0) {
    return value;
  }
  return "rc-index-key-".concat(index2);
}
function fillFieldNames$2(fieldNames2, childrenAsData) {
  var _ref = fieldNames2 || {}, label = _ref.label, value = _ref.value, options = _ref.options;
  return {
    label: label || (childrenAsData ? "children" : "label"),
    value: value || "value",
    options: options || "options"
  };
}
function flattenOptions(options) {
  var _ref2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, fieldNames2 = _ref2.fieldNames, childrenAsData = _ref2.childrenAsData;
  var flattenList = [];
  var _fillFieldNames = fillFieldNames$2(fieldNames2, false), fieldLabel = _fillFieldNames.label, fieldValue = _fillFieldNames.value, fieldOptions = _fillFieldNames.options;
  function dig(list, isGroupOption) {
    list.forEach(function(data2) {
      var label = data2[fieldLabel];
      if (isGroupOption || !(fieldOptions in data2)) {
        var value = data2[fieldValue];
        flattenList.push({
          key: getKey$1(data2, flattenList.length),
          groupOption: isGroupOption,
          data: data2,
          label,
          value
        });
      } else {
        var grpLabel = label;
        if (grpLabel === void 0 && childrenAsData) {
          grpLabel = data2.label;
        }
        flattenList.push({
          key: getKey$1(data2, flattenList.length),
          group: true,
          data: data2,
          label: grpLabel
        });
        dig(data2[fieldOptions], true);
      }
    });
  }
  dig(options, false);
  return flattenList;
}
function injectPropsWithOption(option) {
  var newOption = _objectSpread2$1({}, option);
  if (!("props" in newOption)) {
    Object.defineProperty(newOption, "props", {
      get: function get2() {
        warningOnce(false, "Return type is option instead of Option instance. Please read value directly instead of reading from `props`.");
        return newOption;
      }
    });
  }
  return newOption;
}
function getSeparatedContent(text, tokens) {
  if (!tokens || !tokens.length) {
    return null;
  }
  var match2 = false;
  function separate(str, _ref3) {
    var _ref4 = _toArray(_ref3), token2 = _ref4[0], restTokens = _ref4.slice(1);
    if (!token2) {
      return [str];
    }
    var list2 = str.split(token2);
    match2 = match2 || list2.length > 1;
    return list2.reduce(function(prevList, unitStr) {
      return [].concat(_toConsumableArray(prevList), _toConsumableArray(separate(unitStr, restTokens)));
    }, []).filter(function(unit) {
      return unit;
    });
  }
  var list = separate(text, tokens);
  return match2 ? list : null;
}
var _excluded$h = ["id", "prefixCls", "className", "showSearch", "tagRender", "direction", "omitDomProps", "displayValues", "onDisplayValuesChange", "emptyOptions", "notFoundContent", "onClear", "mode", "disabled", "loading", "getInputElement", "getRawInputElement", "open", "defaultOpen", "onDropdownVisibleChange", "activeValue", "onActiveValueChange", "activeDescendantId", "searchValue", "autoClearSearchValue", "onSearch", "onSearchSplit", "tokenSeparators", "allowClear", "showArrow", "inputIcon", "clearIcon", "OptionList", "animation", "transitionName", "dropdownStyle", "dropdownClassName", "dropdownMatchSelectWidth", "dropdownRender", "dropdownAlign", "placement", "builtinPlacements", "getPopupContainer", "showAction", "onFocus", "onBlur", "onKeyUp", "onKeyDown", "onMouseDown"];
var DEFAULT_OMIT_PROPS = ["value", "onChange", "removeIcon", "placeholder", "autoFocus", "maxTagCount", "maxTagTextLength", "maxTagPlaceholder", "choiceTransitionName", "onInputKeyDown", "onPopupScroll", "tabIndex"];
function isMultiple(mode) {
  return mode === "tags" || mode === "multiple";
}
var BaseSelect = /* @__PURE__ */ React$2.forwardRef(function(props, ref) {
  var _customizeRawInputEle, _classNames2;
  var id = props.id, prefixCls = props.prefixCls, className = props.className, showSearch = props.showSearch, tagRender = props.tagRender, direction = props.direction, omitDomProps = props.omitDomProps, displayValues = props.displayValues, onDisplayValuesChange = props.onDisplayValuesChange, emptyOptions = props.emptyOptions, _props$notFoundConten = props.notFoundContent, notFoundContent = _props$notFoundConten === void 0 ? "Not Found" : _props$notFoundConten, onClear = props.onClear, mode = props.mode, disabled = props.disabled, loading = props.loading, getInputElement = props.getInputElement, getRawInputElement = props.getRawInputElement, open = props.open, defaultOpen = props.defaultOpen, onDropdownVisibleChange = props.onDropdownVisibleChange, activeValue = props.activeValue, onActiveValueChange = props.onActiveValueChange, activeDescendantId = props.activeDescendantId, searchValue = props.searchValue, autoClearSearchValue = props.autoClearSearchValue, onSearch = props.onSearch, onSearchSplit = props.onSearchSplit, tokenSeparators = props.tokenSeparators, allowClear = props.allowClear, showArrow = props.showArrow, inputIcon = props.inputIcon, clearIcon = props.clearIcon, OptionList3 = props.OptionList, animation = props.animation, transitionName = props.transitionName, dropdownStyle = props.dropdownStyle, dropdownClassName = props.dropdownClassName, dropdownMatchSelectWidth = props.dropdownMatchSelectWidth, dropdownRender = props.dropdownRender, dropdownAlign = props.dropdownAlign, placement = props.placement, builtinPlacements = props.builtinPlacements, getPopupContainer = props.getPopupContainer, _props$showAction = props.showAction, showAction = _props$showAction === void 0 ? [] : _props$showAction, onFocus = props.onFocus, onBlur = props.onBlur, onKeyUp = props.onKeyUp, onKeyDown = props.onKeyDown, onMouseDown2 = props.onMouseDown, restProps = _objectWithoutProperties(props, _excluded$h);
  var multiple = isMultiple(mode);
  var mergedShowSearch = (showSearch !== void 0 ? showSearch : multiple) || mode === "combobox";
  var domProps = _objectSpread2$1({}, restProps);
  DEFAULT_OMIT_PROPS.forEach(function(propName) {
    delete domProps[propName];
  });
  omitDomProps === null || omitDomProps === void 0 ? void 0 : omitDomProps.forEach(function(propName) {
    delete domProps[propName];
  });
  var _React$useState = React$2.useState(false), _React$useState2 = _slicedToArray$1(_React$useState, 2), mobile = _React$useState2[0], setMobile = _React$useState2[1];
  React$2.useEffect(function() {
    setMobile(isMobile());
  }, []);
  var containerRef = React$2.useRef(null);
  var selectorDomRef = React$2.useRef(null);
  var triggerRef = React$2.useRef(null);
  var selectorRef = React$2.useRef(null);
  var listRef = React$2.useRef(null);
  var _useDelayReset = useDelayReset(), _useDelayReset2 = _slicedToArray$1(_useDelayReset, 3), mockFocused = _useDelayReset2[0], setMockFocused = _useDelayReset2[1], cancelSetMockFocused = _useDelayReset2[2];
  React$2.useImperativeHandle(ref, function() {
    var _selectorRef$current, _selectorRef$current2;
    return {
      focus: (_selectorRef$current = selectorRef.current) === null || _selectorRef$current === void 0 ? void 0 : _selectorRef$current.focus,
      blur: (_selectorRef$current2 = selectorRef.current) === null || _selectorRef$current2 === void 0 ? void 0 : _selectorRef$current2.blur,
      scrollTo: function scrollTo(arg) {
        var _listRef$current;
        return (_listRef$current = listRef.current) === null || _listRef$current === void 0 ? void 0 : _listRef$current.scrollTo(arg);
      }
    };
  });
  var mergedSearchValue = React$2.useMemo(function() {
    var _displayValues$;
    if (mode !== "combobox") {
      return searchValue;
    }
    var val = (_displayValues$ = displayValues[0]) === null || _displayValues$ === void 0 ? void 0 : _displayValues$.value;
    return typeof val === "string" || typeof val === "number" ? String(val) : "";
  }, [searchValue, mode, displayValues]);
  var customizeInputElement = mode === "combobox" && typeof getInputElement === "function" && getInputElement() || null;
  var customizeRawInputElement = typeof getRawInputElement === "function" && getRawInputElement();
  var customizeRawInputRef = useComposeRef(selectorDomRef, customizeRawInputElement === null || customizeRawInputElement === void 0 ? void 0 : (_customizeRawInputEle = customizeRawInputElement.props) === null || _customizeRawInputEle === void 0 ? void 0 : _customizeRawInputEle.ref);
  var _React$useState3 = React$2.useState(false), _React$useState4 = _slicedToArray$1(_React$useState3, 2), rendered = _React$useState4[0], setRendered = _React$useState4[1];
  useLayoutEffect$1(function() {
    setRendered(true);
  }, []);
  var _useMergedState = useMergedState(false, {
    defaultValue: defaultOpen,
    value: open
  }), _useMergedState2 = _slicedToArray$1(_useMergedState, 2), innerOpen = _useMergedState2[0], setInnerOpen = _useMergedState2[1];
  var mergedOpen = rendered ? innerOpen : false;
  var emptyListContent = !notFoundContent && emptyOptions;
  if (disabled || emptyListContent && mergedOpen && mode === "combobox") {
    mergedOpen = false;
  }
  var triggerOpen = emptyListContent ? false : mergedOpen;
  var onToggleOpen = React$2.useCallback(function(newOpen) {
    var nextOpen = newOpen !== void 0 ? newOpen : !mergedOpen;
    if (!disabled) {
      setInnerOpen(nextOpen);
      if (mergedOpen !== nextOpen) {
        onDropdownVisibleChange === null || onDropdownVisibleChange === void 0 ? void 0 : onDropdownVisibleChange(nextOpen);
      }
    }
  }, [disabled, mergedOpen, setInnerOpen, onDropdownVisibleChange]);
  var tokenWithEnter = React$2.useMemo(function() {
    return (tokenSeparators || []).some(function(tokenSeparator) {
      return ["\n", "\r\n"].includes(tokenSeparator);
    });
  }, [tokenSeparators]);
  var onInternalSearch = function onInternalSearch2(searchText, fromTyping, isCompositing) {
    var ret = true;
    var newSearchText = searchText;
    onActiveValueChange === null || onActiveValueChange === void 0 ? void 0 : onActiveValueChange(null);
    var patchLabels = isCompositing ? null : getSeparatedContent(searchText, tokenSeparators);
    if (mode !== "combobox" && patchLabels) {
      newSearchText = "";
      onSearchSplit === null || onSearchSplit === void 0 ? void 0 : onSearchSplit(patchLabels);
      onToggleOpen(false);
      ret = false;
    }
    if (onSearch && mergedSearchValue !== newSearchText) {
      onSearch(newSearchText, {
        source: fromTyping ? "typing" : "effect"
      });
    }
    return ret;
  };
  var onInternalSearchSubmit = function onInternalSearchSubmit2(searchText) {
    if (!searchText || !searchText.trim()) {
      return;
    }
    onSearch(searchText, {
      source: "submit"
    });
  };
  React$2.useEffect(function() {
    if (!mergedOpen && !multiple && mode !== "combobox") {
      onInternalSearch("", false, false);
    }
  }, [mergedOpen]);
  React$2.useEffect(function() {
    if (innerOpen && disabled) {
      setInnerOpen(false);
    }
    if (disabled) {
      setMockFocused(false);
    }
  }, [disabled]);
  var _useLock = useLock(), _useLock2 = _slicedToArray$1(_useLock, 2), getClearLock = _useLock2[0], setClearLock = _useLock2[1];
  var onInternalKeyDown = function onInternalKeyDown2(event) {
    var clearLock = getClearLock();
    var which = event.which;
    if (which === KeyCode.ENTER) {
      if (mode !== "combobox") {
        event.preventDefault();
      }
      if (!mergedOpen) {
        onToggleOpen(true);
      }
    }
    setClearLock(!!mergedSearchValue);
    if (which === KeyCode.BACKSPACE && !clearLock && multiple && !mergedSearchValue && displayValues.length) {
      var cloneDisplayValues = _toConsumableArray(displayValues);
      var removedDisplayValue = null;
      for (var i = cloneDisplayValues.length - 1; i >= 0; i -= 1) {
        var current = cloneDisplayValues[i];
        if (!current.disabled) {
          cloneDisplayValues.splice(i, 1);
          removedDisplayValue = current;
          break;
        }
      }
      if (removedDisplayValue) {
        onDisplayValuesChange(cloneDisplayValues, {
          type: "remove",
          values: [removedDisplayValue]
        });
      }
    }
    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }
    if (mergedOpen && listRef.current) {
      var _listRef$current2;
      (_listRef$current2 = listRef.current).onKeyDown.apply(_listRef$current2, [event].concat(rest));
    }
    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown.apply(void 0, [event].concat(rest));
  };
  var onInternalKeyUp = function onInternalKeyUp2(event) {
    for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      rest[_key2 - 1] = arguments[_key2];
    }
    if (mergedOpen && listRef.current) {
      var _listRef$current3;
      (_listRef$current3 = listRef.current).onKeyUp.apply(_listRef$current3, [event].concat(rest));
    }
    onKeyUp === null || onKeyUp === void 0 ? void 0 : onKeyUp.apply(void 0, [event].concat(rest));
  };
  var onSelectorRemove = function onSelectorRemove2(val) {
    var newValues = displayValues.filter(function(i) {
      return i !== val;
    });
    onDisplayValuesChange(newValues, {
      type: "remove",
      values: [val]
    });
  };
  var focusRef = React$2.useRef(false);
  var onContainerFocus = function onContainerFocus2() {
    setMockFocused(true);
    if (!disabled) {
      if (onFocus && !focusRef.current) {
        onFocus.apply(void 0, arguments);
      }
      if (showAction.includes("focus")) {
        onToggleOpen(true);
      }
    }
    focusRef.current = true;
  };
  var onContainerBlur = function onContainerBlur2() {
    setMockFocused(false, function() {
      focusRef.current = false;
      onToggleOpen(false);
    });
    if (disabled) {
      return;
    }
    if (mergedSearchValue) {
      if (mode === "tags") {
        onSearch(mergedSearchValue, {
          source: "submit"
        });
      } else if (mode === "multiple") {
        onSearch("", {
          source: "blur"
        });
      }
    }
    if (onBlur) {
      onBlur.apply(void 0, arguments);
    }
  };
  var activeTimeoutIds = [];
  React$2.useEffect(function() {
    return function() {
      activeTimeoutIds.forEach(function(timeoutId) {
        return clearTimeout(timeoutId);
      });
      activeTimeoutIds.splice(0, activeTimeoutIds.length);
    };
  }, []);
  var onInternalMouseDown = function onInternalMouseDown2(event) {
    var _triggerRef$current;
    var target = event.target;
    var popupElement = (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 ? void 0 : _triggerRef$current.getPopupElement();
    if (popupElement && popupElement.contains(target)) {
      var timeoutId = setTimeout(function() {
        var index2 = activeTimeoutIds.indexOf(timeoutId);
        if (index2 !== -1) {
          activeTimeoutIds.splice(index2, 1);
        }
        cancelSetMockFocused();
        if (!mobile && !popupElement.contains(document.activeElement)) {
          var _selectorRef$current3;
          (_selectorRef$current3 = selectorRef.current) === null || _selectorRef$current3 === void 0 ? void 0 : _selectorRef$current3.focus();
        }
      });
      activeTimeoutIds.push(timeoutId);
    }
    for (var _len3 = arguments.length, restArgs = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      restArgs[_key3 - 1] = arguments[_key3];
    }
    onMouseDown2 === null || onMouseDown2 === void 0 ? void 0 : onMouseDown2.apply(void 0, [event].concat(restArgs));
  };
  var _React$useState5 = React$2.useState(null), _React$useState6 = _slicedToArray$1(_React$useState5, 2), containerWidth = _React$useState6[0], setContainerWidth = _React$useState6[1];
  var _React$useState7 = React$2.useState({}), _React$useState8 = _slicedToArray$1(_React$useState7, 2), forceUpdate = _React$useState8[1];
  function onPopupMouseEnter() {
    forceUpdate({});
  }
  useLayoutEffect$1(function() {
    if (triggerOpen) {
      var _containerRef$current;
      var newWidth = Math.ceil((_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.offsetWidth);
      if (containerWidth !== newWidth && !Number.isNaN(newWidth)) {
        setContainerWidth(newWidth);
      }
    }
  }, [triggerOpen]);
  var onTriggerVisibleChange;
  if (customizeRawInputElement) {
    onTriggerVisibleChange = function onTriggerVisibleChange2(newOpen) {
      onToggleOpen(newOpen);
    };
  }
  useSelectTriggerControl(function() {
    var _triggerRef$current2;
    return [containerRef.current, (_triggerRef$current2 = triggerRef.current) === null || _triggerRef$current2 === void 0 ? void 0 : _triggerRef$current2.getPopupElement()];
  }, triggerOpen, onToggleOpen, !!customizeRawInputElement);
  var baseSelectContext = React$2.useMemo(function() {
    return _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      notFoundContent,
      open: mergedOpen,
      triggerOpen,
      id,
      showSearch: mergedShowSearch,
      multiple,
      toggleOpen: onToggleOpen
    });
  }, [props, notFoundContent, triggerOpen, mergedOpen, id, mergedShowSearch, multiple, onToggleOpen]);
  var mergedShowArrow = showArrow !== void 0 ? showArrow : loading || !multiple && mode !== "combobox";
  var arrowNode;
  if (mergedShowArrow) {
    arrowNode = /* @__PURE__ */ React$2.createElement(TransBtn, {
      className: classNames("".concat(prefixCls, "-arrow"), _defineProperty$3({}, "".concat(prefixCls, "-arrow-loading"), loading)),
      customizeIcon: inputIcon,
      customizeIconProps: {
        loading,
        searchValue: mergedSearchValue,
        open: mergedOpen,
        focused: mockFocused,
        showSearch: mergedShowSearch
      }
    });
  }
  var clearNode;
  var onClearMouseDown = function onClearMouseDown2() {
    var _selectorRef$current4;
    onClear === null || onClear === void 0 ? void 0 : onClear();
    (_selectorRef$current4 = selectorRef.current) === null || _selectorRef$current4 === void 0 ? void 0 : _selectorRef$current4.focus();
    onDisplayValuesChange([], {
      type: "clear",
      values: displayValues
    });
    onInternalSearch("", false, false);
  };
  if (!disabled && allowClear && (displayValues.length || mergedSearchValue) && !(mode === "combobox" && mergedSearchValue === "")) {
    clearNode = /* @__PURE__ */ React$2.createElement(TransBtn, {
      className: "".concat(prefixCls, "-clear"),
      onMouseDown: onClearMouseDown,
      customizeIcon: clearIcon
    }, "×");
  }
  var optionList = /* @__PURE__ */ React$2.createElement(OptionList3, {
    ref: listRef
  });
  var mergedClassName = classNames(prefixCls, className, (_classNames2 = {}, _defineProperty$3(_classNames2, "".concat(prefixCls, "-focused"), mockFocused), _defineProperty$3(_classNames2, "".concat(prefixCls, "-multiple"), multiple), _defineProperty$3(_classNames2, "".concat(prefixCls, "-single"), !multiple), _defineProperty$3(_classNames2, "".concat(prefixCls, "-allow-clear"), allowClear), _defineProperty$3(_classNames2, "".concat(prefixCls, "-show-arrow"), mergedShowArrow), _defineProperty$3(_classNames2, "".concat(prefixCls, "-disabled"), disabled), _defineProperty$3(_classNames2, "".concat(prefixCls, "-loading"), loading), _defineProperty$3(_classNames2, "".concat(prefixCls, "-open"), mergedOpen), _defineProperty$3(_classNames2, "".concat(prefixCls, "-customize-input"), customizeInputElement), _defineProperty$3(_classNames2, "".concat(prefixCls, "-show-search"), mergedShowSearch), _classNames2));
  var selectorNode = /* @__PURE__ */ React$2.createElement(RefSelectTrigger, {
    ref: triggerRef,
    disabled,
    prefixCls,
    visible: triggerOpen,
    popupElement: optionList,
    containerWidth,
    animation,
    transitionName,
    dropdownStyle,
    dropdownClassName,
    direction,
    dropdownMatchSelectWidth,
    dropdownRender,
    dropdownAlign,
    placement,
    builtinPlacements,
    getPopupContainer,
    empty: emptyOptions,
    getTriggerDOMNode: function getTriggerDOMNode() {
      return selectorDomRef.current;
    },
    onPopupVisibleChange: onTriggerVisibleChange,
    onPopupMouseEnter
  }, customizeRawInputElement ? /* @__PURE__ */ React$2.cloneElement(customizeRawInputElement, {
    ref: customizeRawInputRef
  }) : /* @__PURE__ */ React$2.createElement(ForwardSelector, _extends$1({}, props, {
    domRef: selectorDomRef,
    prefixCls,
    inputElement: customizeInputElement,
    ref: selectorRef,
    id,
    showSearch: mergedShowSearch,
    autoClearSearchValue,
    mode,
    activeDescendantId,
    tagRender,
    values: displayValues,
    open: mergedOpen,
    onToggleOpen,
    activeValue,
    searchValue: mergedSearchValue,
    onSearch: onInternalSearch,
    onSearchSubmit: onInternalSearchSubmit,
    onRemove: onSelectorRemove,
    tokenWithEnter
  })));
  var renderNode;
  if (customizeRawInputElement) {
    renderNode = selectorNode;
  } else {
    renderNode = /* @__PURE__ */ React$2.createElement("div", _extends$1({
      className: mergedClassName
    }, domProps, {
      ref: containerRef,
      onMouseDown: onInternalMouseDown,
      onKeyDown: onInternalKeyDown,
      onKeyUp: onInternalKeyUp,
      onFocus: onContainerFocus,
      onBlur: onContainerBlur
    }), mockFocused && !mergedOpen && /* @__PURE__ */ React$2.createElement("span", {
      style: {
        width: 0,
        height: 0,
        position: "absolute",
        overflow: "hidden",
        opacity: 0
      },
      "aria-live": "polite"
    }, "".concat(displayValues.map(function(_ref) {
      var label = _ref.label, value = _ref.value;
      return ["number", "string"].includes(_typeof$3(label)) ? label : value;
    }).join(", "))), selectorNode, arrowNode, clearNode);
  }
  return /* @__PURE__ */ React$2.createElement(BaseSelectContext.Provider, {
    value: baseSelectContext
  }, renderNode);
});
if (process.env.NODE_ENV !== "production") {
  BaseSelect.displayName = "BaseSelect";
}
const useCache = function(labeledValues, valueOptions) {
  var cacheRef = React$2.useRef({
    values: /* @__PURE__ */ new Map(),
    options: /* @__PURE__ */ new Map()
  });
  var filledLabeledValues = React$2.useMemo(function() {
    var _cacheRef$current = cacheRef.current, prevValueCache = _cacheRef$current.values, prevOptionCache = _cacheRef$current.options;
    var patchedValues = labeledValues.map(function(item) {
      if (item.label === void 0) {
        var _prevValueCache$get;
        return _objectSpread2$1(_objectSpread2$1({}, item), {}, {
          label: (_prevValueCache$get = prevValueCache.get(item.value)) === null || _prevValueCache$get === void 0 ? void 0 : _prevValueCache$get.label
        });
      }
      return item;
    });
    var valueCache = /* @__PURE__ */ new Map();
    var optionCache = /* @__PURE__ */ new Map();
    patchedValues.forEach(function(item) {
      valueCache.set(item.value, item);
      optionCache.set(item.value, valueOptions.get(item.value) || prevOptionCache.get(item.value));
    });
    cacheRef.current.values = valueCache;
    cacheRef.current.options = optionCache;
    return patchedValues;
  }, [labeledValues, valueOptions]);
  var getOption = React$2.useCallback(function(val) {
    return valueOptions.get(val) || cacheRef.current.options.get(val);
  }, [valueOptions]);
  return [filledLabeledValues, getOption];
};
function includes(test, search) {
  return toArray$1(test).join("").toUpperCase().includes(search);
}
const useFilterOptions = function(options, fieldNames2, searchValue, filterOption, optionFilterProp) {
  return React$2.useMemo(function() {
    if (!searchValue || filterOption === false) {
      return options;
    }
    var fieldOptions = fieldNames2.options, fieldLabel = fieldNames2.label, fieldValue = fieldNames2.value;
    var filteredOptions = [];
    var customizeFilter = typeof filterOption === "function";
    var upperSearch = searchValue.toUpperCase();
    var filterFunc = customizeFilter ? filterOption : function(_, option) {
      if (optionFilterProp) {
        return includes(option[optionFilterProp], upperSearch);
      }
      if (option[fieldOptions]) {
        return includes(option[fieldLabel !== "children" ? fieldLabel : "label"], upperSearch);
      }
      return includes(option[fieldValue], upperSearch);
    };
    var wrapOption = customizeFilter ? function(opt) {
      return injectPropsWithOption(opt);
    } : function(opt) {
      return opt;
    };
    options.forEach(function(item) {
      if (item[fieldOptions]) {
        var matchGroup = filterFunc(searchValue, wrapOption(item));
        if (matchGroup) {
          filteredOptions.push(item);
        } else {
          var subOptions = item[fieldOptions].filter(function(subItem) {
            return filterFunc(searchValue, wrapOption(subItem));
          });
          if (subOptions.length) {
            filteredOptions.push(_objectSpread2$1(_objectSpread2$1({}, item), {}, _defineProperty$3({}, fieldOptions, subOptions)));
          }
        }
        return;
      }
      if (filterFunc(searchValue, wrapOption(item))) {
        filteredOptions.push(item);
      }
    });
    return filteredOptions;
  }, [options, filterOption, optionFilterProp, searchValue, fieldNames2]);
};
var uuid = 0;
var isBrowserClient = process.env.NODE_ENV !== "test" && canUseDom();
function getUUID() {
  var retId;
  if (isBrowserClient) {
    retId = uuid;
    uuid += 1;
  } else {
    retId = "TEST_OR_SSR";
  }
  return retId;
}
function useId(id) {
  var _React$useState = React$2.useState(), _React$useState2 = _slicedToArray$1(_React$useState, 2), innerId = _React$useState2[0], setInnerId = _React$useState2[1];
  React$2.useEffect(function() {
    setInnerId("rc_select_".concat(getUUID()));
  }, []);
  return id || innerId;
}
var _excluded$g = ["children", "value"], _excluded2$3 = ["children"];
function convertNodeToOption(node2) {
  var _ref = node2, key = _ref.key, _ref$props = _ref.props, children = _ref$props.children, value = _ref$props.value, restProps = _objectWithoutProperties(_ref$props, _excluded$g);
  return _objectSpread2$1({
    key,
    value: value !== void 0 ? value : key,
    children
  }, restProps);
}
function convertChildrenToData(nodes) {
  var optionOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  return toArray$3(nodes).map(function(node2, index2) {
    if (!/* @__PURE__ */ React$2.isValidElement(node2) || !node2.type) {
      return null;
    }
    var _ref2 = node2, isSelectOptGroup = _ref2.type.isSelectOptGroup, key = _ref2.key, _ref2$props = _ref2.props, children = _ref2$props.children, restProps = _objectWithoutProperties(_ref2$props, _excluded2$3);
    if (optionOnly || !isSelectOptGroup) {
      return convertNodeToOption(node2);
    }
    return _objectSpread2$1(_objectSpread2$1({
      key: "__RC_SELECT_GRP__".concat(key === null ? index2 : key, "__"),
      label: key
    }, restProps), {}, {
      options: convertChildrenToData(children)
    });
  }).filter(function(data2) {
    return data2;
  });
}
function useOptions(options, children, fieldNames2, optionFilterProp, optionLabelProp) {
  return React$2.useMemo(function() {
    var mergedOptions = options;
    var childrenAsData = !options;
    if (childrenAsData) {
      mergedOptions = convertChildrenToData(children);
    }
    var valueOptions = /* @__PURE__ */ new Map();
    var labelOptions = /* @__PURE__ */ new Map();
    var setLabelOptions = function setLabelOptions2(labelOptionsMap, option, key) {
      if (key && typeof key === "string") {
        labelOptionsMap.set(option[key], option);
      }
    };
    function dig(optionList) {
      var isChildren = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      for (var i = 0; i < optionList.length; i += 1) {
        var option = optionList[i];
        if (!option[fieldNames2.options] || isChildren) {
          valueOptions.set(option[fieldNames2.value], option);
          setLabelOptions(labelOptions, option, fieldNames2.label);
          setLabelOptions(labelOptions, option, optionFilterProp);
          setLabelOptions(labelOptions, option, optionLabelProp);
        } else {
          dig(option[fieldNames2.options], true);
        }
      }
    }
    dig(mergedOptions);
    return {
      options: mergedOptions,
      valueOptions,
      labelOptions
    };
  }, [options, children, fieldNames2, optionFilterProp, optionLabelProp]);
}
function useRefFunc$1(callback) {
  var funcRef = React$2.useRef();
  funcRef.current = callback;
  var cacheFn = React$2.useCallback(function() {
    return funcRef.current.apply(funcRef, arguments);
  }, []);
  return cacheFn;
}
var OptGroup = function OptGroup2() {
  return null;
};
OptGroup.isSelectOptGroup = true;
var Option = function Option2() {
  return null;
};
Option.isSelectOption = true;
var Filler = /* @__PURE__ */ React$2.forwardRef(function(_ref, ref) {
  var height = _ref.height, offset2 = _ref.offset, children = _ref.children, prefixCls = _ref.prefixCls, onInnerResize = _ref.onInnerResize, innerProps = _ref.innerProps;
  var outerStyle = {};
  var innerStyle = {
    display: "flex",
    flexDirection: "column"
  };
  if (offset2 !== void 0) {
    outerStyle = {
      height,
      position: "relative",
      overflow: "hidden"
    };
    innerStyle = _objectSpread2$1(_objectSpread2$1({}, innerStyle), {}, {
      transform: "translateY(".concat(offset2, "px)"),
      position: "absolute",
      left: 0,
      right: 0,
      top: 0
    });
  }
  return /* @__PURE__ */ React$2.createElement("div", {
    style: outerStyle
  }, /* @__PURE__ */ React$2.createElement(RefResizeObserver, {
    onResize: function onResize2(_ref2) {
      var offsetHeight = _ref2.offsetHeight;
      if (offsetHeight && onInnerResize) {
        onInnerResize();
      }
    }
  }, /* @__PURE__ */ React$2.createElement("div", _extends$1({
    style: innerStyle,
    className: classNames(_defineProperty$3({}, "".concat(prefixCls, "-holder-inner"), prefixCls)),
    ref
  }, innerProps), children)));
});
Filler.displayName = "Filler";
var MIN_SIZE = 20;
function getPageY(e) {
  return "touches" in e ? e.touches[0].pageY : e.pageY;
}
var ScrollBar = /* @__PURE__ */ function(_React$Component) {
  _inherits$1(ScrollBar2, _React$Component);
  var _super = _createSuper$1(ScrollBar2);
  function ScrollBar2() {
    var _this;
    _classCallCheck$1(this, ScrollBar2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.moveRaf = null;
    _this.scrollbarRef = /* @__PURE__ */ React$2.createRef();
    _this.thumbRef = /* @__PURE__ */ React$2.createRef();
    _this.visibleTimeout = null;
    _this.state = {
      dragging: false,
      pageY: null,
      startTop: null,
      visible: false
    };
    _this.delayHidden = function() {
      clearTimeout(_this.visibleTimeout);
      _this.setState({
        visible: true
      });
      _this.visibleTimeout = setTimeout(function() {
        _this.setState({
          visible: false
        });
      }, 2e3);
    };
    _this.onScrollbarTouchStart = function(e) {
      e.preventDefault();
    };
    _this.onContainerMouseDown = function(e) {
      e.stopPropagation();
      e.preventDefault();
    };
    _this.patchEvents = function() {
      window.addEventListener("mousemove", _this.onMouseMove);
      window.addEventListener("mouseup", _this.onMouseUp);
      _this.thumbRef.current.addEventListener("touchmove", _this.onMouseMove);
      _this.thumbRef.current.addEventListener("touchend", _this.onMouseUp);
    };
    _this.removeEvents = function() {
      var _this$scrollbarRef$cu;
      window.removeEventListener("mousemove", _this.onMouseMove);
      window.removeEventListener("mouseup", _this.onMouseUp);
      (_this$scrollbarRef$cu = _this.scrollbarRef.current) === null || _this$scrollbarRef$cu === void 0 ? void 0 : _this$scrollbarRef$cu.removeEventListener("touchstart", _this.onScrollbarTouchStart);
      if (_this.thumbRef.current) {
        _this.thumbRef.current.removeEventListener("touchstart", _this.onMouseDown);
        _this.thumbRef.current.removeEventListener("touchmove", _this.onMouseMove);
        _this.thumbRef.current.removeEventListener("touchend", _this.onMouseUp);
      }
      wrapperRaf.cancel(_this.moveRaf);
    };
    _this.onMouseDown = function(e) {
      var onStartMove = _this.props.onStartMove;
      _this.setState({
        dragging: true,
        pageY: getPageY(e),
        startTop: _this.getTop()
      });
      onStartMove();
      _this.patchEvents();
      e.stopPropagation();
      e.preventDefault();
    };
    _this.onMouseMove = function(e) {
      var _this$state = _this.state, dragging = _this$state.dragging, pageY = _this$state.pageY, startTop = _this$state.startTop;
      var onScroll = _this.props.onScroll;
      wrapperRaf.cancel(_this.moveRaf);
      if (dragging) {
        var offsetY = getPageY(e) - pageY;
        var newTop = startTop + offsetY;
        var enableScrollRange = _this.getEnableScrollRange();
        var enableHeightRange = _this.getEnableHeightRange();
        var ptg = enableHeightRange ? newTop / enableHeightRange : 0;
        var newScrollTop = Math.ceil(ptg * enableScrollRange);
        _this.moveRaf = wrapperRaf(function() {
          onScroll(newScrollTop);
        });
      }
    };
    _this.onMouseUp = function() {
      var onStopMove = _this.props.onStopMove;
      _this.setState({
        dragging: false
      });
      onStopMove();
      _this.removeEvents();
    };
    _this.getSpinHeight = function() {
      var _this$props = _this.props, height = _this$props.height, count = _this$props.count;
      var baseHeight = height / count * 10;
      baseHeight = Math.max(baseHeight, MIN_SIZE);
      baseHeight = Math.min(baseHeight, height / 2);
      return Math.floor(baseHeight);
    };
    _this.getEnableScrollRange = function() {
      var _this$props2 = _this.props, scrollHeight = _this$props2.scrollHeight, height = _this$props2.height;
      return scrollHeight - height || 0;
    };
    _this.getEnableHeightRange = function() {
      var height = _this.props.height;
      var spinHeight = _this.getSpinHeight();
      return height - spinHeight || 0;
    };
    _this.getTop = function() {
      var scrollTop = _this.props.scrollTop;
      var enableScrollRange = _this.getEnableScrollRange();
      var enableHeightRange = _this.getEnableHeightRange();
      if (scrollTop === 0 || enableScrollRange === 0) {
        return 0;
      }
      var ptg = scrollTop / enableScrollRange;
      return ptg * enableHeightRange;
    };
    _this.showScroll = function() {
      var _this$props3 = _this.props, height = _this$props3.height, scrollHeight = _this$props3.scrollHeight;
      return scrollHeight > height;
    };
    return _this;
  }
  _createClass$1(ScrollBar2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.scrollbarRef.current.addEventListener("touchstart", this.onScrollbarTouchStart);
      this.thumbRef.current.addEventListener("touchstart", this.onMouseDown);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.scrollTop !== this.props.scrollTop) {
        this.delayHidden();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.removeEvents();
      clearTimeout(this.visibleTimeout);
    }
  }, {
    key: "render",
    value: (
      // ====================== Render =======================
      function render2() {
        var _this$state2 = this.state, dragging = _this$state2.dragging, visible = _this$state2.visible;
        var prefixCls = this.props.prefixCls;
        var spinHeight = this.getSpinHeight();
        var top = this.getTop();
        var canScroll = this.showScroll();
        var mergedVisible = canScroll && visible;
        return /* @__PURE__ */ React$2.createElement("div", {
          ref: this.scrollbarRef,
          className: classNames("".concat(prefixCls, "-scrollbar"), _defineProperty$3({}, "".concat(prefixCls, "-scrollbar-show"), canScroll)),
          style: {
            width: 8,
            top: 0,
            bottom: 0,
            right: 0,
            position: "absolute",
            display: mergedVisible ? null : "none"
          },
          onMouseDown: this.onContainerMouseDown,
          onMouseMove: this.delayHidden
        }, /* @__PURE__ */ React$2.createElement("div", {
          ref: this.thumbRef,
          className: classNames("".concat(prefixCls, "-scrollbar-thumb"), _defineProperty$3({}, "".concat(prefixCls, "-scrollbar-thumb-moving"), dragging)),
          style: {
            width: "100%",
            height: spinHeight,
            top,
            left: 0,
            position: "absolute",
            background: "rgba(0, 0, 0, 0.5)",
            borderRadius: 99,
            cursor: "pointer",
            userSelect: "none"
          },
          onMouseDown: this.onMouseDown
        }));
      }
    )
  }]);
  return ScrollBar2;
}(React$2.Component);
function Item$2(_ref) {
  var children = _ref.children, setRef = _ref.setRef;
  var refFunc = React$2.useCallback(function(node2) {
    setRef(node2);
  }, []);
  return /* @__PURE__ */ React$2.cloneElement(children, {
    ref: refFunc
  });
}
function useChildren(list, startIndex, endIndex, setNodeRef, renderFunc, _ref) {
  var getKey2 = _ref.getKey;
  return list.slice(startIndex, endIndex + 1).map(function(item, index2) {
    var eleIndex = startIndex + index2;
    var node2 = renderFunc(item, eleIndex, {
      // style: status === 'MEASURE_START' ? { visibility: 'hidden' } : {},
    });
    var key = getKey2(item);
    return /* @__PURE__ */ React$2.createElement(Item$2, {
      key,
      setRef: function setRef(ele) {
        return setNodeRef(item, ele);
      }
    }, node2);
  });
}
var CacheMap = /* @__PURE__ */ function() {
  function CacheMap2() {
    _classCallCheck$1(this, CacheMap2);
    this.maps = void 0;
    this.maps = /* @__PURE__ */ Object.create(null);
  }
  _createClass$1(CacheMap2, [{
    key: "set",
    value: function set2(key, value) {
      this.maps[key] = value;
    }
  }, {
    key: "get",
    value: function get2(key) {
      return this.maps[key];
    }
  }]);
  return CacheMap2;
}();
function useHeights(getKey2, onItemAdd, onItemRemove) {
  var _React$useState = React$2.useState(0), _React$useState2 = _slicedToArray$1(_React$useState, 2), updatedMark = _React$useState2[0], setUpdatedMark = _React$useState2[1];
  var instanceRef = useRef(/* @__PURE__ */ new Map());
  var heightsRef = useRef(new CacheMap());
  var collectRafRef = useRef();
  function cancelRaf() {
    wrapperRaf.cancel(collectRafRef.current);
  }
  function collectHeight() {
    cancelRaf();
    collectRafRef.current = wrapperRaf(function() {
      instanceRef.current.forEach(function(element, key) {
        if (element && element.offsetParent) {
          var htmlElement = findDOMNode$1(element);
          var offsetHeight = htmlElement.offsetHeight;
          if (heightsRef.current.get(key) !== offsetHeight) {
            heightsRef.current.set(key, htmlElement.offsetHeight);
          }
        }
      });
      setUpdatedMark(function(c) {
        return c + 1;
      });
    });
  }
  function setInstanceRef(item, instance) {
    var key = getKey2(item);
    var origin = instanceRef.current.get(key);
    if (instance) {
      instanceRef.current.set(key, instance);
      collectHeight();
    } else {
      instanceRef.current.delete(key);
    }
    if (!origin !== !instance) {
      if (instance) {
        onItemAdd === null || onItemAdd === void 0 ? void 0 : onItemAdd(item);
      } else {
        onItemRemove === null || onItemRemove === void 0 ? void 0 : onItemRemove(item);
      }
    }
  }
  useEffect(function() {
    return cancelRaf;
  }, []);
  return [setInstanceRef, collectHeight, heightsRef.current, updatedMark];
}
function useScrollTo(containerRef, data2, heights, itemHeight, getKey2, collectHeight, syncScrollTop, triggerFlash) {
  var scrollRef = React$2.useRef();
  return function(arg) {
    if (arg === null || arg === void 0) {
      triggerFlash();
      return;
    }
    wrapperRaf.cancel(scrollRef.current);
    if (typeof arg === "number") {
      syncScrollTop(arg);
    } else if (arg && _typeof$3(arg) === "object") {
      var index2;
      var align = arg.align;
      if ("index" in arg) {
        index2 = arg.index;
      } else {
        index2 = data2.findIndex(function(item) {
          return getKey2(item) === arg.key;
        });
      }
      var _arg$offset = arg.offset, offset2 = _arg$offset === void 0 ? 0 : _arg$offset;
      var syncScroll = function syncScroll2(times, targetAlign) {
        if (times < 0 || !containerRef.current)
          return;
        var height = containerRef.current.clientHeight;
        var needCollectHeight = false;
        var newTargetAlign = targetAlign;
        if (height) {
          var mergedAlign = targetAlign || align;
          var stackTop = 0;
          var itemTop = 0;
          var itemBottom = 0;
          var maxLen = Math.min(data2.length, index2);
          for (var i = 0; i <= maxLen; i += 1) {
            var key = getKey2(data2[i]);
            itemTop = stackTop;
            var cacheHeight = heights.get(key);
            itemBottom = itemTop + (cacheHeight === void 0 ? itemHeight : cacheHeight);
            stackTop = itemBottom;
            if (i === index2 && cacheHeight === void 0) {
              needCollectHeight = true;
            }
          }
          var targetTop = null;
          switch (mergedAlign) {
            case "top":
              targetTop = itemTop - offset2;
              break;
            case "bottom":
              targetTop = itemBottom - height + offset2;
              break;
            default: {
              var scrollTop = containerRef.current.scrollTop;
              var scrollBottom = scrollTop + height;
              if (itemTop < scrollTop) {
                newTargetAlign = "top";
              } else if (itemBottom > scrollBottom) {
                newTargetAlign = "bottom";
              }
            }
          }
          if (targetTop !== null && targetTop !== containerRef.current.scrollTop) {
            syncScrollTop(targetTop);
          }
        }
        scrollRef.current = wrapperRaf(function() {
          if (needCollectHeight) {
            collectHeight();
          }
          syncScroll2(times - 1, newTargetAlign);
        }, 2);
      };
      syncScroll(3);
    }
  };
}
function findListDiffIndex(originList, targetList, getKey2) {
  var originLen = originList.length;
  var targetLen = targetList.length;
  var shortList;
  var longList;
  if (originLen === 0 && targetLen === 0) {
    return null;
  }
  if (originLen < targetLen) {
    shortList = originList;
    longList = targetList;
  } else {
    shortList = targetList;
    longList = originList;
  }
  var notExistKey = {
    __EMPTY_ITEM__: true
  };
  function getItemKey(item) {
    if (item !== void 0) {
      return getKey2(item);
    }
    return notExistKey;
  }
  var diffIndex = null;
  var multiple = Math.abs(originLen - targetLen) !== 1;
  for (var i = 0; i < longList.length; i += 1) {
    var shortKey = getItemKey(shortList[i]);
    var longKey = getItemKey(longList[i]);
    if (shortKey !== longKey) {
      diffIndex = i;
      multiple = multiple || shortKey !== getItemKey(longList[i + 1]);
      break;
    }
  }
  return diffIndex === null ? null : {
    index: diffIndex,
    multiple
  };
}
function useDiffItem(data2, getKey2, onDiff) {
  var _React$useState = React$2.useState(data2), _React$useState2 = _slicedToArray$1(_React$useState, 2), prevData = _React$useState2[0], setPrevData = _React$useState2[1];
  var _React$useState3 = React$2.useState(null), _React$useState4 = _slicedToArray$1(_React$useState3, 2), diffItem = _React$useState4[0], setDiffItem = _React$useState4[1];
  React$2.useEffect(function() {
    var diff = findListDiffIndex(prevData || [], data2 || [], getKey2);
    if ((diff === null || diff === void 0 ? void 0 : diff.index) !== void 0) {
      onDiff === null || onDiff === void 0 ? void 0 : onDiff(diff.index);
      setDiffItem(data2[diff.index]);
    }
    setPrevData(data2);
  }, [data2]);
  return [diffItem];
}
var isFF = (typeof navigator === "undefined" ? "undefined" : _typeof$3(navigator)) === "object" && /Firefox/i.test(navigator.userAgent);
const useOriginScroll = function(isScrollAtTop, isScrollAtBottom) {
  var lockRef = useRef(false);
  var lockTimeoutRef = useRef(null);
  function lockScroll() {
    clearTimeout(lockTimeoutRef.current);
    lockRef.current = true;
    lockTimeoutRef.current = setTimeout(function() {
      lockRef.current = false;
    }, 50);
  }
  var scrollPingRef = useRef({
    top: isScrollAtTop,
    bottom: isScrollAtBottom
  });
  scrollPingRef.current.top = isScrollAtTop;
  scrollPingRef.current.bottom = isScrollAtBottom;
  return function(deltaY) {
    var smoothOffset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var originScroll = (
      // Pass origin wheel when on the top
      deltaY < 0 && scrollPingRef.current.top || // Pass origin wheel when on the bottom
      deltaY > 0 && scrollPingRef.current.bottom
    );
    if (smoothOffset && originScroll) {
      clearTimeout(lockTimeoutRef.current);
      lockRef.current = false;
    } else if (!originScroll || lockRef.current) {
      lockScroll();
    }
    return !lockRef.current && originScroll;
  };
};
function useFrameWheel(inVirtual, isScrollAtTop, isScrollAtBottom, onWheelDelta) {
  var offsetRef = useRef(0);
  var nextFrameRef = useRef(null);
  var wheelValueRef = useRef(null);
  var isMouseScrollRef = useRef(false);
  var originScroll = useOriginScroll(isScrollAtTop, isScrollAtBottom);
  function onWheel(event) {
    if (!inVirtual)
      return;
    wrapperRaf.cancel(nextFrameRef.current);
    var deltaY = event.deltaY;
    offsetRef.current += deltaY;
    wheelValueRef.current = deltaY;
    if (originScroll(deltaY))
      return;
    if (!isFF) {
      event.preventDefault();
    }
    nextFrameRef.current = wrapperRaf(function() {
      var patchMultiple = isMouseScrollRef.current ? 10 : 1;
      onWheelDelta(offsetRef.current * patchMultiple);
      offsetRef.current = 0;
    });
  }
  function onFireFoxScroll(event) {
    if (!inVirtual)
      return;
    isMouseScrollRef.current = event.detail === wheelValueRef.current;
  }
  return [onWheel, onFireFoxScroll];
}
var SMOOTH_PTG = 14 / 15;
function useMobileTouchMove(inVirtual, listRef, callback) {
  var touchedRef = useRef(false);
  var touchYRef = useRef(0);
  var elementRef = useRef(null);
  var intervalRef = useRef(null);
  var cleanUpEvents;
  var onTouchMove = function onTouchMove2(e) {
    if (touchedRef.current) {
      var currentY = Math.ceil(e.touches[0].pageY);
      var offsetY = touchYRef.current - currentY;
      touchYRef.current = currentY;
      if (callback(offsetY)) {
        e.preventDefault();
      }
      clearInterval(intervalRef.current);
      intervalRef.current = setInterval(function() {
        offsetY *= SMOOTH_PTG;
        if (!callback(offsetY, true) || Math.abs(offsetY) <= 0.1) {
          clearInterval(intervalRef.current);
        }
      }, 16);
    }
  };
  var onTouchEnd = function onTouchEnd2() {
    touchedRef.current = false;
    cleanUpEvents();
  };
  var onTouchStart = function onTouchStart2(e) {
    cleanUpEvents();
    if (e.touches.length === 1 && !touchedRef.current) {
      touchedRef.current = true;
      touchYRef.current = Math.ceil(e.touches[0].pageY);
      elementRef.current = e.target;
      elementRef.current.addEventListener("touchmove", onTouchMove);
      elementRef.current.addEventListener("touchend", onTouchEnd);
    }
  };
  cleanUpEvents = function cleanUpEvents2() {
    if (elementRef.current) {
      elementRef.current.removeEventListener("touchmove", onTouchMove);
      elementRef.current.removeEventListener("touchend", onTouchEnd);
    }
  };
  useLayoutEffect$1(function() {
    if (inVirtual) {
      listRef.current.addEventListener("touchstart", onTouchStart);
    }
    return function() {
      var _listRef$current;
      (_listRef$current = listRef.current) === null || _listRef$current === void 0 ? void 0 : _listRef$current.removeEventListener("touchstart", onTouchStart);
      cleanUpEvents();
      clearInterval(intervalRef.current);
    };
  }, [inVirtual]);
}
var _excluded$f = ["prefixCls", "className", "height", "itemHeight", "fullHeight", "style", "data", "children", "itemKey", "virtual", "component", "onScroll", "onVisibleChange", "innerProps"];
var EMPTY_DATA = [];
var ScrollStyle = {
  overflowY: "auto",
  overflowAnchor: "none"
};
function RawList(props, ref) {
  var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-virtual-list" : _props$prefixCls, className = props.className, height = props.height, itemHeight = props.itemHeight, _props$fullHeight = props.fullHeight, fullHeight = _props$fullHeight === void 0 ? true : _props$fullHeight, style2 = props.style, data2 = props.data, children = props.children, itemKey2 = props.itemKey, virtual = props.virtual, _props$component = props.component, Component = _props$component === void 0 ? "div" : _props$component, onScroll = props.onScroll, onVisibleChange = props.onVisibleChange, innerProps = props.innerProps, restProps = _objectWithoutProperties(props, _excluded$f);
  var useVirtual = !!(virtual !== false && height && itemHeight);
  var inVirtual = useVirtual && data2 && itemHeight * data2.length > height;
  var _useState = useState(0), _useState2 = _slicedToArray$1(_useState, 2), scrollTop = _useState2[0], setScrollTop = _useState2[1];
  var _useState3 = useState(false), _useState4 = _slicedToArray$1(_useState3, 2), scrollMoving = _useState4[0], setScrollMoving = _useState4[1];
  var mergedClassName = classNames(prefixCls, className);
  var mergedData = data2 || EMPTY_DATA;
  var componentRef = useRef();
  var fillerInnerRef = useRef();
  var scrollBarRef = useRef();
  var getKey2 = React$2.useCallback(function(item) {
    if (typeof itemKey2 === "function") {
      return itemKey2(item);
    }
    return item === null || item === void 0 ? void 0 : item[itemKey2];
  }, [itemKey2]);
  var sharedConfig2 = {
    getKey: getKey2
  };
  function syncScrollTop(newTop) {
    setScrollTop(function(origin) {
      var value;
      if (typeof newTop === "function") {
        value = newTop(origin);
      } else {
        value = newTop;
      }
      var alignedTop = keepInRange(value);
      componentRef.current.scrollTop = alignedTop;
      return alignedTop;
    });
  }
  var rangeRef = useRef({
    start: 0,
    end: mergedData.length
  });
  var diffItemRef = useRef();
  var _useDiffItem = useDiffItem(mergedData, getKey2), _useDiffItem2 = _slicedToArray$1(_useDiffItem, 1), diffItem = _useDiffItem2[0];
  diffItemRef.current = diffItem;
  var _useHeights = useHeights(getKey2, null, null), _useHeights2 = _slicedToArray$1(_useHeights, 4), setInstanceRef = _useHeights2[0], collectHeight = _useHeights2[1], heights = _useHeights2[2], heightUpdatedMark = _useHeights2[3];
  var _React$useMemo = React$2.useMemo(function() {
    if (!useVirtual) {
      return {
        scrollHeight: void 0,
        start: 0,
        end: mergedData.length - 1,
        offset: void 0
      };
    }
    if (!inVirtual) {
      var _fillerInnerRef$curre;
      return {
        scrollHeight: ((_fillerInnerRef$curre = fillerInnerRef.current) === null || _fillerInnerRef$curre === void 0 ? void 0 : _fillerInnerRef$curre.offsetHeight) || 0,
        start: 0,
        end: mergedData.length - 1,
        offset: void 0
      };
    }
    var itemTop = 0;
    var startIndex;
    var startOffset;
    var endIndex;
    var dataLen = mergedData.length;
    for (var i = 0; i < dataLen; i += 1) {
      var item = mergedData[i];
      var key = getKey2(item);
      var cacheHeight = heights.get(key);
      var currentItemBottom = itemTop + (cacheHeight === void 0 ? itemHeight : cacheHeight);
      if (currentItemBottom >= scrollTop && startIndex === void 0) {
        startIndex = i;
        startOffset = itemTop;
      }
      if (currentItemBottom > scrollTop + height && endIndex === void 0) {
        endIndex = i;
      }
      itemTop = currentItemBottom;
    }
    if (startIndex === void 0) {
      startIndex = 0;
      startOffset = 0;
      endIndex = Math.ceil(height / itemHeight);
    }
    if (endIndex === void 0) {
      endIndex = mergedData.length - 1;
    }
    endIndex = Math.min(endIndex + 1, mergedData.length);
    return {
      scrollHeight: itemTop,
      start: startIndex,
      end: endIndex,
      offset: startOffset
    };
  }, [inVirtual, useVirtual, scrollTop, mergedData, heightUpdatedMark, height]), scrollHeight = _React$useMemo.scrollHeight, start = _React$useMemo.start, end = _React$useMemo.end, offset2 = _React$useMemo.offset;
  rangeRef.current.start = start;
  rangeRef.current.end = end;
  var maxScrollHeight = scrollHeight - height;
  var maxScrollHeightRef = useRef(maxScrollHeight);
  maxScrollHeightRef.current = maxScrollHeight;
  function keepInRange(newScrollTop) {
    var newTop = newScrollTop;
    if (!Number.isNaN(maxScrollHeightRef.current)) {
      newTop = Math.min(newTop, maxScrollHeightRef.current);
    }
    newTop = Math.max(newTop, 0);
    return newTop;
  }
  var isScrollAtTop = scrollTop <= 0;
  var isScrollAtBottom = scrollTop >= maxScrollHeight;
  var originScroll = useOriginScroll(isScrollAtTop, isScrollAtBottom);
  function onScrollBar(newScrollTop) {
    var newTop = newScrollTop;
    syncScrollTop(newTop);
  }
  function onFallbackScroll(e) {
    var newScrollTop = e.currentTarget.scrollTop;
    if (newScrollTop !== scrollTop) {
      syncScrollTop(newScrollTop);
    }
    onScroll === null || onScroll === void 0 ? void 0 : onScroll(e);
  }
  var _useFrameWheel = useFrameWheel(useVirtual, isScrollAtTop, isScrollAtBottom, function(offsetY) {
    syncScrollTop(function(top) {
      var newTop = top + offsetY;
      return newTop;
    });
  }), _useFrameWheel2 = _slicedToArray$1(_useFrameWheel, 2), onRawWheel = _useFrameWheel2[0], onFireFoxScroll = _useFrameWheel2[1];
  useMobileTouchMove(useVirtual, componentRef, function(deltaY, smoothOffset) {
    if (originScroll(deltaY, smoothOffset)) {
      return false;
    }
    onRawWheel({
      preventDefault: function preventDefault() {
      },
      deltaY
    });
    return true;
  });
  useLayoutEffect$1(function() {
    function onMozMousePixelScroll(e) {
      if (useVirtual) {
        e.preventDefault();
      }
    }
    componentRef.current.addEventListener("wheel", onRawWheel);
    componentRef.current.addEventListener("DOMMouseScroll", onFireFoxScroll);
    componentRef.current.addEventListener("MozMousePixelScroll", onMozMousePixelScroll);
    return function() {
      if (componentRef.current) {
        componentRef.current.removeEventListener("wheel", onRawWheel);
        componentRef.current.removeEventListener("DOMMouseScroll", onFireFoxScroll);
        componentRef.current.removeEventListener("MozMousePixelScroll", onMozMousePixelScroll);
      }
    };
  }, [useVirtual]);
  var scrollTo = useScrollTo(componentRef, mergedData, heights, itemHeight, getKey2, collectHeight, syncScrollTop, function() {
    var _scrollBarRef$current;
    (_scrollBarRef$current = scrollBarRef.current) === null || _scrollBarRef$current === void 0 ? void 0 : _scrollBarRef$current.delayHidden();
  });
  React$2.useImperativeHandle(ref, function() {
    return {
      scrollTo
    };
  });
  useLayoutEffect$1(function() {
    if (onVisibleChange) {
      var renderList = mergedData.slice(start, end + 1);
      onVisibleChange(renderList, mergedData);
    }
  }, [start, end, mergedData]);
  var listChildren = useChildren(mergedData, start, end, setInstanceRef, children, sharedConfig2);
  var componentStyle = null;
  if (height) {
    componentStyle = _objectSpread2$1(_defineProperty$3({}, fullHeight ? "height" : "maxHeight", height), ScrollStyle);
    if (useVirtual) {
      componentStyle.overflowY = "hidden";
      if (scrollMoving) {
        componentStyle.pointerEvents = "none";
      }
    }
  }
  return /* @__PURE__ */ React$2.createElement("div", _extends$1({
    style: _objectSpread2$1(_objectSpread2$1({}, style2), {}, {
      position: "relative"
    }),
    className: mergedClassName
  }, restProps), /* @__PURE__ */ React$2.createElement(Component, {
    className: "".concat(prefixCls, "-holder"),
    style: componentStyle,
    ref: componentRef,
    onScroll: onFallbackScroll
  }, /* @__PURE__ */ React$2.createElement(Filler, {
    prefixCls,
    height: scrollHeight,
    offset: offset2,
    onInnerResize: collectHeight,
    ref: fillerInnerRef,
    innerProps
  }, listChildren)), useVirtual && /* @__PURE__ */ React$2.createElement(ScrollBar, {
    ref: scrollBarRef,
    prefixCls,
    scrollTop,
    height,
    scrollHeight,
    count: mergedData.length,
    onScroll: onScrollBar,
    onStartMove: function onStartMove() {
      setScrollMoving(true);
    },
    onStopMove: function onStopMove() {
      setScrollMoving(false);
    }
  }));
}
var List2 = /* @__PURE__ */ React$2.forwardRef(RawList);
List2.displayName = "List";
var SelectContext = /* @__PURE__ */ React$2.createContext(null);
function isPlatformMac() {
  return /(mac\sos|macintosh)/i.test(navigator.appVersion);
}
var _excluded$e = ["disabled", "title", "children", "style", "className"];
function isTitleType(content) {
  return typeof content === "string" || typeof content === "number";
}
var OptionList = function OptionList2(_, ref) {
  var _useBaseProps = useBaseProps(), prefixCls = _useBaseProps.prefixCls, id = _useBaseProps.id, open = _useBaseProps.open, multiple = _useBaseProps.multiple, mode = _useBaseProps.mode, searchValue = _useBaseProps.searchValue, toggleOpen = _useBaseProps.toggleOpen, notFoundContent = _useBaseProps.notFoundContent, onPopupScroll = _useBaseProps.onPopupScroll;
  var _React$useContext = React$2.useContext(SelectContext), flattenOptions2 = _React$useContext.flattenOptions, onActiveValue = _React$useContext.onActiveValue, defaultActiveFirstOption = _React$useContext.defaultActiveFirstOption, onSelect = _React$useContext.onSelect, menuItemSelectedIcon = _React$useContext.menuItemSelectedIcon, rawValues = _React$useContext.rawValues, fieldNames2 = _React$useContext.fieldNames, virtual = _React$useContext.virtual, listHeight = _React$useContext.listHeight, listItemHeight = _React$useContext.listItemHeight;
  var itemPrefixCls = "".concat(prefixCls, "-item");
  var memoFlattenOptions = useMemo(function() {
    return flattenOptions2;
  }, [open, flattenOptions2], function(prev2, next2) {
    return next2[0] && prev2[1] !== next2[1];
  });
  var listRef = React$2.useRef(null);
  var onListMouseDown = function onListMouseDown2(event) {
    event.preventDefault();
  };
  var scrollIntoView = function scrollIntoView2(args) {
    if (listRef.current) {
      listRef.current.scrollTo(typeof args === "number" ? {
        index: args
      } : args);
    }
  };
  var getEnabledActiveIndex = function getEnabledActiveIndex2(index2) {
    var offset2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    var len = memoFlattenOptions.length;
    for (var i = 0; i < len; i += 1) {
      var current = (index2 + i * offset2 + len) % len;
      var _memoFlattenOptions$c = memoFlattenOptions[current], group = _memoFlattenOptions$c.group, data2 = _memoFlattenOptions$c.data;
      if (!group && !data2.disabled) {
        return current;
      }
    }
    return -1;
  };
  var _React$useState = React$2.useState(function() {
    return getEnabledActiveIndex(0);
  }), _React$useState2 = _slicedToArray$1(_React$useState, 2), activeIndex = _React$useState2[0], setActiveIndex = _React$useState2[1];
  var setActive = function setActive2(index2) {
    var fromKeyboard = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    setActiveIndex(index2);
    var info = {
      source: fromKeyboard ? "keyboard" : "mouse"
    };
    var flattenItem = memoFlattenOptions[index2];
    if (!flattenItem) {
      onActiveValue(null, -1, info);
      return;
    }
    onActiveValue(flattenItem.value, index2, info);
  };
  useEffect(function() {
    setActive(defaultActiveFirstOption !== false ? getEnabledActiveIndex(0) : -1);
  }, [memoFlattenOptions.length, searchValue]);
  var isSelected = React$2.useCallback(function(value) {
    return rawValues.has(value) && mode !== "combobox";
  }, [mode, _toConsumableArray(rawValues).toString(), rawValues.size]);
  useEffect(function() {
    var timeoutId = setTimeout(function() {
      if (!multiple && open && rawValues.size === 1) {
        var value = Array.from(rawValues)[0];
        var index2 = memoFlattenOptions.findIndex(function(_ref) {
          var data2 = _ref.data;
          return data2.value === value;
        });
        if (index2 !== -1) {
          setActive(index2);
          scrollIntoView(index2);
        }
      }
    });
    if (open) {
      var _listRef$current;
      (_listRef$current = listRef.current) === null || _listRef$current === void 0 ? void 0 : _listRef$current.scrollTo(void 0);
    }
    return function() {
      return clearTimeout(timeoutId);
    };
  }, [open, searchValue, flattenOptions2.length]);
  var onSelectValue = function onSelectValue2(value) {
    if (value !== void 0) {
      onSelect(value, {
        selected: !rawValues.has(value)
      });
    }
    if (!multiple) {
      toggleOpen(false);
    }
  };
  React$2.useImperativeHandle(ref, function() {
    return {
      onKeyDown: function onKeyDown(event) {
        var which = event.which, ctrlKey = event.ctrlKey;
        switch (which) {
          case KeyCode.N:
          case KeyCode.P:
          case KeyCode.UP:
          case KeyCode.DOWN: {
            var offset2 = 0;
            if (which === KeyCode.UP) {
              offset2 = -1;
            } else if (which === KeyCode.DOWN) {
              offset2 = 1;
            } else if (isPlatformMac() && ctrlKey) {
              if (which === KeyCode.N) {
                offset2 = 1;
              } else if (which === KeyCode.P) {
                offset2 = -1;
              }
            }
            if (offset2 !== 0) {
              var nextActiveIndex = getEnabledActiveIndex(activeIndex + offset2, offset2);
              scrollIntoView(nextActiveIndex);
              setActive(nextActiveIndex, true);
            }
            break;
          }
          case KeyCode.ENTER: {
            var item = memoFlattenOptions[activeIndex];
            if (item && !item.data.disabled) {
              onSelectValue(item.value);
            } else {
              onSelectValue(void 0);
            }
            if (open) {
              event.preventDefault();
            }
            break;
          }
          case KeyCode.ESC: {
            toggleOpen(false);
            if (open) {
              event.stopPropagation();
            }
          }
        }
      },
      onKeyUp: function onKeyUp() {
      },
      scrollTo: function scrollTo(index2) {
        scrollIntoView(index2);
      }
    };
  });
  if (memoFlattenOptions.length === 0) {
    return /* @__PURE__ */ React$2.createElement("div", {
      role: "listbox",
      id: "".concat(id, "_list"),
      className: "".concat(itemPrefixCls, "-empty"),
      onMouseDown: onListMouseDown
    }, notFoundContent);
  }
  var omitFieldNameList = Object.keys(fieldNames2).map(function(key) {
    return fieldNames2[key];
  });
  var getLabel = function getLabel2(item) {
    return item.label;
  };
  function getItemAriaProps(item, index2) {
    var group = item.group;
    return {
      role: group ? "presentation" : "option",
      id: "".concat(id, "_list_").concat(index2)
    };
  }
  var renderItem = function renderItem2(index2) {
    var item = memoFlattenOptions[index2];
    if (!item)
      return null;
    var itemData = item.data || {};
    var value = itemData.value;
    var group = item.group;
    var attrs = pickAttrs(itemData, true);
    var mergedLabel = getLabel(item);
    return item ? /* @__PURE__ */ React$2.createElement("div", _extends$1({
      "aria-label": typeof mergedLabel === "string" && !group ? mergedLabel : null
    }, attrs, {
      key: index2
    }, getItemAriaProps(item, index2), {
      "aria-selected": isSelected(value)
    }), value) : null;
  };
  var a11yProps = {
    role: "listbox",
    id: "".concat(id, "_list")
  };
  return /* @__PURE__ */ React$2.createElement(React$2.Fragment, null, virtual && /* @__PURE__ */ React$2.createElement("div", _extends$1({}, a11yProps, {
    style: {
      height: 0,
      width: 0,
      overflow: "hidden"
    }
  }), renderItem(activeIndex - 1), renderItem(activeIndex), renderItem(activeIndex + 1)), /* @__PURE__ */ React$2.createElement(List2, {
    itemKey: "key",
    ref: listRef,
    data: memoFlattenOptions,
    height: listHeight,
    itemHeight: listItemHeight,
    fullHeight: false,
    onMouseDown: onListMouseDown,
    onScroll: onPopupScroll,
    virtual,
    innerProps: virtual ? null : a11yProps
  }, function(item, itemIndex) {
    var _classNames;
    var group = item.group, groupOption = item.groupOption, data2 = item.data, label = item.label, value = item.value;
    var key = data2.key;
    if (group) {
      var _data$title;
      var groupTitle = (_data$title = data2.title) !== null && _data$title !== void 0 ? _data$title : isTitleType(label) ? label.toString() : void 0;
      return /* @__PURE__ */ React$2.createElement("div", {
        className: classNames(itemPrefixCls, "".concat(itemPrefixCls, "-group")),
        title: groupTitle
      }, label !== void 0 ? label : key);
    }
    var disabled = data2.disabled, title = data2.title;
    data2.children;
    var style2 = data2.style, className = data2.className, otherProps = _objectWithoutProperties(data2, _excluded$e);
    var passedProps = omit(otherProps, omitFieldNameList);
    var selected = isSelected(value);
    var optionPrefixCls = "".concat(itemPrefixCls, "-option");
    var optionClassName = classNames(itemPrefixCls, optionPrefixCls, className, (_classNames = {}, _defineProperty$3(_classNames, "".concat(optionPrefixCls, "-grouped"), groupOption), _defineProperty$3(_classNames, "".concat(optionPrefixCls, "-active"), activeIndex === itemIndex && !disabled), _defineProperty$3(_classNames, "".concat(optionPrefixCls, "-disabled"), disabled), _defineProperty$3(_classNames, "".concat(optionPrefixCls, "-selected"), selected), _classNames));
    var mergedLabel = getLabel(item);
    var iconVisible = !menuItemSelectedIcon || typeof menuItemSelectedIcon === "function" || selected;
    var content = typeof mergedLabel === "number" ? mergedLabel : mergedLabel || value;
    var optionTitle = isTitleType(content) ? content.toString() : void 0;
    if (title !== void 0) {
      optionTitle = title;
    }
    return /* @__PURE__ */ React$2.createElement("div", _extends$1({}, pickAttrs(passedProps), !virtual ? getItemAriaProps(item, itemIndex) : {}, {
      "aria-selected": selected,
      className: optionClassName,
      title: optionTitle,
      onMouseMove: function onMouseMove() {
        if (activeIndex === itemIndex || disabled) {
          return;
        }
        setActive(itemIndex);
      },
      onClick: function onClick() {
        if (!disabled) {
          onSelectValue(value);
        }
      },
      style: style2
    }), /* @__PURE__ */ React$2.createElement("div", {
      className: "".concat(optionPrefixCls, "-content")
    }, content), /* @__PURE__ */ React$2.isValidElement(menuItemSelectedIcon) || selected, iconVisible && /* @__PURE__ */ React$2.createElement(TransBtn, {
      className: "".concat(itemPrefixCls, "-option-state"),
      customizeIcon: menuItemSelectedIcon,
      customizeIconProps: {
        isSelected: selected
      }
    }, selected ? "✓" : null));
  }));
};
var RefOptionList$1 = /* @__PURE__ */ React$2.forwardRef(OptionList);
RefOptionList$1.displayName = "OptionList";
function warningProps$1(props) {
  var mode = props.mode, options = props.options, children = props.children, backfill = props.backfill, allowClear = props.allowClear, placeholder = props.placeholder, getInputElement = props.getInputElement, showSearch = props.showSearch, onSearch = props.onSearch, defaultOpen = props.defaultOpen, autoFocus = props.autoFocus, labelInValue = props.labelInValue, value = props.value, inputValue = props.inputValue, optionLabelProp = props.optionLabelProp;
  var multiple = isMultiple(mode);
  var mergedShowSearch = showSearch !== void 0 ? showSearch : multiple || mode === "combobox";
  var mergedOptions = options || convertChildrenToData(children);
  warningOnce(mode !== "tags" || mergedOptions.every(function(opt) {
    return !opt.disabled;
  }), "Please avoid setting option to disabled in tags mode since user can always type text as tag.");
  if (mode === "tags" || mode === "combobox") {
    var hasNumberValue = mergedOptions.some(function(item) {
      if (item.options) {
        return item.options.some(function(opt) {
          return typeof ("value" in opt ? opt.value : opt.key) === "number";
        });
      }
      return typeof ("value" in item ? item.value : item.key) === "number";
    });
    warningOnce(!hasNumberValue, "`value` of Option should not use number type when `mode` is `tags` or `combobox`.");
  }
  warningOnce(mode !== "combobox" || !optionLabelProp, "`combobox` mode not support `optionLabelProp`. Please set `value` on Option directly.");
  warningOnce(mode === "combobox" || !backfill, "`backfill` only works with `combobox` mode.");
  warningOnce(mode === "combobox" || !getInputElement, "`getInputElement` only work with `combobox` mode.");
  noteOnce(mode !== "combobox" || !getInputElement || !allowClear || !placeholder, "Customize `getInputElement` should customize clear and placeholder logic instead of configuring `allowClear` and `placeholder`.");
  if (onSearch && !mergedShowSearch && mode !== "combobox" && mode !== "tags") {
    warningOnce(false, "`onSearch` should work with `showSearch` instead of use alone.");
  }
  noteOnce(!defaultOpen || autoFocus, "`defaultOpen` makes Select open without focus which means it will not close by click outside. You can set `autoFocus` if needed.");
  if (value !== void 0 && value !== null) {
    var values = toArray$1(value);
    warningOnce(!labelInValue || values.every(function(val) {
      return _typeof$3(val) === "object" && ("key" in val || "value" in val);
    }), "`value` should in shape of `{ value: string | number, label?: ReactNode }` when you set `labelInValue` to `true`");
    warningOnce(!multiple || Array.isArray(value), "`value` should be array when `mode` is `multiple` or `tags`");
  }
  if (children) {
    var invalidateChildType = null;
    toArray$3(children).some(function(node2) {
      if (!/* @__PURE__ */ React$2.isValidElement(node2) || !node2.type) {
        return false;
      }
      var _ref = node2, type4 = _ref.type;
      if (type4.isSelectOption) {
        return false;
      }
      if (type4.isSelectOptGroup) {
        var allChildrenValid = toArray$3(node2.props.children).every(function(subNode) {
          if (!/* @__PURE__ */ React$2.isValidElement(subNode) || !node2.type || subNode.type.isSelectOption) {
            return true;
          }
          invalidateChildType = subNode.type;
          return false;
        });
        if (allChildrenValid) {
          return false;
        }
        return true;
      }
      invalidateChildType = type4;
      return true;
    });
    if (invalidateChildType) {
      warningOnce(false, "`children` should be `Select.Option` or `Select.OptGroup` instead of `".concat(invalidateChildType.displayName || invalidateChildType.name || invalidateChildType, "`."));
    }
    warningOnce(inputValue === void 0, "`inputValue` is deprecated, please use `searchValue` instead.");
  }
}
function warningNullOptions$1(options, fieldNames2) {
  if (options) {
    var recursiveOptions = function recursiveOptions2(optionsList) {
      var inGroup = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      for (var i = 0; i < optionsList.length; i++) {
        var option = optionsList[i];
        if (option[fieldNames2 === null || fieldNames2 === void 0 ? void 0 : fieldNames2.value] === null) {
          warningOnce(false, "`value` in Select options should not be `null`.");
          return true;
        }
        if (!inGroup && Array.isArray(option[fieldNames2 === null || fieldNames2 === void 0 ? void 0 : fieldNames2.options]) && recursiveOptions2(option[fieldNames2 === null || fieldNames2 === void 0 ? void 0 : fieldNames2.options], true)) {
          break;
        }
      }
    };
    recursiveOptions(options);
  }
}
var _excluded$d = ["id", "mode", "prefixCls", "backfill", "fieldNames", "inputValue", "searchValue", "onSearch", "autoClearSearchValue", "onSelect", "onDeselect", "dropdownMatchSelectWidth", "filterOption", "filterSort", "optionFilterProp", "optionLabelProp", "options", "children", "defaultActiveFirstOption", "menuItemSelectedIcon", "virtual", "listHeight", "listItemHeight", "value", "defaultValue", "labelInValue", "onChange"];
var OMIT_DOM_PROPS = ["inputValue"];
function isRawValue(value) {
  return !value || _typeof$3(value) !== "object";
}
var Select = /* @__PURE__ */ React$2.forwardRef(function(props, ref) {
  var id = props.id, mode = props.mode, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-select" : _props$prefixCls, backfill = props.backfill, fieldNames2 = props.fieldNames, inputValue = props.inputValue, searchValue = props.searchValue, onSearch = props.onSearch, _props$autoClearSearc = props.autoClearSearchValue, autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc, onSelect = props.onSelect, onDeselect = props.onDeselect, _props$dropdownMatchS = props.dropdownMatchSelectWidth, dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? true : _props$dropdownMatchS, filterOption = props.filterOption, filterSort = props.filterSort, optionFilterProp = props.optionFilterProp, optionLabelProp = props.optionLabelProp, options = props.options, children = props.children, defaultActiveFirstOption = props.defaultActiveFirstOption, menuItemSelectedIcon = props.menuItemSelectedIcon, virtual = props.virtual, _props$listHeight = props.listHeight, listHeight = _props$listHeight === void 0 ? 200 : _props$listHeight, _props$listItemHeight = props.listItemHeight, listItemHeight = _props$listItemHeight === void 0 ? 20 : _props$listItemHeight, value = props.value, defaultValue = props.defaultValue, labelInValue = props.labelInValue, onChange = props.onChange, restProps = _objectWithoutProperties(props, _excluded$d);
  var mergedId = useId(id);
  var multiple = isMultiple(mode);
  var childrenAsData = !!(!options && children);
  var mergedFilterOption = React$2.useMemo(function() {
    if (filterOption === void 0 && mode === "combobox") {
      return false;
    }
    return filterOption;
  }, [filterOption, mode]);
  var mergedFieldNames = React$2.useMemo(
    function() {
      return fillFieldNames$2(fieldNames2, childrenAsData);
    },
    /* eslint-disable react-hooks/exhaustive-deps */
    [
      // We stringify fieldNames to avoid unnecessary re-renders.
      JSON.stringify(fieldNames2),
      childrenAsData
    ]
    /* eslint-enable react-hooks/exhaustive-deps */
  );
  var _useMergedState = useMergedState("", {
    value: searchValue !== void 0 ? searchValue : inputValue,
    postState: function postState(search) {
      return search || "";
    }
  }), _useMergedState2 = _slicedToArray$1(_useMergedState, 2), mergedSearchValue = _useMergedState2[0], setSearchValue = _useMergedState2[1];
  var parsedOptions = useOptions(options, children, mergedFieldNames, optionFilterProp, optionLabelProp);
  var valueOptions = parsedOptions.valueOptions, labelOptions = parsedOptions.labelOptions, mergedOptions = parsedOptions.options;
  var convert2LabelValues = React$2.useCallback(function(draftValues) {
    var valueList = toArray$1(draftValues);
    return valueList.map(function(val) {
      var rawValue;
      var rawLabel;
      var rawKey;
      var rawDisabled;
      var rawTitle;
      if (isRawValue(val)) {
        rawValue = val;
      } else {
        var _val$value;
        rawKey = val.key;
        rawLabel = val.label;
        rawValue = (_val$value = val.value) !== null && _val$value !== void 0 ? _val$value : rawKey;
      }
      var option = valueOptions.get(rawValue);
      if (option) {
        var _option$key;
        if (rawLabel === void 0)
          rawLabel = option === null || option === void 0 ? void 0 : option[optionLabelProp || mergedFieldNames.label];
        if (rawKey === void 0)
          rawKey = (_option$key = option === null || option === void 0 ? void 0 : option.key) !== null && _option$key !== void 0 ? _option$key : rawValue;
        rawDisabled = option === null || option === void 0 ? void 0 : option.disabled;
        rawTitle = option === null || option === void 0 ? void 0 : option.title;
        if (process.env.NODE_ENV !== "production" && !optionLabelProp) {
          var optionLabel = option === null || option === void 0 ? void 0 : option[mergedFieldNames.label];
          if (optionLabel !== void 0 && optionLabel !== rawLabel) {
            warningOnce(false, "`label` of `value` is not same as `label` in Select options.");
          }
        }
      }
      return {
        label: rawLabel,
        value: rawValue,
        key: rawKey,
        disabled: rawDisabled,
        title: rawTitle
      };
    });
  }, [mergedFieldNames, optionLabelProp, valueOptions]);
  var _useMergedState3 = useMergedState(defaultValue, {
    value
  }), _useMergedState4 = _slicedToArray$1(_useMergedState3, 2), internalValue = _useMergedState4[0], setInternalValue = _useMergedState4[1];
  var rawLabeledValues = React$2.useMemo(function() {
    var _values$;
    var values = convert2LabelValues(internalValue);
    if (mode === "combobox" && !((_values$ = values[0]) !== null && _values$ !== void 0 && _values$.value)) {
      return [];
    }
    return values;
  }, [internalValue, convert2LabelValues, mode]);
  var _useCache = useCache(rawLabeledValues, valueOptions), _useCache2 = _slicedToArray$1(_useCache, 2), mergedValues = _useCache2[0], getMixedOption = _useCache2[1];
  var displayValues = React$2.useMemo(function() {
    if (!mode && mergedValues.length === 1) {
      var firstValue = mergedValues[0];
      if (firstValue.value === null && (firstValue.label === null || firstValue.label === void 0)) {
        return [];
      }
    }
    return mergedValues.map(function(item) {
      var _item$label;
      return _objectSpread2$1(_objectSpread2$1({}, item), {}, {
        label: (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : item.value
      });
    });
  }, [mode, mergedValues]);
  var rawValues = React$2.useMemo(function() {
    return new Set(mergedValues.map(function(val) {
      return val.value;
    }));
  }, [mergedValues]);
  React$2.useEffect(function() {
    if (mode === "combobox") {
      var _mergedValues$;
      var strValue = (_mergedValues$ = mergedValues[0]) === null || _mergedValues$ === void 0 ? void 0 : _mergedValues$.value;
      setSearchValue(hasValue(strValue) ? String(strValue) : "");
    }
  }, [mergedValues]);
  var createTagOption = useRefFunc$1(function(val, label) {
    var _ref;
    var mergedLabel = label !== null && label !== void 0 ? label : val;
    return _ref = {}, _defineProperty$3(_ref, mergedFieldNames.value, val), _defineProperty$3(_ref, mergedFieldNames.label, mergedLabel), _ref;
  });
  var filledTagOptions = React$2.useMemo(function() {
    if (mode !== "tags") {
      return mergedOptions;
    }
    var cloneOptions = _toConsumableArray(mergedOptions);
    var existOptions = function existOptions2(val) {
      return valueOptions.has(val);
    };
    _toConsumableArray(mergedValues).sort(function(a, b) {
      return a.value < b.value ? -1 : 1;
    }).forEach(function(item) {
      var val = item.value;
      if (!existOptions(val)) {
        cloneOptions.push(createTagOption(val, item.label));
      }
    });
    return cloneOptions;
  }, [createTagOption, mergedOptions, valueOptions, mergedValues, mode]);
  var filteredOptions = useFilterOptions(filledTagOptions, mergedFieldNames, mergedSearchValue, mergedFilterOption, optionFilterProp);
  var filledSearchOptions = React$2.useMemo(function() {
    if (mode !== "tags" || !mergedSearchValue || filteredOptions.some(function(item) {
      return item[optionFilterProp || "value"] === mergedSearchValue;
    })) {
      return filteredOptions;
    }
    return [createTagOption(mergedSearchValue)].concat(_toConsumableArray(filteredOptions));
  }, [createTagOption, optionFilterProp, mode, filteredOptions, mergedSearchValue]);
  var orderedFilteredOptions = React$2.useMemo(function() {
    if (!filterSort) {
      return filledSearchOptions;
    }
    return _toConsumableArray(filledSearchOptions).sort(function(a, b) {
      return filterSort(a, b);
    });
  }, [filledSearchOptions, filterSort]);
  var displayOptions = React$2.useMemo(function() {
    return flattenOptions(orderedFilteredOptions, {
      fieldNames: mergedFieldNames,
      childrenAsData
    });
  }, [orderedFilteredOptions, mergedFieldNames, childrenAsData]);
  var triggerChange = function triggerChange2(values) {
    var labeledValues = convert2LabelValues(values);
    setInternalValue(labeledValues);
    if (onChange && // Trigger event only when value changed
    (labeledValues.length !== mergedValues.length || labeledValues.some(function(newVal, index2) {
      var _mergedValues$index;
      return ((_mergedValues$index = mergedValues[index2]) === null || _mergedValues$index === void 0 ? void 0 : _mergedValues$index.value) !== (newVal === null || newVal === void 0 ? void 0 : newVal.value);
    }))) {
      var returnValues = labelInValue ? labeledValues : labeledValues.map(function(v) {
        return v.value;
      });
      var returnOptions = labeledValues.map(function(v) {
        return injectPropsWithOption(getMixedOption(v.value));
      });
      onChange(
        // Value
        multiple ? returnValues : returnValues[0],
        // Option
        multiple ? returnOptions : returnOptions[0]
      );
    }
  };
  var _React$useState = React$2.useState(null), _React$useState2 = _slicedToArray$1(_React$useState, 2), activeValue = _React$useState2[0], setActiveValue = _React$useState2[1];
  var _React$useState3 = React$2.useState(0), _React$useState4 = _slicedToArray$1(_React$useState3, 2), accessibilityIndex = _React$useState4[0], setAccessibilityIndex = _React$useState4[1];
  var mergedDefaultActiveFirstOption = defaultActiveFirstOption !== void 0 ? defaultActiveFirstOption : mode !== "combobox";
  var onActiveValue = React$2.useCallback(function(active, index2) {
    var _ref2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref2$source = _ref2.source, source = _ref2$source === void 0 ? "keyboard" : _ref2$source;
    setAccessibilityIndex(index2);
    if (backfill && mode === "combobox" && active !== null && source === "keyboard") {
      setActiveValue(String(active));
    }
  }, [backfill, mode]);
  var triggerSelect = function triggerSelect2(val, selected, type4) {
    var getSelectEnt = function getSelectEnt2() {
      var _option$key2;
      var option = getMixedOption(val);
      return [labelInValue ? {
        label: option === null || option === void 0 ? void 0 : option[mergedFieldNames.label],
        value: val,
        key: (_option$key2 = option === null || option === void 0 ? void 0 : option.key) !== null && _option$key2 !== void 0 ? _option$key2 : val
      } : val, injectPropsWithOption(option)];
    };
    if (selected && onSelect) {
      var _getSelectEnt = getSelectEnt(), _getSelectEnt2 = _slicedToArray$1(_getSelectEnt, 2), wrappedValue = _getSelectEnt2[0], _option = _getSelectEnt2[1];
      onSelect(wrappedValue, _option);
    } else if (!selected && onDeselect && type4 !== "clear") {
      var _getSelectEnt3 = getSelectEnt(), _getSelectEnt4 = _slicedToArray$1(_getSelectEnt3, 2), _wrappedValue = _getSelectEnt4[0], _option2 = _getSelectEnt4[1];
      onDeselect(_wrappedValue, _option2);
    }
  };
  var onInternalSelect = useRefFunc$1(function(val, info) {
    var cloneValues;
    var mergedSelect = multiple ? info.selected : true;
    if (mergedSelect) {
      cloneValues = multiple ? [].concat(_toConsumableArray(mergedValues), [val]) : [val];
    } else {
      cloneValues = mergedValues.filter(function(v) {
        return v.value !== val;
      });
    }
    triggerChange(cloneValues);
    triggerSelect(val, mergedSelect);
    if (mode === "combobox") {
      setActiveValue("");
    } else if (!isMultiple || autoClearSearchValue) {
      setSearchValue("");
      setActiveValue("");
    }
  });
  var onDisplayValuesChange = function onDisplayValuesChange2(nextValues, info) {
    triggerChange(nextValues);
    var type4 = info.type, values = info.values;
    if (type4 === "remove" || type4 === "clear") {
      values.forEach(function(item) {
        triggerSelect(item.value, false, type4);
      });
    }
  };
  var onInternalSearch = function onInternalSearch2(searchText, info) {
    setSearchValue(searchText);
    setActiveValue(null);
    if (info.source === "submit") {
      var formatted = (searchText || "").trim();
      if (formatted) {
        var newRawValues = Array.from(new Set([].concat(_toConsumableArray(rawValues), [formatted])));
        triggerChange(newRawValues);
        triggerSelect(formatted, true);
        setSearchValue("");
      }
      return;
    }
    if (info.source !== "blur") {
      if (mode === "combobox") {
        triggerChange(searchText);
      }
      onSearch === null || onSearch === void 0 ? void 0 : onSearch(searchText);
    }
  };
  var onInternalSearchSplit = function onInternalSearchSplit2(words) {
    var patchValues = words;
    if (mode !== "tags") {
      patchValues = words.map(function(word) {
        var opt = labelOptions.get(word);
        return opt === null || opt === void 0 ? void 0 : opt.value;
      }).filter(function(val) {
        return val !== void 0;
      });
    }
    var newRawValues = Array.from(new Set([].concat(_toConsumableArray(rawValues), _toConsumableArray(patchValues))));
    triggerChange(newRawValues);
    newRawValues.forEach(function(newRawValue) {
      triggerSelect(newRawValue, true);
    });
  };
  var selectContext = React$2.useMemo(function() {
    var realVirtual = virtual !== false && dropdownMatchSelectWidth !== false;
    return _objectSpread2$1(_objectSpread2$1({}, parsedOptions), {}, {
      flattenOptions: displayOptions,
      onActiveValue,
      defaultActiveFirstOption: mergedDefaultActiveFirstOption,
      onSelect: onInternalSelect,
      menuItemSelectedIcon,
      rawValues,
      fieldNames: mergedFieldNames,
      virtual: realVirtual,
      listHeight,
      listItemHeight,
      childrenAsData
    });
  }, [parsedOptions, displayOptions, onActiveValue, mergedDefaultActiveFirstOption, onInternalSelect, menuItemSelectedIcon, rawValues, mergedFieldNames, virtual, dropdownMatchSelectWidth, listHeight, listItemHeight, childrenAsData]);
  if (process.env.NODE_ENV !== "production") {
    warningProps$1(props);
    warningNullOptions$1(mergedOptions, mergedFieldNames);
  }
  return /* @__PURE__ */ React$2.createElement(SelectContext.Provider, {
    value: selectContext
  }, /* @__PURE__ */ React$2.createElement(BaseSelect, _extends$1({}, restProps, {
    // >>> MISC
    id: mergedId,
    prefixCls,
    ref,
    omitDomProps: OMIT_DOM_PROPS,
    mode,
    displayValues,
    onDisplayValuesChange,
    searchValue: mergedSearchValue,
    onSearch: onInternalSearch,
    autoClearSearchValue,
    onSearchSplit: onInternalSearchSplit,
    dropdownMatchSelectWidth,
    OptionList: RefOptionList$1,
    emptyOptions: !displayOptions.length,
    activeValue,
    activeDescendantId: "".concat(mergedId, "_list_").concat(accessibilityIndex)
  })));
});
if (process.env.NODE_ENV !== "production") {
  Select.displayName = "Select";
}
var TypedSelect = Select;
TypedSelect.Option = Option;
TypedSelect.OptGroup = OptGroup;
function genPurePanel(Component, defaultPrefixCls2, getDropdownCls, postProps) {
  return function PurePanel2(props) {
    const {
      prefixCls: customizePrefixCls,
      style: style2
    } = props;
    const holderRef = React$2.useRef(null);
    const [popupHeight, setPopupHeight] = React$2.useState(0);
    const [popupWidth, setPopupWidth] = React$2.useState(0);
    const [open, setOpen] = useMergedState(false, {
      value: props.open
    });
    const {
      getPrefixCls
    } = React$2.useContext(ConfigContext);
    const prefixCls = getPrefixCls(defaultPrefixCls2 || "select", customizePrefixCls);
    React$2.useEffect(() => {
      setOpen(true);
      if (typeof ResizeObserver !== "undefined") {
        const resizeObserver2 = new ResizeObserver((entries) => {
          const element = entries[0].target;
          setPopupHeight(element.offsetHeight + 8);
          setPopupWidth(element.offsetWidth);
        });
        const interval = setInterval(() => {
          var _a;
          const dropdownCls = getDropdownCls ? `.${getDropdownCls(prefixCls)}` : `.${prefixCls}-dropdown`;
          const popup = (_a = holderRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(dropdownCls);
          if (popup) {
            clearInterval(interval);
            resizeObserver2.observe(popup);
          }
        }, 10);
        return () => {
          clearInterval(interval);
          resizeObserver2.disconnect();
        };
      }
    }, []);
    let mergedProps = Object.assign(Object.assign({}, props), {
      style: Object.assign(Object.assign({}, style2), {
        margin: 0
      }),
      open,
      visible: open,
      getPopupContainer: () => holderRef.current
    });
    if (postProps) {
      mergedProps = postProps(mergedProps);
    }
    return /* @__PURE__ */ React$2.createElement(ConfigProvider$1, {
      theme: {
        token: {
          motionDurationFast: "0.01s",
          motionDurationMid: "0.01s",
          motionDurationSlow: "0.01s"
        }
      }
    }, /* @__PURE__ */ React$2.createElement("div", {
      ref: holderRef,
      style: {
        paddingBottom: popupHeight,
        position: "relative",
        width: "fit-content",
        minWidth: popupWidth
      }
    }, /* @__PURE__ */ React$2.createElement(Component, Object.assign({}, mergedProps))));
  };
}
function getStatusClassNames(prefixCls, status, hasFeedback) {
  return classNames({
    [`${prefixCls}-status-success`]: status === "success",
    [`${prefixCls}-status-warning`]: status === "warning",
    [`${prefixCls}-status-error`]: status === "error",
    [`${prefixCls}-status-validating`]: status === "validating",
    [`${prefixCls}-has-feedback`]: hasFeedback
  });
}
const getMergedStatus = (contextStatus, customStatus) => customStatus || contextStatus;
const Empty$2 = () => {
  const [, token2] = useToken$2();
  const bgColor = new TinyColor(token2.colorBgBase);
  let themeStyle = {};
  if (bgColor.toHsl().l < 0.5) {
    themeStyle = {
      opacity: 0.65
    };
  }
  return /* @__PURE__ */ React$2.createElement("svg", {
    style: themeStyle,
    width: "184",
    height: "152",
    viewBox: "0 0 184 152",
    xmlns: "http://www.w3.org/2000/svg"
  }, /* @__PURE__ */ React$2.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, /* @__PURE__ */ React$2.createElement("g", {
    transform: "translate(24 31.67)"
  }, /* @__PURE__ */ React$2.createElement("ellipse", {
    fillOpacity: ".8",
    fill: "#F5F5F7",
    cx: "67.797",
    cy: "106.89",
    rx: "67.797",
    ry: "12.668"
  }), /* @__PURE__ */ React$2.createElement("path", {
    d: "M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z",
    fill: "#AEB8C2"
  }), /* @__PURE__ */ React$2.createElement("path", {
    d: "M101.537 86.214L80.63 61.102c-1.001-1.207-2.507-1.867-4.048-1.867H31.724c-1.54 0-3.047.66-4.048 1.867L6.769 86.214v13.792h94.768V86.214z",
    fill: "url(#linearGradient-1)",
    transform: "translate(13.56)"
  }), /* @__PURE__ */ React$2.createElement("path", {
    d: "M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z",
    fill: "#F5F5F7"
  }), /* @__PURE__ */ React$2.createElement("path", {
    d: "M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z",
    fill: "#DCE0E6"
  })), /* @__PURE__ */ React$2.createElement("path", {
    d: "M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z",
    fill: "#DCE0E6"
  }), /* @__PURE__ */ React$2.createElement("g", {
    transform: "translate(149.65 15.383)",
    fill: "#FFF"
  }, /* @__PURE__ */ React$2.createElement("ellipse", {
    cx: "20.654",
    cy: "3.167",
    rx: "2.849",
    ry: "2.815"
  }), /* @__PURE__ */ React$2.createElement("path", {
    d: "M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z"
  }))));
};
if (process.env.NODE_ENV !== "production") {
  Empty$2.displayName = "EmptyImage";
}
const DefaultEmptyImg = Empty$2;
const Simple = () => {
  const [, token2] = useToken$2();
  const {
    colorFill,
    colorFillTertiary,
    colorFillQuaternary,
    colorBgContainer
  } = token2;
  const {
    borderColor,
    shadowColor,
    contentColor
  } = useMemo$1(() => ({
    borderColor: new TinyColor(colorFill).onBackground(colorBgContainer).toHexShortString(),
    shadowColor: new TinyColor(colorFillTertiary).onBackground(colorBgContainer).toHexShortString(),
    contentColor: new TinyColor(colorFillQuaternary).onBackground(colorBgContainer).toHexShortString()
  }), [colorFill, colorFillTertiary, colorFillQuaternary, colorBgContainer]);
  return /* @__PURE__ */ React$2.createElement("svg", {
    width: "64",
    height: "41",
    viewBox: "0 0 64 41",
    xmlns: "http://www.w3.org/2000/svg"
  }, /* @__PURE__ */ React$2.createElement("g", {
    transform: "translate(0 1)",
    fill: "none",
    fillRule: "evenodd"
  }, /* @__PURE__ */ React$2.createElement("ellipse", {
    fill: shadowColor,
    cx: "32",
    cy: "33",
    rx: "32",
    ry: "7"
  }), /* @__PURE__ */ React$2.createElement("g", {
    fillRule: "nonzero",
    stroke: borderColor
  }, /* @__PURE__ */ React$2.createElement("path", {
    d: "M55 12.76L44.854 1.258C44.367.474 43.656 0 42.907 0H21.093c-.749 0-1.46.474-1.947 1.257L9 12.761V22h46v-9.24z"
  }), /* @__PURE__ */ React$2.createElement("path", {
    d: "M41.613 15.931c0-1.605.994-2.93 2.227-2.931H55v18.137C55 33.26 53.68 35 52.05 35h-40.1C10.32 35 9 33.259 9 31.137V13h11.16c1.233 0 2.227 1.323 2.227 2.928v.022c0 1.605 1.005 2.901 2.237 2.901h14.752c1.232 0 2.237-1.308 2.237-2.913v-.007z",
    fill: contentColor
  }))));
};
if (process.env.NODE_ENV !== "production") {
  Simple.displayName = "SimpleImage";
}
const SimpleEmptyImg = Simple;
const genSharedEmptyStyle = (token2) => {
  const {
    componentCls,
    margin,
    marginXS,
    marginXL,
    fontSize,
    lineHeight
  } = token2;
  return {
    [componentCls]: {
      marginInline: marginXS,
      fontSize,
      lineHeight,
      textAlign: "center",
      // 原来 &-image 没有父子结构，现在为了外层承担我们的hashId，改成父子结果
      [`${componentCls}-image`]: {
        height: token2.emptyImgHeight,
        marginBottom: marginXS,
        opacity: token2.opacityImage,
        img: {
          height: "100%"
        },
        svg: {
          maxWidth: "100%",
          height: "100%",
          margin: "auto"
        }
      },
      [`${componentCls}-description`]: {
        color: token2.colorText
      },
      // 原来 &-footer 没有父子结构，现在为了外层承担我们的hashId，改成父子结果
      [`${componentCls}-footer`]: {
        marginTop: margin
      },
      "&-normal": {
        marginBlock: marginXL,
        color: token2.colorTextDisabled,
        [`${componentCls}-description`]: {
          color: token2.colorTextDisabled
        },
        [`${componentCls}-image`]: {
          height: token2.emptyImgHeightMD
        }
      },
      "&-small": {
        marginBlock: marginXS,
        color: token2.colorTextDisabled,
        [`${componentCls}-image`]: {
          height: token2.emptyImgHeightSM
        }
      }
    }
  };
};
const useStyle$5 = genComponentStyleHook("Empty", (token2) => {
  const {
    componentCls,
    controlHeightLG
  } = token2;
  const emptyToken = merge(token2, {
    emptyImgCls: `${componentCls}-img`,
    emptyImgHeight: controlHeightLG * 2.5,
    emptyImgHeightMD: controlHeightLG,
    emptyImgHeightSM: controlHeightLG * 0.875
  });
  return [genSharedEmptyStyle(emptyToken)];
});
var __rest$b = globalThis && globalThis.__rest || function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
const defaultEmptyImg = /* @__PURE__ */ React$2.createElement(DefaultEmptyImg, null);
const simpleEmptyImg = /* @__PURE__ */ React$2.createElement(SimpleEmptyImg, null);
const Empty = (_a) => {
  var {
    className,
    rootClassName,
    prefixCls: customizePrefixCls,
    image = defaultEmptyImg,
    description,
    children,
    imageStyle
  } = _a, restProps = __rest$b(_a, ["className", "rootClassName", "prefixCls", "image", "description", "children", "imageStyle"]);
  const {
    getPrefixCls,
    direction
  } = React$2.useContext(ConfigContext);
  const prefixCls = getPrefixCls("empty", customizePrefixCls);
  const [wrapSSR, hashId] = useStyle$5(prefixCls);
  const [locale2] = useLocale$1("Empty");
  const des = typeof description !== "undefined" ? description : locale2 === null || locale2 === void 0 ? void 0 : locale2.description;
  const alt = typeof des === "string" ? des : "empty";
  let imageNode = null;
  if (typeof image === "string") {
    imageNode = /* @__PURE__ */ React$2.createElement("img", {
      alt,
      src: image
    });
  } else {
    imageNode = image;
  }
  return wrapSSR(/* @__PURE__ */ React$2.createElement("div", Object.assign({
    className: classNames(hashId, prefixCls, {
      [`${prefixCls}-normal`]: image === simpleEmptyImg,
      [`${prefixCls}-rtl`]: direction === "rtl"
    }, className, rootClassName)
  }, restProps), /* @__PURE__ */ React$2.createElement("div", {
    className: `${prefixCls}-image`,
    style: imageStyle
  }, imageNode), des && /* @__PURE__ */ React$2.createElement("div", {
    className: `${prefixCls}-description`
  }, des), children && /* @__PURE__ */ React$2.createElement("div", {
    className: `${prefixCls}-footer`
  }, children)));
};
Empty.PRESENTED_IMAGE_DEFAULT = defaultEmptyImg;
Empty.PRESENTED_IMAGE_SIMPLE = simpleEmptyImg;
if (process.env.NODE_ENV !== "production") {
  Empty.displayName = "Empty";
}
const Empty$1 = Empty;
const DefaultRenderEmpty = (props) => {
  const {
    componentName
  } = props;
  const {
    getPrefixCls
  } = useContext(ConfigContext);
  const prefix = getPrefixCls("empty");
  switch (componentName) {
    case "Table":
    case "List":
      return /* @__PURE__ */ React__default.createElement(Empty$1, {
        image: Empty$1.PRESENTED_IMAGE_SIMPLE
      });
    case "Select":
    case "TreeSelect":
    case "Cascader":
    case "Transfer":
    case "Mentions":
      return /* @__PURE__ */ React__default.createElement(Empty$1, {
        image: Empty$1.PRESENTED_IMAGE_SIMPLE,
        className: `${prefix}-small`
      });
    default:
      return /* @__PURE__ */ React__default.createElement(Empty$1, null);
  }
};
const DefaultRenderEmpty$1 = DefaultRenderEmpty;
const genItemStyle = (token2) => {
  const {
    controlPaddingHorizontal
  } = token2;
  return {
    position: "relative",
    display: "block",
    minHeight: token2.controlHeight,
    padding: `${(token2.controlHeight - token2.fontSize * token2.lineHeight) / 2}px ${controlPaddingHorizontal}px`,
    color: token2.colorText,
    fontWeight: "normal",
    fontSize: token2.fontSize,
    lineHeight: token2.lineHeight,
    boxSizing: "border-box"
  };
};
const genSingleStyle$1 = (token2) => {
  const {
    antCls,
    componentCls
  } = token2;
  const selectItemCls = `${componentCls}-item`;
  return [
    {
      [`${componentCls}-dropdown`]: Object.assign(Object.assign({}, resetComponent(token2)), {
        position: "absolute",
        top: -9999,
        zIndex: token2.zIndexPopup,
        boxSizing: "border-box",
        padding: token2.paddingXXS,
        overflow: "hidden",
        fontSize: token2.fontSize,
        // Fix select render lag of long text in chrome
        // https://github.com/ant-design/ant-design/issues/11456
        // https://github.com/ant-design/ant-design/issues/11843
        fontVariant: "initial",
        backgroundColor: token2.colorBgElevated,
        borderRadius: token2.borderRadiusLG,
        outline: "none",
        boxShadow: token2.boxShadowSecondary,
        [`
            &${antCls}-slide-up-enter${antCls}-slide-up-enter-active${componentCls}-dropdown-placement-bottomLeft,
            &${antCls}-slide-up-appear${antCls}-slide-up-appear-active${componentCls}-dropdown-placement-bottomLeft
          `]: {
          animationName: slideUpIn
        },
        [`
            &${antCls}-slide-up-enter${antCls}-slide-up-enter-active${componentCls}-dropdown-placement-topLeft,
            &${antCls}-slide-up-appear${antCls}-slide-up-appear-active${componentCls}-dropdown-placement-topLeft
          `]: {
          animationName: slideDownIn
        },
        [`&${antCls}-slide-up-leave${antCls}-slide-up-leave-active${componentCls}-dropdown-placement-bottomLeft`]: {
          animationName: slideUpOut
        },
        [`&${antCls}-slide-up-leave${antCls}-slide-up-leave-active${componentCls}-dropdown-placement-topLeft`]: {
          animationName: slideDownOut
        },
        "&-hidden": {
          display: "none"
        },
        [`${selectItemCls}`]: Object.assign(Object.assign({}, genItemStyle(token2)), {
          cursor: "pointer",
          transition: `background ${token2.motionDurationSlow} ease`,
          borderRadius: token2.borderRadiusSM,
          // =========== Group ============
          "&-group": {
            color: token2.colorTextDescription,
            fontSize: token2.fontSizeSM,
            cursor: "default"
          },
          // =========== Option ===========
          "&-option": {
            display: "flex",
            "&-content": Object.assign(Object.assign({
              flex: "auto"
            }, textEllipsis), {
              "> *": Object.assign({}, textEllipsis)
            }),
            "&-state": {
              flex: "none"
            },
            [`&-active:not(${selectItemCls}-option-disabled)`]: {
              backgroundColor: token2.controlItemBgHover
            },
            [`&-selected:not(${selectItemCls}-option-disabled)`]: {
              color: token2.colorText,
              fontWeight: token2.fontWeightStrong,
              backgroundColor: token2.controlItemBgActive,
              [`${selectItemCls}-option-state`]: {
                color: token2.colorPrimary
              }
            },
            "&-disabled": {
              [`&${selectItemCls}-option-selected`]: {
                backgroundColor: token2.colorBgContainerDisabled
              },
              color: token2.colorTextDisabled,
              cursor: "not-allowed"
            },
            "&-grouped": {
              paddingInlineStart: token2.controlPaddingHorizontal * 2
            }
          }
        }),
        // =========================== RTL ===========================
        "&-rtl": {
          direction: "rtl"
        }
      })
    },
    // Follow code may reuse in other components
    initSlideMotion(token2, "slide-up"),
    initSlideMotion(token2, "slide-down"),
    initMoveMotion(token2, "move-up"),
    initMoveMotion(token2, "move-down")
  ];
};
const genDropdownStyle = genSingleStyle$1;
const FIXED_ITEM_MARGIN = 2;
function getSelectItemStyle(_ref) {
  let {
    controlHeightSM,
    controlHeight,
    lineWidth: borderWidth
  } = _ref;
  const selectItemDist = (controlHeight - controlHeightSM) / 2 - borderWidth;
  const selectItemMargin = Math.ceil(selectItemDist / 2);
  return [selectItemDist, selectItemMargin];
}
function genSizeStyle$1(token2, suffix) {
  const {
    componentCls,
    iconCls
  } = token2;
  const selectOverflowPrefixCls = `${componentCls}-selection-overflow`;
  const selectItemHeight = token2.controlHeightSM;
  const [selectItemDist] = getSelectItemStyle(token2);
  const suffixCls = suffix ? `${componentCls}-${suffix}` : "";
  return {
    [`${componentCls}-multiple${suffixCls}`]: {
      fontSize: token2.fontSize,
      /**
       * Do not merge `height` & `line-height` under style with `selection` & `search`, since chrome
       * may update to redesign with its align logic.
       */
      // =========================== Overflow ===========================
      [selectOverflowPrefixCls]: {
        position: "relative",
        display: "flex",
        flex: "auto",
        flexWrap: "wrap",
        maxWidth: "100%",
        "&-item": {
          flex: "none",
          alignSelf: "center",
          maxWidth: "100%",
          display: "inline-flex"
        }
      },
      // ========================= Selector =========================
      [`${componentCls}-selector`]: {
        display: "flex",
        flexWrap: "wrap",
        alignItems: "center",
        // Multiple is little different that horizontal is follow the vertical
        padding: `${selectItemDist - FIXED_ITEM_MARGIN}px ${FIXED_ITEM_MARGIN * 2}px`,
        borderRadius: token2.borderRadius,
        [`${componentCls}-show-search&`]: {
          cursor: "text"
        },
        [`${componentCls}-disabled&`]: {
          background: token2.colorBgContainerDisabled,
          cursor: "not-allowed"
        },
        "&:after": {
          display: "inline-block",
          width: 0,
          margin: `${FIXED_ITEM_MARGIN}px 0`,
          lineHeight: `${selectItemHeight}px`,
          content: '"\\a0"'
        }
      },
      [`
        &${componentCls}-show-arrow ${componentCls}-selector,
        &${componentCls}-allow-clear ${componentCls}-selector
      `]: {
        paddingInlineEnd: token2.fontSizeIcon + token2.controlPaddingHorizontal
      },
      // ======================== Selections ========================
      [`${componentCls}-selection-item`]: {
        position: "relative",
        display: "flex",
        flex: "none",
        boxSizing: "border-box",
        maxWidth: "100%",
        height: selectItemHeight,
        marginTop: FIXED_ITEM_MARGIN,
        marginBottom: FIXED_ITEM_MARGIN,
        lineHeight: `${selectItemHeight - token2.lineWidth * 2}px`,
        background: token2.colorFillSecondary,
        border: `${token2.lineWidth}px solid ${token2.colorSplit}`,
        borderRadius: token2.borderRadiusSM,
        cursor: "default",
        transition: `font-size ${token2.motionDurationSlow}, line-height ${token2.motionDurationSlow}, height ${token2.motionDurationSlow}`,
        userSelect: "none",
        marginInlineEnd: FIXED_ITEM_MARGIN * 2,
        paddingInlineStart: token2.paddingXS,
        paddingInlineEnd: token2.paddingXS / 2,
        [`${componentCls}-disabled&`]: {
          color: token2.colorTextDisabled,
          borderColor: token2.colorBorder,
          cursor: "not-allowed"
        },
        // It's ok not to do this, but 24px makes bottom narrow in view should adjust
        "&-content": {
          display: "inline-block",
          marginInlineEnd: token2.paddingXS / 2,
          overflow: "hidden",
          whiteSpace: "pre",
          textOverflow: "ellipsis"
        },
        "&-remove": Object.assign(Object.assign({}, resetIcon()), {
          display: "inline-block",
          color: token2.colorIcon,
          fontWeight: "bold",
          fontSize: 10,
          lineHeight: "inherit",
          cursor: "pointer",
          [`> ${iconCls}`]: {
            verticalAlign: "-0.2em"
          },
          "&:hover": {
            color: token2.colorIconHover
          }
        })
      },
      // ========================== Input ==========================
      [`${selectOverflowPrefixCls}-item + ${selectOverflowPrefixCls}-item`]: {
        [`${componentCls}-selection-search`]: {
          marginInlineStart: 0
        }
      },
      [`${componentCls}-selection-search`]: {
        display: "inline-flex",
        position: "relative",
        maxWidth: "100%",
        marginInlineStart: token2.inputPaddingHorizontalBase - selectItemDist,
        [`
          &-input,
          &-mirror
        `]: {
          height: selectItemHeight,
          fontFamily: token2.fontFamily,
          lineHeight: `${selectItemHeight}px`,
          transition: `all ${token2.motionDurationSlow}`
        },
        "&-input": {
          width: "100%",
          minWidth: 4.1
          // fix search cursor missing
        },
        "&-mirror": {
          position: "absolute",
          top: 0,
          insetInlineStart: 0,
          insetInlineEnd: "auto",
          zIndex: 999,
          whiteSpace: "pre",
          visibility: "hidden"
        }
      },
      // ======================= Placeholder =======================
      [`${componentCls}-selection-placeholder `]: {
        position: "absolute",
        top: "50%",
        insetInlineStart: token2.inputPaddingHorizontalBase,
        insetInlineEnd: token2.inputPaddingHorizontalBase,
        transform: "translateY(-50%)",
        transition: `all ${token2.motionDurationSlow}`
      }
    }
  };
}
function genMultipleStyle(token2) {
  const {
    componentCls
  } = token2;
  const smallToken = merge(token2, {
    controlHeight: token2.controlHeightSM,
    controlHeightSM: token2.controlHeightXS,
    borderRadius: token2.borderRadiusSM,
    borderRadiusSM: token2.borderRadiusXS
  });
  const [, smSelectItemMargin] = getSelectItemStyle(token2);
  return [
    genSizeStyle$1(token2),
    // ======================== Small ========================
    // Shared
    genSizeStyle$1(smallToken, "sm"),
    // Padding
    {
      [`${componentCls}-multiple${componentCls}-sm`]: {
        [`${componentCls}-selection-placeholder`]: {
          insetInline: token2.controlPaddingHorizontalSM - token2.lineWidth
        },
        // https://github.com/ant-design/ant-design/issues/29559
        [`${componentCls}-selection-search`]: {
          marginInlineStart: smSelectItemMargin
        }
      }
    },
    // ======================== Large ========================
    // Shared
    genSizeStyle$1(merge(token2, {
      fontSize: token2.fontSizeLG,
      controlHeight: token2.controlHeightLG,
      controlHeightSM: token2.controlHeight,
      borderRadius: token2.borderRadiusLG,
      borderRadiusSM: token2.borderRadius
    }), "lg")
  ];
}
function genSizeStyle(token2, suffix) {
  const {
    componentCls,
    inputPaddingHorizontalBase,
    borderRadius
  } = token2;
  const selectHeightWithoutBorder = token2.controlHeight - token2.lineWidth * 2;
  const selectionItemPadding = Math.ceil(token2.fontSize * 1.25);
  const suffixCls = suffix ? `${componentCls}-${suffix}` : "";
  return {
    [`${componentCls}-single${suffixCls}`]: {
      fontSize: token2.fontSize,
      // ========================= Selector =========================
      [`${componentCls}-selector`]: Object.assign(Object.assign({}, resetComponent(token2)), {
        display: "flex",
        borderRadius,
        [`${componentCls}-selection-search`]: {
          position: "absolute",
          top: 0,
          insetInlineStart: inputPaddingHorizontalBase,
          insetInlineEnd: inputPaddingHorizontalBase,
          bottom: 0,
          "&-input": {
            width: "100%"
          }
        },
        [`
          ${componentCls}-selection-item,
          ${componentCls}-selection-placeholder
        `]: {
          padding: 0,
          lineHeight: `${selectHeightWithoutBorder}px`,
          transition: `all ${token2.motionDurationSlow}, visibility 0s`,
          // Firefox inline-block position calculation is not same as Chrome & Safari. Patch this:
          "@supports (-moz-appearance: meterbar)": {
            lineHeight: `${selectHeightWithoutBorder}px`
          }
        },
        [`${componentCls}-selection-item`]: {
          position: "relative",
          userSelect: "none"
        },
        [`${componentCls}-selection-placeholder`]: {
          transition: "none",
          pointerEvents: "none"
        },
        // For common baseline align
        [[
          "&:after",
          /* For '' value baseline align */
          `${componentCls}-selection-item:after`,
          /* For undefined value baseline align */
          `${componentCls}-selection-placeholder:after`
        ].join(",")]: {
          display: "inline-block",
          width: 0,
          visibility: "hidden",
          content: '"\\a0"'
        }
      }),
      [`
        &${componentCls}-show-arrow ${componentCls}-selection-item,
        &${componentCls}-show-arrow ${componentCls}-selection-placeholder
      `]: {
        paddingInlineEnd: selectionItemPadding
      },
      // Opacity selection if open
      [`&${componentCls}-open ${componentCls}-selection-item`]: {
        color: token2.colorTextPlaceholder
      },
      // ========================== Input ==========================
      // We only change the style of non-customize input which is only support by `combobox` mode.
      // Not customize
      [`&:not(${componentCls}-customize-input)`]: {
        [`${componentCls}-selector`]: {
          width: "100%",
          height: token2.controlHeight,
          padding: `0 ${inputPaddingHorizontalBase}px`,
          [`${componentCls}-selection-search-input`]: {
            height: selectHeightWithoutBorder
          },
          "&:after": {
            lineHeight: `${selectHeightWithoutBorder}px`
          }
        }
      },
      [`&${componentCls}-customize-input`]: {
        [`${componentCls}-selector`]: {
          "&:after": {
            display: "none"
          },
          [`${componentCls}-selection-search`]: {
            position: "static",
            width: "100%"
          },
          [`${componentCls}-selection-placeholder`]: {
            position: "absolute",
            insetInlineStart: 0,
            insetInlineEnd: 0,
            padding: `0 ${inputPaddingHorizontalBase}px`,
            "&:after": {
              display: "none"
            }
          }
        }
      }
    }
  };
}
function genSingleStyle(token2) {
  const {
    componentCls
  } = token2;
  const inputPaddingHorizontalSM = token2.controlPaddingHorizontalSM - token2.lineWidth;
  return [
    genSizeStyle(token2),
    // ======================== Small ========================
    // Shared
    genSizeStyle(merge(token2, {
      controlHeight: token2.controlHeightSM,
      borderRadius: token2.borderRadiusSM
    }), "sm"),
    // padding
    {
      [`${componentCls}-single${componentCls}-sm`]: {
        [`&:not(${componentCls}-customize-input)`]: {
          [`${componentCls}-selection-search`]: {
            insetInlineStart: inputPaddingHorizontalSM,
            insetInlineEnd: inputPaddingHorizontalSM
          },
          [`${componentCls}-selector`]: {
            padding: `0 ${inputPaddingHorizontalSM}px`
          },
          // With arrow should provides `padding-right` to show the arrow
          [`&${componentCls}-show-arrow ${componentCls}-selection-search`]: {
            insetInlineEnd: inputPaddingHorizontalSM + token2.fontSize * 1.5
          },
          [`
            &${componentCls}-show-arrow ${componentCls}-selection-item,
            &${componentCls}-show-arrow ${componentCls}-selection-placeholder
          `]: {
            paddingInlineEnd: token2.fontSize * 1.5
          }
        }
      }
    },
    // ======================== Large ========================
    // Shared
    genSizeStyle(merge(token2, {
      controlHeight: token2.controlHeightLG,
      fontSize: token2.fontSizeLG,
      borderRadius: token2.borderRadiusLG
    }), "lg")
  ];
}
const genSelectorStyle = (token2) => {
  const {
    componentCls
  } = token2;
  return {
    position: "relative",
    backgroundColor: token2.colorBgContainer,
    border: `${token2.lineWidth}px ${token2.lineType} ${token2.colorBorder}`,
    transition: `all ${token2.motionDurationMid} ${token2.motionEaseInOut}`,
    input: {
      cursor: "pointer"
    },
    [`${componentCls}-show-search&`]: {
      cursor: "text",
      input: {
        cursor: "auto",
        color: "inherit"
      }
    },
    [`${componentCls}-disabled&`]: {
      color: token2.colorTextDisabled,
      background: token2.colorBgContainerDisabled,
      cursor: "not-allowed",
      [`${componentCls}-multiple&`]: {
        background: token2.colorBgContainerDisabled
      },
      input: {
        cursor: "not-allowed"
      }
    }
  };
};
const genStatusStyle$2 = function(rootSelectCls, token2) {
  let overwriteDefaultBorder = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  const {
    componentCls,
    borderHoverColor,
    outlineColor,
    antCls
  } = token2;
  const overwriteStyle = overwriteDefaultBorder ? {
    [`${componentCls}-selector`]: {
      borderColor: borderHoverColor
    }
  } : {};
  return {
    [rootSelectCls]: {
      [`&:not(${componentCls}-disabled):not(${componentCls}-customize-input):not(${antCls}-pagination-size-changer)`]: Object.assign(Object.assign({}, overwriteStyle), {
        [`${componentCls}-focused& ${componentCls}-selector`]: {
          borderColor: borderHoverColor,
          boxShadow: `0 0 0 ${token2.controlOutlineWidth}px ${outlineColor}`,
          outline: 0
        },
        [`&:hover ${componentCls}-selector`]: {
          borderColor: borderHoverColor
        }
      })
    }
  };
};
const getSearchInputWithoutBorderStyle = (token2) => {
  const {
    componentCls
  } = token2;
  return {
    [`${componentCls}-selection-search-input`]: {
      margin: 0,
      padding: 0,
      background: "transparent",
      border: "none",
      outline: "none",
      appearance: "none",
      "&::-webkit-search-cancel-button": {
        display: "none",
        "-webkit-appearance": "none"
      }
    }
  };
};
const genBaseStyle$2 = (token2) => {
  const {
    componentCls,
    inputPaddingHorizontalBase,
    iconCls
  } = token2;
  return {
    [componentCls]: Object.assign(Object.assign({}, resetComponent(token2)), {
      position: "relative",
      display: "inline-block",
      cursor: "pointer",
      [`&:not(${componentCls}-customize-input) ${componentCls}-selector`]: Object.assign(Object.assign({}, genSelectorStyle(token2)), getSearchInputWithoutBorderStyle(token2)),
      // [`&:not(&-disabled):hover ${selectCls}-selector`]: {
      //   ...genHoverStyle(token),
      // },
      // ======================== Selection ========================
      [`${componentCls}-selection-item`]: Object.assign(Object.assign({
        flex: 1,
        fontWeight: "normal"
      }, textEllipsis), {
        "> *": Object.assign({
          lineHeight: "inherit"
        }, textEllipsis)
      }),
      // ======================= Placeholder =======================
      [`${componentCls}-selection-placeholder`]: Object.assign(Object.assign({}, textEllipsis), {
        flex: 1,
        color: token2.colorTextPlaceholder,
        pointerEvents: "none"
      }),
      // ========================== Arrow ==========================
      [`${componentCls}-arrow`]: Object.assign(Object.assign({}, resetIcon()), {
        position: "absolute",
        top: "50%",
        insetInlineStart: "auto",
        insetInlineEnd: inputPaddingHorizontalBase,
        height: token2.fontSizeIcon,
        marginTop: -token2.fontSizeIcon / 2,
        color: token2.colorTextQuaternary,
        fontSize: token2.fontSizeIcon,
        lineHeight: 1,
        textAlign: "center",
        pointerEvents: "none",
        display: "flex",
        alignItems: "center",
        [iconCls]: {
          verticalAlign: "top",
          transition: `transform ${token2.motionDurationSlow}`,
          "> svg": {
            verticalAlign: "top"
          },
          [`&:not(${componentCls}-suffix)`]: {
            pointerEvents: "auto"
          }
        },
        [`${componentCls}-disabled &`]: {
          cursor: "not-allowed"
        },
        "> *:not(:last-child)": {
          marginInlineEnd: 8
          // FIXME: magic
        }
      }),
      // ========================== Clear ==========================
      [`${componentCls}-clear`]: {
        position: "absolute",
        top: "50%",
        insetInlineStart: "auto",
        insetInlineEnd: inputPaddingHorizontalBase,
        zIndex: 1,
        display: "inline-block",
        width: token2.fontSizeIcon,
        height: token2.fontSizeIcon,
        marginTop: -token2.fontSizeIcon / 2,
        color: token2.colorTextQuaternary,
        fontSize: token2.fontSizeIcon,
        fontStyle: "normal",
        lineHeight: 1,
        textAlign: "center",
        textTransform: "none",
        background: token2.colorBgContainer,
        cursor: "pointer",
        opacity: 0,
        transition: `color ${token2.motionDurationMid} ease, opacity ${token2.motionDurationSlow} ease`,
        textRendering: "auto",
        "&:before": {
          display: "block"
        },
        "&:hover": {
          color: token2.colorTextTertiary
        }
      },
      "&:hover": {
        [`${componentCls}-clear`]: {
          opacity: 1
        }
      }
    }),
    // ========================= Feedback ==========================
    [`${componentCls}-has-feedback`]: {
      [`${componentCls}-clear`]: {
        insetInlineEnd: inputPaddingHorizontalBase + token2.fontSize + token2.paddingXXS
      }
    }
  };
};
const genSelectStyle = (token2) => {
  const {
    componentCls
  } = token2;
  return [
    {
      [componentCls]: {
        // ==================== BorderLess ====================
        [`&-borderless ${componentCls}-selector`]: {
          backgroundColor: `transparent !important`,
          borderColor: `transparent !important`,
          boxShadow: `none !important`
        },
        // ==================== In Form ====================
        [`&${componentCls}-in-form-item`]: {
          width: "100%"
        }
      }
    },
    // =====================================================
    // ==                       LTR                       ==
    // =====================================================
    // Base
    genBaseStyle$2(token2),
    // Single
    genSingleStyle(token2),
    // Multiple
    genMultipleStyle(token2),
    // Dropdown
    genDropdownStyle(token2),
    // =====================================================
    // ==                       RTL                       ==
    // =====================================================
    {
      [`${componentCls}-rtl`]: {
        direction: "rtl"
      }
    },
    // =====================================================
    // ==                     Status                      ==
    // =====================================================
    genStatusStyle$2(componentCls, merge(token2, {
      borderHoverColor: token2.colorPrimaryHover,
      outlineColor: token2.controlOutline
    })),
    genStatusStyle$2(`${componentCls}-status-error`, merge(token2, {
      borderHoverColor: token2.colorErrorHover,
      outlineColor: token2.colorErrorOutline
    }), true),
    genStatusStyle$2(`${componentCls}-status-warning`, merge(token2, {
      borderHoverColor: token2.colorWarningHover,
      outlineColor: token2.colorWarningOutline
    }), true),
    // =====================================================
    // ==             Space Compact                       ==
    // =====================================================
    genCompactItemStyle(token2, {
      borderElCls: `${componentCls}-selector`,
      focusElCls: `${componentCls}-focused`
    })
  ];
};
const useSelectStyle = genComponentStyleHook("Select", (token2, _ref) => {
  let {
    rootPrefixCls
  } = _ref;
  const selectToken = merge(token2, {
    rootPrefixCls,
    inputPaddingHorizontalBase: token2.paddingSM - 1
  });
  return [genSelectStyle(selectToken)];
}, (token2) => ({
  zIndexPopup: token2.zIndexPopupBase + 50
}));
const sharedConfig = {
  overflow: {
    adjustX: true,
    adjustY: true,
    shiftY: true
  },
  htmlRegion: "visible"
};
const defaultBuiltInPlacements = {
  bottomLeft: Object.assign(Object.assign({}, sharedConfig), {
    points: ["tl", "bl"],
    offset: [0, 4]
  }),
  bottomRight: Object.assign(Object.assign({}, sharedConfig), {
    points: ["tr", "br"],
    offset: [0, 4]
  }),
  topLeft: Object.assign(Object.assign({}, sharedConfig), {
    points: ["bl", "tl"],
    offset: [0, -4]
  }),
  topRight: Object.assign(Object.assign({}, sharedConfig), {
    points: ["br", "tr"],
    offset: [0, -4]
  })
};
function useBuiltinPlacements(buildInPlacements) {
  return buildInPlacements || defaultBuiltInPlacements;
}
function useShowArrow(showArrow) {
  return showArrow !== null && showArrow !== void 0 ? showArrow : true;
}
var CheckOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M912 190h-69.9c-9.8 0-19.1 4.5-25.1 12.2L404.7 724.5 207 474a32 32 0 00-25.1-12.2H112c-6.7 0-10.4 7.7-6.3 12.9l273.9 347c12.8 16.2 37.4 16.2 50.3 0l488.4-618.9c4.1-5.1.4-12.8-6.3-12.8z" } }] }, "name": "check", "theme": "outlined" };
const CheckOutlinedSvg = CheckOutlined$2;
var CheckOutlined = function CheckOutlined2(props, ref) {
  return /* @__PURE__ */ React$2.createElement(AntdIcon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
    ref,
    icon: CheckOutlinedSvg
  }));
};
CheckOutlined.displayName = "CheckOutlined";
const CheckOutlined$1 = /* @__PURE__ */ React$2.forwardRef(CheckOutlined);
var DownOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z" } }] }, "name": "down", "theme": "outlined" };
const DownOutlinedSvg = DownOutlined$2;
var DownOutlined = function DownOutlined2(props, ref) {
  return /* @__PURE__ */ React$2.createElement(AntdIcon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
    ref,
    icon: DownOutlinedSvg
  }));
};
DownOutlined.displayName = "DownOutlined";
const DownOutlined$1 = /* @__PURE__ */ React$2.forwardRef(DownOutlined);
var SearchOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M909.6 854.5L649.9 594.8C690.2 542.7 712 479 712 412c0-80.2-31.3-155.4-87.9-212.1-56.6-56.7-132-87.9-212.1-87.9s-155.5 31.3-212.1 87.9C143.2 256.5 112 331.8 112 412c0 80.1 31.3 155.5 87.9 212.1C256.5 680.8 331.8 712 412 712c67 0 130.6-21.8 182.7-62l259.7 259.6a8.2 8.2 0 0011.6 0l43.6-43.5a8.2 8.2 0 000-11.6zM570.4 570.4C528 612.7 471.8 636 412 636s-116-23.3-158.4-65.6C211.3 528 188 471.8 188 412s23.3-116.1 65.6-158.4C296 211.3 352.2 188 412 188s116.1 23.2 158.4 65.6S636 352.2 636 412s-23.3 116.1-65.6 158.4z" } }] }, "name": "search", "theme": "outlined" };
const SearchOutlinedSvg = SearchOutlined$2;
var SearchOutlined = function SearchOutlined2(props, ref) {
  return /* @__PURE__ */ React$2.createElement(AntdIcon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
    ref,
    icon: SearchOutlinedSvg
  }));
};
SearchOutlined.displayName = "SearchOutlined";
const SearchOutlined$1 = /* @__PURE__ */ React$2.forwardRef(SearchOutlined);
function getIcons(_ref) {
  let {
    suffixIcon,
    clearIcon,
    menuItemSelectedIcon,
    removeIcon,
    loading,
    multiple,
    hasFeedback,
    prefixCls,
    showArrow,
    feedbackIcon
  } = _ref;
  const mergedClearIcon = clearIcon !== null && clearIcon !== void 0 ? clearIcon : /* @__PURE__ */ React$2.createElement(CloseCircleFilled$1, null);
  const getSuffixIconNode = (arrowIcon) => /* @__PURE__ */ React$2.createElement(React$2.Fragment, null, showArrow !== false && arrowIcon, hasFeedback && feedbackIcon);
  let mergedSuffixIcon = null;
  if (suffixIcon !== void 0) {
    mergedSuffixIcon = getSuffixIconNode(suffixIcon);
  } else if (loading) {
    mergedSuffixIcon = getSuffixIconNode(/* @__PURE__ */ React$2.createElement(LoadingOutlined$1, {
      spin: true
    }));
  } else {
    const iconCls = `${prefixCls}-suffix`;
    mergedSuffixIcon = (_ref2) => {
      let {
        open,
        showSearch
      } = _ref2;
      if (open && showSearch) {
        return getSuffixIconNode(/* @__PURE__ */ React$2.createElement(SearchOutlined$1, {
          className: iconCls
        }));
      }
      return getSuffixIconNode(/* @__PURE__ */ React$2.createElement(DownOutlined$1, {
        className: iconCls
      }));
    };
  }
  let mergedItemIcon = null;
  if (menuItemSelectedIcon !== void 0) {
    mergedItemIcon = menuItemSelectedIcon;
  } else if (multiple) {
    mergedItemIcon = /* @__PURE__ */ React$2.createElement(CheckOutlined$1, null);
  } else {
    mergedItemIcon = null;
  }
  let mergedRemoveIcon = null;
  if (removeIcon !== void 0) {
    mergedRemoveIcon = removeIcon;
  } else {
    mergedRemoveIcon = /* @__PURE__ */ React$2.createElement(CloseOutlined$1, null);
  }
  return {
    clearIcon: mergedClearIcon,
    suffixIcon: mergedSuffixIcon,
    itemIcon: mergedItemIcon,
    removeIcon: mergedRemoveIcon
  };
}
var autoAdjustOverflowTopBottom = {
  shiftX: 64,
  adjustY: 1
};
var autoAdjustOverflowLeftRight = {
  adjustX: 1,
  shiftY: true
};
var targetOffset$1 = [0, 0];
var placements$2 = {
  left: {
    points: ["cr", "cl"],
    overflow: autoAdjustOverflowLeftRight,
    offset: [-4, 0],
    targetOffset: targetOffset$1
  },
  right: {
    points: ["cl", "cr"],
    overflow: autoAdjustOverflowLeftRight,
    offset: [4, 0],
    targetOffset: targetOffset$1
  },
  top: {
    points: ["bc", "tc"],
    overflow: autoAdjustOverflowTopBottom,
    offset: [0, -4],
    targetOffset: targetOffset$1
  },
  bottom: {
    points: ["tc", "bc"],
    overflow: autoAdjustOverflowTopBottom,
    offset: [0, 4],
    targetOffset: targetOffset$1
  },
  topLeft: {
    points: ["bl", "tl"],
    overflow: autoAdjustOverflowTopBottom,
    offset: [0, -4],
    targetOffset: targetOffset$1
  },
  leftTop: {
    points: ["tr", "tl"],
    overflow: autoAdjustOverflowLeftRight,
    offset: [-4, 0],
    targetOffset: targetOffset$1
  },
  topRight: {
    points: ["br", "tr"],
    overflow: autoAdjustOverflowTopBottom,
    offset: [0, -4],
    targetOffset: targetOffset$1
  },
  rightTop: {
    points: ["tl", "tr"],
    overflow: autoAdjustOverflowLeftRight,
    offset: [4, 0],
    targetOffset: targetOffset$1
  },
  bottomRight: {
    points: ["tr", "br"],
    overflow: autoAdjustOverflowTopBottom,
    offset: [0, 4],
    targetOffset: targetOffset$1
  },
  rightBottom: {
    points: ["bl", "br"],
    overflow: autoAdjustOverflowLeftRight,
    offset: [4, 0],
    targetOffset: targetOffset$1
  },
  bottomLeft: {
    points: ["tl", "bl"],
    overflow: autoAdjustOverflowTopBottom,
    offset: [0, 4],
    targetOffset: targetOffset$1
  },
  leftBottom: {
    points: ["br", "bl"],
    overflow: autoAdjustOverflowLeftRight,
    offset: [-4, 0],
    targetOffset: targetOffset$1
  }
};
function Popup$1(props) {
  var children = props.children, prefixCls = props.prefixCls, id = props.id, overlayInnerStyle = props.overlayInnerStyle, className = props.className, style2 = props.style;
  return /* @__PURE__ */ React$2.createElement("div", {
    className: classNames("".concat(prefixCls, "-content"), className),
    style: style2
  }, /* @__PURE__ */ React$2.createElement("div", {
    className: "".concat(prefixCls, "-inner"),
    id,
    role: "tooltip",
    style: overlayInnerStyle
  }, typeof children === "function" ? children() : children));
}
var _excluded$c = ["overlayClassName", "trigger", "mouseEnterDelay", "mouseLeaveDelay", "overlayStyle", "prefixCls", "children", "onVisibleChange", "afterVisibleChange", "transitionName", "animation", "motion", "placement", "align", "destroyTooltipOnHide", "defaultVisible", "getTooltipContainer", "overlayInnerStyle", "arrowContent", "overlay", "id", "showArrow"];
var Tooltip$2 = function Tooltip(props, ref) {
  var overlayClassName = props.overlayClassName, _props$trigger = props.trigger, trigger = _props$trigger === void 0 ? ["hover"] : _props$trigger, _props$mouseEnterDela = props.mouseEnterDelay, mouseEnterDelay = _props$mouseEnterDela === void 0 ? 0 : _props$mouseEnterDela, _props$mouseLeaveDela = props.mouseLeaveDelay, mouseLeaveDelay = _props$mouseLeaveDela === void 0 ? 0.1 : _props$mouseLeaveDela, overlayStyle = props.overlayStyle, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-tooltip" : _props$prefixCls, children = props.children, onVisibleChange = props.onVisibleChange, afterVisibleChange = props.afterVisibleChange, transitionName = props.transitionName, animation = props.animation, motion = props.motion, _props$placement = props.placement, placement = _props$placement === void 0 ? "right" : _props$placement, _props$align = props.align, align = _props$align === void 0 ? {} : _props$align, _props$destroyTooltip = props.destroyTooltipOnHide, destroyTooltipOnHide = _props$destroyTooltip === void 0 ? false : _props$destroyTooltip, defaultVisible = props.defaultVisible, getTooltipContainer = props.getTooltipContainer, overlayInnerStyle = props.overlayInnerStyle;
  props.arrowContent;
  var overlay2 = props.overlay, id = props.id, _props$showArrow = props.showArrow, showArrow = _props$showArrow === void 0 ? true : _props$showArrow, restProps = _objectWithoutProperties(props, _excluded$c);
  var triggerRef = useRef(null);
  useImperativeHandle(ref, function() {
    return triggerRef.current;
  });
  var extraProps = _objectSpread2$1({}, restProps);
  if ("visible" in props) {
    extraProps.popupVisible = props.visible;
  }
  var getPopupElement = function getPopupElement2() {
    return /* @__PURE__ */ React$2.createElement(Popup$1, {
      key: "content",
      prefixCls,
      id,
      overlayInnerStyle
    }, overlay2);
  };
  return /* @__PURE__ */ React$2.createElement(Trigger$1, _extends$1({
    popupClassName: overlayClassName,
    prefixCls,
    popup: getPopupElement,
    action: trigger,
    builtinPlacements: placements$2,
    popupPlacement: placement,
    ref: triggerRef,
    popupAlign: align,
    getPopupContainer: getTooltipContainer,
    onPopupVisibleChange: onVisibleChange,
    afterPopupVisibleChange: afterVisibleChange,
    popupTransitionName: transitionName,
    popupAnimation: animation,
    popupMotion: motion,
    defaultPopupVisible: defaultVisible,
    autoDestroy: destroyTooltipOnHide,
    mouseLeaveDelay,
    popupStyle: overlayStyle,
    mouseEnterDelay,
    arrow: showArrow
  }, extraProps), children);
};
const Tooltip$3 = /* @__PURE__ */ forwardRef(Tooltip$2);
const getAlphaColor = (baseColor, alpha) => new TinyColor(baseColor).setAlpha(alpha).toRgbString();
const getSolidColor = (baseColor, brightness) => {
  const instance = new TinyColor(baseColor);
  return instance.lighten(brightness).toHexString();
};
const generateColorPalettes = (baseColor) => {
  const colors = generate$1(baseColor, {
    theme: "dark"
  });
  return {
    1: colors[0],
    2: colors[1],
    3: colors[2],
    4: colors[3],
    5: colors[6],
    6: colors[5],
    7: colors[4],
    8: colors[6],
    9: colors[5],
    10: colors[4]
    // 8: colors[9],
    // 9: colors[8],
    // 10: colors[7],
  };
};
const generateNeutralColorPalettes = (bgBaseColor, textBaseColor) => {
  const colorBgBase = bgBaseColor || "#000";
  const colorTextBase = textBaseColor || "#fff";
  return {
    colorBgBase,
    colorTextBase,
    colorText: getAlphaColor(colorTextBase, 0.85),
    colorTextSecondary: getAlphaColor(colorTextBase, 0.65),
    colorTextTertiary: getAlphaColor(colorTextBase, 0.45),
    colorTextQuaternary: getAlphaColor(colorTextBase, 0.25),
    colorFill: getAlphaColor(colorTextBase, 0.18),
    colorFillSecondary: getAlphaColor(colorTextBase, 0.12),
    colorFillTertiary: getAlphaColor(colorTextBase, 0.08),
    colorFillQuaternary: getAlphaColor(colorTextBase, 0.04),
    colorBgElevated: getSolidColor(colorBgBase, 12),
    colorBgContainer: getSolidColor(colorBgBase, 8),
    colorBgLayout: getSolidColor(colorBgBase, 0),
    colorBgSpotlight: getSolidColor(colorBgBase, 26),
    colorBorder: getSolidColor(colorBgBase, 26),
    colorBorderSecondary: getSolidColor(colorBgBase, 19)
  };
};
const derivative$1 = (token2, mapToken) => {
  const colorPalettes = Object.keys(defaultPresetColors).map((colorKey) => {
    const colors = generate$1(token2[colorKey], {
      theme: "dark"
    });
    return new Array(10).fill(1).reduce((prev2, _, i) => {
      prev2[`${colorKey}-${i + 1}`] = colors[i];
      prev2[`${colorKey}${i + 1}`] = colors[i];
      return prev2;
    }, {});
  }).reduce((prev2, cur) => {
    prev2 = Object.assign(Object.assign({}, prev2), cur);
    return prev2;
  }, {});
  const mergedMapToken = mapToken !== null && mapToken !== void 0 ? mapToken : derivative$2(token2);
  return Object.assign(Object.assign(Object.assign({}, mergedMapToken), colorPalettes), genColorMapToken(token2, {
    generateColorPalettes,
    generateNeutralColorPalettes
  }));
};
const darkAlgorithm = derivative$1;
function genSizeMapToken(token2) {
  const {
    sizeUnit,
    sizeStep
  } = token2;
  const compactSizeStep = sizeStep - 2;
  return {
    sizeXXL: sizeUnit * (compactSizeStep + 10),
    sizeXL: sizeUnit * (compactSizeStep + 6),
    sizeLG: sizeUnit * (compactSizeStep + 2),
    sizeMD: sizeUnit * (compactSizeStep + 2),
    sizeMS: sizeUnit * (compactSizeStep + 1),
    size: sizeUnit * compactSizeStep,
    sizeSM: sizeUnit * compactSizeStep,
    sizeXS: sizeUnit * (compactSizeStep - 1),
    sizeXXS: sizeUnit * (compactSizeStep - 1)
  };
}
const derivative = (token2, mapToken) => {
  const mergedMapToken = mapToken !== null && mapToken !== void 0 ? mapToken : derivative$2(token2);
  const fontSize = mergedMapToken.fontSizeSM;
  const controlHeight = mergedMapToken.controlHeight - 4;
  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, mergedMapToken), genSizeMapToken(mapToken !== null && mapToken !== void 0 ? mapToken : token2)), genFontMapToken$1(fontSize)), {
    // controlHeight
    controlHeight
  }), genControlHeight$1(Object.assign(Object.assign({}, mergedMapToken), {
    controlHeight
  })));
};
const compactAlgorithm = derivative;
function useToken$1() {
  const [theme2, token2, hashId] = useToken$2();
  return {
    theme: theme2,
    token: token2,
    hashId
  };
}
const theme = {
  /** @private Test Usage. Do not use in production. */
  defaultConfig,
  /** Default seedToken */
  defaultSeed: defaultConfig.token,
  useToken: useToken$1,
  defaultAlgorithm: derivative$2,
  darkAlgorithm,
  compactAlgorithm
};
const MAX_VERTICAL_CONTENT_RADIUS = 8;
function getArrowOffset(options) {
  const maxVerticalContentRadius = MAX_VERTICAL_CONTENT_RADIUS;
  const {
    contentRadius,
    limitVerticalRadius
  } = options;
  const dropdownArrowOffset = contentRadius > 12 ? contentRadius + 2 : 12;
  const dropdownArrowOffsetVertical = limitVerticalRadius ? maxVerticalContentRadius : dropdownArrowOffset;
  return {
    dropdownArrowOffset,
    dropdownArrowOffsetVertical
  };
}
function isInject(valid, code) {
  if (!valid)
    return {};
  return code;
}
function getArrowStyle(token2, options) {
  const {
    componentCls,
    sizePopupArrow,
    borderRadiusXS,
    borderRadiusOuter,
    boxShadowPopoverArrow
  } = token2;
  const {
    colorBg,
    contentRadius = token2.borderRadiusLG,
    limitVerticalRadius,
    arrowDistance = 0,
    arrowPlacement = {
      left: true,
      right: true,
      top: true,
      bottom: true
    }
  } = options;
  const {
    dropdownArrowOffsetVertical,
    dropdownArrowOffset
  } = getArrowOffset({
    contentRadius,
    limitVerticalRadius
  });
  return {
    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({
      // ============================ Basic ============================
      [`${componentCls}-arrow`]: [Object.assign(Object.assign({
        position: "absolute",
        zIndex: 1,
        display: "block"
      }, roundedArrow(sizePopupArrow, borderRadiusXS, borderRadiusOuter, colorBg, boxShadowPopoverArrow)), {
        "&:before": {
          background: colorBg
        }
      })]
    }, isInject(!!arrowPlacement.top, {
      [[`&-placement-top ${componentCls}-arrow`, `&-placement-topLeft ${componentCls}-arrow`, `&-placement-topRight ${componentCls}-arrow`].join(",")]: {
        bottom: arrowDistance,
        transform: "translateY(100%) rotate(180deg)"
      },
      [`&-placement-top ${componentCls}-arrow`]: {
        left: {
          _skip_check_: true,
          value: "50%"
        },
        transform: "translateX(-50%) translateY(100%) rotate(180deg)"
      },
      [`&-placement-topLeft ${componentCls}-arrow`]: {
        left: {
          _skip_check_: true,
          value: dropdownArrowOffset
        }
      },
      [`&-placement-topRight ${componentCls}-arrow`]: {
        right: {
          _skip_check_: true,
          value: dropdownArrowOffset
        }
      }
    })), isInject(!!arrowPlacement.bottom, {
      [[`&-placement-bottom ${componentCls}-arrow`, `&-placement-bottomLeft ${componentCls}-arrow`, `&-placement-bottomRight ${componentCls}-arrow`].join(",")]: {
        top: arrowDistance,
        transform: `translateY(-100%)`
      },
      [`&-placement-bottom ${componentCls}-arrow`]: {
        left: {
          _skip_check_: true,
          value: "50%"
        },
        transform: `translateX(-50%) translateY(-100%)`
      },
      [`&-placement-bottomLeft ${componentCls}-arrow`]: {
        left: {
          _skip_check_: true,
          value: dropdownArrowOffset
        }
      },
      [`&-placement-bottomRight ${componentCls}-arrow`]: {
        right: {
          _skip_check_: true,
          value: dropdownArrowOffset
        }
      }
    })), isInject(!!arrowPlacement.left, {
      [[`&-placement-left ${componentCls}-arrow`, `&-placement-leftTop ${componentCls}-arrow`, `&-placement-leftBottom ${componentCls}-arrow`].join(",")]: {
        right: {
          _skip_check_: true,
          value: arrowDistance
        },
        transform: "translateX(100%) rotate(90deg)"
      },
      [`&-placement-left ${componentCls}-arrow`]: {
        top: {
          _skip_check_: true,
          value: "50%"
        },
        transform: "translateY(-50%) translateX(100%) rotate(90deg)"
      },
      [`&-placement-leftTop ${componentCls}-arrow`]: {
        top: dropdownArrowOffsetVertical
      },
      [`&-placement-leftBottom ${componentCls}-arrow`]: {
        bottom: dropdownArrowOffsetVertical
      }
    })), isInject(!!arrowPlacement.right, {
      [[`&-placement-right ${componentCls}-arrow`, `&-placement-rightTop ${componentCls}-arrow`, `&-placement-rightBottom ${componentCls}-arrow`].join(",")]: {
        left: {
          _skip_check_: true,
          value: arrowDistance
        },
        transform: "translateX(-100%) rotate(-90deg)"
      },
      [`&-placement-right ${componentCls}-arrow`]: {
        top: {
          _skip_check_: true,
          value: "50%"
        },
        transform: "translateY(-50%) translateX(-100%) rotate(-90deg)"
      },
      [`&-placement-rightTop ${componentCls}-arrow`]: {
        top: dropdownArrowOffsetVertical
      },
      [`&-placement-rightBottom ${componentCls}-arrow`]: {
        bottom: dropdownArrowOffsetVertical
      }
    }))
  };
}
function getOverflowOptions(placement, arrowOffset, arrowWidth, autoAdjustOverflow2) {
  if (autoAdjustOverflow2 === false) {
    return {
      adjustX: false,
      adjustY: false
    };
  }
  const overflow = autoAdjustOverflow2 && typeof autoAdjustOverflow2 === "object" ? autoAdjustOverflow2 : {};
  const baseOverflow = {};
  switch (placement) {
    case "top":
    case "bottom":
      baseOverflow.shiftX = arrowOffset.dropdownArrowOffset * 2 + arrowWidth;
      break;
    case "left":
    case "right":
      baseOverflow.shiftY = arrowOffset.dropdownArrowOffsetVertical * 2 + arrowWidth;
      break;
  }
  const mergedOverflow = Object.assign(Object.assign({}, baseOverflow), overflow);
  if (!mergedOverflow.shiftX) {
    mergedOverflow.adjustX = true;
  }
  if (!mergedOverflow.shiftY) {
    mergedOverflow.adjustY = true;
  }
  return mergedOverflow;
}
const PlacementAlignMap = {
  left: {
    points: ["cr", "cl"]
  },
  right: {
    points: ["cl", "cr"]
  },
  top: {
    points: ["bc", "tc"]
  },
  bottom: {
    points: ["tc", "bc"]
  },
  topLeft: {
    points: ["bl", "tl"]
  },
  leftTop: {
    points: ["tr", "tl"]
  },
  topRight: {
    points: ["br", "tr"]
  },
  rightTop: {
    points: ["tl", "tr"]
  },
  bottomRight: {
    points: ["tr", "br"]
  },
  rightBottom: {
    points: ["bl", "br"]
  },
  bottomLeft: {
    points: ["tl", "bl"]
  },
  leftBottom: {
    points: ["br", "bl"]
  }
};
const ArrowCenterPlacementAlignMap = {
  topLeft: {
    points: ["bl", "tc"]
  },
  leftTop: {
    points: ["tr", "cl"]
  },
  topRight: {
    points: ["br", "tc"]
  },
  rightTop: {
    points: ["tl", "cr"]
  },
  bottomRight: {
    points: ["tr", "bc"]
  },
  rightBottom: {
    points: ["bl", "cr"]
  },
  bottomLeft: {
    points: ["tl", "bc"]
  },
  leftBottom: {
    points: ["br", "cl"]
  }
};
const DisableAutoArrowList = /* @__PURE__ */ new Set(["topLeft", "topRight", "bottomLeft", "bottomRight", "leftTop", "leftBottom", "rightTop", "rightBottom"]);
function getPlacements(config) {
  const {
    arrowWidth,
    autoAdjustOverflow: autoAdjustOverflow2,
    arrowPointAtCenter,
    offset: offset2,
    borderRadius
  } = config;
  const halfArrowWidth = arrowWidth / 2;
  const placementMap = {};
  Object.keys(PlacementAlignMap).forEach((key) => {
    const template = arrowPointAtCenter && ArrowCenterPlacementAlignMap[key] || PlacementAlignMap[key];
    const placementInfo = Object.assign(Object.assign({}, template), {
      offset: [0, 0]
    });
    placementMap[key] = placementInfo;
    if (DisableAutoArrowList.has(key)) {
      placementInfo.autoArrow = false;
    }
    switch (key) {
      case "top":
      case "topLeft":
      case "topRight":
        placementInfo.offset[1] = -halfArrowWidth - offset2;
        break;
      case "bottom":
      case "bottomLeft":
      case "bottomRight":
        placementInfo.offset[1] = halfArrowWidth + offset2;
        break;
      case "left":
      case "leftTop":
      case "leftBottom":
        placementInfo.offset[0] = -halfArrowWidth - offset2;
        break;
      case "right":
      case "rightTop":
      case "rightBottom":
        placementInfo.offset[0] = halfArrowWidth + offset2;
        break;
    }
    const arrowOffset = getArrowOffset({
      contentRadius: borderRadius,
      limitVerticalRadius: true
    });
    if (arrowPointAtCenter) {
      switch (key) {
        case "topLeft":
        case "bottomLeft":
          placementInfo.offset[0] = -arrowOffset.dropdownArrowOffset - halfArrowWidth;
          break;
        case "topRight":
        case "bottomRight":
          placementInfo.offset[0] = arrowOffset.dropdownArrowOffset + halfArrowWidth;
          break;
        case "leftTop":
        case "rightTop":
          placementInfo.offset[1] = -arrowOffset.dropdownArrowOffset - halfArrowWidth;
          break;
        case "leftBottom":
        case "rightBottom":
          placementInfo.offset[1] = arrowOffset.dropdownArrowOffset + halfArrowWidth;
          break;
      }
    }
    placementInfo.overflow = getOverflowOptions(key, arrowOffset, arrowWidth, autoAdjustOverflow2);
  });
  return placementMap;
}
const genTooltipStyle = (token2) => {
  const {
    componentCls,
    // ant-tooltip
    tooltipMaxWidth,
    tooltipColor,
    tooltipBg,
    tooltipBorderRadius,
    zIndexPopup,
    controlHeight,
    boxShadowSecondary,
    paddingSM,
    paddingXS,
    tooltipRadiusOuter
  } = token2;
  return [
    {
      [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token2)), {
        position: "absolute",
        zIndex: zIndexPopup,
        display: "block",
        width: "max-content",
        maxWidth: tooltipMaxWidth,
        visibility: "visible",
        "&-hidden": {
          display: "none"
        },
        "--antd-arrow-background-color": tooltipBg,
        // Wrapper for the tooltip content
        [`${componentCls}-inner`]: {
          minWidth: controlHeight,
          minHeight: controlHeight,
          padding: `${paddingSM / 2}px ${paddingXS}px`,
          color: tooltipColor,
          textAlign: "start",
          textDecoration: "none",
          wordWrap: "break-word",
          backgroundColor: tooltipBg,
          borderRadius: tooltipBorderRadius,
          boxShadow: boxShadowSecondary
        },
        // Limit left and right placement radius
        [[`&-placement-left`, `&-placement-leftTop`, `&-placement-leftBottom`, `&-placement-right`, `&-placement-rightTop`, `&-placement-rightBottom`].join(",")]: {
          [`${componentCls}-inner`]: {
            borderRadius: Math.min(tooltipBorderRadius, MAX_VERTICAL_CONTENT_RADIUS)
          }
        },
        [`${componentCls}-content`]: {
          position: "relative"
        }
      }), genPresetColor(token2, (colorKey, _ref) => {
        let {
          darkColor
        } = _ref;
        return {
          [`&${componentCls}-${colorKey}`]: {
            [`${componentCls}-inner`]: {
              backgroundColor: darkColor
            },
            [`${componentCls}-arrow`]: {
              "--antd-arrow-background-color": darkColor
            }
          }
        };
      })), {
        // RTL
        "&-rtl": {
          direction: "rtl"
        }
      })
    },
    // Arrow Style
    getArrowStyle(merge(token2, {
      borderRadiusOuter: tooltipRadiusOuter
    }), {
      colorBg: "var(--antd-arrow-background-color)",
      contentRadius: tooltipBorderRadius,
      limitVerticalRadius: true
    }),
    // Pure Render
    {
      [`${componentCls}-pure`]: {
        position: "relative",
        maxWidth: "none",
        margin: token2.sizePopupArrow
      }
    }
  ];
};
const useStyle$4 = (prefixCls, injectStyle) => {
  const useOriginHook = genComponentStyleHook("Tooltip", (token2) => {
    if (injectStyle === false) {
      return [];
    }
    const {
      borderRadius,
      colorTextLightSolid,
      colorBgDefault,
      borderRadiusOuter
    } = token2;
    const TooltipToken = merge(token2, {
      // default variables
      tooltipMaxWidth: 250,
      tooltipColor: colorTextLightSolid,
      tooltipBorderRadius: borderRadius,
      tooltipBg: colorBgDefault,
      tooltipRadiusOuter: borderRadiusOuter > 4 ? 4 : borderRadiusOuter
    });
    return [genTooltipStyle(TooltipToken), initZoomMotion(token2, "zoom-big-fast")];
  }, (_ref2) => {
    let {
      zIndexPopupBase,
      colorBgSpotlight
    } = _ref2;
    return {
      zIndexPopup: zIndexPopupBase + 70,
      colorBgDefault: colorBgSpotlight
    };
  });
  return useOriginHook(prefixCls);
};
const inverseColors = PresetColors.map((color) => `${color}-inverse`);
function isPresetColor(color) {
  let includeInverse = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  if (includeInverse) {
    return [].concat(_toConsumableArray(inverseColors), _toConsumableArray(PresetColors)).includes(color);
  }
  return PresetColors.includes(color);
}
function parseColor(prefixCls, color) {
  const isInternalColor = isPresetColor(color);
  const className = classNames({
    [`${prefixCls}-${color}`]: color && isInternalColor
  });
  const overlayStyle = {};
  const arrowStyle = {};
  if (color && !isInternalColor) {
    overlayStyle.background = color;
    arrowStyle["--antd-arrow-background-color"] = color;
  }
  return {
    className,
    overlayStyle,
    arrowStyle
  };
}
function PurePanel$2(props) {
  const {
    prefixCls: customizePrefixCls,
    className,
    placement = "top",
    title,
    color,
    overlayInnerStyle
  } = props;
  const {
    getPrefixCls
  } = React$2.useContext(ConfigContext);
  const prefixCls = getPrefixCls("tooltip", customizePrefixCls);
  const [wrapSSR, hashId] = useStyle$4(prefixCls, true);
  const colorInfo = parseColor(prefixCls, color);
  const formattedOverlayInnerStyle = Object.assign(Object.assign({}, overlayInnerStyle), colorInfo.overlayStyle);
  const arrowContentStyle = colorInfo.arrowStyle;
  return wrapSSR(/* @__PURE__ */ React$2.createElement("div", {
    className: classNames(hashId, prefixCls, `${prefixCls}-pure`, `${prefixCls}-placement-${placement}`, className, colorInfo.className),
    style: arrowContentStyle
  }, /* @__PURE__ */ React$2.createElement("div", {
    className: `${prefixCls}-arrow`
  }), /* @__PURE__ */ React$2.createElement(Popup$1, Object.assign({}, props, {
    className: hashId,
    prefixCls,
    overlayInnerStyle: formattedOverlayInnerStyle
  }), title)));
}
var __rest$a = globalThis && globalThis.__rest || function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
const {
  useToken
} = theme;
const splitObject = (obj, keys) => {
  const picked = {};
  const omitted = Object.assign({}, obj);
  keys.forEach((key) => {
    if (obj && key in obj) {
      picked[key] = obj[key];
      delete omitted[key];
    }
  });
  return {
    picked,
    omitted
  };
};
function getDisabledCompatibleChildren(element, prefixCls) {
  const elementType = element.type;
  if ((elementType.__ANT_BUTTON === true || element.type === "button") && element.props.disabled || elementType.__ANT_SWITCH === true && (element.props.disabled || element.props.loading) || elementType.__ANT_RADIO === true && element.props.disabled) {
    const {
      picked,
      omitted
    } = splitObject(element.props.style, ["position", "left", "right", "top", "bottom", "float", "display", "zIndex"]);
    const spanStyle = Object.assign(Object.assign({
      display: "inline-block"
    }, picked), {
      cursor: "not-allowed",
      width: element.props.block ? "100%" : void 0
    });
    const buttonStyle = Object.assign(Object.assign({}, omitted), {
      pointerEvents: "none"
    });
    const child = cloneElement(element, {
      style: buttonStyle,
      className: null
    });
    return /* @__PURE__ */ React$2.createElement("span", {
      style: spanStyle,
      className: classNames(element.props.className, `${prefixCls}-disabled-compatible-wrapper`)
    }, child);
  }
  return element;
}
const Tooltip2 = /* @__PURE__ */ React$2.forwardRef((props, ref) => {
  var _a, _b;
  const {
    prefixCls: customizePrefixCls,
    openClassName,
    getTooltipContainer,
    overlayClassName,
    color,
    overlayInnerStyle,
    children,
    afterOpenChange,
    afterVisibleChange,
    destroyTooltipOnHide,
    arrow = true,
    title,
    overlay: overlay2,
    builtinPlacements,
    arrowPointAtCenter = false,
    autoAdjustOverflow: autoAdjustOverflow2 = true
  } = props;
  const mergedShowArrow = !!arrow;
  const {
    token: token2
  } = useToken();
  const {
    getPopupContainer: getContextPopupContainer,
    getPrefixCls,
    direction
  } = React$2.useContext(ConfigContext);
  const tooltipRef = React$2.useRef(null);
  const forceAlign = () => {
    var _a2;
    (_a2 = tooltipRef.current) === null || _a2 === void 0 ? void 0 : _a2.forceAlign();
  };
  React$2.useImperativeHandle(ref, () => ({
    forceAlign,
    forcePopupAlign: () => {
      process.env.NODE_ENV !== "production" ? warning$2(false, "Tooltip", "`forcePopupAlign` is align to `forceAlign` instead.") : void 0;
      forceAlign();
    }
  }));
  if (process.env.NODE_ENV !== "production") {
    [["visible", "open"], ["defaultVisible", "defaultOpen"], ["onVisibleChange", "onOpenChange"], ["afterVisibleChange", "afterOpenChange"], ["arrowPointAtCenter", "arrow"]].forEach((_ref) => {
      let [deprecatedName, newName] = _ref;
      process.env.NODE_ENV !== "production" ? warning$2(!(deprecatedName in props), "Tooltip", `\`${deprecatedName}\` is deprecated, please use \`${newName}\` instead.`) : void 0;
    });
    process.env.NODE_ENV !== "production" ? warning$2(!destroyTooltipOnHide || typeof destroyTooltipOnHide === "boolean", "Tooltip", "`destroyTooltipOnHide` no need config `keepParent` anymore. Please use `boolean` value directly.") : void 0;
    process.env.NODE_ENV !== "production" ? warning$2(!arrow || typeof arrow === "boolean" || !("arrowPointAtCenter" in arrow), "Tooltip", "`arrowPointAtCenter` in `arrow` is deprecated, please use `pointAtCenter` instead.") : void 0;
  }
  const [open, setOpen] = useMergedState(false, {
    value: (_a = props.open) !== null && _a !== void 0 ? _a : props.visible,
    defaultValue: (_b = props.defaultOpen) !== null && _b !== void 0 ? _b : props.defaultVisible
  });
  const noTitle = !title && !overlay2 && title !== 0;
  const onOpenChange = (vis) => {
    var _a2, _b2;
    setOpen(noTitle ? false : vis);
    if (!noTitle) {
      (_a2 = props.onOpenChange) === null || _a2 === void 0 ? void 0 : _a2.call(props, vis);
      (_b2 = props.onVisibleChange) === null || _b2 === void 0 ? void 0 : _b2.call(props, vis);
    }
  };
  const tooltipPlacements = React$2.useMemo(() => {
    var _a2, _b2;
    let mergedArrowPointAtCenter = arrowPointAtCenter;
    if (typeof arrow === "object") {
      mergedArrowPointAtCenter = (_b2 = (_a2 = arrow.pointAtCenter) !== null && _a2 !== void 0 ? _a2 : arrow.arrowPointAtCenter) !== null && _b2 !== void 0 ? _b2 : arrowPointAtCenter;
    }
    return builtinPlacements || getPlacements({
      arrowPointAtCenter: mergedArrowPointAtCenter,
      autoAdjustOverflow: autoAdjustOverflow2,
      arrowWidth: mergedShowArrow ? token2.sizePopupArrow : 0,
      borderRadius: token2.borderRadius,
      offset: token2.marginXXS
    });
  }, [arrowPointAtCenter, arrow, builtinPlacements, token2]);
  const onPopupAlign = (domNode, align) => {
    const placement2 = Object.keys(tooltipPlacements).find((key) => {
      var _a2, _b2;
      return tooltipPlacements[key].points[0] === ((_a2 = align.points) === null || _a2 === void 0 ? void 0 : _a2[0]) && tooltipPlacements[key].points[1] === ((_b2 = align.points) === null || _b2 === void 0 ? void 0 : _b2[1]);
    });
    if (placement2) {
      const rect = domNode.getBoundingClientRect();
      const transformOrigin = {
        top: "50%",
        left: "50%"
      };
      if (/top|Bottom/.test(placement2)) {
        transformOrigin.top = `${rect.height - align.offset[1]}px`;
      } else if (/Top|bottom/.test(placement2)) {
        transformOrigin.top = `${-align.offset[1]}px`;
      }
      if (/left|Right/.test(placement2)) {
        transformOrigin.left = `${rect.width - align.offset[0]}px`;
      } else if (/right|Left/.test(placement2)) {
        transformOrigin.left = `${-align.offset[0]}px`;
      }
      domNode.style.transformOrigin = `${transformOrigin.left} ${transformOrigin.top}`;
    }
  };
  const memoOverlay = React$2.useMemo(() => {
    if (title === 0) {
      return title;
    }
    return overlay2 || title || "";
  }, [overlay2, title]);
  const memoOverlayWrapper = /* @__PURE__ */ React$2.createElement(NoCompactStyle, null, typeof memoOverlay === "function" ? memoOverlay() : memoOverlay);
  const {
    getPopupContainer,
    placement = "top",
    mouseEnterDelay = 0.1,
    mouseLeaveDelay = 0.1,
    overlayStyle,
    rootClassName
  } = props, otherProps = __rest$a(props, ["getPopupContainer", "placement", "mouseEnterDelay", "mouseLeaveDelay", "overlayStyle", "rootClassName"]);
  const prefixCls = getPrefixCls("tooltip", customizePrefixCls);
  const rootPrefixCls = getPrefixCls();
  const injectFromPopover = props["data-popover-inject"];
  let tempOpen = open;
  if (!("open" in props) && !("visible" in props) && noTitle) {
    tempOpen = false;
  }
  const child = getDisabledCompatibleChildren(isValidElement(children) && !isFragment(children) ? children : /* @__PURE__ */ React$2.createElement("span", null, children), prefixCls);
  const childProps = child.props;
  const childCls = !childProps.className || typeof childProps.className === "string" ? classNames(childProps.className, {
    [openClassName || `${prefixCls}-open`]: true
  }) : childProps.className;
  const [wrapSSR, hashId] = useStyle$4(prefixCls, !injectFromPopover);
  const colorInfo = parseColor(prefixCls, color);
  const formattedOverlayInnerStyle = Object.assign(Object.assign({}, overlayInnerStyle), colorInfo.overlayStyle);
  const arrowContentStyle = colorInfo.arrowStyle;
  const customOverlayClassName = classNames(overlayClassName, {
    [`${prefixCls}-rtl`]: direction === "rtl"
  }, colorInfo.className, rootClassName, hashId);
  return wrapSSR(/* @__PURE__ */ React$2.createElement(Tooltip$3, Object.assign({}, otherProps, {
    showArrow: mergedShowArrow,
    placement,
    mouseEnterDelay,
    mouseLeaveDelay,
    prefixCls,
    overlayClassName: customOverlayClassName,
    overlayStyle: Object.assign(Object.assign({}, arrowContentStyle), overlayStyle),
    getTooltipContainer: getPopupContainer || getTooltipContainer || getContextPopupContainer,
    ref: tooltipRef,
    builtinPlacements: tooltipPlacements,
    overlay: memoOverlayWrapper,
    visible: tempOpen,
    onVisibleChange: onOpenChange,
    afterVisibleChange: afterOpenChange !== null && afterOpenChange !== void 0 ? afterOpenChange : afterVisibleChange,
    onPopupAlign,
    overlayInnerStyle: formattedOverlayInnerStyle,
    arrowContent: /* @__PURE__ */ React$2.createElement("span", {
      className: `${prefixCls}-arrow-content`
    }),
    motion: {
      motionName: getTransitionName$1(rootPrefixCls, "zoom-big-fast", props.transitionName),
      motionDeadline: 1e3
    },
    destroyTooltipOnHide: !!destroyTooltipOnHide
  }), tempOpen ? cloneElement(child, {
    className: childCls
  }) : child));
});
if (process.env.NODE_ENV !== "production") {
  Tooltip2.displayName = "Tooltip";
}
Tooltip2._InternalPanelDoNotUseOrYouWillBeFired = PurePanel$2;
const Tooltip$1 = Tooltip2;
var RightOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M765.7 486.8L314.9 134.7A7.97 7.97 0 00302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 000-50.4z" } }] }, "name": "right", "theme": "outlined" };
const RightOutlinedSvg = RightOutlined$2;
var RightOutlined = function RightOutlined2(props, ref) {
  return /* @__PURE__ */ React$2.createElement(AntdIcon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
    ref,
    icon: RightOutlinedSvg
  }));
};
RightOutlined.displayName = "RightOutlined";
const RightOutlined$1 = /* @__PURE__ */ React$2.forwardRef(RightOutlined);
var Portal = /* @__PURE__ */ forwardRef(function(props, ref) {
  var didUpdate = props.didUpdate, getContainer2 = props.getContainer, children = props.children;
  var parentRef = useRef();
  var containerRef = useRef();
  useImperativeHandle(ref, function() {
    return {};
  });
  var initRef = useRef(false);
  if (!initRef.current && canUseDom()) {
    containerRef.current = getContainer2();
    parentRef.current = containerRef.current.parentNode;
    initRef.current = true;
  }
  useEffect(function() {
    didUpdate === null || didUpdate === void 0 ? void 0 : didUpdate(props);
  });
  useEffect(function() {
    if (containerRef.current.parentNode === null && parentRef.current !== null) {
      parentRef.current.appendChild(containerRef.current);
    }
    return function() {
      var _containerRef$current, _containerRef$current2;
      (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : (_containerRef$current2 = _containerRef$current.parentNode) === null || _containerRef$current2 === void 0 ? void 0 : _containerRef$current2.removeChild(containerRef.current);
    };
  }, []);
  return containerRef.current ? /* @__PURE__ */ ReactDOM__default.createPortal(children, containerRef.current) : null;
});
function isPointsEq(a1, a2, isAlignPoint) {
  if (isAlignPoint) {
    return a1[0] === a2[0];
  }
  return a1[0] === a2[0] && a1[1] === a2[1];
}
function getAlignFromPlacement(builtinPlacements, placementStr, align) {
  var baseAlign = builtinPlacements[placementStr] || {};
  return _objectSpread2$1(_objectSpread2$1({}, baseAlign), align);
}
function getAlignPopupClassName(builtinPlacements, prefixCls, align, isAlignPoint) {
  var points = align.points;
  var placements2 = Object.keys(builtinPlacements);
  for (var i = 0; i < placements2.length; i += 1) {
    var placement = placements2[i];
    if (isPointsEq(builtinPlacements[placement].points, points, isAlignPoint)) {
      return "".concat(prefixCls, "-placement-").concat(placement);
    }
  }
  return "";
}
function getMotion$1(_ref) {
  var prefixCls = _ref.prefixCls, motion = _ref.motion, animation = _ref.animation, transitionName = _ref.transitionName;
  if (motion) {
    return motion;
  }
  if (animation) {
    return {
      motionName: "".concat(prefixCls, "-").concat(animation)
    };
  }
  if (transitionName) {
    return {
      motionName: transitionName
    };
  }
  return null;
}
function Mask(props) {
  var prefixCls = props.prefixCls, visible = props.visible, zIndex = props.zIndex, mask = props.mask, maskMotion = props.maskMotion, maskAnimation = props.maskAnimation, maskTransitionName = props.maskTransitionName;
  if (!mask) {
    return null;
  }
  var motion = {};
  if (maskMotion || maskTransitionName || maskAnimation) {
    motion = _objectSpread2$1({
      motionAppear: true
    }, getMotion$1({
      motion: maskMotion,
      prefixCls,
      transitionName: maskTransitionName,
      animation: maskAnimation
    }));
  }
  return /* @__PURE__ */ React$2.createElement(CSSMotion, _extends$1({}, motion, {
    visible,
    removeOnLeave: true
  }), function(_ref) {
    var className = _ref.className;
    return /* @__PURE__ */ React$2.createElement("div", {
      style: {
        zIndex
      },
      className: classNames("".concat(prefixCls, "-mask"), className)
    });
  });
}
function ownKeys$1(object4, enumerableOnly) {
  var keys = Object.keys(object4);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object4);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object4, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys$1(Object(source), true).forEach(function(key) {
      _defineProperty$2(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _typeof$2(obj) {
  "@babel/helpers - typeof";
  return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$2(obj);
}
function _defineProperty$2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var vendorPrefix;
var jsCssMap = {
  Webkit: "-webkit-",
  Moz: "-moz-",
  // IE did it wrong again ...
  ms: "-ms-",
  O: "-o-"
};
function getVendorPrefix() {
  if (vendorPrefix !== void 0) {
    return vendorPrefix;
  }
  vendorPrefix = "";
  var style2 = document.createElement("p").style;
  var testProp = "Transform";
  for (var key in jsCssMap) {
    if (key + testProp in style2) {
      vendorPrefix = key;
    }
  }
  return vendorPrefix;
}
function getTransitionName() {
  return getVendorPrefix() ? "".concat(getVendorPrefix(), "TransitionProperty") : "transitionProperty";
}
function getTransformName() {
  return getVendorPrefix() ? "".concat(getVendorPrefix(), "Transform") : "transform";
}
function setTransitionProperty(node2, value) {
  var name = getTransitionName();
  if (name) {
    node2.style[name] = value;
    if (name !== "transitionProperty") {
      node2.style.transitionProperty = value;
    }
  }
}
function setTransform(node2, value) {
  var name = getTransformName();
  if (name) {
    node2.style[name] = value;
    if (name !== "transform") {
      node2.style.transform = value;
    }
  }
}
function getTransitionProperty(node2) {
  return node2.style.transitionProperty || node2.style[getTransitionName()];
}
function getTransformXY(node2) {
  var style2 = window.getComputedStyle(node2, null);
  var transform = style2.getPropertyValue("transform") || style2.getPropertyValue(getTransformName());
  if (transform && transform !== "none") {
    var matrix = transform.replace(/[^0-9\-.,]/g, "").split(",");
    return {
      x: parseFloat(matrix[12] || matrix[4], 0),
      y: parseFloat(matrix[13] || matrix[5], 0)
    };
  }
  return {
    x: 0,
    y: 0
  };
}
var matrix2d = /matrix\((.*)\)/;
var matrix3d = /matrix3d\((.*)\)/;
function setTransformXY(node2, xy) {
  var style2 = window.getComputedStyle(node2, null);
  var transform = style2.getPropertyValue("transform") || style2.getPropertyValue(getTransformName());
  if (transform && transform !== "none") {
    var arr;
    var match2d = transform.match(matrix2d);
    if (match2d) {
      match2d = match2d[1];
      arr = match2d.split(",").map(function(item) {
        return parseFloat(item, 10);
      });
      arr[4] = xy.x;
      arr[5] = xy.y;
      setTransform(node2, "matrix(".concat(arr.join(","), ")"));
    } else {
      var match3d = transform.match(matrix3d)[1];
      arr = match3d.split(",").map(function(item) {
        return parseFloat(item, 10);
      });
      arr[12] = xy.x;
      arr[13] = xy.y;
      setTransform(node2, "matrix3d(".concat(arr.join(","), ")"));
    }
  } else {
    setTransform(node2, "translateX(".concat(xy.x, "px) translateY(").concat(xy.y, "px) translateZ(0)"));
  }
}
var RE_NUM = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;
var getComputedStyleX;
function forceRelayout(elem) {
  var originalStyle = elem.style.display;
  elem.style.display = "none";
  elem.offsetHeight;
  elem.style.display = originalStyle;
}
function css(el, name, v) {
  var value = v;
  if (_typeof$2(name) === "object") {
    for (var i in name) {
      if (name.hasOwnProperty(i)) {
        css(el, i, name[i]);
      }
    }
    return void 0;
  }
  if (typeof value !== "undefined") {
    if (typeof value === "number") {
      value = "".concat(value, "px");
    }
    el.style[name] = value;
    return void 0;
  }
  return getComputedStyleX(el, name);
}
function getClientPosition(elem) {
  var box;
  var x;
  var y;
  var doc = elem.ownerDocument;
  var body = doc.body;
  var docElem = doc && doc.documentElement;
  box = elem.getBoundingClientRect();
  x = Math.floor(box.left);
  y = Math.floor(box.top);
  x -= docElem.clientLeft || body.clientLeft || 0;
  y -= docElem.clientTop || body.clientTop || 0;
  return {
    left: x,
    top: y
  };
}
function getScroll(w, top) {
  var ret = w["page".concat(top ? "Y" : "X", "Offset")];
  var method4 = "scroll".concat(top ? "Top" : "Left");
  if (typeof ret !== "number") {
    var d = w.document;
    ret = d.documentElement[method4];
    if (typeof ret !== "number") {
      ret = d.body[method4];
    }
  }
  return ret;
}
function getScrollLeft(w) {
  return getScroll(w);
}
function getScrollTop(w) {
  return getScroll(w, true);
}
function getOffset$1(el) {
  var pos = getClientPosition(el);
  var doc = el.ownerDocument;
  var w = doc.defaultView || doc.parentWindow;
  pos.left += getScrollLeft(w);
  pos.top += getScrollTop(w);
  return pos;
}
function isWindow(obj) {
  return obj !== null && obj !== void 0 && obj == obj.window;
}
function getDocument(node2) {
  if (isWindow(node2)) {
    return node2.document;
  }
  if (node2.nodeType === 9) {
    return node2;
  }
  return node2.ownerDocument;
}
function _getComputedStyle(elem, name, cs) {
  var computedStyle = cs;
  var val = "";
  var d = getDocument(elem);
  computedStyle = computedStyle || d.defaultView.getComputedStyle(elem, null);
  if (computedStyle) {
    val = computedStyle.getPropertyValue(name) || computedStyle[name];
  }
  return val;
}
var _RE_NUM_NO_PX = new RegExp("^(".concat(RE_NUM, ")(?!px)[a-z%]+$"), "i");
var RE_POS = /^(top|right|bottom|left)$/;
var CURRENT_STYLE = "currentStyle";
var RUNTIME_STYLE = "runtimeStyle";
var LEFT$1 = "left";
var PX = "px";
function _getComputedStyleIE(elem, name) {
  var ret = elem[CURRENT_STYLE] && elem[CURRENT_STYLE][name];
  if (_RE_NUM_NO_PX.test(ret) && !RE_POS.test(name)) {
    var style2 = elem.style;
    var left = style2[LEFT$1];
    var rsLeft = elem[RUNTIME_STYLE][LEFT$1];
    elem[RUNTIME_STYLE][LEFT$1] = elem[CURRENT_STYLE][LEFT$1];
    style2[LEFT$1] = name === "fontSize" ? "1em" : ret || 0;
    ret = style2.pixelLeft + PX;
    style2[LEFT$1] = left;
    elem[RUNTIME_STYLE][LEFT$1] = rsLeft;
  }
  return ret === "" ? "auto" : ret;
}
if (typeof window !== "undefined") {
  getComputedStyleX = window.getComputedStyle ? _getComputedStyle : _getComputedStyleIE;
}
function getOffsetDirection(dir, option) {
  if (dir === "left") {
    return option.useCssRight ? "right" : dir;
  }
  return option.useCssBottom ? "bottom" : dir;
}
function oppositeOffsetDirection(dir) {
  if (dir === "left") {
    return "right";
  } else if (dir === "right") {
    return "left";
  } else if (dir === "top") {
    return "bottom";
  } else if (dir === "bottom") {
    return "top";
  }
}
function setLeftTop(elem, offset2, option) {
  if (css(elem, "position") === "static") {
    elem.style.position = "relative";
  }
  var presetH = -999;
  var presetV = -999;
  var horizontalProperty = getOffsetDirection("left", option);
  var verticalProperty = getOffsetDirection("top", option);
  var oppositeHorizontalProperty = oppositeOffsetDirection(horizontalProperty);
  var oppositeVerticalProperty = oppositeOffsetDirection(verticalProperty);
  if (horizontalProperty !== "left") {
    presetH = 999;
  }
  if (verticalProperty !== "top") {
    presetV = 999;
  }
  var originalTransition = "";
  var originalOffset = getOffset$1(elem);
  if ("left" in offset2 || "top" in offset2) {
    originalTransition = getTransitionProperty(elem) || "";
    setTransitionProperty(elem, "none");
  }
  if ("left" in offset2) {
    elem.style[oppositeHorizontalProperty] = "";
    elem.style[horizontalProperty] = "".concat(presetH, "px");
  }
  if ("top" in offset2) {
    elem.style[oppositeVerticalProperty] = "";
    elem.style[verticalProperty] = "".concat(presetV, "px");
  }
  forceRelayout(elem);
  var old = getOffset$1(elem);
  var originalStyle = {};
  for (var key in offset2) {
    if (offset2.hasOwnProperty(key)) {
      var dir = getOffsetDirection(key, option);
      var preset = key === "left" ? presetH : presetV;
      var off = originalOffset[key] - old[key];
      if (dir === key) {
        originalStyle[dir] = preset + off;
      } else {
        originalStyle[dir] = preset - off;
      }
    }
  }
  css(elem, originalStyle);
  forceRelayout(elem);
  if ("left" in offset2 || "top" in offset2) {
    setTransitionProperty(elem, originalTransition);
  }
  var ret = {};
  for (var _key in offset2) {
    if (offset2.hasOwnProperty(_key)) {
      var _dir = getOffsetDirection(_key, option);
      var _off = offset2[_key] - originalOffset[_key];
      if (_key === _dir) {
        ret[_dir] = originalStyle[_dir] + _off;
      } else {
        ret[_dir] = originalStyle[_dir] - _off;
      }
    }
  }
  css(elem, ret);
}
function setTransform$1(elem, offset2) {
  var originalOffset = getOffset$1(elem);
  var originalXY = getTransformXY(elem);
  var resultXY = {
    x: originalXY.x,
    y: originalXY.y
  };
  if ("left" in offset2) {
    resultXY.x = originalXY.x + offset2.left - originalOffset.left;
  }
  if ("top" in offset2) {
    resultXY.y = originalXY.y + offset2.top - originalOffset.top;
  }
  setTransformXY(elem, resultXY);
}
function setOffset(elem, offset2, option) {
  if (option.ignoreShake) {
    var oriOffset = getOffset$1(elem);
    var oLeft = oriOffset.left.toFixed(0);
    var oTop = oriOffset.top.toFixed(0);
    var tLeft = offset2.left.toFixed(0);
    var tTop = offset2.top.toFixed(0);
    if (oLeft === tLeft && oTop === tTop) {
      return;
    }
  }
  if (option.useCssRight || option.useCssBottom) {
    setLeftTop(elem, offset2, option);
  } else if (option.useCssTransform && getTransformName() in document.body.style) {
    setTransform$1(elem, offset2);
  } else {
    setLeftTop(elem, offset2, option);
  }
}
function each(arr, fn) {
  for (var i = 0; i < arr.length; i++) {
    fn(arr[i]);
  }
}
function isBorderBoxFn(elem) {
  return getComputedStyleX(elem, "boxSizing") === "border-box";
}
var BOX_MODELS = ["margin", "border", "padding"];
var CONTENT_INDEX = -1;
var PADDING_INDEX = 2;
var BORDER_INDEX = 1;
var MARGIN_INDEX = 0;
function swap(elem, options, callback) {
  var old = {};
  var style2 = elem.style;
  var name;
  for (name in options) {
    if (options.hasOwnProperty(name)) {
      old[name] = style2[name];
      style2[name] = options[name];
    }
  }
  callback.call(elem);
  for (name in options) {
    if (options.hasOwnProperty(name)) {
      style2[name] = old[name];
    }
  }
}
function getPBMWidth(elem, props, which) {
  var value = 0;
  var prop;
  var j;
  var i;
  for (j = 0; j < props.length; j++) {
    prop = props[j];
    if (prop) {
      for (i = 0; i < which.length; i++) {
        var cssProp = void 0;
        if (prop === "border") {
          cssProp = "".concat(prop).concat(which[i], "Width");
        } else {
          cssProp = prop + which[i];
        }
        value += parseFloat(getComputedStyleX(elem, cssProp)) || 0;
      }
    }
  }
  return value;
}
var domUtils = {
  getParent: function getParent(element) {
    var parent = element;
    do {
      if (parent.nodeType === 11 && parent.host) {
        parent = parent.host;
      } else {
        parent = parent.parentNode;
      }
    } while (parent && parent.nodeType !== 1 && parent.nodeType !== 9);
    return parent;
  }
};
each(["Width", "Height"], function(name) {
  domUtils["doc".concat(name)] = function(refWin) {
    var d = refWin.document;
    return Math.max(
      // firefox chrome documentElement.scrollHeight< body.scrollHeight
      // ie standard mode : documentElement.scrollHeight> body.scrollHeight
      d.documentElement["scroll".concat(name)],
      // quirks : documentElement.scrollHeight 最大等于可视窗口多一点？
      d.body["scroll".concat(name)],
      domUtils["viewport".concat(name)](d)
    );
  };
  domUtils["viewport".concat(name)] = function(win) {
    var prop = "client".concat(name);
    var doc = win.document;
    var body = doc.body;
    var documentElement = doc.documentElement;
    var documentElementProp = documentElement[prop];
    return doc.compatMode === "CSS1Compat" && documentElementProp || body && body[prop] || documentElementProp;
  };
});
function getWH(elem, name, ex) {
  var extra = ex;
  if (isWindow(elem)) {
    return name === "width" ? domUtils.viewportWidth(elem) : domUtils.viewportHeight(elem);
  } else if (elem.nodeType === 9) {
    return name === "width" ? domUtils.docWidth(elem) : domUtils.docHeight(elem);
  }
  var which = name === "width" ? ["Left", "Right"] : ["Top", "Bottom"];
  var borderBoxValue = name === "width" ? Math.floor(elem.getBoundingClientRect().width) : Math.floor(elem.getBoundingClientRect().height);
  var isBorderBox = isBorderBoxFn(elem);
  var cssBoxValue = 0;
  if (borderBoxValue === null || borderBoxValue === void 0 || borderBoxValue <= 0) {
    borderBoxValue = void 0;
    cssBoxValue = getComputedStyleX(elem, name);
    if (cssBoxValue === null || cssBoxValue === void 0 || Number(cssBoxValue) < 0) {
      cssBoxValue = elem.style[name] || 0;
    }
    cssBoxValue = Math.floor(parseFloat(cssBoxValue)) || 0;
  }
  if (extra === void 0) {
    extra = isBorderBox ? BORDER_INDEX : CONTENT_INDEX;
  }
  var borderBoxValueOrIsBorderBox = borderBoxValue !== void 0 || isBorderBox;
  var val = borderBoxValue || cssBoxValue;
  if (extra === CONTENT_INDEX) {
    if (borderBoxValueOrIsBorderBox) {
      return val - getPBMWidth(elem, ["border", "padding"], which);
    }
    return cssBoxValue;
  } else if (borderBoxValueOrIsBorderBox) {
    if (extra === BORDER_INDEX) {
      return val;
    }
    return val + (extra === PADDING_INDEX ? -getPBMWidth(elem, ["border"], which) : getPBMWidth(elem, ["margin"], which));
  }
  return cssBoxValue + getPBMWidth(elem, BOX_MODELS.slice(extra), which);
}
var cssShow = {
  position: "absolute",
  visibility: "hidden",
  display: "block"
};
function getWHIgnoreDisplay() {
  for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
    args[_key2] = arguments[_key2];
  }
  var val;
  var elem = args[0];
  if (elem.offsetWidth !== 0) {
    val = getWH.apply(void 0, args);
  } else {
    swap(elem, cssShow, function() {
      val = getWH.apply(void 0, args);
    });
  }
  return val;
}
each(["width", "height"], function(name) {
  var first = name.charAt(0).toUpperCase() + name.slice(1);
  domUtils["outer".concat(first)] = function(el, includeMargin) {
    return el && getWHIgnoreDisplay(el, name, includeMargin ? MARGIN_INDEX : BORDER_INDEX);
  };
  var which = name === "width" ? ["Left", "Right"] : ["Top", "Bottom"];
  domUtils[name] = function(elem, v) {
    var val = v;
    if (val !== void 0) {
      if (elem) {
        var isBorderBox = isBorderBoxFn(elem);
        if (isBorderBox) {
          val += getPBMWidth(elem, ["padding", "border"], which);
        }
        return css(elem, name, val);
      }
      return void 0;
    }
    return elem && getWHIgnoreDisplay(elem, name, CONTENT_INDEX);
  };
});
function mix(to, from2) {
  for (var i in from2) {
    if (from2.hasOwnProperty(i)) {
      to[i] = from2[i];
    }
  }
  return to;
}
var utils = {
  getWindow: function getWindow(node2) {
    if (node2 && node2.document && node2.setTimeout) {
      return node2;
    }
    var doc = node2.ownerDocument || node2;
    return doc.defaultView || doc.parentWindow;
  },
  getDocument,
  offset: function offset(el, value, option) {
    if (typeof value !== "undefined") {
      setOffset(el, value, option || {});
    } else {
      return getOffset$1(el);
    }
  },
  isWindow,
  each,
  css,
  clone: function clone(obj) {
    var i;
    var ret = {};
    for (i in obj) {
      if (obj.hasOwnProperty(i)) {
        ret[i] = obj[i];
      }
    }
    var overflow = obj.overflow;
    if (overflow) {
      for (i in obj) {
        if (obj.hasOwnProperty(i)) {
          ret.overflow[i] = obj.overflow[i];
        }
      }
    }
    return ret;
  },
  mix,
  getWindowScrollLeft: function getWindowScrollLeft(w) {
    return getScrollLeft(w);
  },
  getWindowScrollTop: function getWindowScrollTop(w) {
    return getScrollTop(w);
  },
  merge: function merge2() {
    var ret = {};
    for (var i = 0; i < arguments.length; i++) {
      utils.mix(ret, i < 0 || arguments.length <= i ? void 0 : arguments[i]);
    }
    return ret;
  },
  viewportWidth: 0,
  viewportHeight: 0
};
mix(utils, domUtils);
var getParent2 = utils.getParent;
function getOffsetParent(element) {
  if (utils.isWindow(element) || element.nodeType === 9) {
    return null;
  }
  var doc = utils.getDocument(element);
  var body = doc.body;
  var parent;
  var positionStyle = utils.css(element, "position");
  var skipStatic = positionStyle === "fixed" || positionStyle === "absolute";
  if (!skipStatic) {
    return element.nodeName.toLowerCase() === "html" ? null : getParent2(element);
  }
  for (parent = getParent2(element); parent && parent !== body && parent.nodeType !== 9; parent = getParent2(parent)) {
    positionStyle = utils.css(parent, "position");
    if (positionStyle !== "static") {
      return parent;
    }
  }
  return null;
}
var getParent$1 = utils.getParent;
function isAncestorFixed(element) {
  if (utils.isWindow(element) || element.nodeType === 9) {
    return false;
  }
  var doc = utils.getDocument(element);
  var body = doc.body;
  var parent = null;
  for (
    parent = getParent$1(element);
    // 修复元素位于 document.documentElement 下导致崩溃问题
    parent && parent !== body && parent !== doc;
    parent = getParent$1(parent)
  ) {
    var positionStyle = utils.css(parent, "position");
    if (positionStyle === "fixed") {
      return true;
    }
  }
  return false;
}
function getVisibleRectForElement(element, alwaysByViewport) {
  var visibleRect = {
    left: 0,
    right: Infinity,
    top: 0,
    bottom: Infinity
  };
  var el = getOffsetParent(element);
  var doc = utils.getDocument(element);
  var win = doc.defaultView || doc.parentWindow;
  var body = doc.body;
  var documentElement = doc.documentElement;
  while (el) {
    if ((navigator.userAgent.indexOf("MSIE") === -1 || el.clientWidth !== 0) && // body may have overflow set on it, yet we still get the entire
    // viewport. In some browsers, el.offsetParent may be
    // document.documentElement, so check for that too.
    el !== body && el !== documentElement && utils.css(el, "overflow") !== "visible") {
      var pos = utils.offset(el);
      pos.left += el.clientLeft;
      pos.top += el.clientTop;
      visibleRect.top = Math.max(visibleRect.top, pos.top);
      visibleRect.right = Math.min(
        visibleRect.right,
        // consider area without scrollBar
        pos.left + el.clientWidth
      );
      visibleRect.bottom = Math.min(visibleRect.bottom, pos.top + el.clientHeight);
      visibleRect.left = Math.max(visibleRect.left, pos.left);
    } else if (el === body || el === documentElement) {
      break;
    }
    el = getOffsetParent(el);
  }
  var originalPosition = null;
  if (!utils.isWindow(element) && element.nodeType !== 9) {
    originalPosition = element.style.position;
    var position2 = utils.css(element, "position");
    if (position2 === "absolute") {
      element.style.position = "fixed";
    }
  }
  var scrollX = utils.getWindowScrollLeft(win);
  var scrollY = utils.getWindowScrollTop(win);
  var viewportWidth = utils.viewportWidth(win);
  var viewportHeight = utils.viewportHeight(win);
  var documentWidth = documentElement.scrollWidth;
  var documentHeight = documentElement.scrollHeight;
  var bodyStyle = window.getComputedStyle(body);
  if (bodyStyle.overflowX === "hidden") {
    documentWidth = win.innerWidth;
  }
  if (bodyStyle.overflowY === "hidden") {
    documentHeight = win.innerHeight;
  }
  if (element.style) {
    element.style.position = originalPosition;
  }
  if (alwaysByViewport || isAncestorFixed(element)) {
    visibleRect.left = Math.max(visibleRect.left, scrollX);
    visibleRect.top = Math.max(visibleRect.top, scrollY);
    visibleRect.right = Math.min(visibleRect.right, scrollX + viewportWidth);
    visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + viewportHeight);
  } else {
    var maxVisibleWidth = Math.max(documentWidth, scrollX + viewportWidth);
    visibleRect.right = Math.min(visibleRect.right, maxVisibleWidth);
    var maxVisibleHeight = Math.max(documentHeight, scrollY + viewportHeight);
    visibleRect.bottom = Math.min(visibleRect.bottom, maxVisibleHeight);
  }
  return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;
}
function adjustForViewport(elFuturePos, elRegion, visibleRect, overflow) {
  var pos = utils.clone(elFuturePos);
  var size = {
    width: elRegion.width,
    height: elRegion.height
  };
  if (overflow.adjustX && pos.left < visibleRect.left) {
    pos.left = visibleRect.left;
  }
  if (overflow.resizeWidth && pos.left >= visibleRect.left && pos.left + size.width > visibleRect.right) {
    size.width -= pos.left + size.width - visibleRect.right;
  }
  if (overflow.adjustX && pos.left + size.width > visibleRect.right) {
    pos.left = Math.max(visibleRect.right - size.width, visibleRect.left);
  }
  if (overflow.adjustY && pos.top < visibleRect.top) {
    pos.top = visibleRect.top;
  }
  if (overflow.resizeHeight && pos.top >= visibleRect.top && pos.top + size.height > visibleRect.bottom) {
    size.height -= pos.top + size.height - visibleRect.bottom;
  }
  if (overflow.adjustY && pos.top + size.height > visibleRect.bottom) {
    pos.top = Math.max(visibleRect.bottom - size.height, visibleRect.top);
  }
  return utils.mix(pos, size);
}
function getRegion(node2) {
  var offset2;
  var w;
  var h;
  if (!utils.isWindow(node2) && node2.nodeType !== 9) {
    offset2 = utils.offset(node2);
    w = utils.outerWidth(node2);
    h = utils.outerHeight(node2);
  } else {
    var win = utils.getWindow(node2);
    offset2 = {
      left: utils.getWindowScrollLeft(win),
      top: utils.getWindowScrollTop(win)
    };
    w = utils.viewportWidth(win);
    h = utils.viewportHeight(win);
  }
  offset2.width = w;
  offset2.height = h;
  return offset2;
}
function getAlignOffset(region, align) {
  var V = align.charAt(0);
  var H = align.charAt(1);
  var w = region.width;
  var h = region.height;
  var x = region.left;
  var y = region.top;
  if (V === "c") {
    y += h / 2;
  } else if (V === "b") {
    y += h;
  }
  if (H === "c") {
    x += w / 2;
  } else if (H === "r") {
    x += w;
  }
  return {
    left: x,
    top: y
  };
}
function getElFuturePos(elRegion, refNodeRegion, points, offset2, targetOffset2) {
  var p1 = getAlignOffset(refNodeRegion, points[1]);
  var p2 = getAlignOffset(elRegion, points[0]);
  var diff = [p2.left - p1.left, p2.top - p1.top];
  return {
    left: Math.round(elRegion.left - diff[0] + offset2[0] - targetOffset2[0]),
    top: Math.round(elRegion.top - diff[1] + offset2[1] - targetOffset2[1])
  };
}
function isFailX(elFuturePos, elRegion, visibleRect) {
  return elFuturePos.left < visibleRect.left || elFuturePos.left + elRegion.width > visibleRect.right;
}
function isFailY(elFuturePos, elRegion, visibleRect) {
  return elFuturePos.top < visibleRect.top || elFuturePos.top + elRegion.height > visibleRect.bottom;
}
function isCompleteFailX(elFuturePos, elRegion, visibleRect) {
  return elFuturePos.left > visibleRect.right || elFuturePos.left + elRegion.width < visibleRect.left;
}
function isCompleteFailY(elFuturePos, elRegion, visibleRect) {
  return elFuturePos.top > visibleRect.bottom || elFuturePos.top + elRegion.height < visibleRect.top;
}
function flip(points, reg, map) {
  var ret = [];
  utils.each(points, function(p) {
    ret.push(p.replace(reg, function(m) {
      return map[m];
    }));
  });
  return ret;
}
function flipOffset(offset2, index2) {
  offset2[index2] = -offset2[index2];
  return offset2;
}
function convertOffset(str, offsetLen) {
  var n;
  if (/%$/.test(str)) {
    n = parseInt(str.substring(0, str.length - 1), 10) / 100 * offsetLen;
  } else {
    n = parseInt(str, 10);
  }
  return n || 0;
}
function normalizeOffset(offset2, el) {
  offset2[0] = convertOffset(offset2[0], el.width);
  offset2[1] = convertOffset(offset2[1], el.height);
}
function doAlign(el, tgtRegion, align, isTgtRegionVisible) {
  var points = align.points;
  var offset2 = align.offset || [0, 0];
  var targetOffset2 = align.targetOffset || [0, 0];
  var overflow = align.overflow;
  var source = align.source || el;
  offset2 = [].concat(offset2);
  targetOffset2 = [].concat(targetOffset2);
  overflow = overflow || {};
  var newOverflowCfg = {};
  var fail = 0;
  var alwaysByViewport = !!(overflow && overflow.alwaysByViewport);
  var visibleRect = getVisibleRectForElement(source, alwaysByViewport);
  var elRegion = getRegion(source);
  normalizeOffset(offset2, elRegion);
  normalizeOffset(targetOffset2, tgtRegion);
  var elFuturePos = getElFuturePos(elRegion, tgtRegion, points, offset2, targetOffset2);
  var newElRegion = utils.merge(elRegion, elFuturePos);
  if (visibleRect && (overflow.adjustX || overflow.adjustY) && isTgtRegionVisible) {
    if (overflow.adjustX) {
      if (isFailX(elFuturePos, elRegion, visibleRect)) {
        var newPoints = flip(points, /[lr]/gi, {
          l: "r",
          r: "l"
        });
        var newOffset = flipOffset(offset2, 0);
        var newTargetOffset = flipOffset(targetOffset2, 0);
        var newElFuturePos = getElFuturePos(elRegion, tgtRegion, newPoints, newOffset, newTargetOffset);
        if (!isCompleteFailX(newElFuturePos, elRegion, visibleRect)) {
          fail = 1;
          points = newPoints;
          offset2 = newOffset;
          targetOffset2 = newTargetOffset;
        }
      }
    }
    if (overflow.adjustY) {
      if (isFailY(elFuturePos, elRegion, visibleRect)) {
        var _newPoints = flip(points, /[tb]/gi, {
          t: "b",
          b: "t"
        });
        var _newOffset = flipOffset(offset2, 1);
        var _newTargetOffset = flipOffset(targetOffset2, 1);
        var _newElFuturePos = getElFuturePos(elRegion, tgtRegion, _newPoints, _newOffset, _newTargetOffset);
        if (!isCompleteFailY(_newElFuturePos, elRegion, visibleRect)) {
          fail = 1;
          points = _newPoints;
          offset2 = _newOffset;
          targetOffset2 = _newTargetOffset;
        }
      }
    }
    if (fail) {
      elFuturePos = getElFuturePos(elRegion, tgtRegion, points, offset2, targetOffset2);
      utils.mix(newElRegion, elFuturePos);
    }
    var isStillFailX = isFailX(elFuturePos, elRegion, visibleRect);
    var isStillFailY = isFailY(elFuturePos, elRegion, visibleRect);
    if (isStillFailX || isStillFailY) {
      var _newPoints2 = points;
      if (isStillFailX) {
        _newPoints2 = flip(points, /[lr]/gi, {
          l: "r",
          r: "l"
        });
      }
      if (isStillFailY) {
        _newPoints2 = flip(points, /[tb]/gi, {
          t: "b",
          b: "t"
        });
      }
      points = _newPoints2;
      offset2 = align.offset || [0, 0];
      targetOffset2 = align.targetOffset || [0, 0];
    }
    newOverflowCfg.adjustX = overflow.adjustX && isStillFailX;
    newOverflowCfg.adjustY = overflow.adjustY && isStillFailY;
    if (newOverflowCfg.adjustX || newOverflowCfg.adjustY) {
      newElRegion = adjustForViewport(elFuturePos, elRegion, visibleRect, newOverflowCfg);
    }
  }
  if (newElRegion.width !== elRegion.width) {
    utils.css(source, "width", utils.width(source) + newElRegion.width - elRegion.width);
  }
  if (newElRegion.height !== elRegion.height) {
    utils.css(source, "height", utils.height(source) + newElRegion.height - elRegion.height);
  }
  utils.offset(source, {
    left: newElRegion.left,
    top: newElRegion.top
  }, {
    useCssRight: align.useCssRight,
    useCssBottom: align.useCssBottom,
    useCssTransform: align.useCssTransform,
    ignoreShake: align.ignoreShake
  });
  return {
    points,
    offset: offset2,
    targetOffset: targetOffset2,
    overflow: newOverflowCfg
  };
}
function isOutOfVisibleRect(target, alwaysByViewport) {
  var visibleRect = getVisibleRectForElement(target, alwaysByViewport);
  var targetRegion = getRegion(target);
  return !visibleRect || targetRegion.left + targetRegion.width <= visibleRect.left || targetRegion.top + targetRegion.height <= visibleRect.top || targetRegion.left >= visibleRect.right || targetRegion.top >= visibleRect.bottom;
}
function alignElement(el, refNode, align) {
  var target = align.target || refNode;
  var refNodeRegion = getRegion(target);
  var isTargetNotOutOfVisible = !isOutOfVisibleRect(target, align.overflow && align.overflow.alwaysByViewport);
  return doAlign(el, refNodeRegion, align, isTargetNotOutOfVisible);
}
alignElement.__getOffsetParent = getOffsetParent;
alignElement.__getVisibleRectForElement = getVisibleRectForElement;
function alignPoint(el, tgtPoint, align) {
  var pageX;
  var pageY;
  var doc = utils.getDocument(el);
  var win = doc.defaultView || doc.parentWindow;
  var scrollX = utils.getWindowScrollLeft(win);
  var scrollY = utils.getWindowScrollTop(win);
  var viewportWidth = utils.viewportWidth(win);
  var viewportHeight = utils.viewportHeight(win);
  if ("pageX" in tgtPoint) {
    pageX = tgtPoint.pageX;
  } else {
    pageX = scrollX + tgtPoint.clientX;
  }
  if ("pageY" in tgtPoint) {
    pageY = tgtPoint.pageY;
  } else {
    pageY = scrollY + tgtPoint.clientY;
  }
  var tgtRegion = {
    left: pageX,
    top: pageY,
    width: 0,
    height: 0
  };
  var pointInView = pageX >= 0 && pageX <= scrollX + viewportWidth && pageY >= 0 && pageY <= scrollY + viewportHeight;
  var points = [align.points[0], "cc"];
  return doAlign(el, tgtRegion, _objectSpread2(_objectSpread2({}, align), {}, {
    points
  }), pointInView);
}
const useBuffer = function(callback, buffer) {
  var calledRef = React__default.useRef(false);
  var timeoutRef = React__default.useRef(null);
  function cancelTrigger() {
    window.clearTimeout(timeoutRef.current);
  }
  function trigger(force) {
    cancelTrigger();
    if (!calledRef.current || force === true) {
      if (callback(force) === false) {
        return;
      }
      calledRef.current = true;
      timeoutRef.current = window.setTimeout(function() {
        calledRef.current = false;
      }, buffer);
    } else {
      timeoutRef.current = window.setTimeout(function() {
        calledRef.current = false;
        trigger();
      }, buffer);
    }
  }
  return [trigger, function() {
    calledRef.current = false;
    cancelTrigger();
  }];
};
function isSamePoint(prev2, next2) {
  if (prev2 === next2)
    return true;
  if (!prev2 || !next2)
    return false;
  if ("pageX" in next2 && "pageY" in next2) {
    return prev2.pageX === next2.pageX && prev2.pageY === next2.pageY;
  }
  if ("clientX" in next2 && "clientY" in next2) {
    return prev2.clientX === next2.clientX && prev2.clientY === next2.clientY;
  }
  return false;
}
function restoreFocus(activeElement, container) {
  if (activeElement !== document.activeElement && contains(container, activeElement) && typeof activeElement.focus === "function") {
    activeElement.focus();
  }
}
function monitorResize(element, callback) {
  var prevWidth = null;
  var prevHeight = null;
  function onResize2(_ref) {
    var _ref2 = _slicedToArray$1(_ref, 1), target = _ref2[0].target;
    if (!document.documentElement.contains(target))
      return;
    var _target$getBoundingCl = target.getBoundingClientRect(), width = _target$getBoundingCl.width, height = _target$getBoundingCl.height;
    var fixedWidth = Math.floor(width);
    var fixedHeight = Math.floor(height);
    if (prevWidth !== fixedWidth || prevHeight !== fixedHeight) {
      Promise.resolve().then(function() {
        callback({
          width: fixedWidth,
          height: fixedHeight
        });
      });
    }
    prevWidth = fixedWidth;
    prevHeight = fixedHeight;
  }
  var resizeObserver2 = new index(onResize2);
  if (element) {
    resizeObserver2.observe(element);
  }
  return function() {
    resizeObserver2.disconnect();
  };
}
function getElement(func) {
  if (typeof func !== "function")
    return null;
  return func();
}
function getPoint(point) {
  if (_typeof$3(point) !== "object" || !point)
    return null;
  return point;
}
var Align = function Align2(_ref, ref) {
  var children = _ref.children, disabled = _ref.disabled, target = _ref.target, align = _ref.align, onAlign = _ref.onAlign, monitorWindowResize = _ref.monitorWindowResize, _ref$monitorBufferTim = _ref.monitorBufferTime, monitorBufferTime = _ref$monitorBufferTim === void 0 ? 0 : _ref$monitorBufferTim;
  var cacheRef = React__default.useRef({});
  var nodeRef = React__default.useRef();
  var childNode = React__default.Children.only(children);
  var forceAlignPropsRef = React__default.useRef({});
  forceAlignPropsRef.current.disabled = disabled;
  forceAlignPropsRef.current.target = target;
  forceAlignPropsRef.current.align = align;
  forceAlignPropsRef.current.onAlign = onAlign;
  var _useBuffer = useBuffer(function() {
    var _forceAlignPropsRef$c = forceAlignPropsRef.current, latestDisabled = _forceAlignPropsRef$c.disabled, latestTarget = _forceAlignPropsRef$c.target, latestAlign = _forceAlignPropsRef$c.align, latestOnAlign = _forceAlignPropsRef$c.onAlign;
    var source = nodeRef.current;
    if (!latestDisabled && latestTarget && source) {
      var _result;
      var _element = getElement(latestTarget);
      var _point = getPoint(latestTarget);
      cacheRef.current.element = _element;
      cacheRef.current.point = _point;
      cacheRef.current.align = latestAlign;
      var _document = document, activeElement = _document.activeElement;
      if (_element && isVisible(_element)) {
        _result = alignElement(source, _element, latestAlign);
      } else if (_point) {
        _result = alignPoint(source, _point, latestAlign);
      }
      restoreFocus(activeElement, source);
      if (latestOnAlign && _result) {
        latestOnAlign(source, _result);
      }
      return true;
    }
    return false;
  }, monitorBufferTime), _useBuffer2 = _slicedToArray$1(_useBuffer, 2), _forceAlign = _useBuffer2[0], cancelForceAlign = _useBuffer2[1];
  var _React$useState = React__default.useState(), _React$useState2 = _slicedToArray$1(_React$useState, 2), element = _React$useState2[0], setElement = _React$useState2[1];
  var _React$useState3 = React__default.useState(), _React$useState4 = _slicedToArray$1(_React$useState3, 2), point = _React$useState4[0], setPoint = _React$useState4[1];
  useLayoutEffect$1(function() {
    setElement(getElement(target));
    setPoint(getPoint(target));
  });
  React__default.useEffect(function() {
    if (cacheRef.current.element !== element || !isSamePoint(cacheRef.current.point, point) || !isEqual(cacheRef.current.align, align)) {
      _forceAlign();
    }
  });
  React__default.useEffect(function() {
    var cancelFn = monitorResize(nodeRef.current, _forceAlign);
    return cancelFn;
  }, [nodeRef.current]);
  React__default.useEffect(function() {
    var cancelFn = monitorResize(element, _forceAlign);
    return cancelFn;
  }, [element]);
  React__default.useEffect(function() {
    if (!disabled) {
      _forceAlign();
    } else {
      cancelForceAlign();
    }
  }, [disabled]);
  React__default.useEffect(function() {
    if (monitorWindowResize) {
      var cancelFn = addEventListenerWrap(window, "resize", _forceAlign);
      return cancelFn.remove;
    }
  }, [monitorWindowResize]);
  React__default.useEffect(function() {
    return function() {
      cancelForceAlign();
    };
  }, []);
  React__default.useImperativeHandle(ref, function() {
    return {
      forceAlign: function forceAlign() {
        return _forceAlign(true);
      }
    };
  });
  if (/* @__PURE__ */ React__default.isValidElement(childNode)) {
    childNode = /* @__PURE__ */ React__default.cloneElement(childNode, {
      ref: composeRef(childNode.ref, nodeRef)
    });
  }
  return childNode;
};
var RcAlign = /* @__PURE__ */ React__default.forwardRef(Align);
RcAlign.displayName = "Align";
var StatusQueue = ["measure", "alignPre", "align", null, "motion"];
const useVisibleStatus = function(visible, doMeasure) {
  var _useState = useSafeState(null), _useState2 = _slicedToArray$1(_useState, 2), status = _useState2[0], setInternalStatus = _useState2[1];
  var rafRef = useRef();
  function setStatus(nextStatus) {
    setInternalStatus(nextStatus, true);
  }
  function cancelRaf() {
    wrapperRaf.cancel(rafRef.current);
  }
  function goNextStatus(callback) {
    cancelRaf();
    rafRef.current = wrapperRaf(function() {
      setStatus(function(prev2) {
        switch (status) {
          case "align":
            return "motion";
          case "motion":
            return "stable";
        }
        return prev2;
      });
      callback === null || callback === void 0 ? void 0 : callback();
    });
  }
  useEffect(function() {
    setStatus("measure");
  }, [visible]);
  useEffect(function() {
    switch (status) {
      case "measure":
        doMeasure();
        break;
    }
    if (status) {
      rafRef.current = wrapperRaf(/* @__PURE__ */ _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee() {
        var index2, nextStatus;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                index2 = StatusQueue.indexOf(status);
                nextStatus = StatusQueue[index2 + 1];
                if (nextStatus && index2 !== -1) {
                  setStatus(nextStatus);
                }
              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      })));
    }
  }, [status]);
  useEffect(function() {
    return function() {
      cancelRaf();
    };
  }, []);
  return [status, goNextStatus];
};
const useStretchStyle = function(stretch) {
  var _React$useState = React$2.useState({
    width: 0,
    height: 0
  }), _React$useState2 = _slicedToArray$1(_React$useState, 2), targetSize = _React$useState2[0], setTargetSize = _React$useState2[1];
  function measureStretch(element) {
    var tgtWidth = element.offsetWidth, tgtHeight = element.offsetHeight;
    var _element$getBoundingC = element.getBoundingClientRect(), width = _element$getBoundingC.width, height = _element$getBoundingC.height;
    if (Math.abs(tgtWidth - width) < 1 && Math.abs(tgtHeight - height) < 1) {
      tgtWidth = width;
      tgtHeight = height;
    }
    setTargetSize({
      width: tgtWidth,
      height: tgtHeight
    });
  }
  var style2 = React$2.useMemo(function() {
    var sizeStyle = {};
    if (stretch) {
      var width = targetSize.width, height = targetSize.height;
      if (stretch.indexOf("height") !== -1 && height) {
        sizeStyle.height = height;
      } else if (stretch.indexOf("minHeight") !== -1 && height) {
        sizeStyle.minHeight = height;
      }
      if (stretch.indexOf("width") !== -1 && width) {
        sizeStyle.width = width;
      } else if (stretch.indexOf("minWidth") !== -1 && width) {
        sizeStyle.minWidth = width;
      }
    }
    return sizeStyle;
  }, [stretch, targetSize]);
  return [style2, measureStretch];
};
var PopupInner = /* @__PURE__ */ React$2.forwardRef(function(props, ref) {
  var visible = props.visible, prefixCls = props.prefixCls, className = props.className, style2 = props.style, children = props.children, zIndex = props.zIndex, stretch = props.stretch, destroyPopupOnHide = props.destroyPopupOnHide, forceRender = props.forceRender, align = props.align, point = props.point, getRootDomNode = props.getRootDomNode, getClassNameFromAlign = props.getClassNameFromAlign, onAlign = props.onAlign, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onMouseDown2 = props.onMouseDown, onTouchStart = props.onTouchStart, onClick = props.onClick;
  var alignRef = useRef();
  var elementRef = useRef();
  var _useState = useState(), _useState2 = _slicedToArray$1(_useState, 2), alignedClassName = _useState2[0], setAlignedClassName = _useState2[1];
  var _useStretchStyle = useStretchStyle(stretch), _useStretchStyle2 = _slicedToArray$1(_useStretchStyle, 2), stretchStyle = _useStretchStyle2[0], measureStretchStyle = _useStretchStyle2[1];
  function doMeasure() {
    if (stretch) {
      measureStretchStyle(getRootDomNode());
    }
  }
  var _useVisibleStatus = useVisibleStatus(visible, doMeasure), _useVisibleStatus2 = _slicedToArray$1(_useVisibleStatus, 2), status = _useVisibleStatus2[0], goNextStatus = _useVisibleStatus2[1];
  var _useState3 = useState(0), _useState4 = _slicedToArray$1(_useState3, 2), alignTimes = _useState4[0], setAlignTimes = _useState4[1];
  var prepareResolveRef = useRef();
  useLayoutEffect$1(function() {
    if (status === "alignPre") {
      setAlignTimes(0);
    }
  }, [status]);
  function getAlignTarget() {
    if (point) {
      return point;
    }
    return getRootDomNode;
  }
  function forceAlign() {
    var _alignRef$current;
    (_alignRef$current = alignRef.current) === null || _alignRef$current === void 0 ? void 0 : _alignRef$current.forceAlign();
  }
  function onInternalAlign(popupDomNode, matchAlign) {
    var nextAlignedClassName = getClassNameFromAlign(matchAlign);
    if (alignedClassName !== nextAlignedClassName) {
      setAlignedClassName(nextAlignedClassName);
    }
    setAlignTimes(function(val) {
      return val + 1;
    });
    if (status === "align") {
      onAlign === null || onAlign === void 0 ? void 0 : onAlign(popupDomNode, matchAlign);
    }
  }
  useLayoutEffect$1(function() {
    if (status === "align") {
      if (alignTimes < 3) {
        forceAlign();
      } else {
        goNextStatus(function() {
          var _prepareResolveRef$cu;
          (_prepareResolveRef$cu = prepareResolveRef.current) === null || _prepareResolveRef$cu === void 0 ? void 0 : _prepareResolveRef$cu.call(prepareResolveRef);
        });
      }
    }
  }, [alignTimes]);
  var motion = _objectSpread2$1({}, getMotion$1(props));
  ["onAppearEnd", "onEnterEnd", "onLeaveEnd"].forEach(function(eventName) {
    var originHandler = motion[eventName];
    motion[eventName] = function(element, event) {
      goNextStatus();
      return originHandler === null || originHandler === void 0 ? void 0 : originHandler(element, event);
    };
  });
  function onShowPrepare() {
    return new Promise(function(resolve) {
      prepareResolveRef.current = resolve;
    });
  }
  React$2.useEffect(function() {
    if (!motion.motionName && status === "motion") {
      goNextStatus();
    }
  }, [motion.motionName, status]);
  React$2.useImperativeHandle(ref, function() {
    return {
      forceAlign,
      getElement: function getElement2() {
        return elementRef.current;
      }
    };
  });
  var mergedStyle = _objectSpread2$1(_objectSpread2$1({}, stretchStyle), {}, {
    zIndex,
    opacity: status === "motion" || status === "stable" || !visible ? void 0 : 0,
    // Cannot interact with disappearing elements
    // https://github.com/ant-design/ant-design/issues/35051#issuecomment-1101340714
    pointerEvents: !visible && status !== "stable" ? "none" : void 0
  }, style2);
  var alignDisabled = true;
  if (align !== null && align !== void 0 && align.points && (status === "align" || status === "stable")) {
    alignDisabled = false;
  }
  var childNode = children;
  if (React$2.Children.count(children) > 1) {
    childNode = /* @__PURE__ */ React$2.createElement("div", {
      className: "".concat(prefixCls, "-content")
    }, children);
  }
  return /* @__PURE__ */ React$2.createElement(CSSMotion, _extends$1({
    visible,
    ref: elementRef,
    leavedClassName: "".concat(prefixCls, "-hidden")
  }, motion, {
    onAppearPrepare: onShowPrepare,
    onEnterPrepare: onShowPrepare,
    removeOnLeave: destroyPopupOnHide,
    forceRender
  }), function(_ref, motionRef) {
    var motionClassName = _ref.className, motionStyle = _ref.style;
    var mergedClassName = classNames(prefixCls, className, alignedClassName, motionClassName);
    return /* @__PURE__ */ React$2.createElement(RcAlign, {
      target: getAlignTarget(),
      key: "popup",
      ref: alignRef,
      monitorWindowResize: true,
      disabled: alignDisabled,
      align,
      onAlign: onInternalAlign
    }, /* @__PURE__ */ React$2.createElement("div", {
      ref: motionRef,
      className: mergedClassName,
      onMouseEnter,
      onMouseLeave,
      onMouseDownCapture: onMouseDown2,
      onTouchStartCapture: onTouchStart,
      onClick,
      style: _objectSpread2$1(_objectSpread2$1({}, motionStyle), mergedStyle)
    }, childNode));
  });
});
PopupInner.displayName = "PopupInner";
var MobilePopupInner = /* @__PURE__ */ React$2.forwardRef(function(props, ref) {
  var prefixCls = props.prefixCls, visible = props.visible, zIndex = props.zIndex, children = props.children, _props$mobile = props.mobile;
  _props$mobile = _props$mobile === void 0 ? {} : _props$mobile;
  var popupClassName = _props$mobile.popupClassName, popupStyle = _props$mobile.popupStyle, _props$mobile$popupMo = _props$mobile.popupMotion, popupMotion = _props$mobile$popupMo === void 0 ? {} : _props$mobile$popupMo, popupRender = _props$mobile.popupRender, onClick = props.onClick;
  var elementRef = React$2.useRef();
  React$2.useImperativeHandle(ref, function() {
    return {
      forceAlign: function forceAlign() {
      },
      getElement: function getElement2() {
        return elementRef.current;
      }
    };
  });
  var mergedStyle = _objectSpread2$1({
    zIndex
  }, popupStyle);
  var childNode = children;
  if (React$2.Children.count(children) > 1) {
    childNode = /* @__PURE__ */ React$2.createElement("div", {
      className: "".concat(prefixCls, "-content")
    }, children);
  }
  if (popupRender) {
    childNode = popupRender(childNode);
  }
  return /* @__PURE__ */ React$2.createElement(CSSMotion, _extends$1({
    visible,
    ref: elementRef,
    removeOnLeave: true
  }, popupMotion), function(_ref, motionRef) {
    var motionClassName = _ref.className, motionStyle = _ref.style;
    var mergedClassName = classNames(prefixCls, popupClassName, motionClassName);
    return /* @__PURE__ */ React$2.createElement("div", {
      ref: motionRef,
      className: mergedClassName,
      onClick,
      style: _objectSpread2$1(_objectSpread2$1({}, motionStyle), mergedStyle)
    }, childNode);
  });
});
MobilePopupInner.displayName = "MobilePopupInner";
var _excluded$b = ["visible", "mobile"];
var Popup = /* @__PURE__ */ React$2.forwardRef(function(_ref, ref) {
  var visible = _ref.visible, mobile = _ref.mobile, props = _objectWithoutProperties(_ref, _excluded$b);
  var _useState = useState(visible), _useState2 = _slicedToArray$1(_useState, 2), innerVisible = _useState2[0], serInnerVisible = _useState2[1];
  var _useState3 = useState(false), _useState4 = _slicedToArray$1(_useState3, 2), inMobile = _useState4[0], setInMobile = _useState4[1];
  var cloneProps = _objectSpread2$1(_objectSpread2$1({}, props), {}, {
    visible: innerVisible
  });
  useEffect(function() {
    serInnerVisible(visible);
    if (visible && mobile) {
      setInMobile(isMobile());
    }
  }, [visible, mobile]);
  var popupNode = inMobile ? /* @__PURE__ */ React$2.createElement(MobilePopupInner, _extends$1({}, cloneProps, {
    mobile,
    ref
  })) : /* @__PURE__ */ React$2.createElement(PopupInner, _extends$1({}, cloneProps, {
    ref
  }));
  return /* @__PURE__ */ React$2.createElement("div", null, /* @__PURE__ */ React$2.createElement(Mask, cloneProps), popupNode);
});
Popup.displayName = "Popup";
var TriggerContext = /* @__PURE__ */ React$2.createContext(null);
function noop() {
}
function returnEmptyString() {
  return "";
}
function returnDocument(element) {
  if (element) {
    return element.ownerDocument;
  }
  return window.document;
}
var ALL_HANDLERS = ["onClick", "onMouseDown", "onTouchStart", "onMouseEnter", "onMouseLeave", "onFocus", "onBlur", "onContextMenu"];
function generateTrigger(PortalComponent) {
  var Trigger2 = /* @__PURE__ */ function(_React$Component) {
    _inherits$1(Trigger3, _React$Component);
    var _super = _createSuper$1(Trigger3);
    function Trigger3(props) {
      var _this;
      _classCallCheck$1(this, Trigger3);
      _this = _super.call(this, props);
      _defineProperty$3(_assertThisInitialized$1(_this), "popupRef", /* @__PURE__ */ React$2.createRef());
      _defineProperty$3(_assertThisInitialized$1(_this), "triggerRef", /* @__PURE__ */ React$2.createRef());
      _defineProperty$3(_assertThisInitialized$1(_this), "portalContainer", void 0);
      _defineProperty$3(_assertThisInitialized$1(_this), "attachId", void 0);
      _defineProperty$3(_assertThisInitialized$1(_this), "clickOutsideHandler", void 0);
      _defineProperty$3(_assertThisInitialized$1(_this), "touchOutsideHandler", void 0);
      _defineProperty$3(_assertThisInitialized$1(_this), "contextMenuOutsideHandler1", void 0);
      _defineProperty$3(_assertThisInitialized$1(_this), "contextMenuOutsideHandler2", void 0);
      _defineProperty$3(_assertThisInitialized$1(_this), "mouseDownTimeout", void 0);
      _defineProperty$3(_assertThisInitialized$1(_this), "focusTime", void 0);
      _defineProperty$3(_assertThisInitialized$1(_this), "preClickTime", void 0);
      _defineProperty$3(_assertThisInitialized$1(_this), "preTouchTime", void 0);
      _defineProperty$3(_assertThisInitialized$1(_this), "delayTimer", void 0);
      _defineProperty$3(_assertThisInitialized$1(_this), "hasPopupMouseDown", void 0);
      _defineProperty$3(_assertThisInitialized$1(_this), "onMouseEnter", function(e) {
        var mouseEnterDelay = _this.props.mouseEnterDelay;
        _this.fireEvents("onMouseEnter", e);
        _this.delaySetPopupVisible(true, mouseEnterDelay, mouseEnterDelay ? null : e);
      });
      _defineProperty$3(_assertThisInitialized$1(_this), "onMouseMove", function(e) {
        _this.fireEvents("onMouseMove", e);
        _this.setPoint(e);
      });
      _defineProperty$3(_assertThisInitialized$1(_this), "onMouseLeave", function(e) {
        _this.fireEvents("onMouseLeave", e);
        _this.delaySetPopupVisible(false, _this.props.mouseLeaveDelay);
      });
      _defineProperty$3(_assertThisInitialized$1(_this), "onPopupMouseEnter", function() {
        _this.clearDelayTimer();
      });
      _defineProperty$3(_assertThisInitialized$1(_this), "onPopupMouseLeave", function(e) {
        var _this$popupRef$curren;
        if (e.relatedTarget && !e.relatedTarget.setTimeout && contains((_this$popupRef$curren = _this.popupRef.current) === null || _this$popupRef$curren === void 0 ? void 0 : _this$popupRef$curren.getElement(), e.relatedTarget)) {
          return;
        }
        _this.delaySetPopupVisible(false, _this.props.mouseLeaveDelay);
      });
      _defineProperty$3(_assertThisInitialized$1(_this), "onFocus", function(e) {
        _this.fireEvents("onFocus", e);
        _this.clearDelayTimer();
        if (_this.isFocusToShow()) {
          _this.focusTime = Date.now();
          _this.delaySetPopupVisible(true, _this.props.focusDelay);
        }
      });
      _defineProperty$3(_assertThisInitialized$1(_this), "onMouseDown", function(e) {
        _this.fireEvents("onMouseDown", e);
        _this.preClickTime = Date.now();
      });
      _defineProperty$3(_assertThisInitialized$1(_this), "onTouchStart", function(e) {
        _this.fireEvents("onTouchStart", e);
        _this.preTouchTime = Date.now();
      });
      _defineProperty$3(_assertThisInitialized$1(_this), "onBlur", function(e) {
        _this.fireEvents("onBlur", e);
        _this.clearDelayTimer();
        if (_this.isBlurToHide()) {
          _this.delaySetPopupVisible(false, _this.props.blurDelay);
        }
      });
      _defineProperty$3(_assertThisInitialized$1(_this), "onContextMenu", function(e) {
        e.preventDefault();
        _this.fireEvents("onContextMenu", e);
        _this.setPopupVisible(true, e);
      });
      _defineProperty$3(_assertThisInitialized$1(_this), "onContextMenuClose", function() {
        if (_this.isContextMenuToShow()) {
          _this.close();
        }
      });
      _defineProperty$3(_assertThisInitialized$1(_this), "onClick", function(event) {
        _this.fireEvents("onClick", event);
        if (_this.focusTime) {
          var preTime;
          if (_this.preClickTime && _this.preTouchTime) {
            preTime = Math.min(_this.preClickTime, _this.preTouchTime);
          } else if (_this.preClickTime) {
            preTime = _this.preClickTime;
          } else if (_this.preTouchTime) {
            preTime = _this.preTouchTime;
          }
          if (Math.abs(preTime - _this.focusTime) < 20) {
            return;
          }
          _this.focusTime = 0;
        }
        _this.preClickTime = 0;
        _this.preTouchTime = 0;
        if (_this.isClickToShow() && (_this.isClickToHide() || _this.isBlurToHide()) && event && event.preventDefault) {
          event.preventDefault();
        }
        var nextVisible = !_this.state.popupVisible;
        if (_this.isClickToHide() && !nextVisible || nextVisible && _this.isClickToShow()) {
          _this.setPopupVisible(!_this.state.popupVisible, event);
        }
      });
      _defineProperty$3(_assertThisInitialized$1(_this), "onPopupMouseDown", function() {
        _this.hasPopupMouseDown = true;
        clearTimeout(_this.mouseDownTimeout);
        _this.mouseDownTimeout = window.setTimeout(function() {
          _this.hasPopupMouseDown = false;
        }, 0);
        if (_this.context) {
          var _this$context;
          (_this$context = _this.context).onPopupMouseDown.apply(_this$context, arguments);
        }
      });
      _defineProperty$3(_assertThisInitialized$1(_this), "onDocumentClick", function(event) {
        if (_this.props.mask && !_this.props.maskClosable) {
          return;
        }
        var target = event.target;
        var root = _this.getRootDomNode();
        var popupNode = _this.getPopupDomNode();
        if (
          // mousedown on the target should also close popup when action is contextMenu.
          // https://github.com/ant-design/ant-design/issues/29853
          (!contains(root, target) || _this.isContextMenuOnly()) && !contains(popupNode, target) && !_this.hasPopupMouseDown
        ) {
          _this.close();
        }
      });
      _defineProperty$3(_assertThisInitialized$1(_this), "getRootDomNode", function() {
        var getTriggerDOMNode = _this.props.getTriggerDOMNode;
        if (getTriggerDOMNode) {
          return getTriggerDOMNode(_this.triggerRef.current);
        }
        try {
          var domNode = findDOMNode$1(_this.triggerRef.current);
          if (domNode) {
            return domNode;
          }
        } catch (err) {
        }
        return ReactDOM__default.findDOMNode(_assertThisInitialized$1(_this));
      });
      _defineProperty$3(_assertThisInitialized$1(_this), "getPopupClassNameFromAlign", function(align) {
        var className = [];
        var _this$props = _this.props, popupPlacement = _this$props.popupPlacement, builtinPlacements = _this$props.builtinPlacements, prefixCls = _this$props.prefixCls, alignPoint2 = _this$props.alignPoint, getPopupClassNameFromAlign = _this$props.getPopupClassNameFromAlign;
        if (popupPlacement && builtinPlacements) {
          className.push(getAlignPopupClassName(builtinPlacements, prefixCls, align, alignPoint2));
        }
        if (getPopupClassNameFromAlign) {
          className.push(getPopupClassNameFromAlign(align));
        }
        return className.join(" ");
      });
      _defineProperty$3(_assertThisInitialized$1(_this), "getComponent", function() {
        var _this$props2 = _this.props, prefixCls = _this$props2.prefixCls, destroyPopupOnHide = _this$props2.destroyPopupOnHide, popupClassName = _this$props2.popupClassName, onPopupAlign = _this$props2.onPopupAlign, popupMotion = _this$props2.popupMotion, popupAnimation = _this$props2.popupAnimation, popupTransitionName = _this$props2.popupTransitionName, popupStyle = _this$props2.popupStyle, mask = _this$props2.mask, maskAnimation = _this$props2.maskAnimation, maskTransitionName = _this$props2.maskTransitionName, maskMotion = _this$props2.maskMotion, zIndex = _this$props2.zIndex, popup = _this$props2.popup, stretch = _this$props2.stretch, alignPoint2 = _this$props2.alignPoint, mobile = _this$props2.mobile, forceRender = _this$props2.forceRender, onPopupClick = _this$props2.onPopupClick;
        var _this$state = _this.state, popupVisible = _this$state.popupVisible, point = _this$state.point;
        var align = _this.getPopupAlign();
        var mouseProps = {};
        if (_this.isMouseEnterToShow()) {
          mouseProps.onMouseEnter = _this.onPopupMouseEnter;
        }
        if (_this.isMouseLeaveToHide()) {
          mouseProps.onMouseLeave = _this.onPopupMouseLeave;
        }
        mouseProps.onMouseDown = _this.onPopupMouseDown;
        mouseProps.onTouchStart = _this.onPopupMouseDown;
        return /* @__PURE__ */ React$2.createElement(Popup, _extends$1({
          prefixCls,
          destroyPopupOnHide,
          visible: popupVisible,
          point: alignPoint2 && point,
          className: popupClassName,
          align,
          onAlign: onPopupAlign,
          animation: popupAnimation,
          getClassNameFromAlign: _this.getPopupClassNameFromAlign
        }, mouseProps, {
          stretch,
          getRootDomNode: _this.getRootDomNode,
          style: popupStyle,
          mask,
          zIndex,
          transitionName: popupTransitionName,
          maskAnimation,
          maskTransitionName,
          maskMotion,
          ref: _this.popupRef,
          motion: popupMotion,
          mobile,
          forceRender,
          onClick: onPopupClick
        }), typeof popup === "function" ? popup() : popup);
      });
      _defineProperty$3(_assertThisInitialized$1(_this), "attachParent", function(popupContainer) {
        wrapperRaf.cancel(_this.attachId);
        var _this$props3 = _this.props, getPopupContainer = _this$props3.getPopupContainer, getDocument2 = _this$props3.getDocument;
        var domNode = _this.getRootDomNode();
        var mountNode;
        if (!getPopupContainer) {
          mountNode = getDocument2(_this.getRootDomNode()).body;
        } else if (domNode || getPopupContainer.length === 0) {
          mountNode = getPopupContainer(domNode);
        }
        if (mountNode) {
          mountNode.appendChild(popupContainer);
        } else {
          _this.attachId = wrapperRaf(function() {
            _this.attachParent(popupContainer);
          });
        }
      });
      _defineProperty$3(_assertThisInitialized$1(_this), "getContainer", function() {
        if (!_this.portalContainer) {
          var getDocument2 = _this.props.getDocument;
          var popupContainer = getDocument2(_this.getRootDomNode()).createElement("div");
          popupContainer.style.position = "absolute";
          popupContainer.style.top = "0";
          popupContainer.style.left = "0";
          popupContainer.style.width = "100%";
          _this.portalContainer = popupContainer;
        }
        _this.attachParent(_this.portalContainer);
        return _this.portalContainer;
      });
      _defineProperty$3(_assertThisInitialized$1(_this), "setPoint", function(point) {
        var alignPoint2 = _this.props.alignPoint;
        if (!alignPoint2 || !point)
          return;
        _this.setState({
          point: {
            pageX: point.pageX,
            pageY: point.pageY
          }
        });
      });
      _defineProperty$3(_assertThisInitialized$1(_this), "handlePortalUpdate", function() {
        if (_this.state.prevPopupVisible !== _this.state.popupVisible) {
          _this.props.afterPopupVisibleChange(_this.state.popupVisible);
        }
      });
      _defineProperty$3(_assertThisInitialized$1(_this), "triggerContextValue", {
        onPopupMouseDown: _this.onPopupMouseDown
      });
      var _popupVisible;
      if ("popupVisible" in props) {
        _popupVisible = !!props.popupVisible;
      } else {
        _popupVisible = !!props.defaultPopupVisible;
      }
      _this.state = {
        prevPopupVisible: _popupVisible,
        popupVisible: _popupVisible
      };
      ALL_HANDLERS.forEach(function(h) {
        _this["fire".concat(h)] = function(e) {
          _this.fireEvents(h, e);
        };
      });
      return _this;
    }
    _createClass$1(Trigger3, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.componentDidUpdate();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var props = this.props;
        var state = this.state;
        if (state.popupVisible) {
          var currentDocument;
          if (!this.clickOutsideHandler && (this.isClickToHide() || this.isContextMenuToShow())) {
            currentDocument = props.getDocument(this.getRootDomNode());
            this.clickOutsideHandler = addEventListenerWrap(currentDocument, "mousedown", this.onDocumentClick);
          }
          if (!this.touchOutsideHandler) {
            currentDocument = currentDocument || props.getDocument(this.getRootDomNode());
            this.touchOutsideHandler = addEventListenerWrap(currentDocument, "touchstart", this.onDocumentClick);
          }
          if (!this.contextMenuOutsideHandler1 && this.isContextMenuToShow()) {
            currentDocument = currentDocument || props.getDocument(this.getRootDomNode());
            this.contextMenuOutsideHandler1 = addEventListenerWrap(currentDocument, "scroll", this.onContextMenuClose);
          }
          if (!this.contextMenuOutsideHandler2 && this.isContextMenuToShow()) {
            this.contextMenuOutsideHandler2 = addEventListenerWrap(window, "blur", this.onContextMenuClose);
          }
          return;
        }
        this.clearOutsideHandler();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.clearDelayTimer();
        this.clearOutsideHandler();
        clearTimeout(this.mouseDownTimeout);
        wrapperRaf.cancel(this.attachId);
      }
    }, {
      key: "getPopupDomNode",
      value: function getPopupDomNode() {
        var _this$popupRef$curren2;
        return ((_this$popupRef$curren2 = this.popupRef.current) === null || _this$popupRef$curren2 === void 0 ? void 0 : _this$popupRef$curren2.getElement()) || null;
      }
    }, {
      key: "getPopupAlign",
      value: function getPopupAlign() {
        var props = this.props;
        var popupPlacement = props.popupPlacement, popupAlign = props.popupAlign, builtinPlacements = props.builtinPlacements;
        if (popupPlacement && builtinPlacements) {
          return getAlignFromPlacement(builtinPlacements, popupPlacement, popupAlign);
        }
        return popupAlign;
      }
    }, {
      key: "setPopupVisible",
      value: (
        /**
         * @param popupVisible    Show or not the popup element
         * @param event           SyntheticEvent, used for `pointAlign`
         */
        function setPopupVisible(popupVisible, event) {
          var alignPoint2 = this.props.alignPoint;
          var prevPopupVisible = this.state.popupVisible;
          this.clearDelayTimer();
          if (prevPopupVisible !== popupVisible) {
            if (!("popupVisible" in this.props)) {
              this.setState({
                popupVisible,
                prevPopupVisible
              });
            }
            this.props.onPopupVisibleChange(popupVisible);
          }
          if (alignPoint2 && event && popupVisible) {
            this.setPoint(event);
          }
        }
      )
    }, {
      key: "delaySetPopupVisible",
      value: function delaySetPopupVisible(visible, delayS, event) {
        var _this2 = this;
        var delay = delayS * 1e3;
        this.clearDelayTimer();
        if (delay) {
          var point = event ? {
            pageX: event.pageX,
            pageY: event.pageY
          } : null;
          this.delayTimer = window.setTimeout(function() {
            _this2.setPopupVisible(visible, point);
            _this2.clearDelayTimer();
          }, delay);
        } else {
          this.setPopupVisible(visible, event);
        }
      }
    }, {
      key: "clearDelayTimer",
      value: function clearDelayTimer() {
        if (this.delayTimer) {
          clearTimeout(this.delayTimer);
          this.delayTimer = null;
        }
      }
    }, {
      key: "clearOutsideHandler",
      value: function clearOutsideHandler() {
        if (this.clickOutsideHandler) {
          this.clickOutsideHandler.remove();
          this.clickOutsideHandler = null;
        }
        if (this.contextMenuOutsideHandler1) {
          this.contextMenuOutsideHandler1.remove();
          this.contextMenuOutsideHandler1 = null;
        }
        if (this.contextMenuOutsideHandler2) {
          this.contextMenuOutsideHandler2.remove();
          this.contextMenuOutsideHandler2 = null;
        }
        if (this.touchOutsideHandler) {
          this.touchOutsideHandler.remove();
          this.touchOutsideHandler = null;
        }
      }
    }, {
      key: "createTwoChains",
      value: function createTwoChains(event) {
        var childPros = this.props.children.props;
        var props = this.props;
        if (childPros[event] && props[event]) {
          return this["fire".concat(event)];
        }
        return childPros[event] || props[event];
      }
    }, {
      key: "isClickToShow",
      value: function isClickToShow() {
        var _this$props4 = this.props, action = _this$props4.action, showAction = _this$props4.showAction;
        return action.indexOf("click") !== -1 || showAction.indexOf("click") !== -1;
      }
    }, {
      key: "isContextMenuOnly",
      value: function isContextMenuOnly() {
        var action = this.props.action;
        return action === "contextMenu" || action.length === 1 && action[0] === "contextMenu";
      }
    }, {
      key: "isContextMenuToShow",
      value: function isContextMenuToShow() {
        var _this$props5 = this.props, action = _this$props5.action, showAction = _this$props5.showAction;
        return action.indexOf("contextMenu") !== -1 || showAction.indexOf("contextMenu") !== -1;
      }
    }, {
      key: "isClickToHide",
      value: function isClickToHide() {
        var _this$props6 = this.props, action = _this$props6.action, hideAction = _this$props6.hideAction;
        return action.indexOf("click") !== -1 || hideAction.indexOf("click") !== -1;
      }
    }, {
      key: "isMouseEnterToShow",
      value: function isMouseEnterToShow() {
        var _this$props7 = this.props, action = _this$props7.action, showAction = _this$props7.showAction;
        return action.indexOf("hover") !== -1 || showAction.indexOf("mouseEnter") !== -1;
      }
    }, {
      key: "isMouseLeaveToHide",
      value: function isMouseLeaveToHide() {
        var _this$props8 = this.props, action = _this$props8.action, hideAction = _this$props8.hideAction;
        return action.indexOf("hover") !== -1 || hideAction.indexOf("mouseLeave") !== -1;
      }
    }, {
      key: "isFocusToShow",
      value: function isFocusToShow() {
        var _this$props9 = this.props, action = _this$props9.action, showAction = _this$props9.showAction;
        return action.indexOf("focus") !== -1 || showAction.indexOf("focus") !== -1;
      }
    }, {
      key: "isBlurToHide",
      value: function isBlurToHide() {
        var _this$props10 = this.props, action = _this$props10.action, hideAction = _this$props10.hideAction;
        return action.indexOf("focus") !== -1 || hideAction.indexOf("blur") !== -1;
      }
    }, {
      key: "forcePopupAlign",
      value: function forcePopupAlign() {
        if (this.state.popupVisible) {
          var _this$popupRef$curren3;
          (_this$popupRef$curren3 = this.popupRef.current) === null || _this$popupRef$curren3 === void 0 ? void 0 : _this$popupRef$curren3.forceAlign();
        }
      }
    }, {
      key: "fireEvents",
      value: function fireEvents(type4, e) {
        var childCallback = this.props.children.props[type4];
        if (childCallback) {
          childCallback(e);
        }
        var callback = this.props[type4];
        if (callback) {
          callback(e);
        }
      }
    }, {
      key: "close",
      value: function close() {
        this.setPopupVisible(false);
      }
    }, {
      key: "render",
      value: function render2() {
        var popupVisible = this.state.popupVisible;
        var _this$props11 = this.props, children = _this$props11.children, forceRender = _this$props11.forceRender, alignPoint2 = _this$props11.alignPoint, className = _this$props11.className, autoDestroy = _this$props11.autoDestroy;
        var child = React$2.Children.only(children);
        var newChildProps = {
          key: "trigger"
        };
        if (this.isContextMenuToShow()) {
          newChildProps.onContextMenu = this.onContextMenu;
        } else {
          newChildProps.onContextMenu = this.createTwoChains("onContextMenu");
        }
        if (this.isClickToHide() || this.isClickToShow()) {
          newChildProps.onClick = this.onClick;
          newChildProps.onMouseDown = this.onMouseDown;
          newChildProps.onTouchStart = this.onTouchStart;
        } else {
          newChildProps.onClick = this.createTwoChains("onClick");
          newChildProps.onMouseDown = this.createTwoChains("onMouseDown");
          newChildProps.onTouchStart = this.createTwoChains("onTouchStart");
        }
        if (this.isMouseEnterToShow()) {
          newChildProps.onMouseEnter = this.onMouseEnter;
          if (alignPoint2) {
            newChildProps.onMouseMove = this.onMouseMove;
          }
        } else {
          newChildProps.onMouseEnter = this.createTwoChains("onMouseEnter");
        }
        if (this.isMouseLeaveToHide()) {
          newChildProps.onMouseLeave = this.onMouseLeave;
        } else {
          newChildProps.onMouseLeave = this.createTwoChains("onMouseLeave");
        }
        if (this.isFocusToShow() || this.isBlurToHide()) {
          newChildProps.onFocus = this.onFocus;
          newChildProps.onBlur = this.onBlur;
        } else {
          newChildProps.onFocus = this.createTwoChains("onFocus");
          newChildProps.onBlur = this.createTwoChains("onBlur");
        }
        var childrenClassName = classNames(child && child.props && child.props.className, className);
        if (childrenClassName) {
          newChildProps.className = childrenClassName;
        }
        var cloneProps = _objectSpread2$1({}, newChildProps);
        if (supportRef(child)) {
          cloneProps.ref = composeRef(this.triggerRef, child.ref);
        }
        var trigger = /* @__PURE__ */ React$2.cloneElement(child, cloneProps);
        var portal;
        if (popupVisible || this.popupRef.current || forceRender) {
          portal = /* @__PURE__ */ React$2.createElement(PortalComponent, {
            key: "portal",
            getContainer: this.getContainer,
            didUpdate: this.handlePortalUpdate
          }, this.getComponent());
        }
        if (!popupVisible && autoDestroy) {
          portal = null;
        }
        return /* @__PURE__ */ React$2.createElement(TriggerContext.Provider, {
          value: this.triggerContextValue
        }, trigger, portal);
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(_ref, prevState) {
        var popupVisible = _ref.popupVisible;
        var newState = {};
        if (popupVisible !== void 0 && prevState.popupVisible !== popupVisible) {
          newState.popupVisible = popupVisible;
          newState.prevPopupVisible = prevState.popupVisible;
        }
        return newState;
      }
    }]);
    return Trigger3;
  }(React$2.Component);
  _defineProperty$3(Trigger2, "contextType", TriggerContext);
  _defineProperty$3(Trigger2, "defaultProps", {
    prefixCls: "rc-trigger-popup",
    getPopupClassNameFromAlign: returnEmptyString,
    getDocument: returnDocument,
    onPopupVisibleChange: noop,
    afterPopupVisibleChange: noop,
    onPopupAlign: noop,
    popupClassName: "",
    mouseEnterDelay: 0,
    mouseLeaveDelay: 0.1,
    focusDelay: 0,
    blurDelay: 0.15,
    popupStyle: {},
    destroyPopupOnHide: false,
    popupAlign: {},
    defaultPopupVisible: false,
    mask: false,
    maskClosable: true,
    action: [],
    showAction: [],
    hideAction: [],
    autoDestroy: false
  });
  return Trigger2;
}
const Trigger = generateTrigger(Portal);
var autoAdjustOverflow$1 = {
  adjustX: 1,
  adjustY: 1
};
var targetOffset = [0, 0];
var placements$1 = {
  topLeft: {
    points: ["bl", "tl"],
    overflow: autoAdjustOverflow$1,
    offset: [0, -4],
    targetOffset
  },
  topCenter: {
    points: ["bc", "tc"],
    overflow: autoAdjustOverflow$1,
    offset: [0, -4],
    targetOffset
  },
  topRight: {
    points: ["br", "tr"],
    overflow: autoAdjustOverflow$1,
    offset: [0, -4],
    targetOffset
  },
  bottomLeft: {
    points: ["tl", "bl"],
    overflow: autoAdjustOverflow$1,
    offset: [0, 4],
    targetOffset
  },
  bottomCenter: {
    points: ["tc", "bc"],
    overflow: autoAdjustOverflow$1,
    offset: [0, 4],
    targetOffset
  },
  bottomRight: {
    points: ["tr", "br"],
    overflow: autoAdjustOverflow$1,
    offset: [0, 4],
    targetOffset
  }
};
function focusable(node2) {
  var includePositive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  if (isVisible(node2)) {
    var nodeName = node2.nodeName.toLowerCase();
    var isFocusableElement = (
      // Focusable element
      ["input", "select", "textarea", "button"].includes(nodeName) || // Editable element
      node2.isContentEditable || // Anchor with href element
      nodeName === "a" && !!node2.getAttribute("href")
    );
    var tabIndexAttr = node2.getAttribute("tabindex");
    var tabIndexNum = Number(tabIndexAttr);
    var tabIndex = null;
    if (tabIndexAttr && !Number.isNaN(tabIndexNum)) {
      tabIndex = tabIndexNum;
    } else if (isFocusableElement && tabIndex === null) {
      tabIndex = 0;
    }
    if (isFocusableElement && node2.disabled) {
      tabIndex = null;
    }
    return tabIndex !== null && (tabIndex >= 0 || includePositive && tabIndex < 0);
  }
  return false;
}
function getFocusNodeList(node2) {
  var includePositive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  var res = _toConsumableArray(node2.querySelectorAll("*")).filter(function(child) {
    return focusable(child, includePositive);
  });
  if (focusable(node2, includePositive)) {
    res.unshift(node2);
  }
  return res;
}
var ESC$1 = KeyCode.ESC, TAB = KeyCode.TAB;
function useAccessibility$1(_ref) {
  var visible = _ref.visible, setTriggerVisible = _ref.setTriggerVisible, triggerRef = _ref.triggerRef, onVisibleChange = _ref.onVisibleChange, autoFocus = _ref.autoFocus;
  var focusMenuRef = React$2.useRef(false);
  var handleCloseMenuAndReturnFocus = function handleCloseMenuAndReturnFocus2() {
    if (visible && triggerRef.current) {
      var _triggerRef$current, _triggerRef$current$t, _triggerRef$current$t2, _triggerRef$current$t3;
      (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 ? void 0 : (_triggerRef$current$t = _triggerRef$current.triggerRef) === null || _triggerRef$current$t === void 0 ? void 0 : (_triggerRef$current$t2 = _triggerRef$current$t.current) === null || _triggerRef$current$t2 === void 0 ? void 0 : (_triggerRef$current$t3 = _triggerRef$current$t2.focus) === null || _triggerRef$current$t3 === void 0 ? void 0 : _triggerRef$current$t3.call(_triggerRef$current$t2);
      setTriggerVisible(false);
      if (typeof onVisibleChange === "function") {
        onVisibleChange(false);
      }
    }
  };
  var focusMenu = function focusMenu2() {
    var _triggerRef$current2, _triggerRef$current2$, _triggerRef$current2$2, _triggerRef$current2$3;
    var elements = getFocusNodeList((_triggerRef$current2 = triggerRef.current) === null || _triggerRef$current2 === void 0 ? void 0 : (_triggerRef$current2$ = _triggerRef$current2.popupRef) === null || _triggerRef$current2$ === void 0 ? void 0 : (_triggerRef$current2$2 = _triggerRef$current2$.current) === null || _triggerRef$current2$2 === void 0 ? void 0 : (_triggerRef$current2$3 = _triggerRef$current2$2.getElement) === null || _triggerRef$current2$3 === void 0 ? void 0 : _triggerRef$current2$3.call(_triggerRef$current2$2));
    var firstElement = elements[0];
    if (firstElement === null || firstElement === void 0 ? void 0 : firstElement.focus) {
      firstElement.focus();
      focusMenuRef.current = true;
      return true;
    }
    return false;
  };
  var handleKeyDown = function handleKeyDown2(event) {
    switch (event.keyCode) {
      case ESC$1:
        handleCloseMenuAndReturnFocus();
        break;
      case TAB: {
        var focusResult = false;
        if (!focusMenuRef.current) {
          focusResult = focusMenu();
        }
        if (focusResult) {
          event.preventDefault();
        } else {
          handleCloseMenuAndReturnFocus();
        }
        break;
      }
    }
  };
  React$2.useEffect(function() {
    if (visible) {
      window.addEventListener("keydown", handleKeyDown);
      if (autoFocus) {
        wrapperRaf(focusMenu, 3);
      }
      return function() {
        window.removeEventListener("keydown", handleKeyDown);
        focusMenuRef.current = false;
      };
    }
    return function() {
      focusMenuRef.current = false;
    };
  }, [visible]);
}
var _excluded$a = ["arrow", "prefixCls", "transitionName", "animation", "align", "placement", "placements", "getPopupContainer", "showAction", "hideAction", "overlayClassName", "overlayStyle", "visible", "trigger", "autoFocus"];
function Dropdown$2(props, ref) {
  var _props$arrow = props.arrow, arrow = _props$arrow === void 0 ? false : _props$arrow, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-dropdown" : _props$prefixCls, transitionName = props.transitionName, animation = props.animation, align = props.align, _props$placement = props.placement, placement = _props$placement === void 0 ? "bottomLeft" : _props$placement, _props$placements = props.placements, placements2 = _props$placements === void 0 ? placements$1 : _props$placements, getPopupContainer = props.getPopupContainer, showAction = props.showAction, hideAction = props.hideAction, overlayClassName = props.overlayClassName, overlayStyle = props.overlayStyle, visible = props.visible, _props$trigger = props.trigger, trigger = _props$trigger === void 0 ? ["hover"] : _props$trigger, autoFocus = props.autoFocus, otherProps = _objectWithoutProperties(props, _excluded$a);
  var _React$useState = React$2.useState(), _React$useState2 = _slicedToArray$1(_React$useState, 2), triggerVisible = _React$useState2[0], setTriggerVisible = _React$useState2[1];
  var mergedVisible = "visible" in props ? visible : triggerVisible;
  var triggerRef = React$2.useRef(null);
  React$2.useImperativeHandle(ref, function() {
    return triggerRef.current;
  });
  useAccessibility$1({
    visible: mergedVisible,
    setTriggerVisible,
    triggerRef,
    onVisibleChange: props.onVisibleChange,
    autoFocus
  });
  var getOverlayElement = function getOverlayElement2() {
    var overlay2 = props.overlay;
    var overlayElement;
    if (typeof overlay2 === "function") {
      overlayElement = overlay2();
    } else {
      overlayElement = overlay2;
    }
    return overlayElement;
  };
  var onClick = function onClick2(e) {
    var onOverlayClick = props.onOverlayClick;
    setTriggerVisible(false);
    if (onOverlayClick) {
      onOverlayClick(e);
    }
  };
  var onVisibleChange = function onVisibleChange2(newVisible) {
    var onVisibleChangeProp = props.onVisibleChange;
    setTriggerVisible(newVisible);
    if (typeof onVisibleChangeProp === "function") {
      onVisibleChangeProp(newVisible);
    }
  };
  var getMenuElement = function getMenuElement2() {
    var overlayElement = getOverlayElement();
    return /* @__PURE__ */ React$2.createElement(React$2.Fragment, null, arrow && /* @__PURE__ */ React$2.createElement("div", {
      className: "".concat(prefixCls, "-arrow")
    }), overlayElement);
  };
  var getMenuElementOrLambda = function getMenuElementOrLambda2() {
    var overlay2 = props.overlay;
    if (typeof overlay2 === "function") {
      return getMenuElement;
    }
    return getMenuElement();
  };
  var getMinOverlayWidthMatchTrigger = function getMinOverlayWidthMatchTrigger2() {
    var minOverlayWidthMatchTrigger = props.minOverlayWidthMatchTrigger, alignPoint2 = props.alignPoint;
    if ("minOverlayWidthMatchTrigger" in props) {
      return minOverlayWidthMatchTrigger;
    }
    return !alignPoint2;
  };
  var getOpenClassName = function getOpenClassName2() {
    var openClassName = props.openClassName;
    if (openClassName !== void 0) {
      return openClassName;
    }
    return "".concat(prefixCls, "-open");
  };
  var renderChildren = function renderChildren2() {
    var children = props.children;
    var childrenProps = children.props ? children.props : {};
    var childClassName = classNames(childrenProps.className, getOpenClassName());
    return mergedVisible && children ? /* @__PURE__ */ React$2.cloneElement(children, {
      className: childClassName
    }) : children;
  };
  var triggerHideAction = hideAction;
  if (!triggerHideAction && trigger.indexOf("contextMenu") !== -1) {
    triggerHideAction = ["click"];
  }
  return /* @__PURE__ */ React$2.createElement(Trigger, _objectSpread2$1(_objectSpread2$1({
    builtinPlacements: placements2
  }, otherProps), {}, {
    prefixCls,
    ref: triggerRef,
    popupClassName: classNames(overlayClassName, _defineProperty$3({}, "".concat(prefixCls, "-show-arrow"), arrow)),
    popupStyle: overlayStyle,
    action: trigger,
    showAction,
    hideAction: triggerHideAction || [],
    popupPlacement: placement,
    popupAlign: align,
    popupTransitionName: transitionName,
    popupAnimation: animation,
    popupVisible: mergedVisible,
    stretch: getMinOverlayWidthMatchTrigger() ? "minWidth" : "",
    popup: getMenuElementOrLambda(),
    onPopupVisibleChange: onVisibleChange,
    onPopupClick: onClick,
    getPopupContainer
  }), renderChildren());
}
const Dropdown$3 = /* @__PURE__ */ React$2.forwardRef(Dropdown$2);
var IdContext = /* @__PURE__ */ React$2.createContext(null);
function getMenuId(uuid2, eventKey) {
  if (uuid2 === void 0) {
    return null;
  }
  return "".concat(uuid2, "-").concat(eventKey);
}
function useMenuId(eventKey) {
  var id = React$2.useContext(IdContext);
  return getMenuId(id, eventKey);
}
var _excluded$9 = ["children", "locked"];
var MenuContext$2 = /* @__PURE__ */ React$2.createContext(null);
function mergeProps(origin, target) {
  var clone2 = _objectSpread2$1({}, origin);
  Object.keys(target).forEach(function(key) {
    var value = target[key];
    if (value !== void 0) {
      clone2[key] = value;
    }
  });
  return clone2;
}
function InheritableContextProvider(_ref) {
  var children = _ref.children, locked = _ref.locked, restProps = _objectWithoutProperties(_ref, _excluded$9);
  var context = React$2.useContext(MenuContext$2);
  var inheritableContext = useMemo(function() {
    return mergeProps(context, restProps);
  }, [context, restProps], function(prev2, next2) {
    return !locked && (prev2[0] !== next2[0] || !isEqual(prev2[1], next2[1], true));
  });
  return /* @__PURE__ */ React$2.createElement(MenuContext$2.Provider, {
    value: inheritableContext
  }, children);
}
var EmptyList = [];
var PathRegisterContext = /* @__PURE__ */ React$2.createContext(null);
function useMeasure() {
  return React$2.useContext(PathRegisterContext);
}
var PathTrackerContext = /* @__PURE__ */ React$2.createContext(EmptyList);
function useFullPath(eventKey) {
  var parentKeyPath = React$2.useContext(PathTrackerContext);
  return React$2.useMemo(function() {
    return eventKey !== void 0 ? [].concat(_toConsumableArray(parentKeyPath), [eventKey]) : parentKeyPath;
  }, [parentKeyPath, eventKey]);
}
var PathUserContext = /* @__PURE__ */ React$2.createContext(null);
var PrivateContext = /* @__PURE__ */ React$2.createContext({});
var LEFT = KeyCode.LEFT, RIGHT = KeyCode.RIGHT, UP = KeyCode.UP, DOWN = KeyCode.DOWN, ENTER = KeyCode.ENTER, ESC = KeyCode.ESC, HOME = KeyCode.HOME, END = KeyCode.END;
var ArrowKeys = [UP, DOWN, LEFT, RIGHT];
function getOffset(mode, isRootLevel, isRtl, which) {
  var _inline, _horizontal, _vertical, _offsets;
  var prev2 = "prev";
  var next2 = "next";
  var children = "children";
  var parent = "parent";
  if (mode === "inline" && which === ENTER) {
    return {
      inlineTrigger: true
    };
  }
  var inline2 = (_inline = {}, _defineProperty$3(_inline, UP, prev2), _defineProperty$3(_inline, DOWN, next2), _inline);
  var horizontal = (_horizontal = {}, _defineProperty$3(_horizontal, LEFT, isRtl ? next2 : prev2), _defineProperty$3(_horizontal, RIGHT, isRtl ? prev2 : next2), _defineProperty$3(_horizontal, DOWN, children), _defineProperty$3(_horizontal, ENTER, children), _horizontal);
  var vertical = (_vertical = {}, _defineProperty$3(_vertical, UP, prev2), _defineProperty$3(_vertical, DOWN, next2), _defineProperty$3(_vertical, ENTER, children), _defineProperty$3(_vertical, ESC, parent), _defineProperty$3(_vertical, LEFT, isRtl ? children : parent), _defineProperty$3(_vertical, RIGHT, isRtl ? parent : children), _vertical);
  var offsets = {
    inline: inline2,
    horizontal,
    vertical,
    inlineSub: inline2,
    horizontalSub: vertical,
    verticalSub: vertical
  };
  var type4 = (_offsets = offsets["".concat(mode).concat(isRootLevel ? "" : "Sub")]) === null || _offsets === void 0 ? void 0 : _offsets[which];
  switch (type4) {
    case prev2:
      return {
        offset: -1,
        sibling: true
      };
    case next2:
      return {
        offset: 1,
        sibling: true
      };
    case parent:
      return {
        offset: -1,
        sibling: false
      };
    case children:
      return {
        offset: 1,
        sibling: false
      };
    default:
      return null;
  }
}
function findContainerUL(element) {
  var current = element;
  while (current) {
    if (current.getAttribute("data-menu-list")) {
      return current;
    }
    current = current.parentElement;
  }
  return null;
}
function getFocusElement(activeElement, elements) {
  var current = activeElement || document.activeElement;
  while (current) {
    if (elements.has(current)) {
      return current;
    }
    current = current.parentElement;
  }
  return null;
}
function getFocusableElements(container, elements) {
  var list = getFocusNodeList(container, true);
  return list.filter(function(ele) {
    return elements.has(ele);
  });
}
function getNextFocusElement(parentQueryContainer, elements, focusMenuElement) {
  var offset2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
  if (!parentQueryContainer) {
    return null;
  }
  var sameLevelFocusableMenuElementList = getFocusableElements(parentQueryContainer, elements);
  var count = sameLevelFocusableMenuElementList.length;
  var focusIndex = sameLevelFocusableMenuElementList.findIndex(function(ele) {
    return focusMenuElement === ele;
  });
  if (offset2 < 0) {
    if (focusIndex === -1) {
      focusIndex = count - 1;
    } else {
      focusIndex -= 1;
    }
  } else if (offset2 > 0) {
    focusIndex += 1;
  }
  focusIndex = (focusIndex + count) % count;
  return sameLevelFocusableMenuElementList[focusIndex];
}
function useAccessibility(mode, activeKey, isRtl, id, containerRef, getKeys, getKeyPath, triggerActiveKey, triggerAccessibilityOpen, originOnKeyDown) {
  var rafRef = React$2.useRef();
  var activeRef = React$2.useRef();
  activeRef.current = activeKey;
  var cleanRaf = function cleanRaf2() {
    wrapperRaf.cancel(rafRef.current);
  };
  React$2.useEffect(function() {
    return function() {
      cleanRaf();
    };
  }, []);
  return function(e) {
    var which = e.which;
    if ([].concat(ArrowKeys, [ENTER, ESC, HOME, END]).includes(which)) {
      var elements;
      var key2element;
      var element2key;
      var refreshElements = function refreshElements2() {
        elements = /* @__PURE__ */ new Set();
        key2element = /* @__PURE__ */ new Map();
        element2key = /* @__PURE__ */ new Map();
        var keys = getKeys();
        keys.forEach(function(key) {
          var element = document.querySelector("[data-menu-id='".concat(getMenuId(id, key), "']"));
          if (element) {
            elements.add(element);
            element2key.set(element, key);
            key2element.set(key, element);
          }
        });
        return elements;
      };
      refreshElements();
      var activeElement = key2element.get(activeKey);
      var focusMenuElement = getFocusElement(activeElement, elements);
      var focusMenuKey = element2key.get(focusMenuElement);
      var offsetObj = getOffset(mode, getKeyPath(focusMenuKey, true).length === 1, isRtl, which);
      if (!offsetObj && which !== HOME && which !== END) {
        return;
      }
      if (ArrowKeys.includes(which) || [HOME, END].includes(which)) {
        e.preventDefault();
      }
      var tryFocus = function tryFocus2(menuElement) {
        if (menuElement) {
          var focusTargetElement = menuElement;
          var link = menuElement.querySelector("a");
          if (link !== null && link !== void 0 && link.getAttribute("href")) {
            focusTargetElement = link;
          }
          var targetKey = element2key.get(menuElement);
          triggerActiveKey(targetKey);
          cleanRaf();
          rafRef.current = wrapperRaf(function() {
            if (activeRef.current === targetKey) {
              focusTargetElement.focus();
            }
          });
        }
      };
      if ([HOME, END].includes(which) || offsetObj.sibling || !focusMenuElement) {
        var parentQueryContainer;
        if (!focusMenuElement || mode === "inline") {
          parentQueryContainer = containerRef.current;
        } else {
          parentQueryContainer = findContainerUL(focusMenuElement);
        }
        var targetElement;
        var focusableElements = getFocusableElements(parentQueryContainer, elements);
        if (which === HOME) {
          targetElement = focusableElements[0];
        } else if (which === END) {
          targetElement = focusableElements[focusableElements.length - 1];
        } else {
          targetElement = getNextFocusElement(parentQueryContainer, elements, focusMenuElement, offsetObj.offset);
        }
        tryFocus(targetElement);
      } else if (offsetObj.inlineTrigger) {
        triggerAccessibilityOpen(focusMenuKey);
      } else if (offsetObj.offset > 0) {
        triggerAccessibilityOpen(focusMenuKey, true);
        cleanRaf();
        rafRef.current = wrapperRaf(function() {
          refreshElements();
          var controlId = focusMenuElement.getAttribute("aria-controls");
          var subQueryContainer = document.getElementById(controlId);
          var targetElement2 = getNextFocusElement(subQueryContainer, elements);
          tryFocus(targetElement2);
        }, 5);
      } else if (offsetObj.offset < 0) {
        var keyPath = getKeyPath(focusMenuKey, true);
        var parentKey = keyPath[keyPath.length - 2];
        var parentMenuElement = key2element.get(parentKey);
        triggerAccessibilityOpen(parentKey, false);
        tryFocus(parentMenuElement);
      }
    }
    originOnKeyDown === null || originOnKeyDown === void 0 ? void 0 : originOnKeyDown(e);
  };
}
function nextSlice(callback) {
  Promise.resolve().then(callback);
}
var PATH_SPLIT = "__RC_UTIL_PATH_SPLIT__";
var getPathStr = function getPathStr2(keyPath) {
  return keyPath.join(PATH_SPLIT);
};
var getPathKeys = function getPathKeys2(keyPathStr) {
  return keyPathStr.split(PATH_SPLIT);
};
var OVERFLOW_KEY = "rc-menu-more";
function useKeyRecords() {
  var _React$useState = React$2.useState({}), _React$useState2 = _slicedToArray$1(_React$useState, 2), internalForceUpdate = _React$useState2[1];
  var key2pathRef = useRef(/* @__PURE__ */ new Map());
  var path2keyRef = useRef(/* @__PURE__ */ new Map());
  var _React$useState3 = React$2.useState([]), _React$useState4 = _slicedToArray$1(_React$useState3, 2), overflowKeys = _React$useState4[0], setOverflowKeys = _React$useState4[1];
  var updateRef = useRef(0);
  var destroyRef = useRef(false);
  var forceUpdate = function forceUpdate2() {
    if (!destroyRef.current) {
      internalForceUpdate({});
    }
  };
  var registerPath = useCallback(function(key, keyPath) {
    if (process.env.NODE_ENV !== "production") {
      warningOnce(!key2pathRef.current.has(key), "Duplicated key '".concat(key, "' used in Menu by path [").concat(keyPath.join(" > "), "]"));
    }
    var connectedPath = getPathStr(keyPath);
    path2keyRef.current.set(connectedPath, key);
    key2pathRef.current.set(key, connectedPath);
    updateRef.current += 1;
    var id = updateRef.current;
    nextSlice(function() {
      if (id === updateRef.current) {
        forceUpdate();
      }
    });
  }, []);
  var unregisterPath = useCallback(function(key, keyPath) {
    var connectedPath = getPathStr(keyPath);
    path2keyRef.current.delete(connectedPath);
    key2pathRef.current.delete(key);
  }, []);
  var refreshOverflowKeys = useCallback(function(keys) {
    setOverflowKeys(keys);
  }, []);
  var getKeyPath = useCallback(function(eventKey, includeOverflow) {
    var fullPath = key2pathRef.current.get(eventKey) || "";
    var keys = getPathKeys(fullPath);
    if (includeOverflow && overflowKeys.includes(keys[0])) {
      keys.unshift(OVERFLOW_KEY);
    }
    return keys;
  }, [overflowKeys]);
  var isSubPathKey = useCallback(function(pathKeys, eventKey) {
    return pathKeys.some(function(pathKey) {
      var pathKeyList = getKeyPath(pathKey, true);
      return pathKeyList.includes(eventKey);
    });
  }, [getKeyPath]);
  var getKeys = function getKeys2() {
    var keys = _toConsumableArray(key2pathRef.current.keys());
    if (overflowKeys.length) {
      keys.push(OVERFLOW_KEY);
    }
    return keys;
  };
  var getSubPathKeys = useCallback(function(key) {
    var connectedPath = "".concat(key2pathRef.current.get(key)).concat(PATH_SPLIT);
    var pathKeys = /* @__PURE__ */ new Set();
    _toConsumableArray(path2keyRef.current.keys()).forEach(function(pathKey) {
      if (pathKey.startsWith(connectedPath)) {
        pathKeys.add(path2keyRef.current.get(pathKey));
      }
    });
    return pathKeys;
  }, []);
  React$2.useEffect(function() {
    return function() {
      destroyRef.current = true;
    };
  }, []);
  return {
    // Register
    registerPath,
    unregisterPath,
    refreshOverflowKeys,
    // Util
    isSubPathKey,
    getKeyPath,
    getKeys,
    getSubPathKeys
  };
}
function useMemoCallback(func) {
  var funRef = React$2.useRef(func);
  funRef.current = func;
  var callback = React$2.useCallback(function() {
    var _funRef$current;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return (_funRef$current = funRef.current) === null || _funRef$current === void 0 ? void 0 : _funRef$current.call.apply(_funRef$current, [funRef].concat(args));
  }, []);
  return func ? callback : void 0;
}
var uniquePrefix = Math.random().toFixed(5).toString().slice(2);
var internalId = 0;
function useUUID(id) {
  var _useMergedState = useMergedState(id, {
    value: id
  }), _useMergedState2 = _slicedToArray$1(_useMergedState, 2), uuid2 = _useMergedState2[0], setUUID = _useMergedState2[1];
  React$2.useEffect(function() {
    internalId += 1;
    var newId = process.env.NODE_ENV === "test" ? "test" : "".concat(uniquePrefix, "-").concat(internalId);
    setUUID("rc-menu-uuid-".concat(newId));
  }, []);
  return uuid2;
}
function useActive$1(eventKey, disabled, onMouseEnter, onMouseLeave) {
  var _React$useContext = React$2.useContext(MenuContext$2), activeKey = _React$useContext.activeKey, onActive = _React$useContext.onActive, onInactive = _React$useContext.onInactive;
  var ret = {
    active: activeKey === eventKey
  };
  if (!disabled) {
    ret.onMouseEnter = function(domEvent) {
      onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter({
        key: eventKey,
        domEvent
      });
      onActive(eventKey);
    };
    ret.onMouseLeave = function(domEvent) {
      onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave({
        key: eventKey,
        domEvent
      });
      onInactive(eventKey);
    };
  }
  return ret;
}
function useDirectionStyle(level) {
  var _React$useContext = React$2.useContext(MenuContext$2), mode = _React$useContext.mode, rtl = _React$useContext.rtl, inlineIndent = _React$useContext.inlineIndent;
  if (mode !== "inline") {
    return null;
  }
  var len = level;
  return rtl ? {
    paddingRight: len * inlineIndent
  } : {
    paddingLeft: len * inlineIndent
  };
}
function Icon$2(_ref) {
  var icon = _ref.icon, props = _ref.props, children = _ref.children;
  var iconNode;
  if (typeof icon === "function") {
    iconNode = /* @__PURE__ */ React$2.createElement(icon, _objectSpread2$1({}, props));
  } else {
    iconNode = icon;
  }
  return iconNode || children || null;
}
var _excluded$8 = ["item"];
function warnItemProp(_ref) {
  var item = _ref.item, restInfo = _objectWithoutProperties(_ref, _excluded$8);
  Object.defineProperty(restInfo, "item", {
    get: function get2() {
      warningOnce(false, "`info.item` is deprecated since we will move to function component that not provides React Node instance in future.");
      return item;
    }
  });
  return restInfo;
}
var _excluded$7 = ["title", "attribute", "elementRef"], _excluded2$2 = ["style", "className", "eventKey", "warnKey", "disabled", "itemIcon", "children", "role", "onMouseEnter", "onMouseLeave", "onClick", "onKeyDown", "onFocus"], _excluded3 = ["active"];
var LegacyMenuItem = /* @__PURE__ */ function(_React$Component) {
  _inherits$1(LegacyMenuItem2, _React$Component);
  var _super = _createSuper$1(LegacyMenuItem2);
  function LegacyMenuItem2() {
    _classCallCheck$1(this, LegacyMenuItem2);
    return _super.apply(this, arguments);
  }
  _createClass$1(LegacyMenuItem2, [{
    key: "render",
    value: function render2() {
      var _this$props = this.props, title = _this$props.title, attribute = _this$props.attribute, elementRef = _this$props.elementRef, restProps = _objectWithoutProperties(_this$props, _excluded$7);
      var passedProps = omit(restProps, ["eventKey", "popupClassName", "popupOffset", "onTitleClick"]);
      warningOnce(!attribute, "`attribute` of Menu.Item is deprecated. Please pass attribute directly.");
      return /* @__PURE__ */ React$2.createElement(ForwardOverflow.Item, _extends$1({}, attribute, {
        title: typeof title === "string" ? title : void 0
      }, passedProps, {
        ref: elementRef
      }));
    }
  }]);
  return LegacyMenuItem2;
}(React$2.Component);
var InternalMenuItem = /* @__PURE__ */ React$2.forwardRef(function(props, ref) {
  var _classNames;
  var style2 = props.style, className = props.className, eventKey = props.eventKey, warnKey = props.warnKey, disabled = props.disabled, itemIcon = props.itemIcon, children = props.children, role = props.role, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onClick = props.onClick, onKeyDown = props.onKeyDown, onFocus = props.onFocus, restProps = _objectWithoutProperties(props, _excluded2$2);
  var domDataId = useMenuId(eventKey);
  var _React$useContext = React$2.useContext(MenuContext$2), prefixCls = _React$useContext.prefixCls, onItemClick = _React$useContext.onItemClick, contextDisabled = _React$useContext.disabled, overflowDisabled = _React$useContext.overflowDisabled, contextItemIcon = _React$useContext.itemIcon, selectedKeys = _React$useContext.selectedKeys, onActive = _React$useContext.onActive;
  var _React$useContext2 = React$2.useContext(PrivateContext), _internalRenderMenuItem = _React$useContext2._internalRenderMenuItem;
  var itemCls = "".concat(prefixCls, "-item");
  var legacyMenuItemRef = React$2.useRef();
  var elementRef = React$2.useRef();
  var mergedDisabled = contextDisabled || disabled;
  var mergedEleRef = useComposeRef(ref, elementRef);
  var connectedKeys = useFullPath(eventKey);
  if (process.env.NODE_ENV !== "production" && warnKey) {
    warningOnce(false, "MenuItem should not leave undefined `key`.");
  }
  var getEventInfo = function getEventInfo2(e) {
    return {
      key: eventKey,
      // Note: For legacy code is reversed which not like other antd component
      keyPath: _toConsumableArray(connectedKeys).reverse(),
      item: legacyMenuItemRef.current,
      domEvent: e
    };
  };
  var mergedItemIcon = itemIcon || contextItemIcon;
  var _useActive = useActive$1(eventKey, mergedDisabled, onMouseEnter, onMouseLeave), active = _useActive.active, activeProps = _objectWithoutProperties(_useActive, _excluded3);
  var selected = selectedKeys.includes(eventKey);
  var directionStyle = useDirectionStyle(connectedKeys.length);
  var onInternalClick = function onInternalClick2(e) {
    if (mergedDisabled) {
      return;
    }
    var info = getEventInfo(e);
    onClick === null || onClick === void 0 ? void 0 : onClick(warnItemProp(info));
    onItemClick(info);
  };
  var onInternalKeyDown = function onInternalKeyDown2(e) {
    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(e);
    if (e.which === KeyCode.ENTER) {
      var info = getEventInfo(e);
      onClick === null || onClick === void 0 ? void 0 : onClick(warnItemProp(info));
      onItemClick(info);
    }
  };
  var onInternalFocus = function onInternalFocus2(e) {
    onActive(eventKey);
    onFocus === null || onFocus === void 0 ? void 0 : onFocus(e);
  };
  var optionRoleProps = {};
  if (props.role === "option") {
    optionRoleProps["aria-selected"] = selected;
  }
  var renderNode = /* @__PURE__ */ React$2.createElement(LegacyMenuItem, _extends$1({
    ref: legacyMenuItemRef,
    elementRef: mergedEleRef,
    role: role === null ? "none" : role || "menuitem",
    tabIndex: disabled ? null : -1,
    "data-menu-id": overflowDisabled && domDataId ? null : domDataId
  }, restProps, activeProps, optionRoleProps, {
    component: "li",
    "aria-disabled": disabled,
    style: _objectSpread2$1(_objectSpread2$1({}, directionStyle), style2),
    className: classNames(itemCls, (_classNames = {}, _defineProperty$3(_classNames, "".concat(itemCls, "-active"), active), _defineProperty$3(_classNames, "".concat(itemCls, "-selected"), selected), _defineProperty$3(_classNames, "".concat(itemCls, "-disabled"), mergedDisabled), _classNames), className),
    onClick: onInternalClick,
    onKeyDown: onInternalKeyDown,
    onFocus: onInternalFocus
  }), children, /* @__PURE__ */ React$2.createElement(Icon$2, {
    props: _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      isSelected: selected
    }),
    icon: mergedItemIcon
  }));
  if (_internalRenderMenuItem) {
    renderNode = _internalRenderMenuItem(renderNode, props, {
      selected
    });
  }
  return renderNode;
});
function MenuItem$1(props, ref) {
  var eventKey = props.eventKey;
  var measure = useMeasure();
  var connectedKeyPath = useFullPath(eventKey);
  React$2.useEffect(function() {
    if (measure) {
      measure.registerPath(eventKey, connectedKeyPath);
      return function() {
        measure.unregisterPath(eventKey, connectedKeyPath);
      };
    }
  }, [connectedKeyPath]);
  if (measure) {
    return null;
  }
  return /* @__PURE__ */ React$2.createElement(InternalMenuItem, _extends$1({}, props, {
    ref
  }));
}
const MenuItem$2 = /* @__PURE__ */ React$2.forwardRef(MenuItem$1);
var _excluded$6 = ["className", "children"];
var InternalSubMenuList = function InternalSubMenuList2(_ref, ref) {
  var className = _ref.className, children = _ref.children, restProps = _objectWithoutProperties(_ref, _excluded$6);
  var _React$useContext = React$2.useContext(MenuContext$2), prefixCls = _React$useContext.prefixCls, mode = _React$useContext.mode, rtl = _React$useContext.rtl;
  return /* @__PURE__ */ React$2.createElement("ul", _extends$1({
    className: classNames(prefixCls, rtl && "".concat(prefixCls, "-rtl"), "".concat(prefixCls, "-sub"), "".concat(prefixCls, "-").concat(mode === "inline" ? "inline" : "vertical"), className),
    role: "menu"
  }, restProps, {
    "data-menu-list": true,
    ref
  }), children);
};
var SubMenuList = /* @__PURE__ */ React$2.forwardRef(InternalSubMenuList);
SubMenuList.displayName = "SubMenuList";
var _excluded$5 = ["label", "children", "key", "type"];
function parseChildren(children, keyPath) {
  return toArray$3(children).map(function(child, index2) {
    if (/* @__PURE__ */ React$2.isValidElement(child)) {
      var _eventKey, _child$props;
      var key = child.key;
      var eventKey = (_eventKey = (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.eventKey) !== null && _eventKey !== void 0 ? _eventKey : key;
      var emptyKey = eventKey === null || eventKey === void 0;
      if (emptyKey) {
        eventKey = "tmp_key-".concat([].concat(_toConsumableArray(keyPath), [index2]).join("-"));
      }
      var cloneProps = {
        key: eventKey,
        eventKey
      };
      if (process.env.NODE_ENV !== "production" && emptyKey) {
        cloneProps.warnKey = true;
      }
      return /* @__PURE__ */ React$2.cloneElement(child, cloneProps);
    }
    return child;
  });
}
function convertItemsToNodes$1(list) {
  return (list || []).map(function(opt, index2) {
    if (opt && _typeof$3(opt) === "object") {
      var _ref = opt, label = _ref.label, children = _ref.children, key = _ref.key, type4 = _ref.type, restProps = _objectWithoutProperties(_ref, _excluded$5);
      var mergedKey = key !== null && key !== void 0 ? key : "tmp-".concat(index2);
      if (children || type4 === "group") {
        if (type4 === "group") {
          return /* @__PURE__ */ React$2.createElement(MenuItemGroup, _extends$1({
            key: mergedKey
          }, restProps, {
            title: label
          }), convertItemsToNodes$1(children));
        }
        return /* @__PURE__ */ React$2.createElement(SubMenu$2, _extends$1({
          key: mergedKey
        }, restProps, {
          title: label
        }), convertItemsToNodes$1(children));
      }
      if (type4 === "divider") {
        return /* @__PURE__ */ React$2.createElement(Divider, _extends$1({
          key: mergedKey
        }, restProps));
      }
      return /* @__PURE__ */ React$2.createElement(MenuItem$2, _extends$1({
        key: mergedKey
      }, restProps), label);
    }
    return null;
  }).filter(function(opt) {
    return opt;
  });
}
function parseItems(children, items, keyPath) {
  var childNodes = children;
  if (items) {
    childNodes = convertItemsToNodes$1(items);
  }
  return parseChildren(childNodes, keyPath);
}
var autoAdjustOverflow = {
  adjustX: 1,
  adjustY: 1
};
var placements = {
  topLeft: {
    points: ["bl", "tl"],
    overflow: autoAdjustOverflow,
    offset: [0, -7]
  },
  bottomLeft: {
    points: ["tl", "bl"],
    overflow: autoAdjustOverflow,
    offset: [0, 7]
  },
  leftTop: {
    points: ["tr", "tl"],
    overflow: autoAdjustOverflow,
    offset: [-4, 0]
  },
  rightTop: {
    points: ["tl", "tr"],
    overflow: autoAdjustOverflow,
    offset: [4, 0]
  }
};
var placementsRtl = {
  topLeft: {
    points: ["bl", "tl"],
    overflow: autoAdjustOverflow,
    offset: [0, -7]
  },
  bottomLeft: {
    points: ["tl", "bl"],
    overflow: autoAdjustOverflow,
    offset: [0, 7]
  },
  rightTop: {
    points: ["tr", "tl"],
    overflow: autoAdjustOverflow,
    offset: [-4, 0]
  },
  leftTop: {
    points: ["tl", "tr"],
    overflow: autoAdjustOverflow,
    offset: [4, 0]
  }
};
function getMotion(mode, motion, defaultMotions) {
  if (motion) {
    return motion;
  }
  if (defaultMotions) {
    return defaultMotions[mode] || defaultMotions.other;
  }
  return void 0;
}
var popupPlacementMap = {
  horizontal: "bottomLeft",
  vertical: "rightTop",
  "vertical-left": "rightTop",
  "vertical-right": "leftTop"
};
function PopupTrigger(_ref) {
  var prefixCls = _ref.prefixCls, visible = _ref.visible, children = _ref.children, popup = _ref.popup, popupClassName = _ref.popupClassName, popupOffset = _ref.popupOffset, disabled = _ref.disabled, mode = _ref.mode, onVisibleChange = _ref.onVisibleChange;
  var _React$useContext = React$2.useContext(MenuContext$2), getPopupContainer = _React$useContext.getPopupContainer, rtl = _React$useContext.rtl, subMenuOpenDelay = _React$useContext.subMenuOpenDelay, subMenuCloseDelay = _React$useContext.subMenuCloseDelay, builtinPlacements = _React$useContext.builtinPlacements, triggerSubMenuAction = _React$useContext.triggerSubMenuAction, forceSubMenuRender = _React$useContext.forceSubMenuRender, rootClassName = _React$useContext.rootClassName, motion = _React$useContext.motion, defaultMotions = _React$useContext.defaultMotions;
  var _React$useState = React$2.useState(false), _React$useState2 = _slicedToArray$1(_React$useState, 2), innerVisible = _React$useState2[0], setInnerVisible = _React$useState2[1];
  var placement = rtl ? _objectSpread2$1(_objectSpread2$1({}, placementsRtl), builtinPlacements) : _objectSpread2$1(_objectSpread2$1({}, placements), builtinPlacements);
  var popupPlacement = popupPlacementMap[mode];
  var targetMotion = getMotion(mode, motion, defaultMotions);
  var targetMotionRef = React$2.useRef(targetMotion);
  if (mode !== "inline") {
    targetMotionRef.current = targetMotion;
  }
  var mergedMotion = _objectSpread2$1(_objectSpread2$1({}, targetMotionRef.current), {}, {
    leavedClassName: "".concat(prefixCls, "-hidden"),
    removeOnLeave: false,
    motionAppear: true
  });
  var visibleRef = React$2.useRef();
  React$2.useEffect(function() {
    visibleRef.current = wrapperRaf(function() {
      setInnerVisible(visible);
    });
    return function() {
      wrapperRaf.cancel(visibleRef.current);
    };
  }, [visible]);
  return /* @__PURE__ */ React$2.createElement(Trigger, {
    prefixCls,
    popupClassName: classNames("".concat(prefixCls, "-popup"), _defineProperty$3({}, "".concat(prefixCls, "-rtl"), rtl), popupClassName, rootClassName),
    stretch: mode === "horizontal" ? "minWidth" : null,
    getPopupContainer,
    builtinPlacements: placement,
    popupPlacement,
    popupVisible: innerVisible,
    popup,
    popupAlign: popupOffset && {
      offset: popupOffset
    },
    action: disabled ? [] : [triggerSubMenuAction],
    mouseEnterDelay: subMenuOpenDelay,
    mouseLeaveDelay: subMenuCloseDelay,
    onPopupVisibleChange: onVisibleChange,
    forceRender: forceSubMenuRender,
    popupMotion: mergedMotion
  }, children);
}
function InlineSubMenuList(_ref) {
  var id = _ref.id, open = _ref.open, keyPath = _ref.keyPath, children = _ref.children;
  var fixedMode = "inline";
  var _React$useContext = React$2.useContext(MenuContext$2), prefixCls = _React$useContext.prefixCls, forceSubMenuRender = _React$useContext.forceSubMenuRender, motion = _React$useContext.motion, defaultMotions = _React$useContext.defaultMotions, mode = _React$useContext.mode;
  var sameModeRef = React$2.useRef(false);
  sameModeRef.current = mode === fixedMode;
  var _React$useState = React$2.useState(!sameModeRef.current), _React$useState2 = _slicedToArray$1(_React$useState, 2), destroy = _React$useState2[0], setDestroy = _React$useState2[1];
  var mergedOpen = sameModeRef.current ? open : false;
  React$2.useEffect(function() {
    if (sameModeRef.current) {
      setDestroy(false);
    }
  }, [mode]);
  var mergedMotion = _objectSpread2$1({}, getMotion(fixedMode, motion, defaultMotions));
  if (keyPath.length > 1) {
    mergedMotion.motionAppear = false;
  }
  var originOnVisibleChanged = mergedMotion.onVisibleChanged;
  mergedMotion.onVisibleChanged = function(newVisible) {
    if (!sameModeRef.current && !newVisible) {
      setDestroy(true);
    }
    return originOnVisibleChanged === null || originOnVisibleChanged === void 0 ? void 0 : originOnVisibleChanged(newVisible);
  };
  if (destroy) {
    return null;
  }
  return /* @__PURE__ */ React$2.createElement(InheritableContextProvider, {
    mode: fixedMode,
    locked: !sameModeRef.current
  }, /* @__PURE__ */ React$2.createElement(CSSMotion, _extends$1({
    visible: mergedOpen
  }, mergedMotion, {
    forceRender: forceSubMenuRender,
    removeOnLeave: false,
    leavedClassName: "".concat(prefixCls, "-hidden")
  }), function(_ref2) {
    var motionClassName = _ref2.className, motionStyle = _ref2.style;
    return /* @__PURE__ */ React$2.createElement(SubMenuList, {
      id,
      className: motionClassName,
      style: motionStyle
    }, children);
  }));
}
var _excluded$4 = ["style", "className", "title", "eventKey", "warnKey", "disabled", "internalPopupClose", "children", "itemIcon", "expandIcon", "popupClassName", "popupOffset", "onClick", "onMouseEnter", "onMouseLeave", "onTitleClick", "onTitleMouseEnter", "onTitleMouseLeave"], _excluded2$1 = ["active"];
var InternalSubMenu = function InternalSubMenu2(props) {
  var _classNames;
  var style2 = props.style, className = props.className, title = props.title, eventKey = props.eventKey, warnKey = props.warnKey, disabled = props.disabled, internalPopupClose = props.internalPopupClose, children = props.children, itemIcon = props.itemIcon, expandIcon = props.expandIcon, popupClassName = props.popupClassName, popupOffset = props.popupOffset, onClick = props.onClick, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onTitleClick = props.onTitleClick, onTitleMouseEnter = props.onTitleMouseEnter, onTitleMouseLeave = props.onTitleMouseLeave, restProps = _objectWithoutProperties(props, _excluded$4);
  var domDataId = useMenuId(eventKey);
  var _React$useContext = React$2.useContext(MenuContext$2), prefixCls = _React$useContext.prefixCls, mode = _React$useContext.mode, openKeys = _React$useContext.openKeys, contextDisabled = _React$useContext.disabled, overflowDisabled = _React$useContext.overflowDisabled, activeKey = _React$useContext.activeKey, selectedKeys = _React$useContext.selectedKeys, contextItemIcon = _React$useContext.itemIcon, contextExpandIcon = _React$useContext.expandIcon, onItemClick = _React$useContext.onItemClick, onOpenChange = _React$useContext.onOpenChange, onActive = _React$useContext.onActive;
  var _React$useContext2 = React$2.useContext(PrivateContext), _internalRenderSubMenuItem = _React$useContext2._internalRenderSubMenuItem;
  var _React$useContext3 = React$2.useContext(PathUserContext), isSubPathKey = _React$useContext3.isSubPathKey;
  var connectedPath = useFullPath();
  var subMenuPrefixCls = "".concat(prefixCls, "-submenu");
  var mergedDisabled = contextDisabled || disabled;
  var elementRef = React$2.useRef();
  var popupRef = React$2.useRef();
  if (process.env.NODE_ENV !== "production" && warnKey) {
    warningOnce(false, "SubMenu should not leave undefined `key`.");
  }
  var mergedItemIcon = itemIcon || contextItemIcon;
  var mergedExpandIcon = expandIcon || contextExpandIcon;
  var originOpen = openKeys.includes(eventKey);
  var open = !overflowDisabled && originOpen;
  var childrenSelected = isSubPathKey(selectedKeys, eventKey);
  var _useActive = useActive$1(eventKey, mergedDisabled, onTitleMouseEnter, onTitleMouseLeave), active = _useActive.active, activeProps = _objectWithoutProperties(_useActive, _excluded2$1);
  var _React$useState = React$2.useState(false), _React$useState2 = _slicedToArray$1(_React$useState, 2), childrenActive = _React$useState2[0], setChildrenActive = _React$useState2[1];
  var triggerChildrenActive = function triggerChildrenActive2(newActive) {
    if (!mergedDisabled) {
      setChildrenActive(newActive);
    }
  };
  var onInternalMouseEnter = function onInternalMouseEnter2(domEvent) {
    triggerChildrenActive(true);
    onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter({
      key: eventKey,
      domEvent
    });
  };
  var onInternalMouseLeave = function onInternalMouseLeave2(domEvent) {
    triggerChildrenActive(false);
    onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave({
      key: eventKey,
      domEvent
    });
  };
  var mergedActive = React$2.useMemo(function() {
    if (active) {
      return active;
    }
    if (mode !== "inline") {
      return childrenActive || isSubPathKey([activeKey], eventKey);
    }
    return false;
  }, [mode, active, activeKey, childrenActive, eventKey, isSubPathKey]);
  var directionStyle = useDirectionStyle(connectedPath.length);
  var onInternalTitleClick = function onInternalTitleClick2(e) {
    if (mergedDisabled) {
      return;
    }
    onTitleClick === null || onTitleClick === void 0 ? void 0 : onTitleClick({
      key: eventKey,
      domEvent: e
    });
    if (mode === "inline") {
      onOpenChange(eventKey, !originOpen);
    }
  };
  var onMergedItemClick = useMemoCallback(function(info) {
    onClick === null || onClick === void 0 ? void 0 : onClick(warnItemProp(info));
    onItemClick(info);
  });
  var onPopupVisibleChange = function onPopupVisibleChange2(newVisible) {
    if (mode !== "inline") {
      onOpenChange(eventKey, newVisible);
    }
  };
  var onInternalFocus = function onInternalFocus2() {
    onActive(eventKey);
  };
  var popupId = domDataId && "".concat(domDataId, "-popup");
  var titleNode = /* @__PURE__ */ React$2.createElement("div", _extends$1({
    role: "menuitem",
    style: directionStyle,
    className: "".concat(subMenuPrefixCls, "-title"),
    tabIndex: mergedDisabled ? null : -1,
    ref: elementRef,
    title: typeof title === "string" ? title : null,
    "data-menu-id": overflowDisabled && domDataId ? null : domDataId,
    "aria-expanded": open,
    "aria-haspopup": true,
    "aria-controls": popupId,
    "aria-disabled": mergedDisabled,
    onClick: onInternalTitleClick,
    onFocus: onInternalFocus
  }, activeProps), title, /* @__PURE__ */ React$2.createElement(Icon$2, {
    icon: mode !== "horizontal" ? mergedExpandIcon : null,
    props: _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      isOpen: open,
      // [Legacy] Not sure why need this mark
      isSubMenu: true
    })
  }, /* @__PURE__ */ React$2.createElement("i", {
    className: "".concat(subMenuPrefixCls, "-arrow")
  })));
  var triggerModeRef = React$2.useRef(mode);
  if (mode !== "inline" && connectedPath.length > 1) {
    triggerModeRef.current = "vertical";
  } else {
    triggerModeRef.current = mode;
  }
  if (!overflowDisabled) {
    var triggerMode = triggerModeRef.current;
    titleNode = /* @__PURE__ */ React$2.createElement(PopupTrigger, {
      mode: triggerMode,
      prefixCls: subMenuPrefixCls,
      visible: !internalPopupClose && open && mode !== "inline",
      popupClassName,
      popupOffset,
      popup: /* @__PURE__ */ React$2.createElement(
        InheritableContextProvider,
        {
          mode: triggerMode === "horizontal" ? "vertical" : triggerMode
        },
        /* @__PURE__ */ React$2.createElement(SubMenuList, {
          id: popupId,
          ref: popupRef
        }, children)
      ),
      disabled: mergedDisabled,
      onVisibleChange: onPopupVisibleChange
    }, titleNode);
  }
  var listNode = /* @__PURE__ */ React$2.createElement(ForwardOverflow.Item, _extends$1({
    role: "none"
  }, restProps, {
    component: "li",
    style: style2,
    className: classNames(subMenuPrefixCls, "".concat(subMenuPrefixCls, "-").concat(mode), className, (_classNames = {}, _defineProperty$3(_classNames, "".concat(subMenuPrefixCls, "-open"), open), _defineProperty$3(_classNames, "".concat(subMenuPrefixCls, "-active"), mergedActive), _defineProperty$3(_classNames, "".concat(subMenuPrefixCls, "-selected"), childrenSelected), _defineProperty$3(_classNames, "".concat(subMenuPrefixCls, "-disabled"), mergedDisabled), _classNames)),
    onMouseEnter: onInternalMouseEnter,
    onMouseLeave: onInternalMouseLeave
  }), titleNode, !overflowDisabled && /* @__PURE__ */ React$2.createElement(InlineSubMenuList, {
    id: popupId,
    open,
    keyPath: connectedPath
  }, children));
  if (_internalRenderSubMenuItem) {
    listNode = _internalRenderSubMenuItem(listNode, props, {
      selected: childrenSelected,
      active: mergedActive,
      open,
      disabled: mergedDisabled
    });
  }
  return /* @__PURE__ */ React$2.createElement(InheritableContextProvider, {
    onItemClick: onMergedItemClick,
    mode: mode === "horizontal" ? "vertical" : mode,
    itemIcon: mergedItemIcon,
    expandIcon: mergedExpandIcon
  }, listNode);
};
function SubMenu$2(props) {
  var eventKey = props.eventKey, children = props.children;
  var connectedKeyPath = useFullPath(eventKey);
  var childList = parseChildren(children, connectedKeyPath);
  var measure = useMeasure();
  React$2.useEffect(function() {
    if (measure) {
      measure.registerPath(eventKey, connectedKeyPath);
      return function() {
        measure.unregisterPath(eventKey, connectedKeyPath);
      };
    }
  }, [connectedKeyPath]);
  var renderNode;
  if (measure) {
    renderNode = childList;
  } else {
    renderNode = /* @__PURE__ */ React$2.createElement(InternalSubMenu, props, childList);
  }
  return /* @__PURE__ */ React$2.createElement(PathTrackerContext.Provider, {
    value: connectedKeyPath
  }, renderNode);
}
var _excluded$3 = ["prefixCls", "rootClassName", "style", "className", "tabIndex", "items", "children", "direction", "id", "mode", "inlineCollapsed", "disabled", "disabledOverflow", "subMenuOpenDelay", "subMenuCloseDelay", "forceSubMenuRender", "defaultOpenKeys", "openKeys", "activeKey", "defaultActiveFirst", "selectable", "multiple", "defaultSelectedKeys", "selectedKeys", "onSelect", "onDeselect", "inlineIndent", "motion", "defaultMotions", "triggerSubMenuAction", "builtinPlacements", "itemIcon", "expandIcon", "overflowedIndicator", "overflowedIndicatorPopupClassName", "getPopupContainer", "onClick", "onOpenChange", "onKeyDown", "openAnimation", "openTransitionName", "_internalRenderMenuItem", "_internalRenderSubMenuItem"];
var EMPTY_LIST = [];
var Menu$2 = /* @__PURE__ */ React$2.forwardRef(function(props, ref) {
  var _childList$, _classNames;
  var _ref = props, _ref$prefixCls = _ref.prefixCls, prefixCls = _ref$prefixCls === void 0 ? "rc-menu" : _ref$prefixCls, rootClassName = _ref.rootClassName, style2 = _ref.style, className = _ref.className, _ref$tabIndex = _ref.tabIndex, tabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex, items = _ref.items, children = _ref.children, direction = _ref.direction, id = _ref.id, _ref$mode = _ref.mode, mode = _ref$mode === void 0 ? "vertical" : _ref$mode, inlineCollapsed = _ref.inlineCollapsed, disabled = _ref.disabled, disabledOverflow = _ref.disabledOverflow, _ref$subMenuOpenDelay = _ref.subMenuOpenDelay, subMenuOpenDelay = _ref$subMenuOpenDelay === void 0 ? 0.1 : _ref$subMenuOpenDelay, _ref$subMenuCloseDela = _ref.subMenuCloseDelay, subMenuCloseDelay = _ref$subMenuCloseDela === void 0 ? 0.1 : _ref$subMenuCloseDela, forceSubMenuRender = _ref.forceSubMenuRender, defaultOpenKeys = _ref.defaultOpenKeys, openKeys = _ref.openKeys, activeKey = _ref.activeKey, defaultActiveFirst = _ref.defaultActiveFirst, _ref$selectable = _ref.selectable, selectable = _ref$selectable === void 0 ? true : _ref$selectable, _ref$multiple = _ref.multiple, multiple = _ref$multiple === void 0 ? false : _ref$multiple, defaultSelectedKeys = _ref.defaultSelectedKeys, selectedKeys = _ref.selectedKeys, onSelect = _ref.onSelect, onDeselect = _ref.onDeselect, _ref$inlineIndent = _ref.inlineIndent, inlineIndent = _ref$inlineIndent === void 0 ? 24 : _ref$inlineIndent, motion = _ref.motion, defaultMotions = _ref.defaultMotions, _ref$triggerSubMenuAc = _ref.triggerSubMenuAction, triggerSubMenuAction = _ref$triggerSubMenuAc === void 0 ? "hover" : _ref$triggerSubMenuAc, builtinPlacements = _ref.builtinPlacements, itemIcon = _ref.itemIcon, expandIcon = _ref.expandIcon, _ref$overflowedIndica = _ref.overflowedIndicator, overflowedIndicator = _ref$overflowedIndica === void 0 ? "..." : _ref$overflowedIndica, overflowedIndicatorPopupClassName = _ref.overflowedIndicatorPopupClassName, getPopupContainer = _ref.getPopupContainer, onClick = _ref.onClick, onOpenChange = _ref.onOpenChange, onKeyDown = _ref.onKeyDown, openAnimation = _ref.openAnimation, openTransitionName = _ref.openTransitionName, _internalRenderMenuItem = _ref._internalRenderMenuItem, _internalRenderSubMenuItem = _ref._internalRenderSubMenuItem, restProps = _objectWithoutProperties(_ref, _excluded$3);
  var childList = React$2.useMemo(function() {
    return parseItems(children, items, EMPTY_LIST);
  }, [children, items]);
  var _React$useState = React$2.useState(false), _React$useState2 = _slicedToArray$1(_React$useState, 2), mounted = _React$useState2[0], setMounted = _React$useState2[1];
  var containerRef = React$2.useRef();
  var uuid2 = useUUID(id);
  var isRtl = direction === "rtl";
  if (process.env.NODE_ENV !== "production") {
    warningOnce(!openAnimation && !openTransitionName, "`openAnimation` and `openTransitionName` is removed. Please use `motion` or `defaultMotion` instead.");
  }
  var _useMergedState = useMergedState(defaultOpenKeys, {
    value: openKeys,
    postState: function postState(keys) {
      return keys || EMPTY_LIST;
    }
  }), _useMergedState2 = _slicedToArray$1(_useMergedState, 2), mergedOpenKeys = _useMergedState2[0], setMergedOpenKeys = _useMergedState2[1];
  var triggerOpenKeys = function triggerOpenKeys2(keys) {
    var forceFlush = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    function doUpdate() {
      setMergedOpenKeys(keys);
      onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(keys);
    }
    if (forceFlush) {
      flushSync(doUpdate);
    } else {
      doUpdate();
    }
  };
  var _React$useState3 = React$2.useState(mergedOpenKeys), _React$useState4 = _slicedToArray$1(_React$useState3, 2), inlineCacheOpenKeys = _React$useState4[0], setInlineCacheOpenKeys = _React$useState4[1];
  var mountRef = React$2.useRef(false);
  var _React$useMemo = React$2.useMemo(function() {
    if ((mode === "inline" || mode === "vertical") && inlineCollapsed) {
      return ["vertical", inlineCollapsed];
    }
    return [mode, false];
  }, [mode, inlineCollapsed]), _React$useMemo2 = _slicedToArray$1(_React$useMemo, 2), mergedMode = _React$useMemo2[0], mergedInlineCollapsed = _React$useMemo2[1];
  var isInlineMode = mergedMode === "inline";
  var _React$useState5 = React$2.useState(mergedMode), _React$useState6 = _slicedToArray$1(_React$useState5, 2), internalMode = _React$useState6[0], setInternalMode = _React$useState6[1];
  var _React$useState7 = React$2.useState(mergedInlineCollapsed), _React$useState8 = _slicedToArray$1(_React$useState7, 2), internalInlineCollapsed = _React$useState8[0], setInternalInlineCollapsed = _React$useState8[1];
  React$2.useEffect(function() {
    setInternalMode(mergedMode);
    setInternalInlineCollapsed(mergedInlineCollapsed);
    if (!mountRef.current) {
      return;
    }
    if (isInlineMode) {
      setMergedOpenKeys(inlineCacheOpenKeys);
    } else {
      triggerOpenKeys(EMPTY_LIST);
    }
  }, [mergedMode, mergedInlineCollapsed]);
  var _React$useState9 = React$2.useState(0), _React$useState10 = _slicedToArray$1(_React$useState9, 2), lastVisibleIndex = _React$useState10[0], setLastVisibleIndex = _React$useState10[1];
  var allVisible = lastVisibleIndex >= childList.length - 1 || internalMode !== "horizontal" || disabledOverflow;
  React$2.useEffect(function() {
    if (isInlineMode) {
      setInlineCacheOpenKeys(mergedOpenKeys);
    }
  }, [mergedOpenKeys]);
  React$2.useEffect(function() {
    mountRef.current = true;
    return function() {
      mountRef.current = false;
    };
  }, []);
  var _useKeyRecords = useKeyRecords(), registerPath = _useKeyRecords.registerPath, unregisterPath = _useKeyRecords.unregisterPath, refreshOverflowKeys = _useKeyRecords.refreshOverflowKeys, isSubPathKey = _useKeyRecords.isSubPathKey, getKeyPath = _useKeyRecords.getKeyPath, getKeys = _useKeyRecords.getKeys, getSubPathKeys = _useKeyRecords.getSubPathKeys;
  var registerPathContext = React$2.useMemo(function() {
    return {
      registerPath,
      unregisterPath
    };
  }, [registerPath, unregisterPath]);
  var pathUserContext = React$2.useMemo(function() {
    return {
      isSubPathKey
    };
  }, [isSubPathKey]);
  React$2.useEffect(function() {
    refreshOverflowKeys(allVisible ? EMPTY_LIST : childList.slice(lastVisibleIndex + 1).map(function(child) {
      return child.key;
    }));
  }, [lastVisibleIndex, allVisible]);
  var _useMergedState3 = useMergedState(activeKey || defaultActiveFirst && ((_childList$ = childList[0]) === null || _childList$ === void 0 ? void 0 : _childList$.key), {
    value: activeKey
  }), _useMergedState4 = _slicedToArray$1(_useMergedState3, 2), mergedActiveKey = _useMergedState4[0], setMergedActiveKey = _useMergedState4[1];
  var onActive = useMemoCallback(function(key) {
    setMergedActiveKey(key);
  });
  var onInactive = useMemoCallback(function() {
    setMergedActiveKey(void 0);
  });
  useImperativeHandle(ref, function() {
    return {
      list: containerRef.current,
      focus: function focus(options) {
        var _childList$find;
        var shouldFocusKey = mergedActiveKey !== null && mergedActiveKey !== void 0 ? mergedActiveKey : (_childList$find = childList.find(function(node2) {
          return !node2.props.disabled;
        })) === null || _childList$find === void 0 ? void 0 : _childList$find.key;
        if (shouldFocusKey) {
          var _containerRef$current, _containerRef$current2, _containerRef$current3;
          (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : (_containerRef$current2 = _containerRef$current.querySelector("li[data-menu-id='".concat(getMenuId(uuid2, shouldFocusKey), "']"))) === null || _containerRef$current2 === void 0 ? void 0 : (_containerRef$current3 = _containerRef$current2.focus) === null || _containerRef$current3 === void 0 ? void 0 : _containerRef$current3.call(_containerRef$current2, options);
        }
      }
    };
  });
  var _useMergedState5 = useMergedState(defaultSelectedKeys || [], {
    value: selectedKeys,
    // Legacy convert key to array
    postState: function postState(keys) {
      if (Array.isArray(keys)) {
        return keys;
      }
      if (keys === null || keys === void 0) {
        return EMPTY_LIST;
      }
      return [keys];
    }
  }), _useMergedState6 = _slicedToArray$1(_useMergedState5, 2), mergedSelectKeys = _useMergedState6[0], setMergedSelectKeys = _useMergedState6[1];
  var triggerSelection = function triggerSelection2(info) {
    if (selectable) {
      var targetKey = info.key;
      var exist = mergedSelectKeys.includes(targetKey);
      var newSelectKeys;
      if (multiple) {
        if (exist) {
          newSelectKeys = mergedSelectKeys.filter(function(key) {
            return key !== targetKey;
          });
        } else {
          newSelectKeys = [].concat(_toConsumableArray(mergedSelectKeys), [targetKey]);
        }
      } else {
        newSelectKeys = [targetKey];
      }
      setMergedSelectKeys(newSelectKeys);
      var selectInfo = _objectSpread2$1(_objectSpread2$1({}, info), {}, {
        selectedKeys: newSelectKeys
      });
      if (exist) {
        onDeselect === null || onDeselect === void 0 ? void 0 : onDeselect(selectInfo);
      } else {
        onSelect === null || onSelect === void 0 ? void 0 : onSelect(selectInfo);
      }
    }
    if (!multiple && mergedOpenKeys.length && internalMode !== "inline") {
      triggerOpenKeys(EMPTY_LIST);
    }
  };
  var onInternalClick = useMemoCallback(function(info) {
    onClick === null || onClick === void 0 ? void 0 : onClick(warnItemProp(info));
    triggerSelection(info);
  });
  var onInternalOpenChange = useMemoCallback(function(key, open) {
    var newOpenKeys = mergedOpenKeys.filter(function(k) {
      return k !== key;
    });
    if (open) {
      newOpenKeys.push(key);
    } else if (internalMode !== "inline") {
      var subPathKeys = getSubPathKeys(key);
      newOpenKeys = newOpenKeys.filter(function(k) {
        return !subPathKeys.has(k);
      });
    }
    if (!isEqual(mergedOpenKeys, newOpenKeys, true)) {
      triggerOpenKeys(newOpenKeys, true);
    }
  });
  var getInternalPopupContainer = useMemoCallback(getPopupContainer);
  var triggerAccessibilityOpen = function triggerAccessibilityOpen2(key, open) {
    var nextOpen = open !== null && open !== void 0 ? open : !mergedOpenKeys.includes(key);
    onInternalOpenChange(key, nextOpen);
  };
  var onInternalKeyDown = useAccessibility(internalMode, mergedActiveKey, isRtl, uuid2, containerRef, getKeys, getKeyPath, setMergedActiveKey, triggerAccessibilityOpen, onKeyDown);
  React$2.useEffect(function() {
    setMounted(true);
  }, []);
  var privateContext = React$2.useMemo(function() {
    return {
      _internalRenderMenuItem,
      _internalRenderSubMenuItem
    };
  }, [_internalRenderMenuItem, _internalRenderSubMenuItem]);
  var wrappedChildList = internalMode !== "horizontal" || disabledOverflow ? childList : (
    // Need wrap for overflow dropdown that do not response for open
    childList.map(function(child, index2) {
      return (
        // Always wrap provider to avoid sub node re-mount
        /* @__PURE__ */ React$2.createElement(InheritableContextProvider, {
          key: child.key,
          overflowDisabled: index2 > lastVisibleIndex
        }, child)
      );
    })
  );
  var container = /* @__PURE__ */ React$2.createElement(ForwardOverflow, _extends$1({
    id,
    ref: containerRef,
    prefixCls: "".concat(prefixCls, "-overflow"),
    component: "ul",
    itemComponent: MenuItem$2,
    className: classNames(prefixCls, "".concat(prefixCls, "-root"), "".concat(prefixCls, "-").concat(internalMode), className, (_classNames = {}, _defineProperty$3(_classNames, "".concat(prefixCls, "-inline-collapsed"), internalInlineCollapsed), _defineProperty$3(_classNames, "".concat(prefixCls, "-rtl"), isRtl), _classNames), rootClassName),
    dir: direction,
    style: style2,
    role: "menu",
    tabIndex,
    data: wrappedChildList,
    renderRawItem: function renderRawItem(node2) {
      return node2;
    },
    renderRawRest: function renderRawRest(omitItems) {
      var len = omitItems.length;
      var originOmitItems = len ? childList.slice(-len) : null;
      return /* @__PURE__ */ React$2.createElement(SubMenu$2, {
        eventKey: OVERFLOW_KEY,
        title: overflowedIndicator,
        disabled: allVisible,
        internalPopupClose: len === 0,
        popupClassName: overflowedIndicatorPopupClassName
      }, originOmitItems);
    },
    maxCount: internalMode !== "horizontal" || disabledOverflow ? ForwardOverflow.INVALIDATE : ForwardOverflow.RESPONSIVE,
    ssr: "full",
    "data-menu-list": true,
    onVisibleChange: function onVisibleChange(newLastIndex) {
      setLastVisibleIndex(newLastIndex);
    },
    onKeyDown: onInternalKeyDown
  }, restProps));
  return /* @__PURE__ */ React$2.createElement(PrivateContext.Provider, {
    value: privateContext
  }, /* @__PURE__ */ React$2.createElement(IdContext.Provider, {
    value: uuid2
  }, /* @__PURE__ */ React$2.createElement(InheritableContextProvider, {
    prefixCls,
    rootClassName,
    mode: internalMode,
    openKeys: mergedOpenKeys,
    rtl: isRtl,
    disabled,
    motion: mounted ? motion : null,
    defaultMotions: mounted ? defaultMotions : null,
    activeKey: mergedActiveKey,
    onActive,
    onInactive,
    selectedKeys: mergedSelectKeys,
    inlineIndent,
    subMenuOpenDelay,
    subMenuCloseDelay,
    forceSubMenuRender,
    builtinPlacements,
    triggerSubMenuAction,
    getPopupContainer: getInternalPopupContainer,
    itemIcon,
    expandIcon,
    onItemClick: onInternalClick,
    onOpenChange: onInternalOpenChange
  }, /* @__PURE__ */ React$2.createElement(PathUserContext.Provider, {
    value: pathUserContext
  }, container), /* @__PURE__ */ React$2.createElement("div", {
    style: {
      display: "none"
    },
    "aria-hidden": true
  }, /* @__PURE__ */ React$2.createElement(PathRegisterContext.Provider, {
    value: registerPathContext
  }, childList)))));
});
var _excluded$2 = ["className", "title", "eventKey", "children"], _excluded2 = ["children"];
var InternalMenuItemGroup = function InternalMenuItemGroup2(_ref) {
  var className = _ref.className, title = _ref.title;
  _ref.eventKey;
  var children = _ref.children, restProps = _objectWithoutProperties(_ref, _excluded$2);
  var _React$useContext = React$2.useContext(MenuContext$2), prefixCls = _React$useContext.prefixCls;
  var groupPrefixCls = "".concat(prefixCls, "-item-group");
  return /* @__PURE__ */ React$2.createElement("li", _extends$1({
    role: "presentation"
  }, restProps, {
    onClick: function onClick(e) {
      return e.stopPropagation();
    },
    className: classNames(groupPrefixCls, className)
  }), /* @__PURE__ */ React$2.createElement("div", {
    role: "presentation",
    className: "".concat(groupPrefixCls, "-title"),
    title: typeof title === "string" ? title : void 0
  }, title), /* @__PURE__ */ React$2.createElement("ul", {
    role: "group",
    className: "".concat(groupPrefixCls, "-list")
  }, children));
};
function MenuItemGroup(_ref2) {
  var children = _ref2.children, props = _objectWithoutProperties(_ref2, _excluded2);
  var connectedKeyPath = useFullPath(props.eventKey);
  var childList = parseChildren(children, connectedKeyPath);
  var measure = useMeasure();
  if (measure) {
    return childList;
  }
  return /* @__PURE__ */ React$2.createElement(InternalMenuItemGroup, omit(props, ["warnKey"]), childList);
}
function Divider(_ref) {
  var className = _ref.className, style2 = _ref.style;
  var _React$useContext = React$2.useContext(MenuContext$2), prefixCls = _React$useContext.prefixCls;
  var measure = useMeasure();
  if (measure) {
    return null;
  }
  return /* @__PURE__ */ React$2.createElement("li", {
    className: classNames("".concat(prefixCls, "-item-divider"), className),
    style: style2
  });
}
var ExportMenu = Menu$2;
ExportMenu.Item = MenuItem$2;
ExportMenu.SubMenu = SubMenu$2;
ExportMenu.ItemGroup = MenuItemGroup;
ExportMenu.Divider = Divider;
var EllipsisOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M176 511a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0z" } }] }, "name": "ellipsis", "theme": "outlined" };
const EllipsisOutlinedSvg = EllipsisOutlined$2;
var EllipsisOutlined = function EllipsisOutlined2(props, ref) {
  return /* @__PURE__ */ React$2.createElement(AntdIcon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
    ref,
    icon: EllipsisOutlinedSvg
  }));
};
EllipsisOutlined.displayName = "EllipsisOutlined";
const EllipsisOutlined$1 = /* @__PURE__ */ React$2.forwardRef(EllipsisOutlined);
const getHorizontalStyle = (token2) => {
  const {
    componentCls,
    motionDurationSlow,
    menuHorizontalHeight,
    colorSplit,
    lineWidth,
    lineType,
    menuItemPaddingInline
  } = token2;
  return {
    [`${componentCls}-horizontal`]: {
      lineHeight: `${menuHorizontalHeight}px`,
      border: 0,
      borderBottom: `${lineWidth}px ${lineType} ${colorSplit}`,
      boxShadow: "none",
      "&::after": {
        display: "block",
        clear: "both",
        height: 0,
        content: '"\\20"'
      },
      // ======================= Item =======================
      [`${componentCls}-item, ${componentCls}-submenu`]: {
        position: "relative",
        display: "inline-block",
        verticalAlign: "bottom",
        paddingInline: menuItemPaddingInline
      },
      [`> ${componentCls}-item:hover,
        > ${componentCls}-item-active,
        > ${componentCls}-submenu ${componentCls}-submenu-title:hover`]: {
        backgroundColor: "transparent"
      },
      [`${componentCls}-item, ${componentCls}-submenu-title`]: {
        transition: [`border-color ${motionDurationSlow}`, `background ${motionDurationSlow}`].join(",")
      },
      // ===================== Sub Menu =====================
      [`${componentCls}-submenu-arrow`]: {
        display: "none"
      }
    }
  };
};
const getHorizontalStyle$1 = getHorizontalStyle;
const getRTLStyle = (_ref) => {
  let {
    componentCls,
    menuArrowOffset
  } = _ref;
  return {
    [`${componentCls}-rtl`]: {
      direction: "rtl"
    },
    [`${componentCls}-submenu-rtl`]: {
      transformOrigin: "100% 0"
    },
    // Vertical Arrow
    [`${componentCls}-rtl${componentCls}-vertical,
    ${componentCls}-submenu-rtl ${componentCls}-vertical`]: {
      [`${componentCls}-submenu-arrow`]: {
        "&::before": {
          transform: `rotate(-45deg) translateY(-${menuArrowOffset})`
        },
        "&::after": {
          transform: `rotate(45deg) translateY(${menuArrowOffset})`
        }
      }
    }
  };
};
const getRTLStyle$1 = getRTLStyle;
const accessibilityFocus = (token2) => Object.assign({}, genFocusOutline(token2));
const getThemeStyle = (token2, themeSuffix) => {
  const {
    componentCls,
    colorItemText,
    colorItemTextSelected,
    colorGroupTitle,
    colorItemBg,
    colorSubItemBg,
    colorItemBgSelected,
    colorActiveBarHeight,
    colorActiveBarWidth,
    colorActiveBarBorderSize,
    motionDurationSlow,
    motionEaseInOut,
    motionEaseOut,
    menuItemPaddingInline,
    motionDurationMid,
    colorItemTextHover,
    lineType,
    colorSplit,
    // Disabled
    colorItemTextDisabled,
    // Danger
    colorDangerItemText,
    colorDangerItemTextHover,
    colorDangerItemTextSelected,
    colorDangerItemBgActive,
    colorDangerItemBgSelected,
    colorItemBgHover,
    menuSubMenuBg,
    // Horizontal
    colorItemTextSelectedHorizontal,
    colorItemBgSelectedHorizontal
  } = token2;
  return {
    [`${componentCls}-${themeSuffix}, ${componentCls}-${themeSuffix} > ${componentCls}`]: {
      color: colorItemText,
      background: colorItemBg,
      [`&${componentCls}-root:focus-visible`]: Object.assign({}, accessibilityFocus(token2)),
      // ======================== Item ========================
      [`${componentCls}-item-group-title`]: {
        color: colorGroupTitle
      },
      [`${componentCls}-submenu-selected`]: {
        [`> ${componentCls}-submenu-title`]: {
          color: colorItemTextSelected
        }
      },
      // Disabled
      [`${componentCls}-item-disabled, ${componentCls}-submenu-disabled`]: {
        color: `${colorItemTextDisabled} !important`
      },
      // Hover
      [`${componentCls}-item:hover, ${componentCls}-submenu-title:hover`]: {
        [`&:not(${componentCls}-item-selected):not(${componentCls}-submenu-selected)`]: {
          color: colorItemTextHover
        }
      },
      [`&:not(${componentCls}-horizontal)`]: {
        [`${componentCls}-item:not(${componentCls}-item-selected)`]: {
          "&:hover": {
            backgroundColor: colorItemBgHover
          },
          "&:active": {
            backgroundColor: colorItemBgSelected
          }
        },
        [`${componentCls}-submenu-title`]: {
          "&:hover": {
            backgroundColor: colorItemBgHover
          },
          "&:active": {
            backgroundColor: colorItemBgSelected
          }
        }
      },
      // Danger - only Item has
      [`${componentCls}-item-danger`]: {
        color: colorDangerItemText,
        [`&${componentCls}-item:hover`]: {
          [`&:not(${componentCls}-item-selected):not(${componentCls}-submenu-selected)`]: {
            color: colorDangerItemTextHover
          }
        },
        [`&${componentCls}-item:active`]: {
          background: colorDangerItemBgActive
        }
      },
      [`${componentCls}-item a`]: {
        "&, &:hover": {
          color: "inherit"
        }
      },
      [`${componentCls}-item-selected`]: {
        color: colorItemTextSelected,
        // Danger
        [`&${componentCls}-item-danger`]: {
          color: colorDangerItemTextSelected
        },
        [`a, a:hover`]: {
          color: "inherit"
        }
      },
      [`& ${componentCls}-item-selected`]: {
        backgroundColor: colorItemBgSelected,
        // Danger
        [`&${componentCls}-item-danger`]: {
          backgroundColor: colorDangerItemBgSelected
        }
      },
      [`${componentCls}-item, ${componentCls}-submenu-title`]: {
        [`&:not(${componentCls}-item-disabled):focus-visible`]: Object.assign({}, accessibilityFocus(token2))
      },
      [`&${componentCls}-submenu > ${componentCls}`]: {
        backgroundColor: menuSubMenuBg
      },
      [`&${componentCls}-popup > ${componentCls}`]: {
        backgroundColor: colorItemBg
      },
      // ====================== Horizontal ======================
      [`&${componentCls}-horizontal`]: Object.assign(Object.assign({}, themeSuffix === "dark" ? {
        borderBottom: 0
      } : {}), {
        [`> ${componentCls}-item, > ${componentCls}-submenu`]: {
          top: colorActiveBarBorderSize,
          marginTop: -colorActiveBarBorderSize,
          marginBottom: 0,
          borderRadius: 0,
          "&::after": {
            position: "absolute",
            insetInline: menuItemPaddingInline,
            bottom: 0,
            borderBottom: `${colorActiveBarHeight}px solid transparent`,
            transition: `border-color ${motionDurationSlow} ${motionEaseInOut}`,
            content: '""'
          },
          [`&:hover, &-active, &-open`]: {
            "&::after": {
              borderBottomWidth: colorActiveBarHeight,
              borderBottomColor: colorItemTextSelectedHorizontal
            }
          },
          [`&-selected`]: {
            color: colorItemTextSelectedHorizontal,
            backgroundColor: colorItemBgSelectedHorizontal,
            "&::after": {
              borderBottomWidth: colorActiveBarHeight,
              borderBottomColor: colorItemTextSelectedHorizontal
            }
          }
        }
      }),
      // ================== Inline & Vertical ===================
      //
      [`&${componentCls}-root`]: {
        [`&${componentCls}-inline, &${componentCls}-vertical`]: {
          borderInlineEnd: `${colorActiveBarBorderSize}px ${lineType} ${colorSplit}`
        }
      },
      // ======================== Inline ========================
      [`&${componentCls}-inline`]: {
        // Sub
        [`${componentCls}-sub${componentCls}-inline`]: {
          background: colorSubItemBg
        },
        // Item
        [`${componentCls}-item, ${componentCls}-submenu-title`]: colorActiveBarBorderSize && colorActiveBarWidth ? {
          width: `calc(100% + ${colorActiveBarBorderSize}px)`
        } : {},
        [`${componentCls}-item`]: {
          position: "relative",
          "&::after": {
            position: "absolute",
            insetBlock: 0,
            insetInlineEnd: 0,
            borderInlineEnd: `${colorActiveBarWidth}px solid ${colorItemTextSelected}`,
            transform: "scaleY(0.0001)",
            opacity: 0,
            transition: [`transform ${motionDurationMid} ${motionEaseOut}`, `opacity ${motionDurationMid} ${motionEaseOut}`].join(","),
            content: '""'
          },
          // Danger
          [`&${componentCls}-item-danger`]: {
            "&::after": {
              borderInlineEndColor: colorDangerItemTextSelected
            }
          }
        },
        [`${componentCls}-selected, ${componentCls}-item-selected`]: {
          "&::after": {
            transform: "scaleY(1)",
            opacity: 1,
            transition: [`transform ${motionDurationMid} ${motionEaseInOut}`, `opacity ${motionDurationMid} ${motionEaseInOut}`].join(",")
          }
        }
      }
    }
  };
};
const getThemeStyle$1 = getThemeStyle;
const getVerticalInlineStyle = (token2) => {
  const {
    componentCls,
    menuItemHeight,
    itemMarginInline,
    padding,
    menuArrowSize,
    marginXS,
    marginXXS
  } = token2;
  const paddingWithArrow = padding + menuArrowSize + marginXS;
  return {
    [`${componentCls}-item`]: {
      position: "relative"
    },
    [`${componentCls}-item, ${componentCls}-submenu-title`]: {
      height: menuItemHeight,
      lineHeight: `${menuItemHeight}px`,
      paddingInline: padding,
      overflow: "hidden",
      textOverflow: "ellipsis",
      marginInline: itemMarginInline,
      marginBlock: marginXXS,
      width: `calc(100% - ${itemMarginInline * 2}px)`
    },
    // disable margin collapsed
    [`${componentCls}-submenu`]: {
      paddingBottom: 0.02
    },
    [`> ${componentCls}-item,
            > ${componentCls}-submenu > ${componentCls}-submenu-title`]: {
      height: menuItemHeight,
      lineHeight: `${menuItemHeight}px`
    },
    [`${componentCls}-item-group-list ${componentCls}-submenu-title,
            ${componentCls}-submenu-title`]: {
      paddingInlineEnd: paddingWithArrow
    }
  };
};
const getVerticalStyle = (token2) => {
  const {
    componentCls,
    iconCls,
    menuItemHeight,
    colorTextLightSolid,
    dropdownWidth,
    controlHeightLG,
    motionDurationMid,
    motionEaseOut,
    paddingXL,
    fontSizeSM,
    fontSizeLG,
    motionDurationSlow,
    paddingXS,
    boxShadowSecondary
  } = token2;
  const inlineItemStyle = {
    height: menuItemHeight,
    lineHeight: `${menuItemHeight}px`,
    listStylePosition: "inside",
    listStyleType: "disc"
  };
  return [
    {
      [componentCls]: {
        [`&-inline, &-vertical`]: Object.assign({
          [`&${componentCls}-root`]: {
            boxShadow: "none"
          }
        }, getVerticalInlineStyle(token2))
      },
      [`${componentCls}-submenu-popup`]: {
        [`${componentCls}-vertical`]: Object.assign(Object.assign({}, getVerticalInlineStyle(token2)), {
          boxShadow: boxShadowSecondary
        })
      }
    },
    // Vertical only
    {
      [`${componentCls}-submenu-popup ${componentCls}-vertical${componentCls}-sub`]: {
        minWidth: dropdownWidth,
        maxHeight: `calc(100vh - ${controlHeightLG * 2.5}px)`,
        padding: "0",
        overflow: "hidden",
        borderInlineEnd: 0,
        // https://github.com/ant-design/ant-design/issues/22244
        // https://github.com/ant-design/ant-design/issues/26812
        "&:not([class*='-active'])": {
          overflowX: "hidden",
          overflowY: "auto"
        }
      }
    },
    // Inline Only
    {
      [`${componentCls}-inline`]: {
        width: "100%",
        // Motion enhance for first level
        [`&${componentCls}-root`]: {
          [`${componentCls}-item, ${componentCls}-submenu-title`]: {
            display: "flex",
            alignItems: "center",
            transition: [`border-color ${motionDurationSlow}`, `background ${motionDurationSlow}`, `padding ${motionDurationMid} ${motionEaseOut}`].join(","),
            [`> ${componentCls}-title-content`]: {
              flex: "auto",
              minWidth: 0,
              overflow: "hidden",
              textOverflow: "ellipsis"
            },
            "> *": {
              flex: "none"
            }
          }
        },
        // >>>>> Sub
        [`${componentCls}-sub${componentCls}-inline`]: {
          padding: 0,
          border: 0,
          borderRadius: 0,
          boxShadow: "none",
          [`& > ${componentCls}-submenu > ${componentCls}-submenu-title`]: inlineItemStyle,
          [`& ${componentCls}-item-group-title`]: {
            paddingInlineStart: paddingXL
          }
        },
        // >>>>> Item
        [`${componentCls}-item`]: inlineItemStyle
      }
    },
    // Inline Collapse Only
    {
      [`${componentCls}-inline-collapsed`]: {
        width: menuItemHeight * 2,
        [`&${componentCls}-root`]: {
          [`${componentCls}-item, ${componentCls}-submenu ${componentCls}-submenu-title`]: {
            [`> ${componentCls}-inline-collapsed-noicon`]: {
              fontSize: fontSizeLG,
              textAlign: "center"
            }
          }
        },
        [`> ${componentCls}-item,
          > ${componentCls}-item-group > ${componentCls}-item-group-list > ${componentCls}-item,
          > ${componentCls}-item-group > ${componentCls}-item-group-list > ${componentCls}-submenu > ${componentCls}-submenu-title,
          > ${componentCls}-submenu > ${componentCls}-submenu-title`]: {
          insetInlineStart: 0,
          paddingInline: `calc(50% - ${fontSizeSM}px)`,
          textOverflow: "clip",
          [`
            ${componentCls}-submenu-arrow,
            ${componentCls}-submenu-expand-icon
          `]: {
            opacity: 0
          },
          [`${componentCls}-item-icon, ${iconCls}`]: {
            margin: 0,
            fontSize: fontSizeLG,
            lineHeight: `${menuItemHeight}px`,
            "+ span": {
              display: "inline-block",
              opacity: 0
            }
          }
        },
        [`${componentCls}-item-icon, ${iconCls}`]: {
          display: "inline-block"
        },
        "&-tooltip": {
          pointerEvents: "none",
          [`${componentCls}-item-icon, ${iconCls}`]: {
            display: "none"
          },
          "a, a:hover": {
            color: colorTextLightSolid
          }
        },
        [`${componentCls}-item-group-title`]: Object.assign(Object.assign({}, textEllipsis), {
          paddingInline: paddingXS
        })
      }
    }
  ];
};
const getVerticalStyle$1 = getVerticalStyle;
const genMenuItemStyle = (token2) => {
  const {
    componentCls,
    fontSize,
    motionDurationSlow,
    motionDurationMid,
    motionEaseInOut,
    motionEaseOut,
    iconCls,
    controlHeightSM
  } = token2;
  return {
    // >>>>> Item
    [`${componentCls}-item, ${componentCls}-submenu-title`]: {
      position: "relative",
      display: "block",
      margin: 0,
      whiteSpace: "nowrap",
      cursor: "pointer",
      transition: [`border-color ${motionDurationSlow}`, `background ${motionDurationSlow}`, `padding ${motionDurationSlow} ${motionEaseInOut}`].join(","),
      [`${componentCls}-item-icon, ${iconCls}`]: {
        minWidth: fontSize,
        fontSize,
        transition: [`font-size ${motionDurationMid} ${motionEaseOut}`, `margin ${motionDurationSlow} ${motionEaseInOut}`, `color ${motionDurationSlow}`].join(","),
        "+ span": {
          marginInlineStart: controlHeightSM - fontSize,
          opacity: 1,
          transition: [`opacity ${motionDurationSlow} ${motionEaseInOut}`, `margin ${motionDurationSlow}`, `color ${motionDurationSlow}`].join(",")
        }
      },
      [`${componentCls}-item-icon`]: Object.assign({}, resetIcon()),
      [`&${componentCls}-item-only-child`]: {
        [`> ${iconCls}, > ${componentCls}-item-icon`]: {
          marginInlineEnd: 0
        }
      }
    },
    // Disabled state sets text to gray and nukes hover/tab effects
    [`${componentCls}-item-disabled, ${componentCls}-submenu-disabled`]: {
      background: "none !important",
      cursor: "not-allowed",
      "&::after": {
        borderColor: "transparent !important"
      },
      a: {
        color: "inherit !important"
      },
      [`> ${componentCls}-submenu-title`]: {
        color: "inherit !important",
        cursor: "not-allowed"
      }
    }
  };
};
const genSubMenuArrowStyle = (token2) => {
  const {
    componentCls,
    motionDurationSlow,
    motionEaseInOut,
    borderRadius,
    menuArrowSize,
    menuArrowOffset
  } = token2;
  return {
    [`${componentCls}-submenu`]: {
      [`&-expand-icon, &-arrow`]: {
        position: "absolute",
        top: "50%",
        insetInlineEnd: token2.margin,
        width: menuArrowSize,
        color: "currentcolor",
        transform: "translateY(-50%)",
        transition: `transform ${motionDurationSlow} ${motionEaseInOut}, opacity ${motionDurationSlow}`
      },
      "&-arrow": {
        // →
        "&::before, &::after": {
          position: "absolute",
          width: menuArrowSize * 0.6,
          height: menuArrowSize * 0.15,
          backgroundColor: "currentcolor",
          borderRadius,
          transition: [`background ${motionDurationSlow} ${motionEaseInOut}`, `transform ${motionDurationSlow} ${motionEaseInOut}`, `top ${motionDurationSlow} ${motionEaseInOut}`, `color ${motionDurationSlow} ${motionEaseInOut}`].join(","),
          content: '""'
        },
        "&::before": {
          transform: `rotate(45deg) translateY(-${menuArrowOffset})`
        },
        "&::after": {
          transform: `rotate(-45deg) translateY(${menuArrowOffset})`
        }
      }
    }
  };
};
const getBaseStyle = (token2) => {
  const {
    antCls,
    componentCls,
    fontSize,
    motionDurationSlow,
    motionDurationMid,
    motionEaseInOut,
    lineHeight,
    paddingXS,
    padding,
    colorSplit,
    lineWidth,
    zIndexPopup,
    borderRadiusLG,
    radiusSubMenuItem,
    menuArrowSize,
    menuArrowOffset,
    lineType,
    menuPanelMaskInset
  } = token2;
  return [
    // Misc
    {
      "": {
        [`${componentCls}`]: Object.assign(Object.assign({}, clearFix()), {
          // Hidden
          [`&-hidden`]: {
            display: "none"
          }
        })
      },
      [`${componentCls}-submenu-hidden`]: {
        display: "none"
      }
    },
    {
      [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token2)), clearFix()), {
        marginBottom: 0,
        paddingInlineStart: 0,
        // Override default ul/ol
        fontSize,
        lineHeight: 0,
        listStyle: "none",
        outline: "none",
        // Magic cubic here but smooth transition
        transition: `width ${motionDurationSlow} cubic-bezier(0.2, 0, 0, 1) 0s`,
        [`ul, ol`]: {
          margin: 0,
          padding: 0,
          listStyle: "none"
        },
        // Overflow ellipsis
        [`&-overflow`]: {
          display: "flex",
          [`${componentCls}-item`]: {
            flex: "none"
          }
        },
        [`${componentCls}-item, ${componentCls}-submenu, ${componentCls}-submenu-title`]: {
          borderRadius: token2.radiusItem
        },
        [`${componentCls}-item-group-title`]: {
          padding: `${paddingXS}px ${padding}px`,
          fontSize,
          lineHeight,
          transition: `all ${motionDurationSlow}`
        },
        [`&-horizontal ${componentCls}-submenu`]: {
          transition: [`border-color ${motionDurationSlow} ${motionEaseInOut}`, `background ${motionDurationSlow} ${motionEaseInOut}`].join(",")
        },
        [`${componentCls}-submenu, ${componentCls}-submenu-inline`]: {
          transition: [`border-color ${motionDurationSlow} ${motionEaseInOut}`, `background ${motionDurationSlow} ${motionEaseInOut}`, `padding ${motionDurationMid} ${motionEaseInOut}`].join(",")
        },
        [`${componentCls}-submenu ${componentCls}-sub`]: {
          cursor: "initial",
          transition: [`background ${motionDurationSlow} ${motionEaseInOut}`, `padding ${motionDurationSlow} ${motionEaseInOut}`].join(",")
        },
        [`${componentCls}-title-content`]: {
          transition: `color ${motionDurationSlow}`
        },
        [`${componentCls}-item a`]: {
          "&::before": {
            position: "absolute",
            inset: 0,
            backgroundColor: "transparent",
            content: '""'
          }
        },
        // Removed a Badge related style seems it's safe
        // https://github.com/ant-design/ant-design/issues/19809
        // >>>>> Divider
        [`${componentCls}-item-divider`]: {
          overflow: "hidden",
          lineHeight: 0,
          borderColor: colorSplit,
          borderStyle: lineType,
          borderWidth: 0,
          borderTopWidth: lineWidth,
          marginBlock: lineWidth,
          padding: 0,
          "&-dashed": {
            borderStyle: "dashed"
          }
        }
      }), genMenuItemStyle(token2)), {
        [`${componentCls}-item-group`]: {
          [`${componentCls}-item-group-list`]: {
            margin: 0,
            padding: 0,
            [`${componentCls}-item, ${componentCls}-submenu-title`]: {
              paddingInline: `${fontSize * 2}px ${padding}px`
            }
          }
        },
        // ======================= Sub Menu =======================
        "&-submenu": {
          "&-popup": {
            position: "absolute",
            zIndex: zIndexPopup,
            background: "transparent",
            borderRadius: borderRadiusLG,
            boxShadow: "none",
            transformOrigin: "0 0",
            // https://github.com/ant-design/ant-design/issues/13955
            "&::before": {
              position: "absolute",
              inset: `${menuPanelMaskInset}px 0 0`,
              zIndex: -1,
              width: "100%",
              height: "100%",
              opacity: 0,
              content: '""'
            }
          },
          // https://github.com/ant-design/ant-design/issues/13955
          "&-placement-rightTop::before": {
            top: 0,
            insetInlineStart: menuPanelMaskInset
          },
          [`> ${componentCls}`]: Object.assign(Object.assign(Object.assign({
            borderRadius: borderRadiusLG
          }, genMenuItemStyle(token2)), genSubMenuArrowStyle(token2)), {
            [`${componentCls}-item, ${componentCls}-submenu > ${componentCls}-submenu-title`]: {
              borderRadius: radiusSubMenuItem
            },
            [`${componentCls}-submenu-title::after`]: {
              transition: `transform ${motionDurationSlow} ${motionEaseInOut}`
            }
          })
        }
      }), genSubMenuArrowStyle(token2)), {
        [`&-inline-collapsed ${componentCls}-submenu-arrow,
        &-inline ${componentCls}-submenu-arrow`]: {
          // ↓
          "&::before": {
            transform: `rotate(-45deg) translateX(${menuArrowOffset})`
          },
          "&::after": {
            transform: `rotate(45deg) translateX(-${menuArrowOffset})`
          }
        },
        [`${componentCls}-submenu-open${componentCls}-submenu-inline > ${componentCls}-submenu-title > ${componentCls}-submenu-arrow`]: {
          // ↑
          transform: `translateY(-${menuArrowSize * 0.2}px)`,
          "&::after": {
            transform: `rotate(-45deg) translateX(-${menuArrowOffset})`
          },
          "&::before": {
            transform: `rotate(45deg) translateX(${menuArrowOffset})`
          }
        }
      })
    },
    // Integration with header element so menu items have the same height
    {
      [`${antCls}-layout-header`]: {
        [componentCls]: {
          lineHeight: "inherit"
        }
      }
    }
  ];
};
const useStyle$3 = (prefixCls, injectStyle) => {
  const useOriginHook = genComponentStyleHook("Menu", (token2, _ref) => {
    let {
      overrideComponentToken
    } = _ref;
    if (injectStyle === false) {
      return [];
    }
    const {
      colorBgElevated,
      colorPrimary,
      colorError,
      colorErrorHover,
      colorTextLightSolid,
      controlHeightLG,
      fontSize
    } = token2;
    const menuArrowSize = fontSize / 7 * 5;
    const menuToken = merge(token2, {
      menuItemHeight: controlHeightLG,
      menuItemPaddingInline: token2.margin,
      menuArrowSize,
      menuHorizontalHeight: controlHeightLG * 1.15,
      menuArrowOffset: `${menuArrowSize * 0.25}px`,
      menuPanelMaskInset: -7,
      menuSubMenuBg: colorBgElevated
    });
    const colorTextDark = new TinyColor(colorTextLightSolid).setAlpha(0.65).toRgbString();
    const menuDarkToken = merge(menuToken, {
      colorItemText: colorTextDark,
      colorItemTextHover: colorTextLightSolid,
      colorGroupTitle: colorTextDark,
      colorItemTextSelected: colorTextLightSolid,
      colorItemBg: "#001529",
      colorSubItemBg: "#000c17",
      colorItemBgActive: "transparent",
      colorItemBgSelected: colorPrimary,
      colorActiveBarWidth: 0,
      colorActiveBarHeight: 0,
      colorActiveBarBorderSize: 0,
      // Disabled
      colorItemTextDisabled: new TinyColor(colorTextLightSolid).setAlpha(0.25).toRgbString(),
      // Danger
      colorDangerItemText: colorError,
      colorDangerItemTextHover: colorErrorHover,
      colorDangerItemTextSelected: colorTextLightSolid,
      colorDangerItemBgActive: colorError,
      colorDangerItemBgSelected: colorError,
      menuSubMenuBg: "#001529",
      // Horizontal
      colorItemTextSelectedHorizontal: colorTextLightSolid,
      colorItemBgSelectedHorizontal: colorPrimary
    }, Object.assign({}, overrideComponentToken));
    return [
      // Basic
      getBaseStyle(menuToken),
      // Horizontal
      getHorizontalStyle$1(menuToken),
      // Vertical
      getVerticalStyle$1(menuToken),
      // Theme
      getThemeStyle$1(menuToken, "light"),
      getThemeStyle$1(menuDarkToken, "dark"),
      // RTL
      getRTLStyle$1(menuToken),
      // Motion
      genCollapseMotion$1(menuToken),
      initSlideMotion(menuToken, "slide-up"),
      initSlideMotion(menuToken, "slide-down"),
      initZoomMotion(menuToken, "zoom-big")
    ];
  }, (token2) => {
    const {
      colorPrimary,
      colorError,
      colorTextDisabled,
      colorErrorBg,
      colorText,
      colorTextDescription,
      colorBgContainer,
      colorFillAlter,
      colorFillContent,
      lineWidth,
      lineWidthBold,
      controlItemBgActive,
      colorBgTextHover
    } = token2;
    return {
      dropdownWidth: 160,
      zIndexPopup: token2.zIndexPopupBase + 50,
      radiusItem: token2.borderRadiusLG,
      radiusSubMenuItem: token2.borderRadiusSM,
      colorItemText: colorText,
      colorItemTextHover: colorText,
      colorItemTextHoverHorizontal: colorPrimary,
      colorGroupTitle: colorTextDescription,
      colorItemTextSelected: colorPrimary,
      colorItemTextSelectedHorizontal: colorPrimary,
      colorItemBg: colorBgContainer,
      colorItemBgHover: colorBgTextHover,
      colorItemBgActive: colorFillContent,
      colorSubItemBg: colorFillAlter,
      colorItemBgSelected: controlItemBgActive,
      colorItemBgSelectedHorizontal: "transparent",
      colorActiveBarWidth: 0,
      colorActiveBarHeight: lineWidthBold,
      colorActiveBarBorderSize: lineWidth,
      // Disabled
      colorItemTextDisabled: colorTextDisabled,
      // Danger
      colorDangerItemText: colorError,
      colorDangerItemTextHover: colorError,
      colorDangerItemTextSelected: colorError,
      colorDangerItemBgActive: colorErrorBg,
      colorDangerItemBgSelected: colorErrorBg,
      itemMarginInline: token2.marginXXS
    };
  });
  return useOriginHook(prefixCls);
};
var __rest$9 = globalThis && globalThis.__rest || function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
const OverrideContext = /* @__PURE__ */ React$2.createContext(null);
const OverrideProvider = (props) => {
  const {
    children
  } = props, restProps = __rest$9(props, ["children"]);
  const override = React$2.useContext(OverrideContext);
  const context = React$2.useMemo(() => Object.assign(Object.assign({}, override), restProps), [
    override,
    restProps.prefixCls,
    // restProps.expandIcon, Not mark as deps since this is a ReactNode
    restProps.mode,
    restProps.selectable
    // restProps.validator, Not mark as deps since this is a function
  ]);
  return /* @__PURE__ */ React$2.createElement(OverrideContext.Provider, {
    value: context
  }, children);
};
var __rest$8 = globalThis && globalThis.__rest || function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
const MenuDivider = (props) => {
  const {
    prefixCls: customizePrefixCls,
    className,
    dashed
  } = props, restProps = __rest$8(props, ["prefixCls", "className", "dashed"]);
  const {
    getPrefixCls
  } = React$2.useContext(ConfigContext);
  const prefixCls = getPrefixCls("menu", customizePrefixCls);
  const classString = classNames({
    [`${prefixCls}-item-divider-dashed`]: !!dashed
  }, className);
  return /* @__PURE__ */ React$2.createElement(Divider, Object.assign({
    className: classString
  }, restProps));
};
const MenuDivider$1 = MenuDivider;
var BarsOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M912 192H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM104 228a56 56 0 10112 0 56 56 0 10-112 0zm0 284a56 56 0 10112 0 56 56 0 10-112 0zm0 284a56 56 0 10112 0 56 56 0 10-112 0z" } }] }, "name": "bars", "theme": "outlined" };
const BarsOutlinedSvg = BarsOutlined$2;
var BarsOutlined = function BarsOutlined2(props, ref) {
  return /* @__PURE__ */ React$2.createElement(AntdIcon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
    ref,
    icon: BarsOutlinedSvg
  }));
};
BarsOutlined.displayName = "BarsOutlined";
const BarsOutlined$1 = /* @__PURE__ */ React$2.forwardRef(BarsOutlined);
var LeftOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M724 218.3V141c0-6.7-7.7-10.4-12.9-6.3L260.3 486.8a31.86 31.86 0 000 50.3l450.8 352.1c5.3 4.1 12.9.4 12.9-6.3v-77.3c0-4.9-2.3-9.6-6.1-12.6l-360-281 360-281.1c3.8-3 6.1-7.7 6.1-12.6z" } }] }, "name": "left", "theme": "outlined" };
const LeftOutlinedSvg = LeftOutlined$2;
var LeftOutlined = function LeftOutlined2(props, ref) {
  return /* @__PURE__ */ React$2.createElement(AntdIcon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
    ref,
    icon: LeftOutlinedSvg
  }));
};
LeftOutlined.displayName = "LeftOutlined";
const LeftOutlined$1 = /* @__PURE__ */ React$2.forwardRef(LeftOutlined);
const isNumeric = (value) => !isNaN(parseFloat(value)) && isFinite(value);
const isNumeric$1 = isNumeric;
const genLayoutLightStyle = (token2) => {
  const {
    componentCls,
    colorBgContainer,
    colorBgBody,
    colorText
  } = token2;
  return {
    [`${componentCls}-sider-light`]: {
      background: colorBgContainer,
      [`${componentCls}-sider-trigger`]: {
        color: colorText,
        background: colorBgContainer
      },
      [`${componentCls}-sider-zero-width-trigger`]: {
        color: colorText,
        background: colorBgContainer,
        border: `1px solid ${colorBgBody}`,
        borderInlineStart: 0
      }
    }
  };
};
const genLayoutLightStyle$1 = genLayoutLightStyle;
const genLayoutStyle = (token2) => {
  const {
    antCls,
    // .ant
    componentCls,
    // .ant-layout
    colorText,
    colorTextLightSolid,
    colorBgHeader,
    colorBgBody,
    colorBgTrigger,
    layoutHeaderHeight,
    layoutHeaderPaddingInline,
    layoutHeaderColor,
    layoutFooterPadding,
    layoutTriggerHeight,
    layoutZeroTriggerSize,
    motionDurationMid,
    motionDurationSlow,
    fontSize,
    borderRadius
  } = token2;
  return {
    [componentCls]: Object.assign(Object.assign({
      display: "flex",
      flex: "auto",
      flexDirection: "column",
      /* fix firefox can't set height smaller than content on flex item */
      minHeight: 0,
      background: colorBgBody,
      "&, *": {
        boxSizing: "border-box"
      },
      [`&${componentCls}-has-sider`]: {
        flexDirection: "row",
        [`> ${componentCls}, > ${componentCls}-content`]: {
          // https://segmentfault.com/a/1190000019498300
          width: 0
        }
      },
      [`${componentCls}-header, &${componentCls}-footer`]: {
        flex: "0 0 auto"
      },
      [`${componentCls}-sider`]: {
        position: "relative",
        // fix firefox can't set width smaller than content on flex item
        minWidth: 0,
        background: colorBgHeader,
        transition: `all ${motionDurationMid}, background 0s`,
        "&-children": {
          height: "100%",
          // Hack for fixing margin collapse bug
          // https://github.com/ant-design/ant-design/issues/7967
          // solution from https://stackoverflow.com/a/33132624/3040605
          marginTop: -0.1,
          paddingTop: 0.1,
          [`${antCls}-menu${antCls}-menu-inline-collapsed`]: {
            width: "auto"
          }
        },
        "&-has-trigger": {
          paddingBottom: layoutTriggerHeight
        },
        "&-right": {
          order: 1
        },
        "&-trigger": {
          position: "fixed",
          bottom: 0,
          zIndex: 1,
          height: layoutTriggerHeight,
          color: colorTextLightSolid,
          lineHeight: `${layoutTriggerHeight}px`,
          textAlign: "center",
          background: colorBgTrigger,
          cursor: "pointer",
          transition: `all ${motionDurationMid}`
        },
        "&-zero-width": {
          "> *": {
            overflow: "hidden"
          },
          "&-trigger": {
            position: "absolute",
            top: layoutHeaderHeight,
            insetInlineEnd: -layoutZeroTriggerSize,
            zIndex: 1,
            width: layoutZeroTriggerSize,
            height: layoutZeroTriggerSize,
            color: colorTextLightSolid,
            fontSize: token2.fontSizeXL,
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            background: colorBgHeader,
            borderStartStartRadius: 0,
            borderStartEndRadius: borderRadius,
            borderEndEndRadius: borderRadius,
            borderEndStartRadius: 0,
            cursor: "pointer",
            transition: `background ${motionDurationSlow} ease`,
            "&::after": {
              position: "absolute",
              inset: 0,
              background: "transparent",
              transition: `all ${motionDurationSlow}`,
              content: '""'
            },
            "&:hover::after": {
              // FIXME: Hardcode, but seems no need to create a token for this
              background: `rgba(255, 255, 255, 0.2)`
            },
            "&-right": {
              insetInlineStart: -layoutZeroTriggerSize,
              borderStartStartRadius: borderRadius,
              borderStartEndRadius: 0,
              borderEndEndRadius: 0,
              borderEndStartRadius: borderRadius
            }
          }
        }
      }
    }, genLayoutLightStyle$1(token2)), {
      // RTL
      "&-rtl": {
        direction: "rtl"
      }
    }),
    // ==================== Header ====================
    [`${componentCls}-header`]: {
      height: layoutHeaderHeight,
      paddingInline: layoutHeaderPaddingInline,
      color: layoutHeaderColor,
      lineHeight: `${layoutHeaderHeight}px`,
      background: colorBgHeader,
      // Other components/menu/style/index.less line:686
      // Integration with header element so menu items have the same height
      [`${antCls}-menu`]: {
        lineHeight: "inherit"
      }
    },
    // ==================== Footer ====================
    [`${componentCls}-footer`]: {
      padding: layoutFooterPadding,
      color: colorText,
      fontSize,
      background: colorBgBody
    },
    // =================== Content ====================
    [`${componentCls}-content`]: {
      flex: "auto",
      // fix firefox can't set height smaller than content on flex item
      minHeight: 0
    }
  };
};
const useStyle$2 = genComponentStyleHook("Layout", (token2) => {
  const {
    colorText,
    controlHeightSM,
    controlHeight,
    controlHeightLG,
    marginXXS
  } = token2;
  const layoutHeaderPaddingInline = controlHeightLG * 1.25;
  const layoutToken = merge(token2, {
    // Layout
    layoutHeaderHeight: controlHeight * 2,
    layoutHeaderPaddingInline,
    layoutHeaderColor: colorText,
    layoutFooterPadding: `${controlHeightSM}px ${layoutHeaderPaddingInline}px`,
    layoutTriggerHeight: controlHeightLG + marginXXS * 2,
    layoutZeroTriggerSize: controlHeightLG
  });
  return [genLayoutStyle(layoutToken)];
}, (token2) => {
  const {
    colorBgLayout
  } = token2;
  return {
    colorBgHeader: "#001529",
    colorBgBody: colorBgLayout,
    colorBgTrigger: "#002140"
  };
});
var __rest$7 = globalThis && globalThis.__rest || function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
const LayoutContext = /* @__PURE__ */ React$2.createContext({
  siderHook: {
    addSider: () => null,
    removeSider: () => null
  }
});
function generator(_ref) {
  let {
    suffixCls,
    tagName,
    displayName
  } = _ref;
  return (BasicComponent) => {
    const Adapter = /* @__PURE__ */ React$2.forwardRef((props, ref) => /* @__PURE__ */ React$2.createElement(BasicComponent, Object.assign({
      ref,
      suffixCls,
      tagName
    }, props)));
    if (process.env.NODE_ENV !== "production") {
      Adapter.displayName = displayName;
    }
    return Adapter;
  };
}
const Basic = /* @__PURE__ */ React$2.forwardRef((props, ref) => {
  const {
    prefixCls: customizePrefixCls,
    suffixCls,
    className,
    tagName: TagName
  } = props, others = __rest$7(props, ["prefixCls", "suffixCls", "className", "tagName"]);
  const {
    getPrefixCls
  } = React$2.useContext(ConfigContext);
  const prefixCls = getPrefixCls("layout", customizePrefixCls);
  const [wrapSSR, hashId] = useStyle$2(prefixCls);
  const prefixWithSuffixCls = suffixCls ? `${prefixCls}-${suffixCls}` : prefixCls;
  return wrapSSR(/* @__PURE__ */ React$2.createElement(TagName, Object.assign({
    className: classNames(customizePrefixCls || prefixWithSuffixCls, className, hashId),
    ref
  }, others)));
});
const BasicLayout = /* @__PURE__ */ React$2.forwardRef((props, ref) => {
  const {
    direction
  } = React$2.useContext(ConfigContext);
  const [siders, setSiders] = React$2.useState([]);
  const {
    prefixCls: customizePrefixCls,
    className,
    rootClassName,
    children,
    hasSider,
    tagName: Tag
  } = props, others = __rest$7(props, ["prefixCls", "className", "rootClassName", "children", "hasSider", "tagName"]);
  const passedProps = omit(others, ["suffixCls"]);
  const {
    getPrefixCls
  } = React$2.useContext(ConfigContext);
  const prefixCls = getPrefixCls("layout", customizePrefixCls);
  const [wrapSSR, hashId] = useStyle$2(prefixCls);
  const classString = classNames(prefixCls, {
    [`${prefixCls}-has-sider`]: typeof hasSider === "boolean" ? hasSider : siders.length > 0,
    [`${prefixCls}-rtl`]: direction === "rtl"
  }, className, rootClassName, hashId);
  const contextValue = React$2.useMemo(() => ({
    siderHook: {
      addSider: (id) => {
        setSiders((prev2) => [].concat(_toConsumableArray(prev2), [id]));
      },
      removeSider: (id) => {
        setSiders((prev2) => prev2.filter((currentId) => currentId !== id));
      }
    }
  }), []);
  return wrapSSR(/* @__PURE__ */ React$2.createElement(LayoutContext.Provider, {
    value: contextValue
  }, /* @__PURE__ */ React$2.createElement(Tag, Object.assign({
    ref,
    className: classString
  }, passedProps), children)));
});
generator({
  tagName: "section",
  displayName: "Layout"
})(BasicLayout);
generator({
  suffixCls: "header",
  tagName: "header",
  displayName: "Header"
})(Basic);
generator({
  suffixCls: "footer",
  tagName: "footer",
  displayName: "Footer"
})(Basic);
generator({
  suffixCls: "content",
  tagName: "main",
  displayName: "Content"
})(Basic);
var __rest$6 = globalThis && globalThis.__rest || function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
const dimensionMaxMap = {
  xs: "479.98px",
  sm: "575.98px",
  md: "767.98px",
  lg: "991.98px",
  xl: "1199.98px",
  xxl: "1599.98px"
};
const SiderContext = /* @__PURE__ */ React$2.createContext({});
const generateId = (() => {
  let i = 0;
  return function() {
    let prefix = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    i += 1;
    return `${prefix}${i}`;
  };
})();
const Sider = /* @__PURE__ */ React$2.forwardRef((_a, ref) => {
  var {
    prefixCls: customizePrefixCls,
    className,
    trigger,
    children,
    defaultCollapsed = false,
    theme: theme2 = "dark",
    style: style2 = {},
    collapsible = false,
    reverseArrow = false,
    width = 200,
    collapsedWidth = 80,
    zeroWidthTriggerStyle,
    breakpoint,
    onCollapse,
    onBreakpoint
  } = _a, props = __rest$6(_a, ["prefixCls", "className", "trigger", "children", "defaultCollapsed", "theme", "style", "collapsible", "reverseArrow", "width", "collapsedWidth", "zeroWidthTriggerStyle", "breakpoint", "onCollapse", "onBreakpoint"]);
  const {
    siderHook
  } = useContext(LayoutContext);
  const [collapsed, setCollapsed] = useState("collapsed" in props ? props.collapsed : defaultCollapsed);
  const [below, setBelow] = useState(false);
  useEffect(() => {
    if ("collapsed" in props) {
      setCollapsed(props.collapsed);
    }
  }, [props.collapsed]);
  const handleSetCollapsed = (value, type4) => {
    if (!("collapsed" in props)) {
      setCollapsed(value);
    }
    onCollapse === null || onCollapse === void 0 ? void 0 : onCollapse(value, type4);
  };
  const responsiveHandlerRef = useRef();
  responsiveHandlerRef.current = (mql) => {
    setBelow(mql.matches);
    onBreakpoint === null || onBreakpoint === void 0 ? void 0 : onBreakpoint(mql.matches);
    if (collapsed !== mql.matches) {
      handleSetCollapsed(mql.matches, "responsive");
    }
  };
  useEffect(() => {
    function responsiveHandler(mql2) {
      return responsiveHandlerRef.current(mql2);
    }
    let mql;
    if (typeof window !== "undefined") {
      const {
        matchMedia
      } = window;
      if (matchMedia && breakpoint && breakpoint in dimensionMaxMap) {
        mql = matchMedia(`(max-width: ${dimensionMaxMap[breakpoint]})`);
        try {
          mql.addEventListener("change", responsiveHandler);
        } catch (error) {
          mql.addListener(responsiveHandler);
        }
        responsiveHandler(mql);
      }
    }
    return () => {
      try {
        mql === null || mql === void 0 ? void 0 : mql.removeEventListener("change", responsiveHandler);
      } catch (error) {
        mql === null || mql === void 0 ? void 0 : mql.removeListener(responsiveHandler);
      }
    };
  }, [breakpoint]);
  useEffect(() => {
    const uniqueId = generateId("ant-sider-");
    siderHook.addSider(uniqueId);
    return () => siderHook.removeSider(uniqueId);
  }, []);
  const toggle = () => {
    handleSetCollapsed(!collapsed, "clickTrigger");
  };
  const {
    getPrefixCls
  } = useContext(ConfigContext);
  const renderSider = () => {
    const prefixCls = getPrefixCls("layout-sider", customizePrefixCls);
    const divProps = omit(props, ["collapsed"]);
    const rawWidth = collapsed ? collapsedWidth : width;
    const siderWidth = isNumeric$1(rawWidth) ? `${rawWidth}px` : String(rawWidth);
    const zeroWidthTrigger = parseFloat(String(collapsedWidth || 0)) === 0 ? /* @__PURE__ */ React$2.createElement("span", {
      onClick: toggle,
      className: classNames(`${prefixCls}-zero-width-trigger`, `${prefixCls}-zero-width-trigger-${reverseArrow ? "right" : "left"}`),
      style: zeroWidthTriggerStyle
    }, trigger || /* @__PURE__ */ React$2.createElement(BarsOutlined$1, null)) : null;
    const iconObj = {
      expanded: reverseArrow ? /* @__PURE__ */ React$2.createElement(RightOutlined$1, null) : /* @__PURE__ */ React$2.createElement(LeftOutlined$1, null),
      collapsed: reverseArrow ? /* @__PURE__ */ React$2.createElement(LeftOutlined$1, null) : /* @__PURE__ */ React$2.createElement(RightOutlined$1, null)
    };
    const status = collapsed ? "collapsed" : "expanded";
    const defaultTrigger = iconObj[status];
    const triggerDom = trigger !== null ? zeroWidthTrigger || /* @__PURE__ */ React$2.createElement("div", {
      className: `${prefixCls}-trigger`,
      onClick: toggle,
      style: {
        width: siderWidth
      }
    }, trigger || defaultTrigger) : null;
    const divStyle = Object.assign(Object.assign({}, style2), {
      flex: `0 0 ${siderWidth}`,
      maxWidth: siderWidth,
      minWidth: siderWidth,
      width: siderWidth
    });
    const siderCls = classNames(prefixCls, `${prefixCls}-${theme2}`, {
      [`${prefixCls}-collapsed`]: !!collapsed,
      [`${prefixCls}-has-trigger`]: collapsible && trigger !== null && !zeroWidthTrigger,
      [`${prefixCls}-below`]: !!below,
      [`${prefixCls}-zero-width`]: parseFloat(siderWidth) === 0
    }, className);
    return /* @__PURE__ */ React$2.createElement("aside", Object.assign({
      className: siderCls
    }, divProps, {
      style: divStyle,
      ref
    }), /* @__PURE__ */ React$2.createElement("div", {
      className: `${prefixCls}-children`
    }, children), collapsible || below && zeroWidthTrigger ? triggerDom : null);
  };
  const contextValue = React$2.useMemo(() => ({
    siderCollapsed: collapsed
  }), [collapsed]);
  return /* @__PURE__ */ React$2.createElement(SiderContext.Provider, {
    value: contextValue
  }, renderSider());
});
if (process.env.NODE_ENV !== "production") {
  Sider.displayName = "Sider";
}
const MenuContext = /* @__PURE__ */ createContext({
  prefixCls: "",
  firstLevel: true,
  inlineCollapsed: false
});
const MenuContext$1 = MenuContext;
const MenuItem = (props) => {
  var _a;
  const {
    className,
    children,
    icon,
    title,
    danger
  } = props;
  const {
    prefixCls,
    firstLevel,
    direction,
    disableMenuItemTitleTooltip,
    inlineCollapsed: isInlineCollapsed
  } = React$2.useContext(MenuContext$1);
  const renderItemChildren = (inlineCollapsed) => {
    const wrapNode = /* @__PURE__ */ React$2.createElement("span", {
      className: `${prefixCls}-title-content`
    }, children);
    if (!icon || isValidElement(children) && children.type === "span") {
      if (children && inlineCollapsed && firstLevel && typeof children === "string") {
        return /* @__PURE__ */ React$2.createElement("div", {
          className: `${prefixCls}-inline-collapsed-noicon`
        }, children.charAt(0));
      }
    }
    return wrapNode;
  };
  const {
    siderCollapsed
  } = React$2.useContext(SiderContext);
  let tooltipTitle = title;
  if (typeof title === "undefined") {
    tooltipTitle = firstLevel ? children : "";
  } else if (title === false) {
    tooltipTitle = "";
  }
  const tooltipProps = {
    title: tooltipTitle
  };
  if (!siderCollapsed && !isInlineCollapsed) {
    tooltipProps.title = null;
    tooltipProps.open = false;
  }
  const childrenLength = toArray$3(children).length;
  let returnNode = /* @__PURE__ */ React$2.createElement(MenuItem$2, Object.assign({}, omit(props, ["title", "icon", "danger"]), {
    className: classNames({
      [`${prefixCls}-item-danger`]: danger,
      [`${prefixCls}-item-only-child`]: (icon ? childrenLength + 1 : childrenLength) === 1
    }, className),
    title: typeof title === "string" ? title : void 0
  }), cloneElement(icon, {
    className: classNames(isValidElement(icon) ? (_a = icon.props) === null || _a === void 0 ? void 0 : _a.className : "", `${prefixCls}-item-icon`)
  }), renderItemChildren(isInlineCollapsed));
  if (!disableMenuItemTitleTooltip) {
    returnNode = /* @__PURE__ */ React$2.createElement(Tooltip$1, Object.assign({}, tooltipProps, {
      placement: direction === "rtl" ? "left" : "right",
      overlayClassName: `${prefixCls}-inline-collapsed-tooltip`
    }), returnNode);
  }
  return returnNode;
};
const Item$1 = MenuItem;
const SubMenu = (props) => {
  var _a;
  const {
    popupClassName,
    icon,
    title,
    theme: customTheme
  } = props;
  const context = React$2.useContext(MenuContext$1);
  const {
    prefixCls,
    inlineCollapsed,
    theme: contextTheme,
    mode
  } = context;
  const parentPath = useFullPath();
  let titleNode;
  if (!icon) {
    titleNode = inlineCollapsed && !parentPath.length && title && typeof title === "string" ? /* @__PURE__ */ React$2.createElement("div", {
      className: `${prefixCls}-inline-collapsed-noicon`
    }, title.charAt(0)) : /* @__PURE__ */ React$2.createElement("span", {
      className: `${prefixCls}-title-content`
    }, title);
  } else {
    const titleIsSpan = isValidElement(title) && title.type === "span";
    titleNode = /* @__PURE__ */ React$2.createElement(React$2.Fragment, null, cloneElement(icon, {
      className: classNames(isValidElement(icon) ? (_a = icon.props) === null || _a === void 0 ? void 0 : _a.className : "", `${prefixCls}-item-icon`)
    }), titleIsSpan ? title : /* @__PURE__ */ React$2.createElement("span", {
      className: `${prefixCls}-title-content`
    }, title));
  }
  const contextValue = React$2.useMemo(() => Object.assign(Object.assign({}, context), {
    firstLevel: false
  }), [context]);
  const popupOffset = mode === "horizontal" ? [0, 8] : [10, 0];
  return /* @__PURE__ */ React$2.createElement(MenuContext$1.Provider, {
    value: contextValue
  }, /* @__PURE__ */ React$2.createElement(SubMenu$2, Object.assign({
    popupOffset
  }, omit(props, ["icon"]), {
    title: titleNode,
    popupClassName: classNames(prefixCls, popupClassName, `${prefixCls}-${customTheme || contextTheme}`)
  })));
};
const SubMenu$1 = SubMenu;
var __rest$5 = globalThis && globalThis.__rest || function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function convertItemsToNodes(list) {
  return (list || []).map((opt, index2) => {
    if (opt && typeof opt === "object") {
      const _a = opt, {
        label,
        children,
        key,
        type: type4
      } = _a, restProps = __rest$5(_a, ["label", "children", "key", "type"]);
      const mergedKey = key !== null && key !== void 0 ? key : `tmp-${index2}`;
      if (children || type4 === "group") {
        if (type4 === "group") {
          return /* @__PURE__ */ React$2.createElement(MenuItemGroup, Object.assign({
            key: mergedKey
          }, restProps, {
            title: label
          }), convertItemsToNodes(children));
        }
        return /* @__PURE__ */ React$2.createElement(SubMenu$1, Object.assign({
          key: mergedKey
        }, restProps, {
          title: label
        }), convertItemsToNodes(children));
      }
      if (type4 === "divider") {
        return /* @__PURE__ */ React$2.createElement(MenuDivider$1, Object.assign({
          key: mergedKey
        }, restProps));
      }
      return /* @__PURE__ */ React$2.createElement(Item$1, Object.assign({
        key: mergedKey
      }, restProps), label);
    }
    return null;
  }).filter((opt) => opt);
}
function useItems(items) {
  return React$2.useMemo(() => {
    if (!items) {
      return items;
    }
    return convertItemsToNodes(items);
  }, [items]);
}
var __rest$4 = globalThis && globalThis.__rest || function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
const InternalMenu = /* @__PURE__ */ forwardRef((props, ref) => {
  var _a, _b;
  const override = React$2.useContext(OverrideContext);
  const overrideObj = override || {};
  const {
    getPrefixCls,
    getPopupContainer,
    direction
  } = React$2.useContext(ConfigContext);
  const rootPrefixCls = getPrefixCls();
  const {
    prefixCls: customizePrefixCls,
    className,
    theme: theme2 = "light",
    expandIcon,
    _internalDisableMenuItemTitleTooltip,
    inlineCollapsed,
    siderCollapsed,
    items,
    children,
    rootClassName,
    mode,
    selectable,
    onClick
  } = props, restProps = __rest$4(props, ["prefixCls", "className", "theme", "expandIcon", "_internalDisableMenuItemTitleTooltip", "inlineCollapsed", "siderCollapsed", "items", "children", "rootClassName", "mode", "selectable", "onClick"]);
  const passedProps = omit(restProps, ["collapsedWidth"]);
  const mergedChildren = useItems(items) || children;
  process.env.NODE_ENV !== "production" ? warning$2(!("inlineCollapsed" in props && mode !== "inline"), "Menu", "`inlineCollapsed` should only be used when `mode` is inline.") : void 0;
  process.env.NODE_ENV !== "production" ? warning$2(!(props.siderCollapsed !== void 0 && "inlineCollapsed" in props), "Menu", "`inlineCollapsed` not control Menu under Sider. Should set `collapsed` on Sider instead.") : void 0;
  process.env.NODE_ENV !== "production" ? warning$2("items" in props && !children, "Menu", "`children` will be removed in next major version. Please use `items` instead.") : void 0;
  (_a = overrideObj.validator) === null || _a === void 0 ? void 0 : _a.call(overrideObj, {
    mode
  });
  const onItemClick = useEvent(function() {
    var _a2;
    onClick === null || onClick === void 0 ? void 0 : onClick.apply(void 0, arguments);
    (_a2 = overrideObj.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(overrideObj);
  });
  const mergedMode = overrideObj.mode || mode;
  const mergedSelectable = selectable !== null && selectable !== void 0 ? selectable : overrideObj.selectable;
  const mergedInlineCollapsed = React$2.useMemo(() => {
    if (siderCollapsed !== void 0) {
      return siderCollapsed;
    }
    return inlineCollapsed;
  }, [inlineCollapsed, siderCollapsed]);
  const defaultMotions = {
    horizontal: {
      motionName: `${rootPrefixCls}-slide-up`
    },
    inline: initCollapseMotion(rootPrefixCls),
    other: {
      motionName: `${rootPrefixCls}-zoom-big`
    }
  };
  const prefixCls = getPrefixCls("menu", customizePrefixCls || overrideObj.prefixCls);
  const [wrapSSR, hashId] = useStyle$3(prefixCls, !override);
  const menuClassName = classNames(`${prefixCls}-${theme2}`, className);
  let mergedExpandIcon;
  if (typeof expandIcon === "function") {
    mergedExpandIcon = expandIcon;
  } else {
    const beClone = expandIcon || overrideObj.expandIcon;
    mergedExpandIcon = cloneElement(beClone, {
      className: classNames(`${prefixCls}-submenu-expand-icon`, (_b = beClone === null || beClone === void 0 ? void 0 : beClone.props) === null || _b === void 0 ? void 0 : _b.className)
    });
  }
  const contextValue = React$2.useMemo(() => ({
    prefixCls,
    inlineCollapsed: mergedInlineCollapsed || false,
    direction,
    firstLevel: true,
    theme: theme2,
    mode: mergedMode,
    disableMenuItemTitleTooltip: _internalDisableMenuItemTitleTooltip
  }), [prefixCls, mergedInlineCollapsed, direction, _internalDisableMenuItemTitleTooltip, theme2]);
  return wrapSSR(/* @__PURE__ */ React$2.createElement(OverrideContext.Provider, {
    value: null
  }, /* @__PURE__ */ React$2.createElement(MenuContext$1.Provider, {
    value: contextValue
  }, /* @__PURE__ */ React$2.createElement(ExportMenu, Object.assign({
    getPopupContainer,
    overflowedIndicator: /* @__PURE__ */ React$2.createElement(EllipsisOutlined$1, null),
    overflowedIndicatorPopupClassName: `${prefixCls}-${theme2}`,
    mode: mergedMode,
    selectable: mergedSelectable,
    onClick: onItemClick
  }, passedProps, {
    inlineCollapsed: mergedInlineCollapsed,
    className: menuClassName,
    prefixCls,
    direction,
    defaultMotions,
    expandIcon: mergedExpandIcon,
    ref,
    rootClassName: classNames(rootClassName, hashId)
  }), mergedChildren))));
});
const InternalMenu$1 = InternalMenu;
const Menu = /* @__PURE__ */ forwardRef((props, ref) => {
  const menuRef = useRef(null);
  const context = React$2.useContext(SiderContext);
  useImperativeHandle(ref, () => ({
    menu: menuRef.current,
    focus: (options) => {
      var _a;
      (_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.focus(options);
    }
  }));
  return /* @__PURE__ */ React$2.createElement(InternalMenu$1, Object.assign({
    ref: menuRef
  }, props, context));
});
Menu.Item = Item$1;
Menu.SubMenu = SubMenu$1;
Menu.Divider = MenuDivider$1;
Menu.ItemGroup = MenuItemGroup;
if (process.env.NODE_ENV !== "production") {
  Menu.displayName = "Menu";
}
const Menu$1 = Menu;
const useFlexGapSupport = () => {
  const [flexible, setFlexible] = React$2.useState(false);
  React$2.useEffect(() => {
    setFlexible(detectFlexGapSupported());
  }, []);
  return flexible;
};
function Item(_ref) {
  let {
    className,
    direction,
    index: index2,
    marginDirection,
    children,
    split,
    wrap
  } = _ref;
  const {
    horizontalSize,
    verticalSize,
    latestIndex,
    supportFlexGap
  } = React$2.useContext(SpaceContext);
  let style2 = {};
  if (!supportFlexGap) {
    if (direction === "vertical") {
      if (index2 < latestIndex) {
        style2 = {
          marginBottom: horizontalSize / (split ? 2 : 1)
        };
      }
    } else {
      style2 = Object.assign(Object.assign({}, index2 < latestIndex && {
        [marginDirection]: horizontalSize / (split ? 2 : 1)
      }), wrap && {
        paddingBottom: verticalSize
      });
    }
  }
  if (children === null || children === void 0) {
    return null;
  }
  return /* @__PURE__ */ React$2.createElement(React$2.Fragment, null, /* @__PURE__ */ React$2.createElement("div", {
    className,
    style: style2
  }, children), index2 < latestIndex && split && /* @__PURE__ */ React$2.createElement("span", {
    className: `${className}-split`,
    style: style2
  }, split));
}
var __rest$3 = globalThis && globalThis.__rest || function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
const SpaceContext = /* @__PURE__ */ React$2.createContext({
  latestIndex: 0,
  horizontalSize: 0,
  verticalSize: 0,
  supportFlexGap: false
});
const spaceSize = {
  small: 8,
  middle: 16,
  large: 24
};
function getNumberSize(size) {
  return typeof size === "string" ? spaceSize[size] : size || 0;
}
const Space = (props) => {
  const {
    getPrefixCls,
    space,
    direction: directionConfig
  } = React$2.useContext(ConfigContext);
  const {
    size = (space === null || space === void 0 ? void 0 : space.size) || "small",
    align,
    className,
    rootClassName,
    children,
    direction = "horizontal",
    prefixCls: customizePrefixCls,
    split,
    style: style2,
    wrap = false
  } = props, otherProps = __rest$3(props, ["size", "align", "className", "rootClassName", "children", "direction", "prefixCls", "split", "style", "wrap"]);
  const supportFlexGap = useFlexGapSupport();
  const [horizontalSize, verticalSize] = React$2.useMemo(() => (Array.isArray(size) ? size : [size, size]).map((item) => getNumberSize(item)), [size]);
  const childNodes = toArray$3(children, {
    keepEmpty: true
  });
  const mergedAlign = align === void 0 && direction === "horizontal" ? "center" : align;
  const prefixCls = getPrefixCls("space", customizePrefixCls);
  const [wrapSSR, hashId] = useStyle$7(prefixCls);
  const cn = classNames(prefixCls, hashId, `${prefixCls}-${direction}`, {
    [`${prefixCls}-rtl`]: directionConfig === "rtl",
    [`${prefixCls}-align-${mergedAlign}`]: mergedAlign
  }, className, rootClassName);
  const itemClassName = `${prefixCls}-item`;
  const marginDirection = directionConfig === "rtl" ? "marginLeft" : "marginRight";
  let latestIndex = 0;
  const nodes = childNodes.map((child, i) => {
    if (child !== null && child !== void 0) {
      latestIndex = i;
    }
    const key = child && child.key || `${itemClassName}-${i}`;
    return /* @__PURE__ */ React$2.createElement(Item, {
      className: itemClassName,
      key,
      direction,
      index: i,
      marginDirection,
      split,
      wrap
    }, child);
  });
  const spaceContext = React$2.useMemo(() => ({
    horizontalSize,
    verticalSize,
    latestIndex,
    supportFlexGap
  }), [horizontalSize, verticalSize, latestIndex, supportFlexGap]);
  if (childNodes.length === 0) {
    return null;
  }
  const gapStyle = {};
  if (wrap) {
    gapStyle.flexWrap = "wrap";
    if (!supportFlexGap) {
      gapStyle.marginBottom = -verticalSize;
    }
  }
  if (supportFlexGap) {
    gapStyle.columnGap = horizontalSize;
    gapStyle.rowGap = verticalSize;
  }
  return wrapSSR(/* @__PURE__ */ React$2.createElement("div", Object.assign({
    className: cn,
    style: Object.assign(Object.assign({}, gapStyle), style2)
  }, otherProps), /* @__PURE__ */ React$2.createElement(SpaceContext.Provider, {
    value: spaceContext
  }, nodes)));
};
if (process.env.NODE_ENV !== "production") {
  Space.displayName = "Space";
}
const CompoundedSpace = Space;
CompoundedSpace.Compact = Compact$1;
const Space$1 = CompoundedSpace;
const genStatusStyle = (token2) => {
  const {
    componentCls,
    menuCls,
    colorError,
    colorTextLightSolid
  } = token2;
  const itemCls = `${menuCls}-item`;
  return {
    [`${componentCls}, ${componentCls}-menu-submenu`]: {
      [`${menuCls} ${itemCls}`]: {
        [`&${itemCls}-danger:not(${itemCls}-disabled)`]: {
          color: colorError,
          "&:hover": {
            color: colorTextLightSolid,
            backgroundColor: colorError
          }
        }
      }
    }
  };
};
const genStatusStyle$1 = genStatusStyle;
const genBaseStyle$1 = (token2) => {
  const {
    componentCls,
    menuCls,
    zIndexPopup,
    dropdownArrowDistance,
    sizePopupArrow,
    antCls,
    iconCls,
    motionDurationMid,
    dropdownPaddingVertical,
    fontSize,
    dropdownEdgeChildPadding,
    colorTextDisabled,
    fontSizeIcon,
    controlPaddingHorizontal,
    colorBgElevated
  } = token2;
  return [
    {
      [componentCls]: Object.assign(Object.assign({}, resetComponent(token2)), {
        position: "absolute",
        top: -9999,
        left: {
          _skip_check_: true,
          value: -9999
        },
        zIndex: zIndexPopup,
        display: "block",
        // A placeholder out of dropdown visible range to avoid close when user moving
        "&::before": {
          position: "absolute",
          insetBlock: -dropdownArrowDistance + sizePopupArrow / 2,
          // insetInlineStart: -7, // FIXME: Seems not work for hidden element
          zIndex: -9999,
          opacity: 1e-4,
          content: '""'
        },
        [`&-trigger${antCls}-btn > ${iconCls}-down`]: {
          fontSize: fontSizeIcon,
          transform: "none"
        },
        [`${componentCls}-wrap`]: {
          position: "relative",
          [`${antCls}-btn > ${iconCls}-down`]: {
            fontSize: fontSizeIcon
          },
          [`${iconCls}-down::before`]: {
            transition: `transform ${motionDurationMid}`
          }
        },
        [`${componentCls}-wrap-open`]: {
          [`${iconCls}-down::before`]: {
            transform: `rotate(180deg)`
          }
        },
        [`
        &-hidden,
        &-menu-hidden,
        &-menu-submenu-hidden
      `]: {
          display: "none"
        },
        // =============================================================
        // ==                         Motion                          ==
        // =============================================================
        // When position is not enough for dropdown, the placement will revert.
        // We will handle this with revert motion name.
        [`&${antCls}-slide-down-enter${antCls}-slide-down-enter-active${componentCls}-placement-bottomLeft,
          &${antCls}-slide-down-appear${antCls}-slide-down-appear-active${componentCls}-placement-bottomLeft,
          &${antCls}-slide-down-enter${antCls}-slide-down-enter-active${componentCls}-placement-bottom,
          &${antCls}-slide-down-appear${antCls}-slide-down-appear-active${componentCls}-placement-bottom,
          &${antCls}-slide-down-enter${antCls}-slide-down-enter-active${componentCls}-placement-bottomRight,
          &${antCls}-slide-down-appear${antCls}-slide-down-appear-active${componentCls}-placement-bottomRight`]: {
          animationName: slideUpIn
        },
        [`&${antCls}-slide-up-enter${antCls}-slide-up-enter-active${componentCls}-placement-topLeft,
          &${antCls}-slide-up-appear${antCls}-slide-up-appear-active${componentCls}-placement-topLeft,
          &${antCls}-slide-up-enter${antCls}-slide-up-enter-active${componentCls}-placement-top,
          &${antCls}-slide-up-appear${antCls}-slide-up-appear-active${componentCls}-placement-top,
          &${antCls}-slide-up-enter${antCls}-slide-up-enter-active${componentCls}-placement-topRight,
          &${antCls}-slide-up-appear${antCls}-slide-up-appear-active${componentCls}-placement-topRight`]: {
          animationName: slideDownIn
        },
        [`&${antCls}-slide-down-leave${antCls}-slide-down-leave-active${componentCls}-placement-bottomLeft,
          &${antCls}-slide-down-leave${antCls}-slide-down-leave-active${componentCls}-placement-bottom,
          &${antCls}-slide-down-leave${antCls}-slide-down-leave-active${componentCls}-placement-bottomRight`]: {
          animationName: slideUpOut
        },
        [`&${antCls}-slide-up-leave${antCls}-slide-up-leave-active${componentCls}-placement-topLeft,
          &${antCls}-slide-up-leave${antCls}-slide-up-leave-active${componentCls}-placement-top,
          &${antCls}-slide-up-leave${antCls}-slide-up-leave-active${componentCls}-placement-topRight`]: {
          animationName: slideDownOut
        }
      })
    },
    // =============================================================
    // ==                        Arrow style                      ==
    // =============================================================
    getArrowStyle(token2, {
      colorBg: colorBgElevated,
      limitVerticalRadius: true,
      arrowPlacement: {
        top: true,
        bottom: true
      }
    }),
    {
      // =============================================================
      // ==                          Menu                           ==
      // =============================================================
      [`${componentCls} ${menuCls}`]: {
        position: "relative",
        margin: 0
      },
      [`${menuCls}-submenu-popup`]: {
        position: "absolute",
        zIndex: zIndexPopup,
        background: "transparent",
        boxShadow: "none",
        transformOrigin: "0 0",
        "ul, li": {
          listStyle: "none",
          margin: 0
        }
      },
      [`${componentCls}, ${componentCls}-menu-submenu`]: {
        [menuCls]: Object.assign(Object.assign({
          padding: dropdownEdgeChildPadding,
          listStyleType: "none",
          backgroundColor: colorBgElevated,
          backgroundClip: "padding-box",
          borderRadius: token2.borderRadiusLG,
          outline: "none",
          boxShadow: token2.boxShadowSecondary
        }, genFocusStyle(token2)), {
          [`${menuCls}-item-group-title`]: {
            padding: `${dropdownPaddingVertical}px ${controlPaddingHorizontal}px`,
            color: token2.colorTextDescription,
            transition: `all ${motionDurationMid}`
          },
          // ======================= Item Content =======================
          [`${menuCls}-item`]: {
            position: "relative",
            display: "flex",
            alignItems: "center"
          },
          [`${menuCls}-item-icon`]: {
            minWidth: fontSize,
            marginInlineEnd: token2.marginXS,
            fontSize: token2.fontSizeSM
          },
          [`${menuCls}-title-content`]: {
            flex: "auto",
            "> a": {
              color: "inherit",
              transition: `all ${motionDurationMid}`,
              "&:hover": {
                color: "inherit"
              },
              "&::after": {
                position: "absolute",
                inset: 0,
                content: '""'
              }
            }
          },
          // =========================== Item ===========================
          [`${menuCls}-item, ${menuCls}-submenu-title`]: Object.assign(Object.assign({
            clear: "both",
            margin: 0,
            padding: `${dropdownPaddingVertical}px ${controlPaddingHorizontal}px`,
            color: token2.colorText,
            fontWeight: "normal",
            fontSize,
            lineHeight: token2.lineHeight,
            cursor: "pointer",
            transition: `all ${motionDurationMid}`,
            borderRadius: token2.borderRadiusSM,
            [`&:hover, &-active`]: {
              backgroundColor: token2.controlItemBgHover
            }
          }, genFocusStyle(token2)), {
            "&-selected": {
              color: token2.colorPrimary,
              backgroundColor: token2.controlItemBgActive,
              "&:hover, &-active": {
                backgroundColor: token2.controlItemBgActiveHover
              }
            },
            "&-disabled": {
              color: colorTextDisabled,
              cursor: "not-allowed",
              "&:hover": {
                color: colorTextDisabled,
                backgroundColor: colorBgElevated,
                cursor: "not-allowed"
              },
              a: {
                pointerEvents: "none"
              }
            },
            "&-divider": {
              height: 1,
              margin: `${token2.marginXXS}px 0`,
              overflow: "hidden",
              lineHeight: 0,
              backgroundColor: token2.colorSplit
            },
            [`${componentCls}-menu-submenu-expand-icon`]: {
              position: "absolute",
              insetInlineEnd: token2.paddingXS,
              [`${componentCls}-menu-submenu-arrow-icon`]: {
                marginInlineEnd: "0 !important",
                color: token2.colorTextDescription,
                fontSize: fontSizeIcon,
                fontStyle: "normal"
              }
            }
          }),
          [`${menuCls}-item-group-list`]: {
            margin: `0 ${token2.marginXS}px`,
            padding: 0,
            listStyle: "none"
          },
          [`${menuCls}-submenu-title`]: {
            paddingInlineEnd: controlPaddingHorizontal + token2.fontSizeSM
          },
          [`${menuCls}-submenu-vertical`]: {
            position: "relative"
          },
          [`${menuCls}-submenu${menuCls}-submenu-disabled ${componentCls}-menu-submenu-title`]: {
            [`&, ${componentCls}-menu-submenu-arrow-icon`]: {
              color: colorTextDisabled,
              backgroundColor: colorBgElevated,
              cursor: "not-allowed"
            }
          },
          // https://github.com/ant-design/ant-design/issues/19264
          [`${menuCls}-submenu-selected ${componentCls}-menu-submenu-title`]: {
            color: token2.colorPrimary
          }
        })
      }
    },
    // Follow code may reuse in other components
    [initSlideMotion(token2, "slide-up"), initSlideMotion(token2, "slide-down"), initMoveMotion(token2, "move-up"), initMoveMotion(token2, "move-down"), initZoomMotion(token2, "zoom-big")]
  ];
};
const useStyle$1 = genComponentStyleHook("Dropdown", (token2, _ref) => {
  let {
    rootPrefixCls
  } = _ref;
  const {
    marginXXS,
    sizePopupArrow,
    controlHeight,
    fontSize,
    lineHeight,
    paddingXXS,
    componentCls,
    borderRadiusLG
  } = token2;
  const dropdownPaddingVertical = (controlHeight - fontSize * lineHeight) / 2;
  const {
    dropdownArrowOffset
  } = getArrowOffset({
    contentRadius: borderRadiusLG
  });
  const dropdownToken = merge(token2, {
    menuCls: `${componentCls}-menu`,
    rootPrefixCls,
    dropdownArrowDistance: sizePopupArrow / 2 + marginXXS,
    dropdownArrowOffset,
    dropdownPaddingVertical,
    dropdownEdgeChildPadding: paddingXXS
  });
  return [genBaseStyle$1(dropdownToken), genStatusStyle$1(dropdownToken)];
}, (token2) => ({
  zIndexPopup: token2.zIndexPopupBase + 50
}));
var __rest$2 = globalThis && globalThis.__rest || function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
const DropdownButton = (props) => {
  const {
    getPopupContainer: getContextPopupContainer,
    getPrefixCls,
    direction
  } = React$2.useContext(ConfigContext);
  const {
    prefixCls: customizePrefixCls,
    type: type4 = "default",
    danger,
    disabled,
    loading,
    onClick,
    htmlType,
    children,
    className,
    menu,
    arrow,
    autoFocus,
    overlay: overlay2,
    trigger,
    align,
    open,
    onOpenChange,
    placement,
    getPopupContainer,
    href,
    icon = /* @__PURE__ */ React$2.createElement(EllipsisOutlined$1, null),
    title,
    buttonsRender = (buttons) => buttons,
    mouseEnterDelay,
    mouseLeaveDelay,
    overlayClassName,
    overlayStyle,
    destroyPopupOnHide,
    dropdownRender
  } = props, restProps = __rest$2(props, ["prefixCls", "type", "danger", "disabled", "loading", "onClick", "htmlType", "children", "className", "menu", "arrow", "autoFocus", "overlay", "trigger", "align", "open", "onOpenChange", "placement", "getPopupContainer", "href", "icon", "title", "buttonsRender", "mouseEnterDelay", "mouseLeaveDelay", "overlayClassName", "overlayStyle", "destroyPopupOnHide", "dropdownRender"]);
  const prefixCls = getPrefixCls("dropdown", customizePrefixCls);
  const buttonPrefixCls = `${prefixCls}-button`;
  const [wrapSSR, hashId] = useStyle$1(prefixCls);
  const dropdownProps = {
    menu,
    arrow,
    autoFocus,
    align,
    disabled,
    trigger: disabled ? [] : trigger,
    onOpenChange,
    getPopupContainer: getPopupContainer || getContextPopupContainer,
    mouseEnterDelay,
    mouseLeaveDelay,
    overlayClassName,
    overlayStyle,
    destroyPopupOnHide,
    dropdownRender
  };
  const {
    compactSize,
    compactItemClassnames
  } = useCompactItemContext(prefixCls, direction);
  const classes = classNames(buttonPrefixCls, compactItemClassnames, className, hashId);
  if ("overlay" in props) {
    dropdownProps.overlay = overlay2;
  }
  if ("open" in props) {
    dropdownProps.open = open;
  }
  if ("placement" in props) {
    dropdownProps.placement = placement;
  } else {
    dropdownProps.placement = direction === "rtl" ? "bottomLeft" : "bottomRight";
  }
  const leftButton = /* @__PURE__ */ React$2.createElement(Button$1, {
    type: type4,
    danger,
    disabled,
    loading,
    onClick,
    htmlType,
    href,
    title
  }, children);
  const rightButton = /* @__PURE__ */ React$2.createElement(Button$1, {
    type: type4,
    danger,
    icon
  });
  const [leftButtonToRender, rightButtonToRender] = buttonsRender([leftButton, rightButton]);
  return wrapSSR(/* @__PURE__ */ React$2.createElement(Space$1.Compact, Object.assign({
    className: classes,
    size: compactSize,
    block: true
  }, restProps), leftButtonToRender, /* @__PURE__ */ React$2.createElement(Dropdown$1, Object.assign({}, dropdownProps), rightButtonToRender)));
};
DropdownButton.__ANT_BUTTON = true;
const DropdownButton$1 = DropdownButton;
const Dropdown = (props) => {
  const {
    menu,
    arrow,
    prefixCls: customizePrefixCls,
    children,
    trigger,
    disabled,
    dropdownRender,
    getPopupContainer,
    overlayClassName,
    rootClassName,
    open,
    onOpenChange,
    // Deprecated
    visible,
    onVisibleChange,
    mouseEnterDelay = 0.15,
    mouseLeaveDelay = 0.1,
    autoAdjustOverflow: autoAdjustOverflow2 = true,
    placement = "",
    overlay: overlay2,
    transitionName
  } = props;
  const {
    getPopupContainer: getContextPopupContainer,
    getPrefixCls,
    direction
  } = React$2.useContext(ConfigContext);
  if (process.env.NODE_ENV !== "production") {
    [["visible", "open"], ["onVisibleChange", "onOpenChange"]].forEach((_ref) => {
      let [deprecatedName, newName] = _ref;
      process.env.NODE_ENV !== "production" ? warning$2(!(deprecatedName in props), "Dropdown", `\`${deprecatedName}\` is deprecated which will be removed in next major version, please use \`${newName}\` instead.`) : void 0;
    });
    process.env.NODE_ENV !== "production" ? warning$2(!("overlay" in props), "Dropdown", "`overlay` is deprecated. Please use `menu` instead.") : void 0;
  }
  const memoTransitionName = React$2.useMemo(() => {
    const rootPrefixCls = getPrefixCls();
    if (transitionName !== void 0) {
      return transitionName;
    }
    if (placement.includes("top")) {
      return `${rootPrefixCls}-slide-down`;
    }
    return `${rootPrefixCls}-slide-up`;
  }, [getPrefixCls, placement, transitionName]);
  const memoPlacement = React$2.useMemo(() => {
    if (!placement) {
      return direction === "rtl" ? "bottomRight" : "bottomLeft";
    }
    if (placement.includes("Center")) {
      const newPlacement = placement.slice(0, placement.indexOf("Center"));
      process.env.NODE_ENV !== "production" ? warning$2(!placement.includes("Center"), "Dropdown", `You are using '${placement}' placement in Dropdown, which is deprecated. Try to use '${newPlacement}' instead.`) : void 0;
      return newPlacement;
    }
    return placement;
  }, [placement, direction]);
  if (process.env.NODE_ENV !== "production") {
    [["visible", "open"], ["onVisibleChange", "onOpenChange"]].forEach((_ref2) => {
      let [deprecatedName, newName] = _ref2;
      process.env.NODE_ENV !== "production" ? warning$2(!(deprecatedName in props), "Dropdown", `\`${deprecatedName}\` is deprecated, please use \`${newName}\` instead.`) : void 0;
    });
  }
  const prefixCls = getPrefixCls("dropdown", customizePrefixCls);
  const [wrapSSR, hashId] = useStyle$1(prefixCls);
  const {
    token: token2
  } = theme.useToken();
  const child = React$2.Children.only(children);
  const dropdownTrigger = cloneElement(child, {
    className: classNames(`${prefixCls}-trigger`, {
      [`${prefixCls}-rtl`]: direction === "rtl"
    }, child.props.className),
    disabled
  });
  const triggerActions = disabled ? [] : trigger;
  let alignPoint2;
  if (triggerActions && triggerActions.includes("contextMenu")) {
    alignPoint2 = true;
  }
  const [mergedOpen, setOpen] = useMergedState(false, {
    value: open !== null && open !== void 0 ? open : visible
  });
  const onInnerOpenChange = useEvent((nextOpen) => {
    onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(nextOpen);
    onVisibleChange === null || onVisibleChange === void 0 ? void 0 : onVisibleChange(nextOpen);
    setOpen(nextOpen);
  });
  const overlayClassNameCustomized = classNames(overlayClassName, rootClassName, hashId, {
    [`${prefixCls}-rtl`]: direction === "rtl"
  });
  const builtinPlacements = getPlacements({
    arrowPointAtCenter: typeof arrow === "object" && arrow.pointAtCenter,
    autoAdjustOverflow: autoAdjustOverflow2,
    offset: token2.marginXXS,
    arrowWidth: arrow ? token2.sizePopupArrow : 0,
    borderRadius: token2.borderRadius
  });
  const onMenuClick = React$2.useCallback(() => {
    setOpen(false);
  }, []);
  const renderOverlay = () => {
    let overlayNode;
    if (menu === null || menu === void 0 ? void 0 : menu.items) {
      overlayNode = /* @__PURE__ */ React$2.createElement(Menu$1, Object.assign({}, menu));
    } else if (typeof overlay2 === "function") {
      overlayNode = overlay2();
    } else {
      overlayNode = overlay2;
    }
    if (dropdownRender) {
      overlayNode = dropdownRender(overlayNode);
    }
    overlayNode = React$2.Children.only(typeof overlayNode === "string" ? /* @__PURE__ */ React$2.createElement("span", null, overlayNode) : overlayNode);
    return /* @__PURE__ */ React$2.createElement(OverrideProvider, {
      prefixCls: `${prefixCls}-menu`,
      expandIcon: /* @__PURE__ */ React$2.createElement("span", {
        className: `${prefixCls}-menu-submenu-arrow`
      }, /* @__PURE__ */ React$2.createElement(RightOutlined$1, {
        className: `${prefixCls}-menu-submenu-arrow-icon`
      })),
      mode: "vertical",
      selectable: false,
      onClick: onMenuClick,
      validator: (_ref3) => {
        let {
          mode
        } = _ref3;
        process.env.NODE_ENV !== "production" ? warning$2(!mode || mode === "vertical", "Dropdown", `mode="${mode}" is not supported for Dropdown's Menu.`) : void 0;
      }
    }, /* @__PURE__ */ React$2.createElement(NoCompactStyle, null, overlayNode));
  };
  return wrapSSR(/* @__PURE__ */ React$2.createElement(Dropdown$3, Object.assign({
    alignPoint: alignPoint2
  }, omit(props, ["rootClassName"]), {
    mouseEnterDelay,
    mouseLeaveDelay,
    visible: mergedOpen,
    builtinPlacements,
    arrow: !!arrow,
    overlayClassName: overlayClassNameCustomized,
    prefixCls,
    getPopupContainer: getPopupContainer || getContextPopupContainer,
    transitionName: memoTransitionName,
    trigger: triggerActions,
    overlay: renderOverlay,
    placement: memoPlacement,
    onVisibleChange: onInnerOpenChange
  }), dropdownTrigger));
};
Dropdown.Button = DropdownButton$1;
const PurePanel$1 = genPurePanel(Dropdown, "dropdown", (prefixCls) => prefixCls);
const WrapPurePanel = (props) => /* @__PURE__ */ React$2.createElement(PurePanel$1, Object.assign({}, props), /* @__PURE__ */ React$2.createElement("span", null));
Dropdown._InternalPanelDoNotUseOrYouWillBeFired = WrapPurePanel;
if (process.env.NODE_ENV !== "production") {
  Dropdown.displayName = "Dropdown";
}
const Dropdown$1 = Dropdown;
function removeFromCheckedKeys(halfCheckedKeys, checkedKeys) {
  var filteredKeys = /* @__PURE__ */ new Set();
  halfCheckedKeys.forEach(function(key) {
    if (!checkedKeys.has(key)) {
      filteredKeys.add(key);
    }
  });
  return filteredKeys;
}
function isCheckDisabled(node2) {
  var _ref = node2 || {}, disabled = _ref.disabled, disableCheckbox = _ref.disableCheckbox, checkable = _ref.checkable;
  return !!(disabled || disableCheckbox) || checkable === false;
}
function fillConductCheck(keys, levelEntities, maxLevel, syntheticGetCheckDisabled) {
  var checkedKeys = new Set(keys);
  var halfCheckedKeys = /* @__PURE__ */ new Set();
  for (var level = 0; level <= maxLevel; level += 1) {
    var entities = levelEntities.get(level) || /* @__PURE__ */ new Set();
    entities.forEach(function(entity) {
      var key = entity.key, node2 = entity.node, _entity$children = entity.children, children = _entity$children === void 0 ? [] : _entity$children;
      if (checkedKeys.has(key) && !syntheticGetCheckDisabled(node2)) {
        children.filter(function(childEntity) {
          return !syntheticGetCheckDisabled(childEntity.node);
        }).forEach(function(childEntity) {
          checkedKeys.add(childEntity.key);
        });
      }
    });
  }
  var visitedKeys = /* @__PURE__ */ new Set();
  for (var _level = maxLevel; _level >= 0; _level -= 1) {
    var _entities = levelEntities.get(_level) || /* @__PURE__ */ new Set();
    _entities.forEach(function(entity) {
      var parent = entity.parent, node2 = entity.node;
      if (syntheticGetCheckDisabled(node2) || !entity.parent || visitedKeys.has(entity.parent.key)) {
        return;
      }
      if (syntheticGetCheckDisabled(entity.parent.node)) {
        visitedKeys.add(parent.key);
        return;
      }
      var allChecked = true;
      var partialChecked = false;
      (parent.children || []).filter(function(childEntity) {
        return !syntheticGetCheckDisabled(childEntity.node);
      }).forEach(function(_ref2) {
        var key = _ref2.key;
        var checked = checkedKeys.has(key);
        if (allChecked && !checked) {
          allChecked = false;
        }
        if (!partialChecked && (checked || halfCheckedKeys.has(key))) {
          partialChecked = true;
        }
      });
      if (allChecked) {
        checkedKeys.add(parent.key);
      }
      if (partialChecked) {
        halfCheckedKeys.add(parent.key);
      }
      visitedKeys.add(parent.key);
    });
  }
  return {
    checkedKeys: Array.from(checkedKeys),
    halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys))
  };
}
function cleanConductCheck(keys, halfKeys, levelEntities, maxLevel, syntheticGetCheckDisabled) {
  var checkedKeys = new Set(keys);
  var halfCheckedKeys = new Set(halfKeys);
  for (var level = 0; level <= maxLevel; level += 1) {
    var entities = levelEntities.get(level) || /* @__PURE__ */ new Set();
    entities.forEach(function(entity) {
      var key = entity.key, node2 = entity.node, _entity$children2 = entity.children, children = _entity$children2 === void 0 ? [] : _entity$children2;
      if (!checkedKeys.has(key) && !halfCheckedKeys.has(key) && !syntheticGetCheckDisabled(node2)) {
        children.filter(function(childEntity) {
          return !syntheticGetCheckDisabled(childEntity.node);
        }).forEach(function(childEntity) {
          checkedKeys.delete(childEntity.key);
        });
      }
    });
  }
  halfCheckedKeys = /* @__PURE__ */ new Set();
  var visitedKeys = /* @__PURE__ */ new Set();
  for (var _level2 = maxLevel; _level2 >= 0; _level2 -= 1) {
    var _entities2 = levelEntities.get(_level2) || /* @__PURE__ */ new Set();
    _entities2.forEach(function(entity) {
      var parent = entity.parent, node2 = entity.node;
      if (syntheticGetCheckDisabled(node2) || !entity.parent || visitedKeys.has(entity.parent.key)) {
        return;
      }
      if (syntheticGetCheckDisabled(entity.parent.node)) {
        visitedKeys.add(parent.key);
        return;
      }
      var allChecked = true;
      var partialChecked = false;
      (parent.children || []).filter(function(childEntity) {
        return !syntheticGetCheckDisabled(childEntity.node);
      }).forEach(function(_ref3) {
        var key = _ref3.key;
        var checked = checkedKeys.has(key);
        if (allChecked && !checked) {
          allChecked = false;
        }
        if (!partialChecked && (checked || halfCheckedKeys.has(key))) {
          partialChecked = true;
        }
      });
      if (!allChecked) {
        checkedKeys.delete(parent.key);
      }
      if (partialChecked) {
        halfCheckedKeys.add(parent.key);
      }
      visitedKeys.add(parent.key);
    });
  }
  return {
    checkedKeys: Array.from(checkedKeys),
    halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys))
  };
}
function conductCheck(keyList, checked, keyEntities, getCheckDisabled) {
  var warningMissKeys = [];
  var syntheticGetCheckDisabled;
  if (getCheckDisabled) {
    syntheticGetCheckDisabled = getCheckDisabled;
  } else {
    syntheticGetCheckDisabled = isCheckDisabled;
  }
  var keys = new Set(keyList.filter(function(key) {
    var hasEntity = !!keyEntities[key];
    if (!hasEntity) {
      warningMissKeys.push(key);
    }
    return hasEntity;
  }));
  var levelEntities = /* @__PURE__ */ new Map();
  var maxLevel = 0;
  Object.keys(keyEntities).forEach(function(key) {
    var entity = keyEntities[key];
    var level = entity.level;
    var levelSet = levelEntities.get(level);
    if (!levelSet) {
      levelSet = /* @__PURE__ */ new Set();
      levelEntities.set(level, levelSet);
    }
    levelSet.add(entity);
    maxLevel = Math.max(maxLevel, level);
  });
  warningOnce(!warningMissKeys.length, "Tree missing follow keys: ".concat(warningMissKeys.slice(0, 100).map(function(key) {
    return "'".concat(key, "'");
  }).join(", ")));
  var result;
  if (checked === true) {
    result = fillConductCheck(keys, levelEntities, maxLevel, syntheticGetCheckDisabled);
  } else {
    result = cleanConductCheck(keys, checked.halfCheckedKeys, levelEntities, maxLevel, syntheticGetCheckDisabled);
  }
  return result;
}
var CascaderContext = /* @__PURE__ */ React$2.createContext(null);
var SEARCH_MARK = "__rc_cascader_search_mark__";
var defaultFilter = function defaultFilter2(search, options, _ref) {
  var label = _ref.label;
  return options.some(function(opt) {
    return String(opt[label]).toLowerCase().includes(search.toLowerCase());
  });
};
var defaultRender = function defaultRender2(inputValue, path, prefixCls, fieldNames2) {
  return path.map(function(opt) {
    return opt[fieldNames2.label];
  }).join(" / ");
};
const useSearchOptions = function(search, options, fieldNames2, prefixCls, config, changeOnSelect) {
  var _config$filter = config.filter, filter = _config$filter === void 0 ? defaultFilter : _config$filter, _config$render = config.render, render2 = _config$render === void 0 ? defaultRender : _config$render, _config$limit = config.limit, limit = _config$limit === void 0 ? 50 : _config$limit, sort = config.sort;
  return React$2.useMemo(function() {
    var filteredOptions = [];
    if (!search) {
      return [];
    }
    function dig(list, pathOptions) {
      list.forEach(function(option) {
        if (!sort && limit > 0 && filteredOptions.length >= limit) {
          return;
        }
        var connectedPathOptions = [].concat(_toConsumableArray(pathOptions), [option]);
        var children = option[fieldNames2.children];
        if (
          // If is leaf option
          !children || children.length === 0 || // If is changeOnSelect
          changeOnSelect
        ) {
          if (filter(search, connectedPathOptions, {
            label: fieldNames2.label
          })) {
            var _objectSpread22;
            filteredOptions.push(_objectSpread2$1(_objectSpread2$1({}, option), {}, (_objectSpread22 = {}, _defineProperty$3(_objectSpread22, fieldNames2.label, render2(search, connectedPathOptions, prefixCls, fieldNames2)), _defineProperty$3(_objectSpread22, SEARCH_MARK, connectedPathOptions), _defineProperty$3(_objectSpread22, fieldNames2.children, void 0), _objectSpread22)));
          }
        }
        if (children) {
          dig(option[fieldNames2.children], connectedPathOptions);
        }
      });
    }
    dig(options, []);
    if (sort) {
      filteredOptions.sort(function(a, b) {
        return sort(a[SEARCH_MARK], b[SEARCH_MARK], search, fieldNames2);
      });
    }
    return limit > 0 ? filteredOptions.slice(0, limit) : filteredOptions;
  }, [search, options, fieldNames2, prefixCls, render2, changeOnSelect, filter, sort, limit]);
};
var VALUE_SPLIT = "__RC_CASCADER_SPLIT__";
var SHOW_PARENT$1 = "SHOW_PARENT";
var SHOW_CHILD$1 = "SHOW_CHILD";
function toPathKey(value) {
  return value.join(VALUE_SPLIT);
}
function toPathKeys(value) {
  return value.map(toPathKey);
}
function toPathValueStr(pathKey) {
  return pathKey.split(VALUE_SPLIT);
}
function fillFieldNames$1(fieldNames2) {
  var _ref = fieldNames2 || {}, label = _ref.label, value = _ref.value, children = _ref.children;
  var val = value || "value";
  return {
    label: label || "label",
    value: val,
    key: val,
    children: children || "children"
  };
}
function isLeaf(option, fieldNames2) {
  var _option$isLeaf, _option$fieldNames$ch;
  return (_option$isLeaf = option.isLeaf) !== null && _option$isLeaf !== void 0 ? _option$isLeaf : !((_option$fieldNames$ch = option[fieldNames2.children]) !== null && _option$fieldNames$ch !== void 0 && _option$fieldNames$ch.length);
}
function scrollIntoParentView(element) {
  var parent = element.parentElement;
  if (!parent) {
    return;
  }
  var elementToParent = element.offsetTop - parent.offsetTop;
  if (elementToParent - parent.scrollTop < 0) {
    parent.scrollTo({
      top: elementToParent
    });
  } else if (elementToParent + element.offsetHeight - parent.scrollTop > parent.offsetHeight) {
    parent.scrollTo({
      top: elementToParent + element.offsetHeight - parent.offsetHeight
    });
  }
}
function getFullPathKeys(options, fieldNames2) {
  return options.map(function(item) {
    var _item$SEARCH_MARK;
    return (_item$SEARCH_MARK = item[SEARCH_MARK]) === null || _item$SEARCH_MARK === void 0 ? void 0 : _item$SEARCH_MARK.map(function(opt) {
      return opt[fieldNames2.value];
    });
  });
}
function formatStrategyValues(pathKeys, getKeyPathEntities, showCheckedStrategy) {
  var valueSet = new Set(pathKeys);
  var keyPathEntities = getKeyPathEntities();
  return pathKeys.filter(function(key) {
    var entity = keyPathEntities[key];
    var parent = entity ? entity.parent : null;
    var children = entity ? entity.children : null;
    return showCheckedStrategy === SHOW_CHILD$1 ? !(children && children.some(function(child) {
      return child.key && valueSet.has(child.key);
    })) : !(parent && !parent.node.disabled && valueSet.has(parent.key));
  });
}
function toPathOptions(valueCells, options, fieldNames2) {
  var stringMode = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  var currentList = options;
  var valueOptions = [];
  var _loop = function _loop2() {
    var _currentList, _currentList2, _foundOption$fieldNam;
    var valueCell = valueCells[i];
    var foundIndex = (_currentList = currentList) === null || _currentList === void 0 ? void 0 : _currentList.findIndex(function(option) {
      var val = option[fieldNames2.value];
      return stringMode ? String(val) === String(valueCell) : val === valueCell;
    });
    var foundOption = foundIndex !== -1 ? (_currentList2 = currentList) === null || _currentList2 === void 0 ? void 0 : _currentList2[foundIndex] : null;
    valueOptions.push({
      value: (_foundOption$fieldNam = foundOption === null || foundOption === void 0 ? void 0 : foundOption[fieldNames2.value]) !== null && _foundOption$fieldNam !== void 0 ? _foundOption$fieldNam : valueCell,
      index: foundIndex,
      option: foundOption
    });
    currentList = foundOption === null || foundOption === void 0 ? void 0 : foundOption[fieldNames2.children];
  };
  for (var i = 0; i < valueCells.length; i += 1) {
    _loop();
  }
  return valueOptions;
}
const useDisplayValues = function(rawValues, options, fieldNames2, multiple, displayRender) {
  return React$2.useMemo(function() {
    var mergedDisplayRender = displayRender || // Default displayRender
    function(labels) {
      var mergedLabels = multiple ? labels.slice(-1) : labels;
      var SPLIT2 = " / ";
      if (mergedLabels.every(function(label) {
        return ["string", "number"].includes(_typeof$3(label));
      })) {
        return mergedLabels.join(SPLIT2);
      }
      return mergedLabels.reduce(function(list, label, index2) {
        var keyedLabel = /* @__PURE__ */ React$2.isValidElement(label) ? /* @__PURE__ */ React$2.cloneElement(label, {
          key: index2
        }) : label;
        if (index2 === 0) {
          return [keyedLabel];
        }
        return [].concat(_toConsumableArray(list), [SPLIT2, keyedLabel]);
      }, []);
    };
    return rawValues.map(function(valueCells) {
      var _valueOptions, _valueOptions$option;
      var valueOptions = toPathOptions(valueCells, options, fieldNames2);
      var label = mergedDisplayRender(valueOptions.map(function(_ref) {
        var _option$fieldNames$la;
        var option = _ref.option, value2 = _ref.value;
        return (_option$fieldNames$la = option === null || option === void 0 ? void 0 : option[fieldNames2.label]) !== null && _option$fieldNames$la !== void 0 ? _option$fieldNames$la : value2;
      }), valueOptions.map(function(_ref2) {
        var option = _ref2.option;
        return option;
      }));
      var value = toPathKey(valueCells);
      return {
        label,
        value,
        key: value,
        valueCells,
        disabled: (_valueOptions = valueOptions[valueOptions.length - 1]) === null || _valueOptions === void 0 ? void 0 : (_valueOptions$option = _valueOptions.option) === null || _valueOptions$option === void 0 ? void 0 : _valueOptions$option.disabled
      };
    });
  }, [rawValues, options, fieldNames2, displayRender, multiple]);
};
function getPosition(level, index2) {
  return "".concat(level, "-").concat(index2);
}
function getKey(key, pos) {
  if (key !== null && key !== void 0) {
    return key;
  }
  return pos;
}
function fillFieldNames(fieldNames2) {
  var _ref = fieldNames2 || {}, title = _ref.title, _title = _ref._title, key = _ref.key, children = _ref.children;
  var mergedTitle = title || "title";
  return {
    title: mergedTitle,
    _title: _title || [mergedTitle],
    key: key || "key",
    children: children || "children"
  };
}
function traverseDataNodes(dataNodes, callback, config) {
  var mergedConfig = {};
  if (_typeof$3(config) === "object") {
    mergedConfig = config;
  } else {
    mergedConfig = {
      externalGetKey: config
    };
  }
  mergedConfig = mergedConfig || {};
  var _mergedConfig = mergedConfig, childrenPropName = _mergedConfig.childrenPropName, externalGetKey = _mergedConfig.externalGetKey, fieldNames2 = _mergedConfig.fieldNames;
  var _fillFieldNames2 = fillFieldNames(fieldNames2), fieldKey = _fillFieldNames2.key, fieldChildren = _fillFieldNames2.children;
  var mergeChildrenPropName = childrenPropName || fieldChildren;
  var syntheticGetKey;
  if (externalGetKey) {
    if (typeof externalGetKey === "string") {
      syntheticGetKey = function syntheticGetKey2(node2) {
        return node2[externalGetKey];
      };
    } else if (typeof externalGetKey === "function") {
      syntheticGetKey = function syntheticGetKey2(node2) {
        return externalGetKey(node2);
      };
    }
  } else {
    syntheticGetKey = function syntheticGetKey2(node2, pos) {
      return getKey(node2[fieldKey], pos);
    };
  }
  function processNode(node2, index2, parent, pathNodes) {
    var children = node2 ? node2[mergeChildrenPropName] : dataNodes;
    var pos = node2 ? getPosition(parent.pos, index2) : "0";
    var connectNodes = node2 ? [].concat(_toConsumableArray(pathNodes), [node2]) : [];
    if (node2) {
      var key = syntheticGetKey(node2, pos);
      var data2 = {
        node: node2,
        index: index2,
        pos,
        key,
        parentPos: parent.node ? parent.pos : null,
        level: parent.level + 1,
        nodes: connectNodes
      };
      callback(data2);
    }
    if (children) {
      children.forEach(function(subNode, subIndex) {
        processNode(subNode, subIndex, {
          node: node2,
          pos,
          level: parent ? parent.level + 1 : -1
        }, connectNodes);
      });
    }
  }
  processNode(null);
}
function convertDataToEntities(dataNodes) {
  var _ref2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, initWrapper = _ref2.initWrapper, processEntity = _ref2.processEntity, onProcessFinished = _ref2.onProcessFinished, externalGetKey = _ref2.externalGetKey, childrenPropName = _ref2.childrenPropName, fieldNames2 = _ref2.fieldNames;
  var legacyExternalGetKey = arguments.length > 2 ? arguments[2] : void 0;
  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;
  var posEntities = {};
  var keyEntities = {};
  var wrapper = {
    posEntities,
    keyEntities
  };
  if (initWrapper) {
    wrapper = initWrapper(wrapper) || wrapper;
  }
  traverseDataNodes(dataNodes, function(item) {
    var node2 = item.node, index2 = item.index, pos = item.pos, key = item.key, parentPos = item.parentPos, level = item.level, nodes = item.nodes;
    var entity = {
      node: node2,
      nodes,
      index: index2,
      key,
      pos,
      level
    };
    var mergedKey = getKey(key, pos);
    posEntities[pos] = entity;
    keyEntities[mergedKey] = entity;
    entity.parent = posEntities[parentPos];
    if (entity.parent) {
      entity.parent.children = entity.parent.children || [];
      entity.parent.children.push(entity);
    }
    if (processEntity) {
      processEntity(entity, wrapper);
    }
  }, {
    externalGetKey: mergedExternalGetKey,
    childrenPropName,
    fieldNames: fieldNames2
  });
  if (onProcessFinished) {
    onProcessFinished(wrapper);
  }
  return wrapper;
}
const useEntities = function(options, fieldNames2) {
  var cacheRef = React$2.useRef({
    options: null,
    info: null
  });
  var getEntities = React$2.useCallback(function() {
    if (cacheRef.current.options !== options) {
      cacheRef.current.options = options;
      cacheRef.current.info = convertDataToEntities(options, {
        fieldNames: fieldNames2,
        initWrapper: function initWrapper(wrapper) {
          return _objectSpread2$1(_objectSpread2$1({}, wrapper), {}, {
            pathKeyEntities: {}
          });
        },
        processEntity: function processEntity(entity, wrapper) {
          var pathKey = entity.nodes.map(function(node2) {
            return node2[fieldNames2.value];
          }).join(VALUE_SPLIT);
          wrapper.pathKeyEntities[pathKey] = entity;
          entity.key = pathKey;
        }
      });
    }
    return cacheRef.current.info.pathKeyEntities;
  }, [fieldNames2, options]);
  return getEntities;
};
const useMissingValues = function(options, fieldNames2) {
  return React$2.useCallback(function(rawValues) {
    var missingValues = [];
    var existsValues = [];
    rawValues.forEach(function(valueCell) {
      var pathOptions = toPathOptions(valueCell, options, fieldNames2);
      if (pathOptions.every(function(opt) {
        return opt.option;
      })) {
        existsValues.push(valueCell);
      } else {
        missingValues.push(valueCell);
      }
    });
    return [existsValues, missingValues];
  }, [options, fieldNames2]);
};
function useRefFunc(callback) {
  var funcRef = React$2.useRef();
  funcRef.current = callback;
  var cacheFn = React$2.useCallback(function() {
    return funcRef.current.apply(funcRef, arguments);
  }, []);
  return cacheFn;
}
function useSearchConfig(showSearch) {
  return React$2.useMemo(function() {
    if (!showSearch) {
      return [false, {}];
    }
    var searchConfig = {
      matchInputWidth: true,
      limit: 50
    };
    if (showSearch && _typeof$3(showSearch) === "object") {
      searchConfig = _objectSpread2$1(_objectSpread2$1({}, searchConfig), showSearch);
    }
    if (searchConfig.limit <= 0) {
      delete searchConfig.limit;
      if (process.env.NODE_ENV !== "production") {
        warningOnce(false, "'limit' of showSearch should be positive number or false.");
      }
    }
    return [true, searchConfig];
  }, [showSearch]);
}
var CacheContent = /* @__PURE__ */ React$2.memo(function(_ref) {
  var children = _ref.children;
  return children;
}, function(_, next2) {
  return !next2.open;
});
if (process.env.NODE_ENV !== "production") {
  CacheContent.displayName = "CacheContent";
}
function Checkbox(_ref) {
  var _classNames;
  var prefixCls = _ref.prefixCls, checked = _ref.checked, halfChecked = _ref.halfChecked, disabled = _ref.disabled, onClick = _ref.onClick;
  var _React$useContext = React$2.useContext(CascaderContext), checkable = _React$useContext.checkable;
  var customCheckbox = typeof checkable !== "boolean" ? checkable : null;
  return /* @__PURE__ */ React$2.createElement("span", {
    className: classNames("".concat(prefixCls), (_classNames = {}, _defineProperty$3(_classNames, "".concat(prefixCls, "-checked"), checked), _defineProperty$3(_classNames, "".concat(prefixCls, "-indeterminate"), !checked && halfChecked), _defineProperty$3(_classNames, "".concat(prefixCls, "-disabled"), disabled), _classNames)),
    onClick
  }, customCheckbox);
}
var FIX_LABEL = "__cascader_fix_label__";
function Column(_ref) {
  var prefixCls = _ref.prefixCls, multiple = _ref.multiple, options = _ref.options, activeValue = _ref.activeValue, prevValuePath = _ref.prevValuePath, onToggleOpen = _ref.onToggleOpen, onSelect = _ref.onSelect, onActive = _ref.onActive, checkedSet = _ref.checkedSet, halfCheckedSet = _ref.halfCheckedSet, loadingKeys = _ref.loadingKeys, isSelectable = _ref.isSelectable, searchValue = _ref.searchValue;
  var menuPrefixCls = "".concat(prefixCls, "-menu");
  var menuItemPrefixCls = "".concat(prefixCls, "-menu-item");
  var _React$useContext = React$2.useContext(CascaderContext), fieldNames2 = _React$useContext.fieldNames, changeOnSelect = _React$useContext.changeOnSelect, expandTrigger = _React$useContext.expandTrigger, expandIcon = _React$useContext.expandIcon, loadingIcon = _React$useContext.loadingIcon, dropdownMenuColumnStyle = _React$useContext.dropdownMenuColumnStyle;
  var hoverOpen = expandTrigger === "hover";
  var optionInfoList = React$2.useMemo(function() {
    return options.map(function(option) {
      var _option$FIX_LABEL;
      var disabled = option.disabled;
      var searchOptions = option[SEARCH_MARK];
      var label = (_option$FIX_LABEL = option[FIX_LABEL]) !== null && _option$FIX_LABEL !== void 0 ? _option$FIX_LABEL : option[fieldNames2.label];
      var value = option[fieldNames2.value];
      var isMergedLeaf = isLeaf(option, fieldNames2);
      var fullPath = searchOptions ? searchOptions.map(function(opt) {
        return opt[fieldNames2.value];
      }) : [].concat(_toConsumableArray(prevValuePath), [value]);
      var fullPathKey = toPathKey(fullPath);
      var isLoading = loadingKeys.includes(fullPathKey);
      var checked = checkedSet.has(fullPathKey);
      var halfChecked = halfCheckedSet.has(fullPathKey);
      return {
        disabled,
        label,
        value,
        isLeaf: isMergedLeaf,
        isLoading,
        checked,
        halfChecked,
        option,
        fullPath,
        fullPathKey
      };
    });
  }, [options, checkedSet, fieldNames2, halfCheckedSet, loadingKeys, prevValuePath]);
  return /* @__PURE__ */ React$2.createElement("ul", {
    className: menuPrefixCls,
    role: "menu"
  }, optionInfoList.map(function(_ref2) {
    var _classNames;
    var disabled = _ref2.disabled, label = _ref2.label, value = _ref2.value, isMergedLeaf = _ref2.isLeaf, isLoading = _ref2.isLoading, checked = _ref2.checked, halfChecked = _ref2.halfChecked, option = _ref2.option, fullPath = _ref2.fullPath, fullPathKey = _ref2.fullPathKey;
    var triggerOpenPath = function triggerOpenPath2() {
      if (disabled || searchValue) {
        return;
      }
      var nextValueCells = _toConsumableArray(fullPath);
      if (hoverOpen && isMergedLeaf) {
        nextValueCells.pop();
      }
      onActive(nextValueCells);
    };
    var triggerSelect = function triggerSelect2() {
      if (isSelectable(option)) {
        onSelect(fullPath, isMergedLeaf);
      }
    };
    var title;
    if (typeof option.title === "string") {
      title = option.title;
    } else if (typeof label === "string") {
      title = label;
    }
    return /* @__PURE__ */ React$2.createElement("li", {
      key: fullPathKey,
      className: classNames(menuItemPrefixCls, (_classNames = {}, _defineProperty$3(_classNames, "".concat(menuItemPrefixCls, "-expand"), !isMergedLeaf), _defineProperty$3(_classNames, "".concat(menuItemPrefixCls, "-active"), activeValue === value || activeValue === fullPathKey), _defineProperty$3(_classNames, "".concat(menuItemPrefixCls, "-disabled"), disabled), _defineProperty$3(_classNames, "".concat(menuItemPrefixCls, "-loading"), isLoading), _classNames)),
      style: dropdownMenuColumnStyle,
      role: "menuitemcheckbox",
      title,
      "aria-checked": checked,
      "data-path-key": fullPathKey,
      onClick: function onClick() {
        triggerOpenPath();
        if (!multiple || isMergedLeaf) {
          triggerSelect();
        }
      },
      onDoubleClick: function onDoubleClick() {
        if (changeOnSelect) {
          onToggleOpen(false);
        }
      },
      onMouseEnter: function onMouseEnter() {
        if (hoverOpen) {
          triggerOpenPath();
        }
      },
      onMouseDown: function onMouseDown2(e) {
        e.preventDefault();
      }
    }, multiple && /* @__PURE__ */ React$2.createElement(Checkbox, {
      prefixCls: "".concat(prefixCls, "-checkbox"),
      checked,
      halfChecked,
      disabled,
      onClick: function onClick(e) {
        e.stopPropagation();
        triggerSelect();
      }
    }), /* @__PURE__ */ React$2.createElement("div", {
      className: "".concat(menuItemPrefixCls, "-content")
    }, label), !isLoading && expandIcon && !isMergedLeaf && /* @__PURE__ */ React$2.createElement("div", {
      className: "".concat(menuItemPrefixCls, "-expand-icon")
    }, expandIcon), isLoading && loadingIcon && /* @__PURE__ */ React$2.createElement("div", {
      className: "".concat(menuItemPrefixCls, "-loading-icon")
    }, loadingIcon));
  }));
}
const useActive = function() {
  var _useBaseProps = useBaseProps(), multiple = _useBaseProps.multiple, open = _useBaseProps.open;
  var _React$useContext = React$2.useContext(CascaderContext), values = _React$useContext.values;
  var _React$useState = React$2.useState([]), _React$useState2 = _slicedToArray$1(_React$useState, 2), activeValueCells = _React$useState2[0], setActiveValueCells = _React$useState2[1];
  React$2.useEffect(
    function() {
      if (open && !multiple) {
        var firstValueCells = values[0];
        setActiveValueCells(firstValueCells || []);
      }
    },
    /* eslint-disable react-hooks/exhaustive-deps */
    [open]
    /* eslint-enable react-hooks/exhaustive-deps */
  );
  return [activeValueCells, setActiveValueCells];
};
const useKeyboard = function(ref, options, fieldNames2, activeValueCells, setActiveValueCells, onKeyBoardSelect) {
  var _useBaseProps = useBaseProps(), direction = _useBaseProps.direction, searchValue = _useBaseProps.searchValue, toggleOpen = _useBaseProps.toggleOpen, open = _useBaseProps.open;
  var rtl = direction === "rtl";
  var _React$useMemo = React$2.useMemo(function() {
    var activeIndex = -1;
    var currentOptions = options;
    var mergedActiveIndexes = [];
    var mergedActiveValueCells = [];
    var len = activeValueCells.length;
    var pathKeys = getFullPathKeys(options, fieldNames2);
    var _loop = function _loop2(i2) {
      var nextActiveIndex = currentOptions.findIndex(function(option, index2) {
        return (pathKeys[index2] ? toPathKey(pathKeys[index2]) : option[fieldNames2.value]) === activeValueCells[i2];
      });
      if (nextActiveIndex === -1) {
        return "break";
      }
      activeIndex = nextActiveIndex;
      mergedActiveIndexes.push(activeIndex);
      mergedActiveValueCells.push(activeValueCells[i2]);
      currentOptions = currentOptions[activeIndex][fieldNames2.children];
    };
    for (var i = 0; i < len && currentOptions; i += 1) {
      var _ret = _loop(i);
      if (_ret === "break")
        break;
    }
    var activeOptions = options;
    for (var _i = 0; _i < mergedActiveIndexes.length - 1; _i += 1) {
      activeOptions = activeOptions[mergedActiveIndexes[_i]][fieldNames2.children];
    }
    return [mergedActiveValueCells, activeIndex, activeOptions, pathKeys];
  }, [activeValueCells, fieldNames2, options]), _React$useMemo2 = _slicedToArray$1(_React$useMemo, 4), validActiveValueCells = _React$useMemo2[0], lastActiveIndex = _React$useMemo2[1], lastActiveOptions = _React$useMemo2[2], fullPathKeys = _React$useMemo2[3];
  var internalSetActiveValueCells = function internalSetActiveValueCells2(next2) {
    setActiveValueCells(next2);
  };
  var offsetActiveOption = function offsetActiveOption2(offset2) {
    var len = lastActiveOptions.length;
    var currentIndex = lastActiveIndex;
    if (currentIndex === -1 && offset2 < 0) {
      currentIndex = len;
    }
    for (var i = 0; i < len; i += 1) {
      currentIndex = (currentIndex + offset2 + len) % len;
      var _option = lastActiveOptions[currentIndex];
      if (_option && !_option.disabled) {
        var nextActiveCells = validActiveValueCells.slice(0, -1).concat(fullPathKeys[currentIndex] ? toPathKey(fullPathKeys[currentIndex]) : _option[fieldNames2.value]);
        internalSetActiveValueCells(nextActiveCells);
        return;
      }
    }
  };
  var prevColumn = function prevColumn2() {
    if (validActiveValueCells.length > 1) {
      var nextActiveCells = validActiveValueCells.slice(0, -1);
      internalSetActiveValueCells(nextActiveCells);
    } else {
      toggleOpen(false);
    }
  };
  var nextColumn = function nextColumn2() {
    var _lastActiveOptions$la;
    var nextOptions = ((_lastActiveOptions$la = lastActiveOptions[lastActiveIndex]) === null || _lastActiveOptions$la === void 0 ? void 0 : _lastActiveOptions$la[fieldNames2.children]) || [];
    var nextOption = nextOptions.find(function(option) {
      return !option.disabled;
    });
    if (nextOption) {
      var nextActiveCells = [].concat(_toConsumableArray(validActiveValueCells), [nextOption[fieldNames2.value]]);
      internalSetActiveValueCells(nextActiveCells);
    }
  };
  React$2.useImperativeHandle(ref, function() {
    return {
      // scrollTo: treeRef.current?.scrollTo,
      onKeyDown: function onKeyDown(event) {
        var which = event.which;
        switch (which) {
          case KeyCode.UP:
          case KeyCode.DOWN: {
            var offset2 = 0;
            if (which === KeyCode.UP) {
              offset2 = -1;
            } else if (which === KeyCode.DOWN) {
              offset2 = 1;
            }
            if (offset2 !== 0) {
              offsetActiveOption(offset2);
            }
            break;
          }
          case KeyCode.LEFT: {
            if (rtl) {
              nextColumn();
            } else {
              prevColumn();
            }
            break;
          }
          case KeyCode.RIGHT: {
            if (rtl) {
              prevColumn();
            } else {
              nextColumn();
            }
            break;
          }
          case KeyCode.BACKSPACE: {
            if (!searchValue) {
              prevColumn();
            }
            break;
          }
          case KeyCode.ENTER: {
            if (validActiveValueCells.length) {
              var _option2 = lastActiveOptions[lastActiveIndex];
              var originOptions = (_option2 === null || _option2 === void 0 ? void 0 : _option2[SEARCH_MARK]) || [];
              if (originOptions.length) {
                onKeyBoardSelect(originOptions.map(function(opt) {
                  return opt[fieldNames2.value];
                }), originOptions[originOptions.length - 1]);
              } else {
                onKeyBoardSelect(validActiveValueCells, lastActiveOptions[lastActiveIndex]);
              }
            }
            break;
          }
          case KeyCode.ESC: {
            toggleOpen(false);
            if (open) {
              event.stopPropagation();
            }
          }
        }
      },
      onKeyUp: function onKeyUp() {
      }
    };
  });
};
var RefOptionList = /* @__PURE__ */ React$2.forwardRef(function(props, ref) {
  var _optionColumns$, _optionColumns$$optio, _ref3, _classNames;
  var _useBaseProps = useBaseProps(), prefixCls = _useBaseProps.prefixCls, multiple = _useBaseProps.multiple, searchValue = _useBaseProps.searchValue, toggleOpen = _useBaseProps.toggleOpen, notFoundContent = _useBaseProps.notFoundContent, direction = _useBaseProps.direction, open = _useBaseProps.open;
  var containerRef = React$2.useRef();
  var rtl = direction === "rtl";
  var _React$useContext = React$2.useContext(CascaderContext), options = _React$useContext.options, values = _React$useContext.values, halfValues = _React$useContext.halfValues, fieldNames2 = _React$useContext.fieldNames, changeOnSelect = _React$useContext.changeOnSelect, onSelect = _React$useContext.onSelect, searchOptions = _React$useContext.searchOptions, dropdownPrefixCls = _React$useContext.dropdownPrefixCls, loadData = _React$useContext.loadData, expandTrigger = _React$useContext.expandTrigger;
  var mergedPrefixCls = dropdownPrefixCls || prefixCls;
  var _React$useState = React$2.useState([]), _React$useState2 = _slicedToArray$1(_React$useState, 2), loadingKeys = _React$useState2[0], setLoadingKeys = _React$useState2[1];
  var internalLoadData = function internalLoadData2(valueCells) {
    if (!loadData || searchValue) {
      return;
    }
    var optionList = toPathOptions(valueCells, options, fieldNames2);
    var rawOptions = optionList.map(function(_ref) {
      var option = _ref.option;
      return option;
    });
    var lastOption = rawOptions[rawOptions.length - 1];
    if (lastOption && !isLeaf(lastOption, fieldNames2)) {
      var pathKey = toPathKey(valueCells);
      setLoadingKeys(function(keys) {
        return [].concat(_toConsumableArray(keys), [pathKey]);
      });
      loadData(rawOptions);
    }
  };
  React$2.useEffect(function() {
    if (loadingKeys.length) {
      loadingKeys.forEach(function(loadingKey) {
        var valueStrCells = toPathValueStr(loadingKey);
        var optionList = toPathOptions(valueStrCells, options, fieldNames2, true).map(function(_ref2) {
          var option = _ref2.option;
          return option;
        });
        var lastOption = optionList[optionList.length - 1];
        if (!lastOption || lastOption[fieldNames2.children] || isLeaf(lastOption, fieldNames2)) {
          setLoadingKeys(function(keys) {
            return keys.filter(function(key) {
              return key !== loadingKey;
            });
          });
        }
      });
    }
  }, [options, loadingKeys, fieldNames2]);
  var checkedSet = React$2.useMemo(function() {
    return new Set(toPathKeys(values));
  }, [values]);
  var halfCheckedSet = React$2.useMemo(function() {
    return new Set(toPathKeys(halfValues));
  }, [halfValues]);
  var _useActive = useActive(), _useActive2 = _slicedToArray$1(_useActive, 2), activeValueCells = _useActive2[0], setActiveValueCells = _useActive2[1];
  var onPathOpen = function onPathOpen2(nextValueCells) {
    setActiveValueCells(nextValueCells);
    internalLoadData(nextValueCells);
  };
  var isSelectable = function isSelectable2(option) {
    var disabled = option.disabled;
    var isMergedLeaf = isLeaf(option, fieldNames2);
    return !disabled && (isMergedLeaf || changeOnSelect || multiple);
  };
  var onPathSelect = function onPathSelect2(valuePath, leaf) {
    var fromKeyboard = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    onSelect(valuePath);
    if (!multiple && (leaf || changeOnSelect && (expandTrigger === "hover" || fromKeyboard))) {
      toggleOpen(false);
    }
  };
  var mergedOptions = React$2.useMemo(function() {
    if (searchValue) {
      return searchOptions;
    }
    return options;
  }, [searchValue, searchOptions, options]);
  var optionColumns = React$2.useMemo(function() {
    var optionList = [{
      options: mergedOptions
    }];
    var currentList = mergedOptions;
    var fullPathKeys = getFullPathKeys(currentList, fieldNames2);
    var _loop = function _loop2() {
      var activeValueCell = activeValueCells[i];
      var currentOption = currentList.find(function(option, index2) {
        return (fullPathKeys[index2] ? toPathKey(fullPathKeys[index2]) : option[fieldNames2.value]) === activeValueCell;
      });
      var subOptions = currentOption === null || currentOption === void 0 ? void 0 : currentOption[fieldNames2.children];
      if (!(subOptions !== null && subOptions !== void 0 && subOptions.length)) {
        return "break";
      }
      currentList = subOptions;
      optionList.push({
        options: subOptions
      });
    };
    for (var i = 0; i < activeValueCells.length; i += 1) {
      var _ret = _loop();
      if (_ret === "break")
        break;
    }
    return optionList;
  }, [mergedOptions, activeValueCells, fieldNames2]);
  var onKeyboardSelect = function onKeyboardSelect2(selectValueCells, option) {
    if (isSelectable(option)) {
      onPathSelect(selectValueCells, isLeaf(option, fieldNames2), true);
    }
  };
  useKeyboard(ref, mergedOptions, fieldNames2, activeValueCells, onPathOpen, onKeyboardSelect);
  React$2.useEffect(function() {
    for (var i = 0; i < activeValueCells.length; i += 1) {
      var _containerRef$current;
      var cellPath = activeValueCells.slice(0, i + 1);
      var cellKeyPath = toPathKey(cellPath);
      var ele = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.querySelector(
        'li[data-path-key="'.concat(cellKeyPath.replace(/\\{0,2}"/g, '\\"'), '"]')
        // matches unescaped double quotes
      );
      if (ele) {
        scrollIntoParentView(ele);
      }
    }
  }, [activeValueCells]);
  var isEmpty = !((_optionColumns$ = optionColumns[0]) !== null && _optionColumns$ !== void 0 && (_optionColumns$$optio = _optionColumns$.options) !== null && _optionColumns$$optio !== void 0 && _optionColumns$$optio.length);
  var emptyList = [(_ref3 = {}, _defineProperty$3(_ref3, fieldNames2.value, "__EMPTY__"), _defineProperty$3(_ref3, FIX_LABEL, notFoundContent), _defineProperty$3(_ref3, "disabled", true), _ref3)];
  var columnProps = _objectSpread2$1(_objectSpread2$1({}, props), {}, {
    multiple: !isEmpty && multiple,
    onSelect: onPathSelect,
    onActive: onPathOpen,
    onToggleOpen: toggleOpen,
    checkedSet,
    halfCheckedSet,
    loadingKeys,
    isSelectable
  });
  var mergedOptionColumns = isEmpty ? [{
    options: emptyList
  }] : optionColumns;
  var columnNodes = mergedOptionColumns.map(function(col, index2) {
    var prevValuePath = activeValueCells.slice(0, index2);
    var activeValue = activeValueCells[index2];
    return /* @__PURE__ */ React$2.createElement(Column, _extends$1({
      key: index2
    }, columnProps, {
      searchValue,
      prefixCls: mergedPrefixCls,
      options: col.options,
      prevValuePath,
      activeValue
    }));
  });
  return /* @__PURE__ */ React$2.createElement(CacheContent, {
    open
  }, /* @__PURE__ */ React$2.createElement("div", {
    className: classNames("".concat(mergedPrefixCls, "-menus"), (_classNames = {}, _defineProperty$3(_classNames, "".concat(mergedPrefixCls, "-menu-empty"), isEmpty), _defineProperty$3(_classNames, "".concat(mergedPrefixCls, "-rtl"), rtl), _classNames)),
    ref: containerRef
  }, columnNodes));
});
function warningProps(props) {
  var onPopupVisibleChange = props.onPopupVisibleChange, popupVisible = props.popupVisible, popupClassName = props.popupClassName, popupPlacement = props.popupPlacement;
  warningOnce(!onPopupVisibleChange, "`onPopupVisibleChange` is deprecated. Please use `onDropdownVisibleChange` instead.");
  warningOnce(popupVisible === void 0, "`popupVisible` is deprecated. Please use `open` instead.");
  warningOnce(popupClassName === void 0, "`popupClassName` is deprecated. Please use `dropdownClassName` instead.");
  warningOnce(popupPlacement === void 0, "`popupPlacement` is deprecated. Please use `placement` instead.");
}
function warningNullOptions(options, fieldNames2) {
  if (options) {
    var recursiveOptions = function recursiveOptions2(optionsList) {
      for (var i = 0; i < optionsList.length; i++) {
        var option = optionsList[i];
        if (option[fieldNames2 === null || fieldNames2 === void 0 ? void 0 : fieldNames2.value] === null) {
          warningOnce(false, "`value` in Cascader options should not be `null`.");
          return true;
        }
        if (Array.isArray(option[fieldNames2 === null || fieldNames2 === void 0 ? void 0 : fieldNames2.children]) && recursiveOptions2(option[fieldNames2 === null || fieldNames2 === void 0 ? void 0 : fieldNames2.children])) {
          return true;
        }
      }
    };
    recursiveOptions(options);
  }
}
var _excluded$1 = ["id", "prefixCls", "fieldNames", "defaultValue", "value", "changeOnSelect", "onChange", "displayRender", "checkable", "searchValue", "onSearch", "showSearch", "expandTrigger", "options", "dropdownPrefixCls", "loadData", "popupVisible", "open", "popupClassName", "dropdownClassName", "dropdownMenuColumnStyle", "popupPlacement", "placement", "onDropdownVisibleChange", "onPopupVisibleChange", "expandIcon", "loadingIcon", "children", "dropdownMatchSelectWidth", "showCheckedStrategy"];
function isMultipleValue(value) {
  return Array.isArray(value) && Array.isArray(value[0]);
}
function toRawValues(value) {
  if (!value) {
    return [];
  }
  if (isMultipleValue(value)) {
    return value;
  }
  return (value.length === 0 ? [] : [value]).map(function(val) {
    return Array.isArray(val) ? val : [val];
  });
}
var Cascader$2 = /* @__PURE__ */ React$2.forwardRef(function(props, ref) {
  var id = props.id, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-cascader" : _props$prefixCls, fieldNames2 = props.fieldNames, defaultValue = props.defaultValue, value = props.value, changeOnSelect = props.changeOnSelect, onChange = props.onChange, displayRender = props.displayRender, checkable = props.checkable, searchValue = props.searchValue, onSearch = props.onSearch, showSearch = props.showSearch, expandTrigger = props.expandTrigger, options = props.options, dropdownPrefixCls = props.dropdownPrefixCls, loadData = props.loadData, popupVisible = props.popupVisible, open = props.open, popupClassName = props.popupClassName, dropdownClassName = props.dropdownClassName, dropdownMenuColumnStyle = props.dropdownMenuColumnStyle, popupPlacement = props.popupPlacement, placement = props.placement, onDropdownVisibleChange = props.onDropdownVisibleChange, onPopupVisibleChange = props.onPopupVisibleChange, _props$expandIcon = props.expandIcon, expandIcon = _props$expandIcon === void 0 ? ">" : _props$expandIcon, loadingIcon = props.loadingIcon, children = props.children, _props$dropdownMatchS = props.dropdownMatchSelectWidth, dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? false : _props$dropdownMatchS, _props$showCheckedStr = props.showCheckedStrategy, showCheckedStrategy = _props$showCheckedStr === void 0 ? SHOW_PARENT$1 : _props$showCheckedStr, restProps = _objectWithoutProperties(props, _excluded$1);
  var mergedId = useId(id);
  var multiple = !!checkable;
  var _useMergedState = useMergedState(defaultValue, {
    value,
    postState: toRawValues
  }), _useMergedState2 = _slicedToArray$1(_useMergedState, 2), rawValues = _useMergedState2[0], setRawValues = _useMergedState2[1];
  var mergedFieldNames = React$2.useMemo(
    function() {
      return fillFieldNames$1(fieldNames2);
    },
    /* eslint-disable react-hooks/exhaustive-deps */
    [JSON.stringify(fieldNames2)]
    /* eslint-enable react-hooks/exhaustive-deps */
  );
  var mergedOptions = React$2.useMemo(function() {
    return options || [];
  }, [options]);
  var getPathKeyEntities = useEntities(mergedOptions, mergedFieldNames);
  var getValueByKeyPath = React$2.useCallback(function(pathKeys) {
    var keyPathEntities = getPathKeyEntities();
    return pathKeys.map(function(pathKey) {
      var nodes = keyPathEntities[pathKey].nodes;
      return nodes.map(function(node2) {
        return node2[mergedFieldNames.value];
      });
    });
  }, [getPathKeyEntities, mergedFieldNames]);
  var _useMergedState3 = useMergedState("", {
    value: searchValue,
    postState: function postState(search) {
      return search || "";
    }
  }), _useMergedState4 = _slicedToArray$1(_useMergedState3, 2), mergedSearchValue = _useMergedState4[0], setSearchValue = _useMergedState4[1];
  var onInternalSearch = function onInternalSearch2(searchText, info) {
    setSearchValue(searchText);
    if (info.source !== "blur" && onSearch) {
      onSearch(searchText);
    }
  };
  var _useSearchConfig = useSearchConfig(showSearch), _useSearchConfig2 = _slicedToArray$1(_useSearchConfig, 2), mergedShowSearch = _useSearchConfig2[0], searchConfig = _useSearchConfig2[1];
  var searchOptions = useSearchOptions(mergedSearchValue, mergedOptions, mergedFieldNames, dropdownPrefixCls || prefixCls, searchConfig, changeOnSelect);
  var getMissingValues = useMissingValues(mergedOptions, mergedFieldNames);
  var _React$useMemo = React$2.useMemo(function() {
    var _getMissingValues = getMissingValues(rawValues), _getMissingValues2 = _slicedToArray$1(_getMissingValues, 2), existValues = _getMissingValues2[0], missingValues = _getMissingValues2[1];
    if (!multiple || !rawValues.length) {
      return [existValues, [], missingValues];
    }
    var keyPathValues = toPathKeys(existValues);
    var keyPathEntities = getPathKeyEntities();
    var _conductCheck = conductCheck(keyPathValues, true, keyPathEntities), checkedKeys = _conductCheck.checkedKeys, halfCheckedKeys = _conductCheck.halfCheckedKeys;
    return [getValueByKeyPath(checkedKeys), getValueByKeyPath(halfCheckedKeys), missingValues];
  }, [multiple, rawValues, getPathKeyEntities, getValueByKeyPath, getMissingValues]), _React$useMemo2 = _slicedToArray$1(_React$useMemo, 3), checkedValues = _React$useMemo2[0], halfCheckedValues = _React$useMemo2[1], missingCheckedValues = _React$useMemo2[2];
  var deDuplicatedValues = React$2.useMemo(function() {
    var checkedKeys = toPathKeys(checkedValues);
    var deduplicateKeys = formatStrategyValues(checkedKeys, getPathKeyEntities, showCheckedStrategy);
    return [].concat(_toConsumableArray(missingCheckedValues), _toConsumableArray(getValueByKeyPath(deduplicateKeys)));
  }, [checkedValues, getPathKeyEntities, getValueByKeyPath, missingCheckedValues, showCheckedStrategy]);
  var displayValues = useDisplayValues(deDuplicatedValues, mergedOptions, mergedFieldNames, multiple, displayRender);
  var triggerChange = useRefFunc(function(nextValues) {
    setRawValues(nextValues);
    if (onChange) {
      var nextRawValues = toRawValues(nextValues);
      var valueOptions = nextRawValues.map(function(valueCells) {
        return toPathOptions(valueCells, mergedOptions, mergedFieldNames).map(function(valueOpt) {
          return valueOpt.option;
        });
      });
      var triggerValues = multiple ? nextRawValues : nextRawValues[0];
      var triggerOptions = multiple ? valueOptions : valueOptions[0];
      onChange(triggerValues, triggerOptions);
    }
  });
  var onInternalSelect = useRefFunc(function(valuePath) {
    setSearchValue("");
    if (!multiple) {
      triggerChange(valuePath);
    } else {
      var pathKey = toPathKey(valuePath);
      var checkedPathKeys = toPathKeys(checkedValues);
      var halfCheckedPathKeys = toPathKeys(halfCheckedValues);
      var existInChecked = checkedPathKeys.includes(pathKey);
      var existInMissing = missingCheckedValues.some(function(valueCells) {
        return toPathKey(valueCells) === pathKey;
      });
      var nextCheckedValues = checkedValues;
      var nextMissingValues = missingCheckedValues;
      if (existInMissing && !existInChecked) {
        nextMissingValues = missingCheckedValues.filter(function(valueCells) {
          return toPathKey(valueCells) !== pathKey;
        });
      } else {
        var nextRawCheckedKeys = existInChecked ? checkedPathKeys.filter(function(key) {
          return key !== pathKey;
        }) : [].concat(_toConsumableArray(checkedPathKeys), [pathKey]);
        var pathKeyEntities = getPathKeyEntities();
        var checkedKeys;
        if (existInChecked) {
          var _conductCheck2 = conductCheck(nextRawCheckedKeys, {
            checked: false,
            halfCheckedKeys: halfCheckedPathKeys
          }, pathKeyEntities);
          checkedKeys = _conductCheck2.checkedKeys;
        } else {
          var _conductCheck3 = conductCheck(nextRawCheckedKeys, true, pathKeyEntities);
          checkedKeys = _conductCheck3.checkedKeys;
        }
        var deDuplicatedKeys = formatStrategyValues(checkedKeys, getPathKeyEntities, showCheckedStrategy);
        nextCheckedValues = getValueByKeyPath(deDuplicatedKeys);
      }
      triggerChange([].concat(_toConsumableArray(nextMissingValues), _toConsumableArray(nextCheckedValues)));
    }
  });
  var onDisplayValuesChange = function onDisplayValuesChange2(_, info) {
    if (info.type === "clear") {
      triggerChange([]);
      return;
    }
    var _ref = info.values[0], valueCells = _ref.valueCells;
    onInternalSelect(valueCells);
  };
  var mergedOpen = open !== void 0 ? open : popupVisible;
  var mergedDropdownClassName = dropdownClassName || popupClassName;
  var mergedPlacement = placement || popupPlacement;
  var onInternalDropdownVisibleChange = function onInternalDropdownVisibleChange2(nextVisible) {
    onDropdownVisibleChange === null || onDropdownVisibleChange === void 0 ? void 0 : onDropdownVisibleChange(nextVisible);
    onPopupVisibleChange === null || onPopupVisibleChange === void 0 ? void 0 : onPopupVisibleChange(nextVisible);
  };
  if (process.env.NODE_ENV !== "production") {
    warningProps(props);
    warningNullOptions(mergedOptions, mergedFieldNames);
  }
  var cascaderContext = React$2.useMemo(function() {
    return {
      options: mergedOptions,
      fieldNames: mergedFieldNames,
      values: checkedValues,
      halfValues: halfCheckedValues,
      changeOnSelect,
      onSelect: onInternalSelect,
      checkable,
      searchOptions,
      dropdownPrefixCls,
      loadData,
      expandTrigger,
      expandIcon,
      loadingIcon,
      dropdownMenuColumnStyle
    };
  }, [mergedOptions, mergedFieldNames, checkedValues, halfCheckedValues, changeOnSelect, onInternalSelect, checkable, searchOptions, dropdownPrefixCls, loadData, expandTrigger, expandIcon, loadingIcon, dropdownMenuColumnStyle]);
  var emptyOptions = !(mergedSearchValue ? searchOptions : mergedOptions).length;
  var dropdownStyle = (
    // Search to match width
    mergedSearchValue && searchConfig.matchInputWidth || // Empty keep the width
    emptyOptions ? {} : {
      minWidth: "auto"
    }
  );
  return /* @__PURE__ */ React$2.createElement(CascaderContext.Provider, {
    value: cascaderContext
  }, /* @__PURE__ */ React$2.createElement(BaseSelect, _extends$1({}, restProps, {
    // MISC
    ref,
    id: mergedId,
    prefixCls,
    dropdownMatchSelectWidth,
    dropdownStyle,
    displayValues,
    onDisplayValuesChange,
    mode: multiple ? "multiple" : void 0,
    searchValue: mergedSearchValue,
    onSearch: onInternalSearch,
    showSearch: mergedShowSearch,
    OptionList: RefOptionList,
    emptyOptions,
    open: mergedOpen,
    dropdownClassName: mergedDropdownClassName,
    placement: mergedPlacement,
    onDropdownVisibleChange: onInternalDropdownVisibleChange,
    getRawInputElement: function getRawInputElement() {
      return children;
    }
  })));
});
if (process.env.NODE_ENV !== "production") {
  Cascader$2.displayName = "Cascader";
}
Cascader$2.SHOW_PARENT = SHOW_PARENT$1;
Cascader$2.SHOW_CHILD = SHOW_CHILD$1;
const antCheckboxEffect = new Keyframe("antCheckboxEffect", {
  "0%": {
    transform: "scale(1)",
    opacity: 0.5
  },
  "100%": {
    transform: "scale(1.6)",
    opacity: 0
  }
});
const genCheckboxStyle = (token2) => {
  const {
    checkboxCls
  } = token2;
  const wrapperCls = `${checkboxCls}-wrapper`;
  return [
    // ===================== Basic =====================
    {
      // Group
      [`${checkboxCls}-group`]: Object.assign(Object.assign({}, resetComponent(token2)), {
        display: "inline-flex"
      }),
      // Wrapper
      [wrapperCls]: Object.assign(Object.assign({}, resetComponent(token2)), {
        display: "inline-flex",
        alignItems: "baseline",
        cursor: "pointer",
        // Fix checkbox & radio in flex align #30260
        "&:after": {
          display: "inline-block",
          width: 0,
          overflow: "hidden",
          content: "'\\a0'"
        },
        // Checkbox near checkbox
        [`& + ${wrapperCls}`]: {
          marginInlineStart: token2.marginXS
        },
        [`&${wrapperCls}-in-form-item`]: {
          'input[type="checkbox"]': {
            width: 14,
            height: 14
            // FIXME: magic
          }
        }
      }),
      // Wrapper > Checkbox
      [checkboxCls]: Object.assign(Object.assign({}, resetComponent(token2)), {
        position: "relative",
        whiteSpace: "nowrap",
        lineHeight: 1,
        cursor: "pointer",
        alignSelf: "start",
        // https://github.com/ant-design/ant-design/issues/41564
        // Since `checkboxSize` is dynamic which should align with the text box,
        // We need do calculation here for offset.
        transform: `translate(0, ${token2.lineHeight * token2.fontSize / 2 - token2.checkboxSize / 2}px)`,
        // Wrapper > Checkbox > input
        [`${checkboxCls}-input`]: {
          position: "absolute",
          // Since baseline align will get additional space offset,
          // we need to move input to top to make it align with text.
          // Ref: https://github.com/ant-design/ant-design/issues/38926#issuecomment-1486137799
          inset: 0,
          zIndex: 1,
          cursor: "pointer",
          opacity: 0,
          margin: 0,
          [`&:focus-visible + ${checkboxCls}-inner`]: Object.assign({}, genFocusOutline(token2))
        },
        // Wrapper > Checkbox > inner
        [`${checkboxCls}-inner`]: {
          boxSizing: "border-box",
          position: "relative",
          top: 0,
          insetInlineStart: 0,
          display: "block",
          width: token2.checkboxSize,
          height: token2.checkboxSize,
          direction: "ltr",
          backgroundColor: token2.colorBgContainer,
          border: `${token2.lineWidth}px ${token2.lineType} ${token2.colorBorder}`,
          borderRadius: token2.borderRadiusSM,
          borderCollapse: "separate",
          transition: `all ${token2.motionDurationSlow}`,
          "&:after": {
            boxSizing: "border-box",
            position: "absolute",
            top: "50%",
            insetInlineStart: "21.5%",
            display: "table",
            width: token2.checkboxSize / 14 * 5,
            height: token2.checkboxSize / 14 * 8,
            border: `${token2.lineWidthBold}px solid ${token2.colorWhite}`,
            borderTop: 0,
            borderInlineStart: 0,
            transform: "rotate(45deg) scale(0) translate(-50%,-50%)",
            opacity: 0,
            content: '""',
            transition: `all ${token2.motionDurationFast} ${token2.motionEaseInBack}, opacity ${token2.motionDurationFast}`
          }
        },
        // Wrapper > Checkbox + Text
        "& + span": {
          paddingInlineStart: token2.paddingXS,
          paddingInlineEnd: token2.paddingXS
        }
      })
    },
    // ================= Indeterminate =================
    {
      [checkboxCls]: {
        "&-indeterminate": {
          // Wrapper > Checkbox > inner
          [`${checkboxCls}-inner`]: {
            "&:after": {
              top: "50%",
              insetInlineStart: "50%",
              width: token2.fontSizeLG / 2,
              height: token2.fontSizeLG / 2,
              backgroundColor: token2.colorPrimary,
              border: 0,
              transform: "translate(-50%, -50%) scale(1)",
              opacity: 1,
              content: '""'
            }
          }
        }
      }
    },
    // ===================== Hover =====================
    {
      // Wrapper
      [`${wrapperCls}:hover ${checkboxCls}:after`]: {
        visibility: "visible"
      },
      // Wrapper & Wrapper > Checkbox
      [`
        ${wrapperCls}:not(${wrapperCls}-disabled),
        ${checkboxCls}:not(${checkboxCls}-disabled)
      `]: {
        [`&:hover ${checkboxCls}-inner`]: {
          borderColor: token2.colorPrimary
        }
      },
      [`${wrapperCls}:not(${wrapperCls}-disabled)`]: {
        [`&:hover ${checkboxCls}-checked:not(${checkboxCls}-disabled) ${checkboxCls}-inner`]: {
          backgroundColor: token2.colorPrimaryHover,
          borderColor: "transparent"
        },
        [`&:hover ${checkboxCls}-checked:not(${checkboxCls}-disabled):after`]: {
          borderColor: token2.colorPrimaryHover
        }
      }
    },
    // ==================== Checked ====================
    {
      // Wrapper > Checkbox
      [`${checkboxCls}-checked`]: {
        [`${checkboxCls}-inner`]: {
          backgroundColor: token2.colorPrimary,
          borderColor: token2.colorPrimary,
          "&:after": {
            opacity: 1,
            transform: "rotate(45deg) scale(1) translate(-50%,-50%)",
            transition: `all ${token2.motionDurationMid} ${token2.motionEaseOutBack} ${token2.motionDurationFast}`
          }
        },
        // Checked Effect
        "&:after": {
          position: "absolute",
          top: 0,
          insetInlineStart: 0,
          width: "100%",
          height: "100%",
          borderRadius: token2.borderRadiusSM,
          visibility: "hidden",
          border: `${token2.lineWidthBold}px solid ${token2.colorPrimary}`,
          animationName: antCheckboxEffect,
          animationDuration: token2.motionDurationSlow,
          animationTimingFunction: "ease-in-out",
          animationFillMode: "backwards",
          content: '""',
          transition: `all ${token2.motionDurationSlow}`
        }
      },
      [`
        ${wrapperCls}-checked:not(${wrapperCls}-disabled),
        ${checkboxCls}-checked:not(${checkboxCls}-disabled)
      `]: {
        [`&:hover ${checkboxCls}-inner`]: {
          backgroundColor: token2.colorPrimaryHover,
          borderColor: "transparent"
        },
        [`&:hover ${checkboxCls}:after`]: {
          borderColor: token2.colorPrimaryHover
        }
      }
    },
    // ==================== Disable ====================
    {
      // Wrapper
      [`${wrapperCls}-disabled`]: {
        cursor: "not-allowed"
      },
      // Wrapper > Checkbox
      [`${checkboxCls}-disabled`]: {
        // Wrapper > Checkbox > input
        [`&, ${checkboxCls}-input`]: {
          cursor: "not-allowed",
          // Disabled for native input to enable Tooltip event handler
          // ref: https://github.com/ant-design/ant-design/issues/39822#issuecomment-1365075901
          pointerEvents: "none"
        },
        // Wrapper > Checkbox > inner
        [`${checkboxCls}-inner`]: {
          background: token2.colorBgContainerDisabled,
          borderColor: token2.colorBorder,
          "&:after": {
            borderColor: token2.colorTextDisabled
          }
        },
        "&:after": {
          display: "none"
        },
        "& + span": {
          color: token2.colorTextDisabled
        },
        [`&${checkboxCls}-indeterminate ${checkboxCls}-inner::after`]: {
          background: token2.colorTextDisabled
        }
      }
    }
  ];
};
function getStyle(prefixCls, token2) {
  const checkboxToken = merge(token2, {
    checkboxCls: `.${prefixCls}`,
    checkboxSize: token2.controlInteractiveSize
  });
  return [genCheckboxStyle(checkboxToken)];
}
const genBaseStyle = (token2) => {
  const {
    prefixCls,
    componentCls,
    antCls
  } = token2;
  const cascaderMenuItemCls = `${componentCls}-menu-item`;
  const iconCls = `
    &${cascaderMenuItemCls}-expand ${cascaderMenuItemCls}-expand-icon,
    ${cascaderMenuItemCls}-loading-icon
  `;
  const itemPaddingVertical = Math.round((token2.controlHeight - token2.fontSize * token2.lineHeight) / 2);
  return [
    // =====================================================
    // ==                     Control                     ==
    // =====================================================
    {
      [componentCls]: {
        width: token2.controlWidth
      }
    },
    // =====================================================
    // ==                      Popup                      ==
    // =====================================================
    {
      [`${componentCls}-dropdown`]: [
        // ==================== Checkbox ====================
        getStyle(`${prefixCls}-checkbox`, token2),
        {
          [`&${antCls}-select-dropdown`]: {
            padding: 0
          }
        },
        {
          [componentCls]: {
            // ================== Checkbox ==================
            "&-checkbox": {
              top: 0,
              marginInlineEnd: token2.paddingXS
            },
            // ==================== Menu ====================
            // >>> Menus
            "&-menus": {
              display: "flex",
              flexWrap: "nowrap",
              alignItems: "flex-start",
              [`&${componentCls}-menu-empty`]: {
                [`${componentCls}-menu`]: {
                  width: "100%",
                  height: "auto",
                  [cascaderMenuItemCls]: {
                    color: token2.colorTextDisabled
                  }
                }
              }
            },
            // >>> Menu
            "&-menu": {
              flexGrow: 1,
              minWidth: token2.controlItemWidth,
              height: token2.dropdownHeight,
              margin: 0,
              padding: token2.paddingXXS,
              overflow: "auto",
              verticalAlign: "top",
              listStyle: "none",
              "-ms-overflow-style": "-ms-autohiding-scrollbar",
              "&:not(:last-child)": {
                borderInlineEnd: `${token2.lineWidth}px ${token2.lineType} ${token2.colorSplit}`
              },
              "&-item": Object.assign(Object.assign({}, textEllipsis), {
                display: "flex",
                flexWrap: "nowrap",
                alignItems: "center",
                padding: `${itemPaddingVertical}px ${token2.paddingSM}px`,
                lineHeight: token2.lineHeight,
                cursor: "pointer",
                transition: `all ${token2.motionDurationMid}`,
                borderRadius: token2.borderRadiusSM,
                "&:hover": {
                  background: token2.controlItemBgHover
                },
                "&-disabled": {
                  color: token2.colorTextDisabled,
                  cursor: "not-allowed",
                  "&:hover": {
                    background: "transparent"
                  },
                  [iconCls]: {
                    color: token2.colorTextDisabled
                  }
                },
                [`&-active:not(${cascaderMenuItemCls}-disabled)`]: {
                  [`&, &:hover`]: {
                    fontWeight: token2.fontWeightStrong,
                    backgroundColor: token2.controlItemBgActive
                  }
                },
                "&-content": {
                  flex: "auto"
                },
                [iconCls]: {
                  marginInlineStart: token2.paddingXXS,
                  color: token2.colorTextDescription,
                  fontSize: token2.fontSizeIcon
                },
                "&-keyword": {
                  color: token2.colorHighlight
                }
              })
            }
          }
        }
      ]
    },
    // =====================================================
    // ==                       RTL                       ==
    // =====================================================
    {
      [`${componentCls}-dropdown-rtl`]: {
        direction: "rtl"
      }
    },
    // =====================================================
    // ==             Space Compact                       ==
    // =====================================================
    genCompactItemStyle(token2)
  ];
};
const useStyle = genComponentStyleHook("Cascader", (token2) => [genBaseStyle(token2)], {
  controlWidth: 184,
  controlItemWidth: 111,
  dropdownHeight: 180
});
var __rest$1 = globalThis && globalThis.__rest || function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
const {
  SHOW_CHILD,
  SHOW_PARENT
} = Cascader$2;
function highlightKeyword(str, lowerKeyword, prefixCls) {
  const cells = str.toLowerCase().split(lowerKeyword).reduce((list, cur, index2) => index2 === 0 ? [cur] : [].concat(_toConsumableArray(list), [lowerKeyword, cur]), []);
  const fillCells = [];
  let start = 0;
  cells.forEach((cell, index2) => {
    const end = start + cell.length;
    let originWorld = str.slice(start, end);
    start = end;
    if (index2 % 2 === 1) {
      originWorld = // eslint-disable-next-line react/no-array-index-key
      /* @__PURE__ */ React$2.createElement("span", {
        className: `${prefixCls}-menu-item-keyword`,
        key: `separator-${index2}`
      }, originWorld);
    }
    fillCells.push(originWorld);
  });
  return fillCells;
}
const defaultSearchRender = (inputValue, path, prefixCls, fieldNames2) => {
  const optionList = [];
  const lower = inputValue.toLowerCase();
  path.forEach((node2, index2) => {
    if (index2 !== 0) {
      optionList.push(" / ");
    }
    let label = node2[fieldNames2.label];
    const type4 = typeof label;
    if (type4 === "string" || type4 === "number") {
      label = highlightKeyword(String(label), lower, prefixCls);
    }
    optionList.push(label);
  });
  return optionList;
};
const Cascader = /* @__PURE__ */ React$2.forwardRef((props, ref) => {
  const {
    prefixCls: customizePrefixCls,
    size: customizeSize,
    disabled: customDisabled,
    className,
    rootClassName,
    multiple,
    bordered = true,
    transitionName,
    choiceTransitionName = "",
    popupClassName,
    dropdownClassName,
    expandIcon,
    placement,
    showSearch,
    allowClear = true,
    notFoundContent,
    direction,
    getPopupContainer,
    status: customStatus,
    showArrow,
    builtinPlacements
  } = props, rest = __rest$1(props, ["prefixCls", "size", "disabled", "className", "rootClassName", "multiple", "bordered", "transitionName", "choiceTransitionName", "popupClassName", "dropdownClassName", "expandIcon", "placement", "showSearch", "allowClear", "notFoundContent", "direction", "getPopupContainer", "status", "showArrow", "builtinPlacements"]);
  const restProps = omit(rest, ["suffixIcon"]);
  const {
    getPopupContainer: getContextPopupContainer,
    getPrefixCls,
    renderEmpty,
    direction: rootDirection
    // virtual,
    // dropdownMatchSelectWidth,
  } = React$2.useContext(ConfigContext);
  const mergedDirection = direction || rootDirection;
  const isRtl = mergedDirection === "rtl";
  const {
    status: contextStatus,
    hasFeedback,
    isFormItemInput,
    feedbackIcon
  } = React$2.useContext(FormItemInputContext);
  const mergedStatus = getMergedStatus(contextStatus, customStatus);
  if (process.env.NODE_ENV !== "production") {
    process.env.NODE_ENV !== "production" ? warning$2(!dropdownClassName, "Cascader", "`dropdownClassName` is deprecated. Please use `popupClassName` instead.") : void 0;
  }
  const mergedNotFoundContent = notFoundContent || (renderEmpty === null || renderEmpty === void 0 ? void 0 : renderEmpty("Cascader")) || /* @__PURE__ */ React$2.createElement(DefaultRenderEmpty$1, {
    componentName: "Cascader"
  });
  const rootPrefixCls = getPrefixCls();
  const prefixCls = getPrefixCls("select", customizePrefixCls);
  const cascaderPrefixCls = getPrefixCls("cascader", customizePrefixCls);
  const [wrapSelectSSR, hashId] = useSelectStyle(prefixCls);
  const [wrapCascaderSSR] = useStyle(cascaderPrefixCls);
  const {
    compactSize,
    compactItemClassnames
  } = useCompactItemContext(prefixCls, direction);
  const mergedDropdownClassName = classNames(popupClassName || dropdownClassName, `${cascaderPrefixCls}-dropdown`, {
    [`${cascaderPrefixCls}-dropdown-rtl`]: mergedDirection === "rtl"
  }, rootClassName, hashId);
  const mergedShowSearch = React$2.useMemo(() => {
    if (!showSearch) {
      return showSearch;
    }
    let searchConfig = {
      render: defaultSearchRender
    };
    if (typeof showSearch === "object") {
      searchConfig = Object.assign(Object.assign({}, searchConfig), showSearch);
    }
    return searchConfig;
  }, [showSearch]);
  const size = React$2.useContext(SizeContext$1);
  const mergedSize = compactSize || customizeSize || size;
  const disabled = React$2.useContext(DisabledContext$1);
  const mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;
  let mergedExpandIcon = expandIcon;
  if (!expandIcon) {
    mergedExpandIcon = isRtl ? /* @__PURE__ */ React$2.createElement(LeftOutlined$1, null) : /* @__PURE__ */ React$2.createElement(RightOutlined$1, null);
  }
  const loadingIcon = /* @__PURE__ */ React$2.createElement("span", {
    className: `${prefixCls}-menu-item-loading-icon`
  }, /* @__PURE__ */ React$2.createElement(LoadingOutlined$1, {
    spin: true
  }));
  const checkable = React$2.useMemo(() => multiple ? /* @__PURE__ */ React$2.createElement("span", {
    className: `${cascaderPrefixCls}-checkbox-inner`
  }) : false, [multiple]);
  const mergedShowArrow = useShowArrow(showArrow);
  const {
    suffixIcon,
    removeIcon,
    clearIcon
  } = getIcons(Object.assign(Object.assign({}, props), {
    hasFeedback,
    feedbackIcon,
    showArrow: mergedShowArrow,
    multiple,
    prefixCls
  }));
  const memoPlacement = React$2.useMemo(() => {
    if (placement !== void 0) {
      return placement;
    }
    return isRtl ? "bottomRight" : "bottomLeft";
  }, [placement, isRtl]);
  const mergedBuiltinPlacements = useBuiltinPlacements(builtinPlacements);
  const renderNode = /* @__PURE__ */ React$2.createElement(Cascader$2, Object.assign({
    prefixCls,
    className: classNames(!customizePrefixCls && cascaderPrefixCls, {
      [`${prefixCls}-lg`]: mergedSize === "large",
      [`${prefixCls}-sm`]: mergedSize === "small",
      [`${prefixCls}-rtl`]: isRtl,
      [`${prefixCls}-borderless`]: !bordered,
      [`${prefixCls}-in-form-item`]: isFormItemInput
    }, getStatusClassNames(prefixCls, mergedStatus, hasFeedback), compactItemClassnames, className, rootClassName, hashId),
    disabled: mergedDisabled
  }, restProps, {
    builtinPlacements: mergedBuiltinPlacements,
    direction: mergedDirection,
    placement: memoPlacement,
    notFoundContent: mergedNotFoundContent,
    allowClear,
    showSearch: mergedShowSearch,
    expandIcon: mergedExpandIcon,
    inputIcon: suffixIcon,
    removeIcon,
    clearIcon,
    loadingIcon,
    checkable,
    dropdownClassName: mergedDropdownClassName,
    dropdownPrefixCls: customizePrefixCls || cascaderPrefixCls,
    choiceTransitionName: getTransitionName$1(rootPrefixCls, "", choiceTransitionName),
    transitionName: getTransitionName$1(rootPrefixCls, getTransitionDirection(placement), transitionName),
    getPopupContainer: getPopupContainer || getContextPopupContainer,
    ref,
    showArrow: hasFeedback || mergedShowArrow
  }));
  return wrapCascaderSSR(wrapSelectSSR(renderNode));
});
if (process.env.NODE_ENV !== "production") {
  Cascader.displayName = "Cascader";
}
const PurePanel = genPurePanel(Cascader);
Cascader.SHOW_PARENT = SHOW_PARENT;
Cascader.SHOW_CHILD = SHOW_CHILD;
Cascader._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;
const Cascader$1 = Cascader;
var CaretDownFilled$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z" } }] }, "name": "caret-down", "theme": "filled" };
const CaretDownFilledSvg = CaretDownFilled$2;
var CaretDownFilled = function CaretDownFilled2(props, ref) {
  return /* @__PURE__ */ React$2.createElement(AntdIcon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
    ref,
    icon: CaretDownFilledSvg
  }));
};
CaretDownFilled.displayName = "CaretDownFilled";
const CaretDownFilled$1 = /* @__PURE__ */ React$2.forwardRef(CaretDownFilled);
var CloseCircleOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M685.4 354.8c0-4.4-3.6-8-8-8l-66 .3L512 465.6l-99.3-118.4-66.1-.3c-4.4 0-8 3.5-8 8 0 1.9.7 3.7 1.9 5.2l130.1 155L340.5 670a8.32 8.32 0 00-1.9 5.2c0 4.4 3.6 8 8 8l66.1-.3L512 564.4l99.3 118.4 66 .3c4.4 0 8-3.5 8-8 0-1.9-.7-3.7-1.9-5.2L553.5 515l130.1-155c1.2-1.4 1.8-3.3 1.8-5.2z" } }, { "tag": "path", "attrs": { "d": "M512 65C264.6 65 64 265.6 64 513s200.6 448 448 448 448-200.6 448-448S759.4 65 512 65zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }] }, "name": "close-circle", "theme": "outlined" };
const CloseCircleOutlinedSvg = CloseCircleOutlined$2;
var CloseCircleOutlined = function CloseCircleOutlined2(props, ref) {
  return /* @__PURE__ */ React$2.createElement(AntdIcon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
    ref,
    icon: CloseCircleOutlinedSvg
  }));
};
CloseCircleOutlined.displayName = "CloseCircleOutlined";
const CloseCircleOutlined$1 = /* @__PURE__ */ React$2.forwardRef(CloseCircleOutlined);
var DragOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M909.3 506.3L781.7 405.6a7.23 7.23 0 00-11.7 5.7V476H548V254h64.8c6 0 9.4-7 5.7-11.7L517.7 114.7a7.14 7.14 0 00-11.3 0L405.6 242.3a7.23 7.23 0 005.7 11.7H476v222H254v-64.8c0-6-7-9.4-11.7-5.7L114.7 506.3a7.14 7.14 0 000 11.3l127.5 100.8c4.7 3.7 11.7.4 11.7-5.7V548h222v222h-64.8c-6 0-9.4 7-5.7 11.7l100.8 127.5c2.9 3.7 8.5 3.7 11.3 0l100.8-127.5c3.7-4.7.4-11.7-5.7-11.7H548V548h222v64.8c0 6 7 9.4 11.7 5.7l127.5-100.8a7.3 7.3 0 00.1-11.4z" } }] }, "name": "drag", "theme": "outlined" };
const DragOutlinedSvg = DragOutlined$2;
var DragOutlined = function DragOutlined2(props, ref) {
  return /* @__PURE__ */ React$2.createElement(AntdIcon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
    ref,
    icon: DragOutlinedSvg
  }));
};
DragOutlined.displayName = "DragOutlined";
const DragOutlined$1 = /* @__PURE__ */ React$2.forwardRef(DragOutlined);
var _excluded = ["className", "component", "viewBox", "spin", "rotate", "tabIndex", "onClick", "children"];
var Icon = /* @__PURE__ */ React$2.forwardRef(function(props, ref) {
  var className = props.className, Component = props.component, viewBox = props.viewBox, spin = props.spin, rotate = props.rotate, tabIndex = props.tabIndex, onClick = props.onClick, children = props.children, restProps = _objectWithoutProperties(props, _excluded);
  warning2(Boolean(Component || children), "Should have `component` prop or `children`.");
  useInsertStyles();
  var _React$useContext = React$2.useContext(Context$2), _React$useContext$pre = _React$useContext.prefixCls, prefixCls = _React$useContext$pre === void 0 ? "anticon" : _React$useContext$pre, rootClassName = _React$useContext.rootClassName;
  var classString = classNames(rootClassName, prefixCls, className);
  var svgClassString = classNames(_defineProperty$3({}, "".concat(prefixCls, "-spin"), !!spin));
  var svgStyle = rotate ? {
    msTransform: "rotate(".concat(rotate, "deg)"),
    transform: "rotate(".concat(rotate, "deg)")
  } : void 0;
  var innerSvgProps = _objectSpread2$1(_objectSpread2$1({}, svgBaseProps), {}, {
    className: svgClassString,
    style: svgStyle,
    viewBox
  });
  if (!viewBox) {
    delete innerSvgProps.viewBox;
  }
  var renderInnerNode = function renderInnerNode2() {
    if (Component) {
      return /* @__PURE__ */ React$2.createElement(Component, _objectSpread2$1({}, innerSvgProps), children);
    }
    if (children) {
      warning2(Boolean(viewBox) || React$2.Children.count(children) === 1 && /* @__PURE__ */ React$2.isValidElement(children) && React$2.Children.only(children).type === "use", "Make sure that you provide correct `viewBox` prop (default `0 0 1024 1024`) to the icon.");
      return /* @__PURE__ */ React$2.createElement("svg", _objectSpread2$1(_objectSpread2$1({}, innerSvgProps), {}, {
        viewBox
      }), children);
    }
    return null;
  };
  var iconTabIndex = tabIndex;
  if (iconTabIndex === void 0 && onClick) {
    iconTabIndex = -1;
  }
  return /* @__PURE__ */ React$2.createElement("span", _objectSpread2$1(_objectSpread2$1({
    role: "img"
  }, restProps), {}, {
    ref,
    tabIndex: iconTabIndex,
    onClick,
    className: classString
  }), renderInnerNode());
});
Icon.displayName = "AntdIcon";
const Icon$1 = Icon;
const customerSvg = "positive-SwitchStaff__customerSvg";
const tenantName = "positive-SwitchStaff__tenantName";
const overlay = "positive-SwitchStaff__overlay";
const switchTenant = "positive-SwitchStaff__switchTenant";
const styles$2 = {
  customerSvg,
  tenantName,
  overlay,
  switchTenant
};
const CustomerSvg = () => /* @__PURE__ */ jsx("svg", { width: "16px", height: "16px", fill: "currentColor", viewBox: "0 0 16 16", children: /* @__PURE__ */ jsx("g", { id: "控件", stroke: "none", strokeWidth: "1", fill: "currentColor", fillRule: "evenodd", children: /* @__PURE__ */ jsx("g", { id: "导航栏", transform: "translate(-1140.000000, -17.000000)", fill: "currentColor", fillRule: "nonzero", children: /* @__PURE__ */ jsx("g", { id: "编组-3", transform: "translate(1136.000000, 9.000000)", children: /* @__PURE__ */ jsxs("g", { id: "公司", transform: "translate(4.000000, 8.000000)", children: [
  /* @__PURE__ */ jsx("rect", { id: "矩形", opacity: "0", x: "0", y: "0", width: "16", height: "16" }),
  /* @__PURE__ */ jsx("path", { d: "M14.688,13.478 L13.92,13.478 L13.92,4.734 C13.92,4.478 13.768,4.254 13.536,4.142 L9.704,2.142 C9.488,2.046 9.248,2.046 9.032,2.142 C8.792,2.238 8.64,2.47 8.648,3.734 L8.648,14.478 L7.88,14.478 L7.88,2.67 C7.88,1.374 7.88,1.182 7.592,1.078 C7.344,0.974 7.072,0.974 6.824,1.078 L2.44,3.39 C2.208,3.502 2.056,3.742 2.056,3.998 L2.056,13.486 L1.288,13.486 C1.096,13.486 1,13.59 1,13.686 L1,14.798 C1,14.894 1.096,14.998 1.288,14.998 L14.688,14.998 C14.776,14.998 14.96,14.894 14.976,14.798 L14.976,13.694 C15,13.574 14.792,13.478 14.688,13.478 Z M5.688,12.07 C5.688,12.182 5.6,12.27 5.488,12.27 L4.408,12.27 C4.296,12.27 4.208,12.182 4.208,12.07 L4.208,11.134 C4.208,11.022 4.296,10.934 4.408,10.934 L5.512,10.934 C5.624,10.934 5.712,11.022 5.712,11.134 L5.688,12.07 Z M5.688,9.246 C5.688,9.358 5.6,9.446 5.488,9.446 L4.408,9.446 C4.296,9.446 4.208,9.358 4.208,9.246 L4.208,8.294 C4.208,8.182 4.296,8.094 4.408,8.094 L5.512,8.094 C5.624,8.094 5.712,8.182 5.712,8.294 L5.688,9.246 Z M5.688,6.43 C5.688,6.542 5.6,6.63 5.488,6.63 L4.408,6.63 C4.296,6.63 4.208,6.542 4.208,6.43 L4.208,5.47 C4.208,5.358 4.296,5.27 4.408,5.27 L5.512,5.27 C5.624,5.27 5.712,5.358 5.712,5.47 L5.688,6.43 Z M12,12.062 C12,12.174 11.912,12.262 11.8,12.262 L10.696,12.262 C10.584,12.262 10.496,12.174 10.496,12.062 L10.496,11.118 C10.496,11.006 10.584,10.918 10.696,10.918 L11.8,10.918 C11.912,10.918 12,11.006 12,11.118 L12,12.062 Z M12,9.238 C12,9.35 11.912,9.438 11.8,9.438 L10.696,9.438 C10.584,9.438 10.496,9.35 10.496,9.238 L10.496,8.294 C10.496,8.182 10.584,8.094 10.696,8.094 L11.8,8.094 C11.912,8.094 12,8.182 12,8.294 L12,9.238 L12,9.238 Z M12,6.422 C12,6.534 11.912,6.622 11.8,6.622 L10.696,6.622 C10.584,6.622 10.496,6.534 10.496,6.422 L10.496,5.47 C10.496,5.358 10.584,5.27 10.696,5.27 L11.8,5.27 C11.912,5.27 12,5.358 12,5.47 L12,6.422 Z", id: "形状" })
] }) }) }) }) });
function useCurrent() {
  useEffect(() => {
    console.log("测试一下demo");
  }, []);
  return "小何的测试用户";
}
const SwitchStaff = () => {
  useCurrent();
  return /* @__PURE__ */ jsx(ConfigProvider$1, { theme: { algorithm: theme.darkAlgorithm }, children: /* @__PURE__ */ jsxs(Space$1, { align: "center", children: [
    /* @__PURE__ */ jsx(Icon$1, { component: CustomerSvg, className: styles$2.customerSvg }),
    /* @__PURE__ */ jsx("div", { className: styles$2.tenantName, children: "小何的租户" }),
    /* @__PURE__ */ jsx(
      Dropdown$1,
      {
        overlayClassName: "overlay",
        autoFocus: true,
        autoAdjustOverflow: false,
        placement: "bottomRight",
        destroyPopupOnHide: true,
        arrow: true,
        menu: {
          items: [
            { key: "1", label: "小何的测试租户" },
            { key: "2", label: "小冒的测试租户" }
          ],
          selectable: true,
          selectedKeys: ["1"],
          onClick: ({ key }) => {
            console.log("点击222", key);
          }
        },
        trigger: ["click"],
        children: /* @__PURE__ */ jsx("span", { className: styles$2.switchTenant, children: "切换" })
      }
    )
  ] }) });
};
const MessageCenter = () => {
  return /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsx("h1", { children: "SwitchStaff" }) });
};
const boardWrapper = "positive-NumericKeyboard__boardWrapper";
const optHeader = "positive-NumericKeyboard__optHeader";
const optBtn = "positive-NumericKeyboard__optBtn";
const numContent = "positive-NumericKeyboard__numContent";
const numBtn = "positive-NumericKeyboard__numBtn";
const symbolFooter = "positive-NumericKeyboard__symbolFooter";
const symbolBtn = "positive-NumericKeyboard__symbolBtn";
const clearBtn = "positive-NumericKeyboard__clearBtn";
const styles$1 = {
  boardWrapper,
  optHeader,
  optBtn,
  numContent,
  numBtn,
  symbolFooter,
  symbolBtn,
  clearBtn
};
var cjs = { exports: {} };
var Draggable$2 = {};
var propTypes = { exports: {} };
var reactIs = { exports: {} };
var reactIs_production_min = {};
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactIs_production_min;
function requireReactIs_production_min() {
  if (hasRequiredReactIs_production_min)
    return reactIs_production_min;
  hasRequiredReactIs_production_min = 1;
  var b = "function" === typeof Symbol && Symbol.for, c = b ? Symbol.for("react.element") : 60103, d = b ? Symbol.for("react.portal") : 60106, e = b ? Symbol.for("react.fragment") : 60107, f = b ? Symbol.for("react.strict_mode") : 60108, g = b ? Symbol.for("react.profiler") : 60114, h = b ? Symbol.for("react.provider") : 60109, k = b ? Symbol.for("react.context") : 60110, l = b ? Symbol.for("react.async_mode") : 60111, m = b ? Symbol.for("react.concurrent_mode") : 60111, n = b ? Symbol.for("react.forward_ref") : 60112, p = b ? Symbol.for("react.suspense") : 60113, q = b ? Symbol.for("react.suspense_list") : 60120, r2 = b ? Symbol.for("react.memo") : 60115, t = b ? Symbol.for("react.lazy") : 60116, v = b ? Symbol.for("react.block") : 60121, w = b ? Symbol.for("react.fundamental") : 60117, x = b ? Symbol.for("react.responder") : 60118, y = b ? Symbol.for("react.scope") : 60119;
  function z(a) {
    if ("object" === typeof a && null !== a) {
      var u = a.$$typeof;
      switch (u) {
        case c:
          switch (a = a.type, a) {
            case l:
            case m:
            case e:
            case g:
            case f:
            case p:
              return a;
            default:
              switch (a = a && a.$$typeof, a) {
                case k:
                case n:
                case t:
                case r2:
                case h:
                  return a;
                default:
                  return u;
              }
          }
        case d:
          return u;
      }
    }
  }
  function A(a) {
    return z(a) === m;
  }
  reactIs_production_min.AsyncMode = l;
  reactIs_production_min.ConcurrentMode = m;
  reactIs_production_min.ContextConsumer = k;
  reactIs_production_min.ContextProvider = h;
  reactIs_production_min.Element = c;
  reactIs_production_min.ForwardRef = n;
  reactIs_production_min.Fragment = e;
  reactIs_production_min.Lazy = t;
  reactIs_production_min.Memo = r2;
  reactIs_production_min.Portal = d;
  reactIs_production_min.Profiler = g;
  reactIs_production_min.StrictMode = f;
  reactIs_production_min.Suspense = p;
  reactIs_production_min.isAsyncMode = function(a) {
    return A(a) || z(a) === l;
  };
  reactIs_production_min.isConcurrentMode = A;
  reactIs_production_min.isContextConsumer = function(a) {
    return z(a) === k;
  };
  reactIs_production_min.isContextProvider = function(a) {
    return z(a) === h;
  };
  reactIs_production_min.isElement = function(a) {
    return "object" === typeof a && null !== a && a.$$typeof === c;
  };
  reactIs_production_min.isForwardRef = function(a) {
    return z(a) === n;
  };
  reactIs_production_min.isFragment = function(a) {
    return z(a) === e;
  };
  reactIs_production_min.isLazy = function(a) {
    return z(a) === t;
  };
  reactIs_production_min.isMemo = function(a) {
    return z(a) === r2;
  };
  reactIs_production_min.isPortal = function(a) {
    return z(a) === d;
  };
  reactIs_production_min.isProfiler = function(a) {
    return z(a) === g;
  };
  reactIs_production_min.isStrictMode = function(a) {
    return z(a) === f;
  };
  reactIs_production_min.isSuspense = function(a) {
    return z(a) === p;
  };
  reactIs_production_min.isValidElementType = function(a) {
    return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r2 || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
  };
  reactIs_production_min.typeOf = z;
  return reactIs_production_min;
}
var reactIs_development = {};
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactIs_development;
function requireReactIs_development() {
  if (hasRequiredReactIs_development)
    return reactIs_development;
  hasRequiredReactIs_development = 1;
  if (process.env.NODE_ENV !== "production") {
    (function() {
      var hasSymbol = typeof Symbol === "function" && Symbol.for;
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
      function isValidElementType(type4) {
        return typeof type4 === "string" || typeof type4 === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
        type4 === REACT_FRAGMENT_TYPE || type4 === REACT_CONCURRENT_MODE_TYPE || type4 === REACT_PROFILER_TYPE || type4 === REACT_STRICT_MODE_TYPE || type4 === REACT_SUSPENSE_TYPE || type4 === REACT_SUSPENSE_LIST_TYPE || typeof type4 === "object" && type4 !== null && (type4.$$typeof === REACT_LAZY_TYPE || type4.$$typeof === REACT_MEMO_TYPE || type4.$$typeof === REACT_PROVIDER_TYPE || type4.$$typeof === REACT_CONTEXT_TYPE || type4.$$typeof === REACT_FORWARD_REF_TYPE || type4.$$typeof === REACT_FUNDAMENTAL_TYPE || type4.$$typeof === REACT_RESPONDER_TYPE || type4.$$typeof === REACT_SCOPE_TYPE || type4.$$typeof === REACT_BLOCK_TYPE);
      }
      function typeOf(object4) {
        if (typeof object4 === "object" && object4 !== null) {
          var $$typeof = object4.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type4 = object4.type;
              switch (type4) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type4;
                default:
                  var $$typeofType = type4 && type4.$$typeof;
                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
        return void 0;
      }
      var AsyncMode = REACT_ASYNC_MODE_TYPE;
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element2 = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal2 = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false;
      function isAsyncMode(object4) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true;
            console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
          }
        }
        return isConcurrentMode(object4) || typeOf(object4) === REACT_ASYNC_MODE_TYPE;
      }
      function isConcurrentMode(object4) {
        return typeOf(object4) === REACT_CONCURRENT_MODE_TYPE;
      }
      function isContextConsumer(object4) {
        return typeOf(object4) === REACT_CONTEXT_TYPE;
      }
      function isContextProvider(object4) {
        return typeOf(object4) === REACT_PROVIDER_TYPE;
      }
      function isElement(object4) {
        return typeof object4 === "object" && object4 !== null && object4.$$typeof === REACT_ELEMENT_TYPE;
      }
      function isForwardRef(object4) {
        return typeOf(object4) === REACT_FORWARD_REF_TYPE;
      }
      function isFragment2(object4) {
        return typeOf(object4) === REACT_FRAGMENT_TYPE;
      }
      function isLazy(object4) {
        return typeOf(object4) === REACT_LAZY_TYPE;
      }
      function isMemo(object4) {
        return typeOf(object4) === REACT_MEMO_TYPE;
      }
      function isPortal(object4) {
        return typeOf(object4) === REACT_PORTAL_TYPE;
      }
      function isProfiler(object4) {
        return typeOf(object4) === REACT_PROFILER_TYPE;
      }
      function isStrictMode(object4) {
        return typeOf(object4) === REACT_STRICT_MODE_TYPE;
      }
      function isSuspense(object4) {
        return typeOf(object4) === REACT_SUSPENSE_TYPE;
      }
      reactIs_development.AsyncMode = AsyncMode;
      reactIs_development.ConcurrentMode = ConcurrentMode;
      reactIs_development.ContextConsumer = ContextConsumer;
      reactIs_development.ContextProvider = ContextProvider;
      reactIs_development.Element = Element2;
      reactIs_development.ForwardRef = ForwardRef;
      reactIs_development.Fragment = Fragment;
      reactIs_development.Lazy = Lazy;
      reactIs_development.Memo = Memo;
      reactIs_development.Portal = Portal2;
      reactIs_development.Profiler = Profiler;
      reactIs_development.StrictMode = StrictMode;
      reactIs_development.Suspense = Suspense;
      reactIs_development.isAsyncMode = isAsyncMode;
      reactIs_development.isConcurrentMode = isConcurrentMode;
      reactIs_development.isContextConsumer = isContextConsumer;
      reactIs_development.isContextProvider = isContextProvider;
      reactIs_development.isElement = isElement;
      reactIs_development.isForwardRef = isForwardRef;
      reactIs_development.isFragment = isFragment2;
      reactIs_development.isLazy = isLazy;
      reactIs_development.isMemo = isMemo;
      reactIs_development.isPortal = isPortal;
      reactIs_development.isProfiler = isProfiler;
      reactIs_development.isStrictMode = isStrictMode;
      reactIs_development.isSuspense = isSuspense;
      reactIs_development.isValidElementType = isValidElementType;
      reactIs_development.typeOf = typeOf;
    })();
  }
  return reactIs_development;
}
var hasRequiredReactIs;
function requireReactIs() {
  if (hasRequiredReactIs)
    return reactIs.exports;
  hasRequiredReactIs = 1;
  if (process.env.NODE_ENV === "production") {
    reactIs.exports = requireReactIs_production_min();
  } else {
    reactIs.exports = requireReactIs_development();
  }
  return reactIs.exports;
}
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
var objectAssign;
var hasRequiredObjectAssign;
function requireObjectAssign() {
  if (hasRequiredObjectAssign)
    return objectAssign;
  hasRequiredObjectAssign = 1;
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;
  function toObject(val) {
    if (val === null || val === void 0) {
      throw new TypeError("Object.assign cannot be called with null or undefined");
    }
    return Object(val);
  }
  function shouldUseNative() {
    try {
      if (!Object.assign) {
        return false;
      }
      var test1 = new String("abc");
      test1[5] = "de";
      if (Object.getOwnPropertyNames(test1)[0] === "5") {
        return false;
      }
      var test2 = {};
      for (var i = 0; i < 10; i++) {
        test2["_" + String.fromCharCode(i)] = i;
      }
      var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
        return test2[n];
      });
      if (order2.join("") !== "0123456789") {
        return false;
      }
      var test3 = {};
      "abcdefghijklmnopqrst".split("").forEach(function(letter) {
        test3[letter] = letter;
      });
      if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
        return false;
      }
      return true;
    } catch (err) {
      return false;
    }
  }
  objectAssign = shouldUseNative() ? Object.assign : function(target, source) {
    var from2;
    var to = toObject(target);
    var symbols;
    for (var s = 1; s < arguments.length; s++) {
      from2 = Object(arguments[s]);
      for (var key in from2) {
        if (hasOwnProperty.call(from2, key)) {
          to[key] = from2[key];
        }
      }
      if (getOwnPropertySymbols) {
        symbols = getOwnPropertySymbols(from2);
        for (var i = 0; i < symbols.length; i++) {
          if (propIsEnumerable.call(from2, symbols[i])) {
            to[symbols[i]] = from2[symbols[i]];
          }
        }
      }
    }
    return to;
  };
  return objectAssign;
}
var ReactPropTypesSecret_1;
var hasRequiredReactPropTypesSecret;
function requireReactPropTypesSecret() {
  if (hasRequiredReactPropTypesSecret)
    return ReactPropTypesSecret_1;
  hasRequiredReactPropTypesSecret = 1;
  var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
  ReactPropTypesSecret_1 = ReactPropTypesSecret;
  return ReactPropTypesSecret_1;
}
var has;
var hasRequiredHas;
function requireHas() {
  if (hasRequiredHas)
    return has;
  hasRequiredHas = 1;
  has = Function.call.bind(Object.prototype.hasOwnProperty);
  return has;
}
var checkPropTypes_1;
var hasRequiredCheckPropTypes;
function requireCheckPropTypes() {
  if (hasRequiredCheckPropTypes)
    return checkPropTypes_1;
  hasRequiredCheckPropTypes = 1;
  var printWarning = function() {
  };
  if (process.env.NODE_ENV !== "production") {
    var ReactPropTypesSecret = requireReactPropTypesSecret();
    var loggedTypeFailures = {};
    var has2 = requireHas();
    printWarning = function(text) {
      var message = "Warning: " + text;
      if (typeof console !== "undefined") {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (x) {
      }
    };
  }
  function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    if (process.env.NODE_ENV !== "production") {
      for (var typeSpecName in typeSpecs) {
        if (has2(typeSpecs, typeSpecName)) {
          var error;
          try {
            if (typeof typeSpecs[typeSpecName] !== "function") {
              var err = Error(
                (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
              );
              err.name = "Invariant Violation";
              throw err;
            }
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
          } catch (ex) {
            error = ex;
          }
          if (error && !(error instanceof Error)) {
            printWarning(
              (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
            );
          }
          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : "";
            printWarning(
              "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
            );
          }
        }
      }
    }
  }
  checkPropTypes.resetWarningCache = function() {
    if (process.env.NODE_ENV !== "production") {
      loggedTypeFailures = {};
    }
  };
  checkPropTypes_1 = checkPropTypes;
  return checkPropTypes_1;
}
var factoryWithTypeCheckers;
var hasRequiredFactoryWithTypeCheckers;
function requireFactoryWithTypeCheckers() {
  if (hasRequiredFactoryWithTypeCheckers)
    return factoryWithTypeCheckers;
  hasRequiredFactoryWithTypeCheckers = 1;
  var ReactIs = requireReactIs();
  var assign = requireObjectAssign();
  var ReactPropTypesSecret = requireReactPropTypesSecret();
  var has2 = requireHas();
  var checkPropTypes = requireCheckPropTypes();
  var printWarning = function() {
  };
  if (process.env.NODE_ENV !== "production") {
    printWarning = function(text) {
      var message = "Warning: " + text;
      if (typeof console !== "undefined") {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (x) {
      }
    };
  }
  function emptyFunctionThatReturnsNull() {
    return null;
  }
  factoryWithTypeCheckers = function(isValidElement2, throwOnDirectAccess) {
    var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
      if (typeof iteratorFn === "function") {
        return iteratorFn;
      }
    }
    var ANONYMOUS = "<<anonymous>>";
    var ReactPropTypes = {
      array: createPrimitiveTypeChecker("array"),
      bigint: createPrimitiveTypeChecker("bigint"),
      bool: createPrimitiveTypeChecker("boolean"),
      func: createPrimitiveTypeChecker("function"),
      number: createPrimitiveTypeChecker("number"),
      object: createPrimitiveTypeChecker("object"),
      string: createPrimitiveTypeChecker("string"),
      symbol: createPrimitiveTypeChecker("symbol"),
      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      elementType: createElementTypeTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker,
      exact: createStrictShapeTypeChecker
    };
    function is(x, y) {
      if (x === y) {
        return x !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }
    function PropTypeError(message, data2) {
      this.message = message;
      this.data = data2 && typeof data2 === "object" ? data2 : {};
      this.stack = "";
    }
    PropTypeError.prototype = Error.prototype;
    function createChainableTypeChecker(validate) {
      if (process.env.NODE_ENV !== "production") {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
      }
      function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;
        if (secret !== ReactPropTypesSecret) {
          if (throwOnDirectAccess) {
            var err = new Error(
              "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
            );
            err.name = "Invariant Violation";
            throw err;
          } else if (process.env.NODE_ENV !== "production" && typeof console !== "undefined") {
            var cacheKey = componentName + ":" + propName;
            if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3) {
              printWarning(
                "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
              );
              manualPropTypeCallCache[cacheKey] = true;
              manualPropTypeWarningCount++;
            }
          }
        }
        if (props[propName] == null) {
          if (isRequired) {
            if (props[propName] === null) {
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
            }
            return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
          }
          return null;
        } else {
          return validate(props, propName, componentName, location, propFullName);
        }
      }
      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);
      return chainedCheckType;
    }
    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location, propFullName, secret) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== expectedType) {
          var preciseType = getPreciseType(propValue);
          return new PropTypeError(
            "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
            { expectedType }
          );
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }
    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== "function") {
          return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
        }
        var propValue = props[propName];
        if (!Array.isArray(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
        }
        for (var i = 0; i < propValue.length; i++) {
          var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createElementTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        if (!isValidElement2(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createElementTypeTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        if (!ReactIs.isValidElementType(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        if (process.env.NODE_ENV !== "production") {
          if (arguments.length > 1) {
            printWarning(
              "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
            );
          } else {
            printWarning("Invalid argument supplied to oneOf, expected an array.");
          }
        }
        return emptyFunctionThatReturnsNull;
      }
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        for (var i = 0; i < expectedValues.length; i++) {
          if (is(propValue, expectedValues[i])) {
            return null;
          }
        }
        var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
          var type4 = getPreciseType(value);
          if (type4 === "symbol") {
            return String(value);
          }
          return value;
        });
        return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
      }
      return createChainableTypeChecker(validate);
    }
    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== "function") {
          return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
        }
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== "object") {
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
        }
        for (var key in propValue) {
          if (has2(propValue, key)) {
            var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        process.env.NODE_ENV !== "production" ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
        return emptyFunctionThatReturnsNull;
      }
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (typeof checker !== "function") {
          printWarning(
            "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
          );
          return emptyFunctionThatReturnsNull;
        }
      }
      function validate(props, propName, componentName, location, propFullName) {
        var expectedTypes = [];
        for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
          var checker2 = arrayOfTypeCheckers[i2];
          var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
          if (checkerResult == null) {
            return null;
          }
          if (checkerResult.data && has2(checkerResult.data, "expectedType")) {
            expectedTypes.push(checkerResult.data.expectedType);
          }
        }
        var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
        return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
      }
      return createChainableTypeChecker(validate);
    }
    function createNodeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!isNode(props[propName])) {
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function invalidValidatorError(componentName, location, propFullName, key, type4) {
      return new PropTypeError(
        (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type4 + "`."
      );
    }
    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== "object") {
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
        }
        for (var key in shapeTypes) {
          var checker = shapeTypes[key];
          if (typeof checker !== "function") {
            return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
          }
          var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
          if (error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createStrictShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== "object") {
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
        }
        var allKeys = assign({}, props[propName], shapeTypes);
        for (var key in allKeys) {
          var checker = shapeTypes[key];
          if (has2(shapeTypes, key) && typeof checker !== "function") {
            return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
          }
          if (!checker) {
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
            );
          }
          var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
          if (error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function isNode(propValue) {
      switch (typeof propValue) {
        case "number":
        case "string":
        case "undefined":
          return true;
        case "boolean":
          return !propValue;
        case "object":
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }
          if (propValue === null || isValidElement2(propValue)) {
            return true;
          }
          var iteratorFn = getIteratorFn(propValue);
          if (iteratorFn) {
            var iterator = iteratorFn.call(propValue);
            var step;
            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator.next()).done) {
                if (!isNode(step.value)) {
                  return false;
                }
              }
            } else {
              while (!(step = iterator.next()).done) {
                var entry = step.value;
                if (entry) {
                  if (!isNode(entry[1])) {
                    return false;
                  }
                }
              }
            }
          } else {
            return false;
          }
          return true;
        default:
          return false;
      }
    }
    function isSymbol(propType, propValue) {
      if (propType === "symbol") {
        return true;
      }
      if (!propValue) {
        return false;
      }
      if (propValue["@@toStringTag"] === "Symbol") {
        return true;
      }
      if (typeof Symbol === "function" && propValue instanceof Symbol) {
        return true;
      }
      return false;
    }
    function getPropType(propValue) {
      var propType = typeof propValue;
      if (Array.isArray(propValue)) {
        return "array";
      }
      if (propValue instanceof RegExp) {
        return "object";
      }
      if (isSymbol(propType, propValue)) {
        return "symbol";
      }
      return propType;
    }
    function getPreciseType(propValue) {
      if (typeof propValue === "undefined" || propValue === null) {
        return "" + propValue;
      }
      var propType = getPropType(propValue);
      if (propType === "object") {
        if (propValue instanceof Date) {
          return "date";
        } else if (propValue instanceof RegExp) {
          return "regexp";
        }
      }
      return propType;
    }
    function getPostfixForTypeWarning(value) {
      var type4 = getPreciseType(value);
      switch (type4) {
        case "array":
        case "object":
          return "an " + type4;
        case "boolean":
        case "date":
        case "regexp":
          return "a " + type4;
        default:
          return type4;
      }
    }
    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS;
      }
      return propValue.constructor.name;
    }
    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
  return factoryWithTypeCheckers;
}
var factoryWithThrowingShims;
var hasRequiredFactoryWithThrowingShims;
function requireFactoryWithThrowingShims() {
  if (hasRequiredFactoryWithThrowingShims)
    return factoryWithThrowingShims;
  hasRequiredFactoryWithThrowingShims = 1;
  var ReactPropTypesSecret = requireReactPropTypesSecret();
  function emptyFunction() {
  }
  function emptyFunctionWithReset() {
  }
  emptyFunctionWithReset.resetWarningCache = emptyFunction;
  factoryWithThrowingShims = function() {
    function shim(props, propName, componentName, location, propFullName, secret) {
      if (secret === ReactPropTypesSecret) {
        return;
      }
      var err = new Error(
        "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types"
      );
      err.name = "Invariant Violation";
      throw err;
    }
    shim.isRequired = shim;
    function getShim() {
      return shim;
    }
    var ReactPropTypes = {
      array: shim,
      bigint: shim,
      bool: shim,
      func: shim,
      number: shim,
      object: shim,
      string: shim,
      symbol: shim,
      any: shim,
      arrayOf: getShim,
      element: shim,
      elementType: shim,
      instanceOf: getShim,
      node: shim,
      objectOf: getShim,
      oneOf: getShim,
      oneOfType: getShim,
      shape: getShim,
      exact: getShim,
      checkPropTypes: emptyFunctionWithReset,
      resetWarningCache: emptyFunction
    };
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
  return factoryWithThrowingShims;
}
if (process.env.NODE_ENV !== "production") {
  var ReactIs = requireReactIs();
  var throwOnDirectAccess = true;
  propTypes.exports = requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
} else {
  propTypes.exports = requireFactoryWithThrowingShims()();
}
var propTypesExports = propTypes.exports;
function r(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e)
    n += e;
  else if ("object" == typeof e)
    if (Array.isArray(e))
      for (t = 0; t < e.length; t++)
        e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
    else
      for (t in e)
        e[t] && (n && (n += " "), n += t);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = ""; f < arguments.length; )
    (e = arguments[f++]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}
const clsx_m = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  clsx,
  default: clsx
}, Symbol.toStringTag, { value: "Module" }));
const require$$3 = /* @__PURE__ */ getAugmentedNamespace(clsx_m);
var domFns = {};
var shims = {};
Object.defineProperty(shims, "__esModule", {
  value: true
});
shims.dontSetMe = dontSetMe;
shims.findInArray = findInArray;
shims.int = int;
shims.isFunction = isFunction;
shims.isNum = isNum;
function findInArray(array4, callback) {
  for (var i = 0, length2 = array4.length; i < length2; i++) {
    if (callback.apply(callback, [array4[i], i, array4]))
      return array4[i];
  }
}
function isFunction(func) {
  return typeof func === "function" || Object.prototype.toString.call(func) === "[object Function]";
}
function isNum(num) {
  return typeof num === "number" && !isNaN(num);
}
function int(a) {
  return parseInt(a, 10);
}
function dontSetMe(props, propName, componentName) {
  if (props[propName]) {
    return new Error("Invalid prop ".concat(propName, " passed to ").concat(componentName, " - do not set this, set it on the child."));
  }
}
var getPrefix$1 = {};
Object.defineProperty(getPrefix$1, "__esModule", {
  value: true
});
getPrefix$1.browserPrefixToKey = browserPrefixToKey;
getPrefix$1.browserPrefixToStyle = browserPrefixToStyle;
getPrefix$1.default = void 0;
getPrefix$1.getPrefix = getPrefix;
var prefixes = ["Moz", "Webkit", "O", "ms"];
function getPrefix() {
  var _window$document, _window$document$docu;
  var prop = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "transform";
  if (typeof window === "undefined")
    return "";
  var style2 = (_window$document = window.document) === null || _window$document === void 0 ? void 0 : (_window$document$docu = _window$document.documentElement) === null || _window$document$docu === void 0 ? void 0 : _window$document$docu.style;
  if (!style2)
    return "";
  if (prop in style2)
    return "";
  for (var i = 0; i < prefixes.length; i++) {
    if (browserPrefixToKey(prop, prefixes[i]) in style2)
      return prefixes[i];
  }
  return "";
}
function browserPrefixToKey(prop, prefix) {
  return prefix ? "".concat(prefix).concat(kebabToTitleCase(prop)) : prop;
}
function browserPrefixToStyle(prop, prefix) {
  return prefix ? "-".concat(prefix.toLowerCase(), "-").concat(prop) : prop;
}
function kebabToTitleCase(str) {
  var out = "";
  var shouldCapitalize = true;
  for (var i = 0; i < str.length; i++) {
    if (shouldCapitalize) {
      out += str[i].toUpperCase();
      shouldCapitalize = false;
    } else if (str[i] === "-") {
      shouldCapitalize = true;
    } else {
      out += str[i];
    }
  }
  return out;
}
var _default = getPrefix();
getPrefix$1.default = _default;
function _typeof$1(obj) {
  "@babel/helpers - typeof";
  return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$1(obj);
}
Object.defineProperty(domFns, "__esModule", {
  value: true
});
domFns.addClassName = addClassName;
domFns.addEvent = addEvent;
domFns.addUserSelectStyles = addUserSelectStyles;
domFns.createCSSTransform = createCSSTransform;
domFns.createSVGTransform = createSVGTransform;
domFns.getTouch = getTouch;
domFns.getTouchIdentifier = getTouchIdentifier;
domFns.getTranslation = getTranslation;
domFns.innerHeight = innerHeight;
domFns.innerWidth = innerWidth;
domFns.matchesSelector = matchesSelector;
domFns.matchesSelectorAndParentsTo = matchesSelectorAndParentsTo;
domFns.offsetXYFromParent = offsetXYFromParent;
domFns.outerHeight = outerHeight;
domFns.outerWidth = outerWidth;
domFns.removeClassName = removeClassName;
domFns.removeEvent = removeEvent;
domFns.removeUserSelectStyles = removeUserSelectStyles;
var _shims$2 = shims;
var _getPrefix = _interopRequireWildcard$1(getPrefix$1);
function _getRequireWildcardCache$1(nodeInterop) {
  if (typeof WeakMap !== "function")
    return null;
  var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
  var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache$1 = function _getRequireWildcardCache2(nodeInterop2) {
    return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard$1(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || _typeof$1(obj) !== "object" && typeof obj !== "function") {
    return { default: obj };
  }
  var cache = _getRequireWildcardCache$1(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function ownKeys(object4, enumerableOnly) {
  var keys = Object.keys(object4);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object4);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object4, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty$1(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var matchesSelectorFunc = "";
function matchesSelector(el, selector) {
  if (!matchesSelectorFunc) {
    matchesSelectorFunc = (0, _shims$2.findInArray)(["matches", "webkitMatchesSelector", "mozMatchesSelector", "msMatchesSelector", "oMatchesSelector"], function(method4) {
      return (0, _shims$2.isFunction)(el[method4]);
    });
  }
  if (!(0, _shims$2.isFunction)(el[matchesSelectorFunc]))
    return false;
  return el[matchesSelectorFunc](selector);
}
function matchesSelectorAndParentsTo(el, selector, baseNode) {
  var node2 = el;
  do {
    if (matchesSelector(node2, selector))
      return true;
    if (node2 === baseNode)
      return false;
    node2 = node2.parentNode;
  } while (node2);
  return false;
}
function addEvent(el, event, handler, inputOptions) {
  if (!el)
    return;
  var options = _objectSpread({
    capture: true
  }, inputOptions);
  if (el.addEventListener) {
    el.addEventListener(event, handler, options);
  } else if (el.attachEvent) {
    el.attachEvent("on" + event, handler);
  } else {
    el["on" + event] = handler;
  }
}
function removeEvent(el, event, handler, inputOptions) {
  if (!el)
    return;
  var options = _objectSpread({
    capture: true
  }, inputOptions);
  if (el.removeEventListener) {
    el.removeEventListener(event, handler, options);
  } else if (el.detachEvent) {
    el.detachEvent("on" + event, handler);
  } else {
    el["on" + event] = null;
  }
}
function outerHeight(node2) {
  var height = node2.clientHeight;
  var computedStyle = node2.ownerDocument.defaultView.getComputedStyle(node2);
  height += (0, _shims$2.int)(computedStyle.borderTopWidth);
  height += (0, _shims$2.int)(computedStyle.borderBottomWidth);
  return height;
}
function outerWidth(node2) {
  var width = node2.clientWidth;
  var computedStyle = node2.ownerDocument.defaultView.getComputedStyle(node2);
  width += (0, _shims$2.int)(computedStyle.borderLeftWidth);
  width += (0, _shims$2.int)(computedStyle.borderRightWidth);
  return width;
}
function innerHeight(node2) {
  var height = node2.clientHeight;
  var computedStyle = node2.ownerDocument.defaultView.getComputedStyle(node2);
  height -= (0, _shims$2.int)(computedStyle.paddingTop);
  height -= (0, _shims$2.int)(computedStyle.paddingBottom);
  return height;
}
function innerWidth(node2) {
  var width = node2.clientWidth;
  var computedStyle = node2.ownerDocument.defaultView.getComputedStyle(node2);
  width -= (0, _shims$2.int)(computedStyle.paddingLeft);
  width -= (0, _shims$2.int)(computedStyle.paddingRight);
  return width;
}
function offsetXYFromParent(evt, offsetParent2, scale) {
  var isBody = offsetParent2 === offsetParent2.ownerDocument.body;
  var offsetParentRect = isBody ? {
    left: 0,
    top: 0
  } : offsetParent2.getBoundingClientRect();
  var x = (evt.clientX + offsetParent2.scrollLeft - offsetParentRect.left) / scale;
  var y = (evt.clientY + offsetParent2.scrollTop - offsetParentRect.top) / scale;
  return {
    x,
    y
  };
}
function createCSSTransform(controlPos, positionOffset) {
  var translation = getTranslation(controlPos, positionOffset, "px");
  return _defineProperty$1({}, (0, _getPrefix.browserPrefixToKey)("transform", _getPrefix.default), translation);
}
function createSVGTransform(controlPos, positionOffset) {
  var translation = getTranslation(controlPos, positionOffset, "");
  return translation;
}
function getTranslation(_ref2, positionOffset, unitSuffix) {
  var x = _ref2.x, y = _ref2.y;
  var translation = "translate(".concat(x).concat(unitSuffix, ",").concat(y).concat(unitSuffix, ")");
  if (positionOffset) {
    var defaultX = "".concat(typeof positionOffset.x === "string" ? positionOffset.x : positionOffset.x + unitSuffix);
    var defaultY = "".concat(typeof positionOffset.y === "string" ? positionOffset.y : positionOffset.y + unitSuffix);
    translation = "translate(".concat(defaultX, ", ").concat(defaultY, ")") + translation;
  }
  return translation;
}
function getTouch(e, identifier2) {
  return e.targetTouches && (0, _shims$2.findInArray)(e.targetTouches, function(t) {
    return identifier2 === t.identifier;
  }) || e.changedTouches && (0, _shims$2.findInArray)(e.changedTouches, function(t) {
    return identifier2 === t.identifier;
  });
}
function getTouchIdentifier(e) {
  if (e.targetTouches && e.targetTouches[0])
    return e.targetTouches[0].identifier;
  if (e.changedTouches && e.changedTouches[0])
    return e.changedTouches[0].identifier;
}
function addUserSelectStyles(doc) {
  if (!doc)
    return;
  var styleEl = doc.getElementById("react-draggable-style-el");
  if (!styleEl) {
    styleEl = doc.createElement("style");
    styleEl.type = "text/css";
    styleEl.id = "react-draggable-style-el";
    styleEl.innerHTML = ".react-draggable-transparent-selection *::-moz-selection {all: inherit;}\n";
    styleEl.innerHTML += ".react-draggable-transparent-selection *::selection {all: inherit;}\n";
    doc.getElementsByTagName("head")[0].appendChild(styleEl);
  }
  if (doc.body)
    addClassName(doc.body, "react-draggable-transparent-selection");
}
function removeUserSelectStyles(doc) {
  if (!doc)
    return;
  try {
    if (doc.body)
      removeClassName(doc.body, "react-draggable-transparent-selection");
    if (doc.selection) {
      doc.selection.empty();
    } else {
      var selection = (doc.defaultView || window).getSelection();
      if (selection && selection.type !== "Caret") {
        selection.removeAllRanges();
      }
    }
  } catch (e) {
  }
}
function addClassName(el, className) {
  if (el.classList) {
    el.classList.add(className);
  } else {
    if (!el.className.match(new RegExp("(?:^|\\s)".concat(className, "(?!\\S)")))) {
      el.className += " ".concat(className);
    }
  }
}
function removeClassName(el, className) {
  if (el.classList) {
    el.classList.remove(className);
  } else {
    el.className = el.className.replace(new RegExp("(?:^|\\s)".concat(className, "(?!\\S)"), "g"), "");
  }
}
var positionFns = {};
Object.defineProperty(positionFns, "__esModule", {
  value: true
});
positionFns.canDragX = canDragX;
positionFns.canDragY = canDragY;
positionFns.createCoreData = createCoreData;
positionFns.createDraggableData = createDraggableData;
positionFns.getBoundPosition = getBoundPosition;
positionFns.getControlPosition = getControlPosition;
positionFns.snapToGrid = snapToGrid;
var _shims$1 = shims;
var _domFns$1 = domFns;
function getBoundPosition(draggable, x, y) {
  if (!draggable.props.bounds)
    return [x, y];
  var bounds = draggable.props.bounds;
  bounds = typeof bounds === "string" ? bounds : cloneBounds(bounds);
  var node2 = findDOMNode(draggable);
  if (typeof bounds === "string") {
    var ownerDocument = node2.ownerDocument;
    var ownerWindow = ownerDocument.defaultView;
    var boundNode;
    if (bounds === "parent") {
      boundNode = node2.parentNode;
    } else {
      boundNode = ownerDocument.querySelector(bounds);
    }
    if (!(boundNode instanceof ownerWindow.HTMLElement)) {
      throw new Error('Bounds selector "' + bounds + '" could not find an element.');
    }
    var boundNodeEl = boundNode;
    var nodeStyle = ownerWindow.getComputedStyle(node2);
    var boundNodeStyle = ownerWindow.getComputedStyle(boundNodeEl);
    bounds = {
      left: -node2.offsetLeft + (0, _shims$1.int)(boundNodeStyle.paddingLeft) + (0, _shims$1.int)(nodeStyle.marginLeft),
      top: -node2.offsetTop + (0, _shims$1.int)(boundNodeStyle.paddingTop) + (0, _shims$1.int)(nodeStyle.marginTop),
      right: (0, _domFns$1.innerWidth)(boundNodeEl) - (0, _domFns$1.outerWidth)(node2) - node2.offsetLeft + (0, _shims$1.int)(boundNodeStyle.paddingRight) - (0, _shims$1.int)(nodeStyle.marginRight),
      bottom: (0, _domFns$1.innerHeight)(boundNodeEl) - (0, _domFns$1.outerHeight)(node2) - node2.offsetTop + (0, _shims$1.int)(boundNodeStyle.paddingBottom) - (0, _shims$1.int)(nodeStyle.marginBottom)
    };
  }
  if ((0, _shims$1.isNum)(bounds.right))
    x = Math.min(x, bounds.right);
  if ((0, _shims$1.isNum)(bounds.bottom))
    y = Math.min(y, bounds.bottom);
  if ((0, _shims$1.isNum)(bounds.left))
    x = Math.max(x, bounds.left);
  if ((0, _shims$1.isNum)(bounds.top))
    y = Math.max(y, bounds.top);
  return [x, y];
}
function snapToGrid(grid, pendingX, pendingY) {
  var x = Math.round(pendingX / grid[0]) * grid[0];
  var y = Math.round(pendingY / grid[1]) * grid[1];
  return [x, y];
}
function canDragX(draggable) {
  return draggable.props.axis === "both" || draggable.props.axis === "x";
}
function canDragY(draggable) {
  return draggable.props.axis === "both" || draggable.props.axis === "y";
}
function getControlPosition(e, touchIdentifier, draggableCore) {
  var touchObj = typeof touchIdentifier === "number" ? (0, _domFns$1.getTouch)(e, touchIdentifier) : null;
  if (typeof touchIdentifier === "number" && !touchObj)
    return null;
  var node2 = findDOMNode(draggableCore);
  var offsetParent2 = draggableCore.props.offsetParent || node2.offsetParent || node2.ownerDocument.body;
  return (0, _domFns$1.offsetXYFromParent)(touchObj || e, offsetParent2, draggableCore.props.scale);
}
function createCoreData(draggable, x, y) {
  var state = draggable.state;
  var isStart = !(0, _shims$1.isNum)(state.lastX);
  var node2 = findDOMNode(draggable);
  if (isStart) {
    return {
      node: node2,
      deltaX: 0,
      deltaY: 0,
      lastX: x,
      lastY: y,
      x,
      y
    };
  } else {
    return {
      node: node2,
      deltaX: x - state.lastX,
      deltaY: y - state.lastY,
      lastX: state.lastX,
      lastY: state.lastY,
      x,
      y
    };
  }
}
function createDraggableData(draggable, coreData) {
  var scale = draggable.props.scale;
  return {
    node: coreData.node,
    x: draggable.state.x + coreData.deltaX / scale,
    y: draggable.state.y + coreData.deltaY / scale,
    deltaX: coreData.deltaX / scale,
    deltaY: coreData.deltaY / scale,
    lastX: draggable.state.x,
    lastY: draggable.state.y
  };
}
function cloneBounds(bounds) {
  return {
    left: bounds.left,
    top: bounds.top,
    right: bounds.right,
    bottom: bounds.bottom
  };
}
function findDOMNode(draggable) {
  var node2 = draggable.findDOMNode();
  if (!node2) {
    throw new Error("<DraggableCore>: Unmounted during event!");
  }
  return node2;
}
var DraggableCore$2 = {};
var log$1 = {};
Object.defineProperty(log$1, "__esModule", {
  value: true
});
log$1.default = log;
function log() {
}
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
Object.defineProperty(DraggableCore$2, "__esModule", {
  value: true
});
DraggableCore$2.default = void 0;
var React$1 = _interopRequireWildcard(React__default);
var _propTypes = _interopRequireDefault(propTypesExports);
var _reactDom = _interopRequireDefault(ReactDOM__default);
var _domFns = domFns;
var _positionFns = positionFns;
var _shims = shims;
var _log = _interopRequireDefault(log$1);
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function")
    return null;
  var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
  var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
    return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return { default: obj };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _possibleConstructorReturn(self2, call2) {
  if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
    return call2;
  } else if (call2 !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self2);
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var eventsFor = {
  touch: {
    start: "touchstart",
    move: "touchmove",
    stop: "touchend"
  },
  mouse: {
    start: "mousedown",
    move: "mousemove",
    stop: "mouseup"
  }
};
var dragEventFor = eventsFor.mouse;
var DraggableCore$1 = /* @__PURE__ */ function(_React$Component) {
  _inherits(DraggableCore2, _React$Component);
  var _super = _createSuper(DraggableCore2);
  function DraggableCore2() {
    var _this;
    _classCallCheck(this, DraggableCore2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "state", {
      dragging: false,
      // Used while dragging to determine deltas.
      lastX: NaN,
      lastY: NaN,
      touchIdentifier: null
    });
    _defineProperty(_assertThisInitialized(_this), "mounted", false);
    _defineProperty(_assertThisInitialized(_this), "handleDragStart", function(e) {
      _this.props.onMouseDown(e);
      if (!_this.props.allowAnyClick && typeof e.button === "number" && e.button !== 0)
        return false;
      var thisNode = _this.findDOMNode();
      if (!thisNode || !thisNode.ownerDocument || !thisNode.ownerDocument.body) {
        throw new Error("<DraggableCore> not mounted on DragStart!");
      }
      var ownerDocument = thisNode.ownerDocument;
      if (_this.props.disabled || !(e.target instanceof ownerDocument.defaultView.Node) || _this.props.handle && !(0, _domFns.matchesSelectorAndParentsTo)(e.target, _this.props.handle, thisNode) || _this.props.cancel && (0, _domFns.matchesSelectorAndParentsTo)(e.target, _this.props.cancel, thisNode)) {
        return;
      }
      if (e.type === "touchstart")
        e.preventDefault();
      var touchIdentifier = (0, _domFns.getTouchIdentifier)(e);
      _this.setState({
        touchIdentifier
      });
      var position2 = (0, _positionFns.getControlPosition)(e, touchIdentifier, _assertThisInitialized(_this));
      if (position2 == null)
        return;
      var x = position2.x, y = position2.y;
      var coreEvent = (0, _positionFns.createCoreData)(_assertThisInitialized(_this), x, y);
      (0, _log.default)("DraggableCore: handleDragStart: %j", coreEvent);
      (0, _log.default)("calling", _this.props.onStart);
      var shouldUpdate = _this.props.onStart(e, coreEvent);
      if (shouldUpdate === false || _this.mounted === false)
        return;
      if (_this.props.enableUserSelectHack)
        (0, _domFns.addUserSelectStyles)(ownerDocument);
      _this.setState({
        dragging: true,
        lastX: x,
        lastY: y
      });
      (0, _domFns.addEvent)(ownerDocument, dragEventFor.move, _this.handleDrag);
      (0, _domFns.addEvent)(ownerDocument, dragEventFor.stop, _this.handleDragStop);
    });
    _defineProperty(_assertThisInitialized(_this), "handleDrag", function(e) {
      var position2 = (0, _positionFns.getControlPosition)(e, _this.state.touchIdentifier, _assertThisInitialized(_this));
      if (position2 == null)
        return;
      var x = position2.x, y = position2.y;
      if (Array.isArray(_this.props.grid)) {
        var deltaX = x - _this.state.lastX, deltaY = y - _this.state.lastY;
        var _snapToGrid = (0, _positionFns.snapToGrid)(_this.props.grid, deltaX, deltaY);
        var _snapToGrid2 = _slicedToArray(_snapToGrid, 2);
        deltaX = _snapToGrid2[0];
        deltaY = _snapToGrid2[1];
        if (!deltaX && !deltaY)
          return;
        x = _this.state.lastX + deltaX, y = _this.state.lastY + deltaY;
      }
      var coreEvent = (0, _positionFns.createCoreData)(_assertThisInitialized(_this), x, y);
      (0, _log.default)("DraggableCore: handleDrag: %j", coreEvent);
      var shouldUpdate = _this.props.onDrag(e, coreEvent);
      if (shouldUpdate === false || _this.mounted === false) {
        try {
          _this.handleDragStop(new MouseEvent("mouseup"));
        } catch (err) {
          var event = document.createEvent("MouseEvents");
          event.initMouseEvent("mouseup", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
          _this.handleDragStop(event);
        }
        return;
      }
      _this.setState({
        lastX: x,
        lastY: y
      });
    });
    _defineProperty(_assertThisInitialized(_this), "handleDragStop", function(e) {
      if (!_this.state.dragging)
        return;
      var position2 = (0, _positionFns.getControlPosition)(e, _this.state.touchIdentifier, _assertThisInitialized(_this));
      if (position2 == null)
        return;
      var x = position2.x, y = position2.y;
      if (Array.isArray(_this.props.grid)) {
        var deltaX = x - _this.state.lastX || 0;
        var deltaY = y - _this.state.lastY || 0;
        var _snapToGrid3 = (0, _positionFns.snapToGrid)(_this.props.grid, deltaX, deltaY);
        var _snapToGrid4 = _slicedToArray(_snapToGrid3, 2);
        deltaX = _snapToGrid4[0];
        deltaY = _snapToGrid4[1];
        x = _this.state.lastX + deltaX, y = _this.state.lastY + deltaY;
      }
      var coreEvent = (0, _positionFns.createCoreData)(_assertThisInitialized(_this), x, y);
      var shouldContinue = _this.props.onStop(e, coreEvent);
      if (shouldContinue === false || _this.mounted === false)
        return false;
      var thisNode = _this.findDOMNode();
      if (thisNode) {
        if (_this.props.enableUserSelectHack)
          (0, _domFns.removeUserSelectStyles)(thisNode.ownerDocument);
      }
      (0, _log.default)("DraggableCore: handleDragStop: %j", coreEvent);
      _this.setState({
        dragging: false,
        lastX: NaN,
        lastY: NaN
      });
      if (thisNode) {
        (0, _log.default)("DraggableCore: Removing handlers");
        (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.move, _this.handleDrag);
        (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.stop, _this.handleDragStop);
      }
    });
    _defineProperty(_assertThisInitialized(_this), "onMouseDown", function(e) {
      dragEventFor = eventsFor.mouse;
      return _this.handleDragStart(e);
    });
    _defineProperty(_assertThisInitialized(_this), "onMouseUp", function(e) {
      dragEventFor = eventsFor.mouse;
      return _this.handleDragStop(e);
    });
    _defineProperty(_assertThisInitialized(_this), "onTouchStart", function(e) {
      dragEventFor = eventsFor.touch;
      return _this.handleDragStart(e);
    });
    _defineProperty(_assertThisInitialized(_this), "onTouchEnd", function(e) {
      dragEventFor = eventsFor.touch;
      return _this.handleDragStop(e);
    });
    return _this;
  }
  _createClass(DraggableCore2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.mounted = true;
      var thisNode = this.findDOMNode();
      if (thisNode) {
        (0, _domFns.addEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {
          passive: false
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.mounted = false;
      var thisNode = this.findDOMNode();
      if (thisNode) {
        var ownerDocument = thisNode.ownerDocument;
        (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.move, this.handleDrag);
        (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.move, this.handleDrag);
        (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.stop, this.handleDragStop);
        (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.stop, this.handleDragStop);
        (0, _domFns.removeEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {
          passive: false
        });
        if (this.props.enableUserSelectHack)
          (0, _domFns.removeUserSelectStyles)(ownerDocument);
      }
    }
    // React Strict Mode compatibility: if `nodeRef` is passed, we will use it instead of trying to find
    // the underlying DOM node ourselves. See the README for more information.
  }, {
    key: "findDOMNode",
    value: function findDOMNode2() {
      var _this$props, _this$props2, _this$props2$nodeRef;
      return (_this$props = this.props) !== null && _this$props !== void 0 && _this$props.nodeRef ? (_this$props2 = this.props) === null || _this$props2 === void 0 ? void 0 : (_this$props2$nodeRef = _this$props2.nodeRef) === null || _this$props2$nodeRef === void 0 ? void 0 : _this$props2$nodeRef.current : _reactDom.default.findDOMNode(this);
    }
  }, {
    key: "render",
    value: function render2() {
      return /* @__PURE__ */ React$1.cloneElement(React$1.Children.only(this.props.children), {
        // Note: mouseMove handler is attached to document so it will still function
        // when the user drags quickly and leaves the bounds of the element.
        onMouseDown: this.onMouseDown,
        onMouseUp: this.onMouseUp,
        // onTouchStart is added on `componentDidMount` so they can be added with
        // {passive: false}, which allows it to cancel. See
        // https://developers.google.com/web/updates/2017/01/scrolling-intervention
        onTouchEnd: this.onTouchEnd
      });
    }
  }]);
  return DraggableCore2;
}(React$1.Component);
DraggableCore$2.default = DraggableCore$1;
_defineProperty(DraggableCore$1, "displayName", "DraggableCore");
_defineProperty(DraggableCore$1, "propTypes", {
  /**
   * `allowAnyClick` allows dragging using any mouse button.
   * By default, we only accept the left button.
   *
   * Defaults to `false`.
   */
  allowAnyClick: _propTypes.default.bool,
  /**
   * `disabled`, if true, stops the <Draggable> from dragging. All handlers,
   * with the exception of `onMouseDown`, will not fire.
   */
  disabled: _propTypes.default.bool,
  /**
   * By default, we add 'user-select:none' attributes to the document body
   * to prevent ugly text selection during drag. If this is causing problems
   * for your app, set this to `false`.
   */
  enableUserSelectHack: _propTypes.default.bool,
  /**
   * `offsetParent`, if set, uses the passed DOM node to compute drag offsets
   * instead of using the parent node.
   */
  offsetParent: function offsetParent(props, propName) {
    if (props[propName] && props[propName].nodeType !== 1) {
      throw new Error("Draggable's offsetParent must be a DOM Node.");
    }
  },
  /**
   * `grid` specifies the x and y that dragging should snap to.
   */
  grid: _propTypes.default.arrayOf(_propTypes.default.number),
  /**
   * `handle` specifies a selector to be used as the handle that initiates drag.
   *
   * Example:
   *
   * ```jsx
   *   let App = React.createClass({
   *       render: function () {
   *         return (
   *            <Draggable handle=".handle">
   *              <div>
   *                  <div className="handle">Click me to drag</div>
   *                  <div>This is some other content</div>
   *              </div>
   *           </Draggable>
   *         );
   *       }
   *   });
   * ```
   */
  handle: _propTypes.default.string,
  /**
   * `cancel` specifies a selector to be used to prevent drag initialization.
   *
   * Example:
   *
   * ```jsx
   *   let App = React.createClass({
   *       render: function () {
   *           return(
   *               <Draggable cancel=".cancel">
   *                   <div>
   *                     <div className="cancel">You can't drag from here</div>
   *                     <div>Dragging here works fine</div>
   *                   </div>
   *               </Draggable>
   *           );
   *       }
   *   });
   * ```
   */
  cancel: _propTypes.default.string,
  /* If running in React Strict mode, ReactDOM.findDOMNode() is deprecated.
   * Unfortunately, in order for <Draggable> to work properly, we need raw access
   * to the underlying DOM node. If you want to avoid the warning, pass a `nodeRef`
   * as in this example:
   *
   * function MyComponent() {
   *   const nodeRef = React.useRef(null);
   *   return (
   *     <Draggable nodeRef={nodeRef}>
   *       <div ref={nodeRef}>Example Target</div>
   *     </Draggable>
   *   );
   * }
   *
   * This can be used for arbitrarily nested components, so long as the ref ends up
   * pointing to the actual child DOM node and not a custom component.
   */
  nodeRef: _propTypes.default.object,
  /**
   * Called when dragging starts.
   * If this function returns the boolean false, dragging will be canceled.
   */
  onStart: _propTypes.default.func,
  /**
   * Called while dragging.
   * If this function returns the boolean false, dragging will be canceled.
   */
  onDrag: _propTypes.default.func,
  /**
   * Called when dragging stops.
   * If this function returns the boolean false, the drag will remain active.
   */
  onStop: _propTypes.default.func,
  /**
   * A workaround option which can be passed if onMouseDown needs to be accessed,
   * since it'll always be blocked (as there is internal use of onMouseDown)
   */
  onMouseDown: _propTypes.default.func,
  /**
   * `scale`, if set, applies scaling while dragging an element
   */
  scale: _propTypes.default.number,
  /**
   * These properties should be defined on the child, not here.
   */
  className: _shims.dontSetMe,
  style: _shims.dontSetMe,
  transform: _shims.dontSetMe
});
_defineProperty(DraggableCore$1, "defaultProps", {
  allowAnyClick: false,
  // by default only accept left click
  disabled: false,
  enableUserSelectHack: true,
  onStart: function onStart() {
  },
  onDrag: function onDrag() {
  },
  onStop: function onStop() {
  },
  onMouseDown: function onMouseDown() {
  },
  scale: 1
});
(function(exports) {
  function _typeof2(obj) {
    "@babel/helpers - typeof";
    return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof2(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "DraggableCore", {
    enumerable: true,
    get: function get2() {
      return _DraggableCore.default;
    }
  });
  exports.default = void 0;
  var React2 = _interopRequireWildcard2(React__default);
  var _propTypes2 = _interopRequireDefault2(propTypesExports);
  var _reactDom2 = _interopRequireDefault2(ReactDOM__default);
  var _clsx2 = _interopRequireDefault2(require$$3);
  var _domFns2 = domFns;
  var _positionFns2 = positionFns;
  var _shims2 = shims;
  var _DraggableCore = _interopRequireDefault2(DraggableCore$2);
  var _log2 = _interopRequireDefault2(log$1);
  var _excluded4 = ["axis", "bounds", "children", "defaultPosition", "defaultClassName", "defaultClassNameDragging", "defaultClassNameDragged", "position", "positionOffset", "scale"];
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _getRequireWildcardCache2(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function _getRequireWildcardCache3(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard2(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache2(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function _extends2() {
    _extends2 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  function _objectWithoutProperties2(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose2(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose2(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function ownKeys2(object4, enumerableOnly) {
    var keys = Object.keys(object4);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object4);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object4, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread3(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        _defineProperty2(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _slicedToArray2(arr, i) {
    return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest2();
  }
  function _nonIterableRest2() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray2(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray2(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray2(o, minLen);
  }
  function _arrayLikeToArray2(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit2(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles2(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _classCallCheck2(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties2(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass2(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties2(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties2(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
  function _inherits2(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    Object.defineProperty(subClass, "prototype", { writable: false });
    if (superClass)
      _setPrototypeOf2(subClass, superClass);
  }
  function _setPrototypeOf2(o, p) {
    _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf2(o, p);
  }
  function _createSuper2(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct2();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf2(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf2(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn2(this, result);
    };
  }
  function _possibleConstructorReturn2(self2, call2) {
    if (call2 && (_typeof2(call2) === "object" || typeof call2 === "function")) {
      return call2;
    } else if (call2 !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized2(self2);
  }
  function _assertThisInitialized2(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct2() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf2(o) {
    _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf2(o);
  }
  function _defineProperty2(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var Draggable2 = /* @__PURE__ */ function(_React$Component) {
    _inherits2(Draggable3, _React$Component);
    var _super = _createSuper2(Draggable3);
    function Draggable3(props) {
      var _this;
      _classCallCheck2(this, Draggable3);
      _this = _super.call(this, props);
      _defineProperty2(_assertThisInitialized2(_this), "onDragStart", function(e, coreData) {
        (0, _log2.default)("Draggable: onDragStart: %j", coreData);
        var shouldStart = _this.props.onStart(e, (0, _positionFns2.createDraggableData)(_assertThisInitialized2(_this), coreData));
        if (shouldStart === false)
          return false;
        _this.setState({
          dragging: true,
          dragged: true
        });
      });
      _defineProperty2(_assertThisInitialized2(_this), "onDrag", function(e, coreData) {
        if (!_this.state.dragging)
          return false;
        (0, _log2.default)("Draggable: onDrag: %j", coreData);
        var uiData = (0, _positionFns2.createDraggableData)(_assertThisInitialized2(_this), coreData);
        var newState = {
          x: uiData.x,
          y: uiData.y
        };
        if (_this.props.bounds) {
          var x = newState.x, y = newState.y;
          newState.x += _this.state.slackX;
          newState.y += _this.state.slackY;
          var _getBoundPosition = (0, _positionFns2.getBoundPosition)(_assertThisInitialized2(_this), newState.x, newState.y), _getBoundPosition2 = _slicedToArray2(_getBoundPosition, 2), newStateX = _getBoundPosition2[0], newStateY = _getBoundPosition2[1];
          newState.x = newStateX;
          newState.y = newStateY;
          newState.slackX = _this.state.slackX + (x - newState.x);
          newState.slackY = _this.state.slackY + (y - newState.y);
          uiData.x = newState.x;
          uiData.y = newState.y;
          uiData.deltaX = newState.x - _this.state.x;
          uiData.deltaY = newState.y - _this.state.y;
        }
        var shouldUpdate = _this.props.onDrag(e, uiData);
        if (shouldUpdate === false)
          return false;
        _this.setState(newState);
      });
      _defineProperty2(_assertThisInitialized2(_this), "onDragStop", function(e, coreData) {
        if (!_this.state.dragging)
          return false;
        var shouldContinue = _this.props.onStop(e, (0, _positionFns2.createDraggableData)(_assertThisInitialized2(_this), coreData));
        if (shouldContinue === false)
          return false;
        (0, _log2.default)("Draggable: onDragStop: %j", coreData);
        var newState = {
          dragging: false,
          slackX: 0,
          slackY: 0
        };
        var controlled = Boolean(_this.props.position);
        if (controlled) {
          var _this$props$position = _this.props.position, x = _this$props$position.x, y = _this$props$position.y;
          newState.x = x;
          newState.y = y;
        }
        _this.setState(newState);
      });
      _this.state = {
        // Whether or not we are currently dragging.
        dragging: false,
        // Whether or not we have been dragged before.
        dragged: false,
        // Current transform x and y.
        x: props.position ? props.position.x : props.defaultPosition.x,
        y: props.position ? props.position.y : props.defaultPosition.y,
        prevPropsPosition: _objectSpread3({}, props.position),
        // Used for compensating for out-of-bounds drags
        slackX: 0,
        slackY: 0,
        // Can only determine if SVG after mounting
        isElementSVG: false
      };
      if (props.position && !(props.onDrag || props.onStop)) {
        console.warn("A `position` was applied to this <Draggable>, without drag handlers. This will make this component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the `position` of this element.");
      }
      return _this;
    }
    _createClass2(Draggable3, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (typeof window.SVGElement !== "undefined" && this.findDOMNode() instanceof window.SVGElement) {
          this.setState({
            isElementSVG: true
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.setState({
          dragging: false
        });
      }
      // React Strict Mode compatibility: if `nodeRef` is passed, we will use it instead of trying to find
      // the underlying DOM node ourselves. See the README for more information.
    }, {
      key: "findDOMNode",
      value: function findDOMNode2() {
        var _this$props$nodeRef$c, _this$props, _this$props$nodeRef;
        return (_this$props$nodeRef$c = (_this$props = this.props) === null || _this$props === void 0 ? void 0 : (_this$props$nodeRef = _this$props.nodeRef) === null || _this$props$nodeRef === void 0 ? void 0 : _this$props$nodeRef.current) !== null && _this$props$nodeRef$c !== void 0 ? _this$props$nodeRef$c : _reactDom2.default.findDOMNode(this);
      }
    }, {
      key: "render",
      value: function render2() {
        var _clsx;
        var _this$props2 = this.props;
        _this$props2.axis;
        _this$props2.bounds;
        var children = _this$props2.children, defaultPosition = _this$props2.defaultPosition, defaultClassName = _this$props2.defaultClassName, defaultClassNameDragging = _this$props2.defaultClassNameDragging, defaultClassNameDragged = _this$props2.defaultClassNameDragged, position2 = _this$props2.position, positionOffset = _this$props2.positionOffset;
        _this$props2.scale;
        var draggableCoreProps = _objectWithoutProperties2(_this$props2, _excluded4);
        var style2 = {};
        var svgTransform = null;
        var controlled = Boolean(position2);
        var draggable = !controlled || this.state.dragging;
        var validPosition = position2 || defaultPosition;
        var transformOpts = {
          // Set left if horizontal drag is enabled
          x: (0, _positionFns2.canDragX)(this) && draggable ? this.state.x : validPosition.x,
          // Set top if vertical drag is enabled
          y: (0, _positionFns2.canDragY)(this) && draggable ? this.state.y : validPosition.y
        };
        if (this.state.isElementSVG) {
          svgTransform = (0, _domFns2.createSVGTransform)(transformOpts, positionOffset);
        } else {
          style2 = (0, _domFns2.createCSSTransform)(transformOpts, positionOffset);
        }
        var className = (0, _clsx2.default)(children.props.className || "", defaultClassName, (_clsx = {}, _defineProperty2(_clsx, defaultClassNameDragging, this.state.dragging), _defineProperty2(_clsx, defaultClassNameDragged, this.state.dragged), _clsx));
        return /* @__PURE__ */ React2.createElement(_DraggableCore.default, _extends2({}, draggableCoreProps, {
          onStart: this.onDragStart,
          onDrag: this.onDrag,
          onStop: this.onDragStop
        }), /* @__PURE__ */ React2.cloneElement(React2.Children.only(children), {
          className,
          style: _objectSpread3(_objectSpread3({}, children.props.style), style2),
          transform: svgTransform
        }));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: (
        // React 16.3+
        // Arity (props, state)
        function getDerivedStateFromProps(_ref, _ref2) {
          var position2 = _ref.position;
          var prevPropsPosition = _ref2.prevPropsPosition;
          if (position2 && (!prevPropsPosition || position2.x !== prevPropsPosition.x || position2.y !== prevPropsPosition.y)) {
            (0, _log2.default)("Draggable: getDerivedStateFromProps %j", {
              position: position2,
              prevPropsPosition
            });
            return {
              x: position2.x,
              y: position2.y,
              prevPropsPosition: _objectSpread3({}, position2)
            };
          }
          return null;
        }
      )
    }]);
    return Draggable3;
  }(React2.Component);
  exports.default = Draggable2;
  _defineProperty2(Draggable2, "displayName", "Draggable");
  _defineProperty2(Draggable2, "propTypes", _objectSpread3(_objectSpread3({}, _DraggableCore.default.propTypes), {}, {
    /**
     * `axis` determines which axis the draggable can move.
     *
     *  Note that all callbacks will still return data as normal. This only
     *  controls flushing to the DOM.
     *
     * 'both' allows movement horizontally and vertically.
     * 'x' limits movement to horizontal axis.
     * 'y' limits movement to vertical axis.
     * 'none' limits all movement.
     *
     * Defaults to 'both'.
     */
    axis: _propTypes2.default.oneOf(["both", "x", "y", "none"]),
    /**
     * `bounds` determines the range of movement available to the element.
     * Available values are:
     *
     * 'parent' restricts movement within the Draggable's parent node.
     *
     * Alternatively, pass an object with the following properties, all of which are optional:
     *
     * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}
     *
     * All values are in px.
     *
     * Example:
     *
     * ```jsx
     *   let App = React.createClass({
     *       render: function () {
     *         return (
     *            <Draggable bounds={{right: 300, bottom: 300}}>
     *              <div>Content</div>
     *           </Draggable>
     *         );
     *       }
     *   });
     * ```
     */
    bounds: _propTypes2.default.oneOfType([_propTypes2.default.shape({
      left: _propTypes2.default.number,
      right: _propTypes2.default.number,
      top: _propTypes2.default.number,
      bottom: _propTypes2.default.number
    }), _propTypes2.default.string, _propTypes2.default.oneOf([false])]),
    defaultClassName: _propTypes2.default.string,
    defaultClassNameDragging: _propTypes2.default.string,
    defaultClassNameDragged: _propTypes2.default.string,
    /**
     * `defaultPosition` specifies the x and y that the dragged item should start at
     *
     * Example:
     *
     * ```jsx
     *      let App = React.createClass({
     *          render: function () {
     *              return (
     *                  <Draggable defaultPosition={{x: 25, y: 25}}>
     *                      <div>I start with transformX: 25px and transformY: 25px;</div>
     *                  </Draggable>
     *              );
     *          }
     *      });
     * ```
     */
    defaultPosition: _propTypes2.default.shape({
      x: _propTypes2.default.number,
      y: _propTypes2.default.number
    }),
    positionOffset: _propTypes2.default.shape({
      x: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
      y: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
    }),
    /**
     * `position`, if present, defines the current position of the element.
     *
     *  This is similar to how form elements in React work - if no `position` is supplied, the component
     *  is uncontrolled.
     *
     * Example:
     *
     * ```jsx
     *      let App = React.createClass({
     *          render: function () {
     *              return (
     *                  <Draggable position={{x: 25, y: 25}}>
     *                      <div>I start with transformX: 25px and transformY: 25px;</div>
     *                  </Draggable>
     *              );
     *          }
     *      });
     * ```
     */
    position: _propTypes2.default.shape({
      x: _propTypes2.default.number,
      y: _propTypes2.default.number
    }),
    /**
     * These properties should be defined on the child, not here.
     */
    className: _shims2.dontSetMe,
    style: _shims2.dontSetMe,
    transform: _shims2.dontSetMe
  }));
  _defineProperty2(Draggable2, "defaultProps", _objectSpread3(_objectSpread3({}, _DraggableCore.default.defaultProps), {}, {
    axis: "both",
    bounds: false,
    defaultClassName: "react-draggable",
    defaultClassNameDragging: "react-draggable-dragging",
    defaultClassNameDragged: "react-draggable-dragged",
    defaultPosition: {
      x: 0,
      y: 0
    },
    scale: 1
  }));
})(Draggable$2);
var _require = Draggable$2, Draggable$1 = _require.default, DraggableCore = _require.DraggableCore;
cjs.exports = Draggable$1;
cjs.exports.default = Draggable$1;
cjs.exports.DraggableCore = DraggableCore;
var cjsExports = cjs.exports;
const DraggableRoot = /* @__PURE__ */ getDefaultExportFromCjs(cjsExports);
var __extends$2 = globalThis && globalThis.__extends || function() {
  var extendStatics2 = function(d, b) {
    extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics2(d, b);
  };
  return function(d, b) {
    extendStatics2(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$2 = globalThis && globalThis.__assign || function() {
  __assign$2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$2.apply(this, arguments);
};
var styles = {
  top: {
    width: "100%",
    height: "10px",
    top: "-5px",
    left: "0px",
    cursor: "row-resize"
  },
  right: {
    width: "10px",
    height: "100%",
    top: "0px",
    right: "-5px",
    cursor: "col-resize"
  },
  bottom: {
    width: "100%",
    height: "10px",
    bottom: "-5px",
    left: "0px",
    cursor: "row-resize"
  },
  left: {
    width: "10px",
    height: "100%",
    top: "0px",
    left: "-5px",
    cursor: "col-resize"
  },
  topRight: {
    width: "20px",
    height: "20px",
    position: "absolute",
    right: "-10px",
    top: "-10px",
    cursor: "ne-resize"
  },
  bottomRight: {
    width: "20px",
    height: "20px",
    position: "absolute",
    right: "-10px",
    bottom: "-10px",
    cursor: "se-resize"
  },
  bottomLeft: {
    width: "20px",
    height: "20px",
    position: "absolute",
    left: "-10px",
    bottom: "-10px",
    cursor: "sw-resize"
  },
  topLeft: {
    width: "20px",
    height: "20px",
    position: "absolute",
    left: "-10px",
    top: "-10px",
    cursor: "nw-resize"
  }
};
var Resizer = (
  /** @class */
  function(_super) {
    __extends$2(Resizer2, _super);
    function Resizer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.onMouseDown = function(e) {
        _this.props.onResizeStart(e, _this.props.direction);
      };
      _this.onTouchStart = function(e) {
        _this.props.onResizeStart(e, _this.props.direction);
      };
      return _this;
    }
    Resizer2.prototype.render = function() {
      return React$2.createElement("div", { className: this.props.className || "", style: __assign$2(__assign$2({ position: "absolute", userSelect: "none" }, styles[this.props.direction]), this.props.replaceStyles || {}), onMouseDown: this.onMouseDown, onTouchStart: this.onTouchStart }, this.props.children);
    };
    return Resizer2;
  }(React$2.PureComponent)
);
var src = { exports: {} };
function memoize(fn, options) {
  var cache = options && options.cache ? options.cache : cacheDefault;
  var serializer = options && options.serializer ? options.serializer : serializerDefault;
  var strategy = options && options.strategy ? options.strategy : strategyDefault;
  return strategy(fn, {
    cache,
    serializer
  });
}
function isPrimitive(value) {
  return value == null || typeof value === "number" || typeof value === "boolean";
}
function monadic(fn, cache, serializer, arg) {
  var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
  var computedValue = cache.get(cacheKey);
  if (typeof computedValue === "undefined") {
    computedValue = fn.call(this, arg);
    cache.set(cacheKey, computedValue);
  }
  return computedValue;
}
function variadic(fn, cache, serializer) {
  var args = Array.prototype.slice.call(arguments, 3);
  var cacheKey = serializer(args);
  var computedValue = cache.get(cacheKey);
  if (typeof computedValue === "undefined") {
    computedValue = fn.apply(this, args);
    cache.set(cacheKey, computedValue);
  }
  return computedValue;
}
function assemble(fn, context, strategy, cache, serialize2) {
  return strategy.bind(
    context,
    fn,
    cache,
    serialize2
  );
}
function strategyDefault(fn, options) {
  var strategy = fn.length === 1 ? monadic : variadic;
  return assemble(
    fn,
    this,
    strategy,
    options.cache.create(),
    options.serializer
  );
}
function strategyVariadic(fn, options) {
  var strategy = variadic;
  return assemble(
    fn,
    this,
    strategy,
    options.cache.create(),
    options.serializer
  );
}
function strategyMonadic(fn, options) {
  var strategy = monadic;
  return assemble(
    fn,
    this,
    strategy,
    options.cache.create(),
    options.serializer
  );
}
function serializerDefault() {
  return JSON.stringify(arguments);
}
function ObjectWithoutPrototypeCache() {
  this.cache = /* @__PURE__ */ Object.create(null);
}
ObjectWithoutPrototypeCache.prototype.has = function(key) {
  return key in this.cache;
};
ObjectWithoutPrototypeCache.prototype.get = function(key) {
  return this.cache[key];
};
ObjectWithoutPrototypeCache.prototype.set = function(key, value) {
  this.cache[key] = value;
};
var cacheDefault = {
  create: function create() {
    return new ObjectWithoutPrototypeCache();
  }
};
src.exports = memoize;
src.exports.strategies = {
  variadic: strategyVariadic,
  monadic: strategyMonadic
};
var srcExports = src.exports;
const memoize$1 = /* @__PURE__ */ getDefaultExportFromCjs(srcExports);
var __extends$1 = globalThis && globalThis.__extends || function() {
  var extendStatics2 = function(d, b) {
    extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics2(d, b);
  };
  return function(d, b) {
    extendStatics2(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$1 = globalThis && globalThis.__assign || function() {
  __assign$1 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$1.apply(this, arguments);
};
var DEFAULT_SIZE = {
  width: "auto",
  height: "auto"
};
var clamp = memoize$1(function(n, min, max) {
  return Math.max(Math.min(n, max), min);
});
var snap = memoize$1(function(n, size) {
  return Math.round(n / size) * size;
});
var hasDirection = memoize$1(function(dir, target) {
  return new RegExp(dir, "i").test(target);
});
var isTouchEvent = function(event) {
  return Boolean(event.touches && event.touches.length);
};
var isMouseEvent = function(event) {
  return Boolean((event.clientX || event.clientX === 0) && (event.clientY || event.clientY === 0));
};
var findClosestSnap = memoize$1(function(n, snapArray, snapGap) {
  if (snapGap === void 0) {
    snapGap = 0;
  }
  var closestGapIndex = snapArray.reduce(function(prev2, curr, index2) {
    return Math.abs(curr - n) < Math.abs(snapArray[prev2] - n) ? index2 : prev2;
  }, 0);
  var gap = Math.abs(snapArray[closestGapIndex] - n);
  return snapGap === 0 || gap < snapGap ? snapArray[closestGapIndex] : n;
});
var endsWith = memoize$1(function(str, searchStr) {
  return str.substr(str.length - searchStr.length, searchStr.length) === searchStr;
});
var getStringSize = memoize$1(function(n) {
  n = n.toString();
  if (n === "auto") {
    return n;
  }
  if (endsWith(n, "px")) {
    return n;
  }
  if (endsWith(n, "%")) {
    return n;
  }
  if (endsWith(n, "vh")) {
    return n;
  }
  if (endsWith(n, "vw")) {
    return n;
  }
  if (endsWith(n, "vmax")) {
    return n;
  }
  if (endsWith(n, "vmin")) {
    return n;
  }
  return n + "px";
});
var getPixelSize = function(size, parentSize, innerWidth2, innerHeight2) {
  if (size && typeof size === "string") {
    if (endsWith(size, "px")) {
      return Number(size.replace("px", ""));
    }
    if (endsWith(size, "%")) {
      var ratio = Number(size.replace("%", "")) / 100;
      return parentSize * ratio;
    }
    if (endsWith(size, "vw")) {
      var ratio = Number(size.replace("vw", "")) / 100;
      return innerWidth2 * ratio;
    }
    if (endsWith(size, "vh")) {
      var ratio = Number(size.replace("vh", "")) / 100;
      return innerHeight2 * ratio;
    }
  }
  return size;
};
var calculateNewMax = memoize$1(function(parentSize, innerWidth2, innerHeight2, maxWidth, maxHeight, minWidth, minHeight) {
  maxWidth = getPixelSize(maxWidth, parentSize.width, innerWidth2, innerHeight2);
  maxHeight = getPixelSize(maxHeight, parentSize.height, innerWidth2, innerHeight2);
  minWidth = getPixelSize(minWidth, parentSize.width, innerWidth2, innerHeight2);
  minHeight = getPixelSize(minHeight, parentSize.height, innerWidth2, innerHeight2);
  return {
    maxWidth: typeof maxWidth === "undefined" ? void 0 : Number(maxWidth),
    maxHeight: typeof maxHeight === "undefined" ? void 0 : Number(maxHeight),
    minWidth: typeof minWidth === "undefined" ? void 0 : Number(minWidth),
    minHeight: typeof minHeight === "undefined" ? void 0 : Number(minHeight)
  };
});
var definedProps = [
  "as",
  "style",
  "className",
  "grid",
  "snap",
  "bounds",
  "boundsByDirection",
  "size",
  "defaultSize",
  "minWidth",
  "minHeight",
  "maxWidth",
  "maxHeight",
  "lockAspectRatio",
  "lockAspectRatioExtraWidth",
  "lockAspectRatioExtraHeight",
  "enable",
  "handleStyles",
  "handleClasses",
  "handleWrapperStyle",
  "handleWrapperClass",
  "children",
  "onResizeStart",
  "onResize",
  "onResizeStop",
  "handleComponent",
  "scale",
  "resizeRatio",
  "snapGap"
];
var baseClassName = "__resizable_base__";
var Resizable = (
  /** @class */
  function(_super) {
    __extends$1(Resizable2, _super);
    function Resizable2(props) {
      var _this = _super.call(this, props) || this;
      _this.ratio = 1;
      _this.resizable = null;
      _this.parentLeft = 0;
      _this.parentTop = 0;
      _this.resizableLeft = 0;
      _this.resizableRight = 0;
      _this.resizableTop = 0;
      _this.resizableBottom = 0;
      _this.targetLeft = 0;
      _this.targetTop = 0;
      _this.appendBase = function() {
        if (!_this.resizable || !_this.window) {
          return null;
        }
        var parent = _this.parentNode;
        if (!parent) {
          return null;
        }
        var element = _this.window.document.createElement("div");
        element.style.width = "100%";
        element.style.height = "100%";
        element.style.position = "absolute";
        element.style.transform = "scale(0, 0)";
        element.style.left = "0";
        element.style.flex = "0 0 100%";
        if (element.classList) {
          element.classList.add(baseClassName);
        } else {
          element.className += baseClassName;
        }
        parent.appendChild(element);
        return element;
      };
      _this.removeBase = function(base) {
        var parent = _this.parentNode;
        if (!parent) {
          return;
        }
        parent.removeChild(base);
      };
      _this.ref = function(c) {
        if (c) {
          _this.resizable = c;
        }
      };
      _this.state = {
        isResizing: false,
        width: typeof (_this.propsSize && _this.propsSize.width) === "undefined" ? "auto" : _this.propsSize && _this.propsSize.width,
        height: typeof (_this.propsSize && _this.propsSize.height) === "undefined" ? "auto" : _this.propsSize && _this.propsSize.height,
        direction: "right",
        original: {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        },
        backgroundStyle: {
          height: "100%",
          width: "100%",
          backgroundColor: "rgba(0,0,0,0)",
          cursor: "auto",
          opacity: 0,
          position: "fixed",
          zIndex: 9999,
          top: "0",
          left: "0",
          bottom: "0",
          right: "0"
        },
        flexBasis: void 0
      };
      _this.onResizeStart = _this.onResizeStart.bind(_this);
      _this.onMouseMove = _this.onMouseMove.bind(_this);
      _this.onMouseUp = _this.onMouseUp.bind(_this);
      return _this;
    }
    Object.defineProperty(Resizable2.prototype, "parentNode", {
      get: function() {
        if (!this.resizable) {
          return null;
        }
        return this.resizable.parentNode;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Resizable2.prototype, "window", {
      get: function() {
        if (!this.resizable) {
          return null;
        }
        if (!this.resizable.ownerDocument) {
          return null;
        }
        return this.resizable.ownerDocument.defaultView;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Resizable2.prototype, "propsSize", {
      get: function() {
        return this.props.size || this.props.defaultSize || DEFAULT_SIZE;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Resizable2.prototype, "size", {
      get: function() {
        var width = 0;
        var height = 0;
        if (this.resizable && this.window) {
          var orgWidth = this.resizable.offsetWidth;
          var orgHeight = this.resizable.offsetHeight;
          var orgPosition = this.resizable.style.position;
          if (orgPosition !== "relative") {
            this.resizable.style.position = "relative";
          }
          width = this.resizable.style.width !== "auto" ? this.resizable.offsetWidth : orgWidth;
          height = this.resizable.style.height !== "auto" ? this.resizable.offsetHeight : orgHeight;
          this.resizable.style.position = orgPosition;
        }
        return { width, height };
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Resizable2.prototype, "sizeStyle", {
      get: function() {
        var _this = this;
        var size = this.props.size;
        var getSize = function(key) {
          if (typeof _this.state[key] === "undefined" || _this.state[key] === "auto") {
            return "auto";
          }
          if (_this.propsSize && _this.propsSize[key] && endsWith(_this.propsSize[key].toString(), "%")) {
            if (endsWith(_this.state[key].toString(), "%")) {
              return _this.state[key].toString();
            }
            var parentSize = _this.getParentSize();
            var value = Number(_this.state[key].toString().replace("px", ""));
            var percent = value / parentSize[key] * 100;
            return percent + "%";
          }
          return getStringSize(_this.state[key]);
        };
        var width = size && typeof size.width !== "undefined" && !this.state.isResizing ? getStringSize(size.width) : getSize("width");
        var height = size && typeof size.height !== "undefined" && !this.state.isResizing ? getStringSize(size.height) : getSize("height");
        return { width, height };
      },
      enumerable: false,
      configurable: true
    });
    Resizable2.prototype.getParentSize = function() {
      if (!this.parentNode) {
        if (!this.window) {
          return { width: 0, height: 0 };
        }
        return { width: this.window.innerWidth, height: this.window.innerHeight };
      }
      var base = this.appendBase();
      if (!base) {
        return { width: 0, height: 0 };
      }
      var wrapChanged = false;
      var wrap = this.parentNode.style.flexWrap;
      if (wrap !== "wrap") {
        wrapChanged = true;
        this.parentNode.style.flexWrap = "wrap";
      }
      base.style.position = "relative";
      base.style.minWidth = "100%";
      base.style.minHeight = "100%";
      var size = {
        width: base.offsetWidth,
        height: base.offsetHeight
      };
      if (wrapChanged) {
        this.parentNode.style.flexWrap = wrap;
      }
      this.removeBase(base);
      return size;
    };
    Resizable2.prototype.bindEvents = function() {
      if (this.window) {
        this.window.addEventListener("mouseup", this.onMouseUp);
        this.window.addEventListener("mousemove", this.onMouseMove);
        this.window.addEventListener("mouseleave", this.onMouseUp);
        this.window.addEventListener("touchmove", this.onMouseMove, {
          capture: true,
          passive: false
        });
        this.window.addEventListener("touchend", this.onMouseUp);
      }
    };
    Resizable2.prototype.unbindEvents = function() {
      if (this.window) {
        this.window.removeEventListener("mouseup", this.onMouseUp);
        this.window.removeEventListener("mousemove", this.onMouseMove);
        this.window.removeEventListener("mouseleave", this.onMouseUp);
        this.window.removeEventListener("touchmove", this.onMouseMove, true);
        this.window.removeEventListener("touchend", this.onMouseUp);
      }
    };
    Resizable2.prototype.componentDidMount = function() {
      if (!this.resizable || !this.window) {
        return;
      }
      var computedStyle = this.window.getComputedStyle(this.resizable);
      this.setState({
        width: this.state.width || this.size.width,
        height: this.state.height || this.size.height,
        flexBasis: computedStyle.flexBasis !== "auto" ? computedStyle.flexBasis : void 0
      });
    };
    Resizable2.prototype.componentWillUnmount = function() {
      if (this.window) {
        this.unbindEvents();
      }
    };
    Resizable2.prototype.createSizeForCssProperty = function(newSize, kind) {
      var propsSize = this.propsSize && this.propsSize[kind];
      return this.state[kind] === "auto" && this.state.original[kind] === newSize && (typeof propsSize === "undefined" || propsSize === "auto") ? "auto" : newSize;
    };
    Resizable2.prototype.calculateNewMaxFromBoundary = function(maxWidth, maxHeight) {
      var boundsByDirection = this.props.boundsByDirection;
      var direction = this.state.direction;
      var widthByDirection = boundsByDirection && hasDirection("left", direction);
      var heightByDirection = boundsByDirection && hasDirection("top", direction);
      var boundWidth;
      var boundHeight;
      if (this.props.bounds === "parent") {
        var parent_1 = this.parentNode;
        if (parent_1) {
          boundWidth = widthByDirection ? this.resizableRight - this.parentLeft : parent_1.offsetWidth + (this.parentLeft - this.resizableLeft);
          boundHeight = heightByDirection ? this.resizableBottom - this.parentTop : parent_1.offsetHeight + (this.parentTop - this.resizableTop);
        }
      } else if (this.props.bounds === "window") {
        if (this.window) {
          boundWidth = widthByDirection ? this.resizableRight : this.window.innerWidth - this.resizableLeft;
          boundHeight = heightByDirection ? this.resizableBottom : this.window.innerHeight - this.resizableTop;
        }
      } else if (this.props.bounds) {
        boundWidth = widthByDirection ? this.resizableRight - this.targetLeft : this.props.bounds.offsetWidth + (this.targetLeft - this.resizableLeft);
        boundHeight = heightByDirection ? this.resizableBottom - this.targetTop : this.props.bounds.offsetHeight + (this.targetTop - this.resizableTop);
      }
      if (boundWidth && Number.isFinite(boundWidth)) {
        maxWidth = maxWidth && maxWidth < boundWidth ? maxWidth : boundWidth;
      }
      if (boundHeight && Number.isFinite(boundHeight)) {
        maxHeight = maxHeight && maxHeight < boundHeight ? maxHeight : boundHeight;
      }
      return { maxWidth, maxHeight };
    };
    Resizable2.prototype.calculateNewSizeFromDirection = function(clientX, clientY) {
      var scale = this.props.scale || 1;
      var resizeRatio = this.props.resizeRatio || 1;
      var _a = this.state, direction = _a.direction, original = _a.original;
      var _b = this.props, lockAspectRatio = _b.lockAspectRatio, lockAspectRatioExtraHeight = _b.lockAspectRatioExtraHeight, lockAspectRatioExtraWidth = _b.lockAspectRatioExtraWidth;
      var newWidth = original.width;
      var newHeight = original.height;
      var extraHeight = lockAspectRatioExtraHeight || 0;
      var extraWidth = lockAspectRatioExtraWidth || 0;
      if (hasDirection("right", direction)) {
        newWidth = original.width + (clientX - original.x) * resizeRatio / scale;
        if (lockAspectRatio) {
          newHeight = (newWidth - extraWidth) / this.ratio + extraHeight;
        }
      }
      if (hasDirection("left", direction)) {
        newWidth = original.width - (clientX - original.x) * resizeRatio / scale;
        if (lockAspectRatio) {
          newHeight = (newWidth - extraWidth) / this.ratio + extraHeight;
        }
      }
      if (hasDirection("bottom", direction)) {
        newHeight = original.height + (clientY - original.y) * resizeRatio / scale;
        if (lockAspectRatio) {
          newWidth = (newHeight - extraHeight) * this.ratio + extraWidth;
        }
      }
      if (hasDirection("top", direction)) {
        newHeight = original.height - (clientY - original.y) * resizeRatio / scale;
        if (lockAspectRatio) {
          newWidth = (newHeight - extraHeight) * this.ratio + extraWidth;
        }
      }
      return { newWidth, newHeight };
    };
    Resizable2.prototype.calculateNewSizeFromAspectRatio = function(newWidth, newHeight, max, min) {
      var _a = this.props, lockAspectRatio = _a.lockAspectRatio, lockAspectRatioExtraHeight = _a.lockAspectRatioExtraHeight, lockAspectRatioExtraWidth = _a.lockAspectRatioExtraWidth;
      var computedMinWidth = typeof min.width === "undefined" ? 10 : min.width;
      var computedMaxWidth = typeof max.width === "undefined" || max.width < 0 ? newWidth : max.width;
      var computedMinHeight = typeof min.height === "undefined" ? 10 : min.height;
      var computedMaxHeight = typeof max.height === "undefined" || max.height < 0 ? newHeight : max.height;
      var extraHeight = lockAspectRatioExtraHeight || 0;
      var extraWidth = lockAspectRatioExtraWidth || 0;
      if (lockAspectRatio) {
        var extraMinWidth = (computedMinHeight - extraHeight) * this.ratio + extraWidth;
        var extraMaxWidth = (computedMaxHeight - extraHeight) * this.ratio + extraWidth;
        var extraMinHeight = (computedMinWidth - extraWidth) / this.ratio + extraHeight;
        var extraMaxHeight = (computedMaxWidth - extraWidth) / this.ratio + extraHeight;
        var lockedMinWidth = Math.max(computedMinWidth, extraMinWidth);
        var lockedMaxWidth = Math.min(computedMaxWidth, extraMaxWidth);
        var lockedMinHeight = Math.max(computedMinHeight, extraMinHeight);
        var lockedMaxHeight = Math.min(computedMaxHeight, extraMaxHeight);
        newWidth = clamp(newWidth, lockedMinWidth, lockedMaxWidth);
        newHeight = clamp(newHeight, lockedMinHeight, lockedMaxHeight);
      } else {
        newWidth = clamp(newWidth, computedMinWidth, computedMaxWidth);
        newHeight = clamp(newHeight, computedMinHeight, computedMaxHeight);
      }
      return { newWidth, newHeight };
    };
    Resizable2.prototype.setBoundingClientRect = function() {
      if (this.props.bounds === "parent") {
        var parent_2 = this.parentNode;
        if (parent_2) {
          var parentRect = parent_2.getBoundingClientRect();
          this.parentLeft = parentRect.left;
          this.parentTop = parentRect.top;
        }
      }
      if (this.props.bounds && typeof this.props.bounds !== "string") {
        var targetRect = this.props.bounds.getBoundingClientRect();
        this.targetLeft = targetRect.left;
        this.targetTop = targetRect.top;
      }
      if (this.resizable) {
        var _a = this.resizable.getBoundingClientRect(), left = _a.left, top_1 = _a.top, right = _a.right, bottom = _a.bottom;
        this.resizableLeft = left;
        this.resizableRight = right;
        this.resizableTop = top_1;
        this.resizableBottom = bottom;
      }
    };
    Resizable2.prototype.onResizeStart = function(event, direction) {
      if (!this.resizable || !this.window) {
        return;
      }
      var clientX = 0;
      var clientY = 0;
      if (event.nativeEvent && isMouseEvent(event.nativeEvent)) {
        clientX = event.nativeEvent.clientX;
        clientY = event.nativeEvent.clientY;
      } else if (event.nativeEvent && isTouchEvent(event.nativeEvent)) {
        clientX = event.nativeEvent.touches[0].clientX;
        clientY = event.nativeEvent.touches[0].clientY;
      }
      if (this.props.onResizeStart) {
        if (this.resizable) {
          var startResize = this.props.onResizeStart(event, direction, this.resizable);
          if (startResize === false) {
            return;
          }
        }
      }
      if (this.props.size) {
        if (typeof this.props.size.height !== "undefined" && this.props.size.height !== this.state.height) {
          this.setState({ height: this.props.size.height });
        }
        if (typeof this.props.size.width !== "undefined" && this.props.size.width !== this.state.width) {
          this.setState({ width: this.props.size.width });
        }
      }
      this.ratio = typeof this.props.lockAspectRatio === "number" ? this.props.lockAspectRatio : this.size.width / this.size.height;
      var flexBasis;
      var computedStyle = this.window.getComputedStyle(this.resizable);
      if (computedStyle.flexBasis !== "auto") {
        var parent_3 = this.parentNode;
        if (parent_3) {
          var dir = this.window.getComputedStyle(parent_3).flexDirection;
          this.flexDir = dir.startsWith("row") ? "row" : "column";
          flexBasis = computedStyle.flexBasis;
        }
      }
      this.setBoundingClientRect();
      this.bindEvents();
      var state = {
        original: {
          x: clientX,
          y: clientY,
          width: this.size.width,
          height: this.size.height
        },
        isResizing: true,
        backgroundStyle: __assign$1(__assign$1({}, this.state.backgroundStyle), { cursor: this.window.getComputedStyle(event.target).cursor || "auto" }),
        direction,
        flexBasis
      };
      this.setState(state);
    };
    Resizable2.prototype.onMouseMove = function(event) {
      if (!this.state.isResizing || !this.resizable || !this.window) {
        return;
      }
      if (this.window.TouchEvent && isTouchEvent(event)) {
        try {
          event.preventDefault();
          event.stopPropagation();
        } catch (e) {
        }
      }
      var _a = this.props, maxWidth = _a.maxWidth, maxHeight = _a.maxHeight, minWidth = _a.minWidth, minHeight = _a.minHeight;
      var clientX = isTouchEvent(event) ? event.touches[0].clientX : event.clientX;
      var clientY = isTouchEvent(event) ? event.touches[0].clientY : event.clientY;
      var _b = this.state, direction = _b.direction, original = _b.original, width = _b.width, height = _b.height;
      var parentSize = this.getParentSize();
      var max = calculateNewMax(parentSize, this.window.innerWidth, this.window.innerHeight, maxWidth, maxHeight, minWidth, minHeight);
      maxWidth = max.maxWidth;
      maxHeight = max.maxHeight;
      minWidth = max.minWidth;
      minHeight = max.minHeight;
      var _c = this.calculateNewSizeFromDirection(clientX, clientY), newHeight = _c.newHeight, newWidth = _c.newWidth;
      var boundaryMax = this.calculateNewMaxFromBoundary(maxWidth, maxHeight);
      if (this.props.snap && this.props.snap.x) {
        newWidth = findClosestSnap(newWidth, this.props.snap.x, this.props.snapGap);
      }
      if (this.props.snap && this.props.snap.y) {
        newHeight = findClosestSnap(newHeight, this.props.snap.y, this.props.snapGap);
      }
      var newSize = this.calculateNewSizeFromAspectRatio(newWidth, newHeight, { width: boundaryMax.maxWidth, height: boundaryMax.maxHeight }, { width: minWidth, height: minHeight });
      newWidth = newSize.newWidth;
      newHeight = newSize.newHeight;
      if (this.props.grid) {
        var newGridWidth = snap(newWidth, this.props.grid[0]);
        var newGridHeight = snap(newHeight, this.props.grid[1]);
        var gap = this.props.snapGap || 0;
        newWidth = gap === 0 || Math.abs(newGridWidth - newWidth) <= gap ? newGridWidth : newWidth;
        newHeight = gap === 0 || Math.abs(newGridHeight - newHeight) <= gap ? newGridHeight : newHeight;
      }
      var delta = {
        width: newWidth - original.width,
        height: newHeight - original.height
      };
      if (width && typeof width === "string") {
        if (endsWith(width, "%")) {
          var percent = newWidth / parentSize.width * 100;
          newWidth = percent + "%";
        } else if (endsWith(width, "vw")) {
          var vw = newWidth / this.window.innerWidth * 100;
          newWidth = vw + "vw";
        } else if (endsWith(width, "vh")) {
          var vh = newWidth / this.window.innerHeight * 100;
          newWidth = vh + "vh";
        }
      }
      if (height && typeof height === "string") {
        if (endsWith(height, "%")) {
          var percent = newHeight / parentSize.height * 100;
          newHeight = percent + "%";
        } else if (endsWith(height, "vw")) {
          var vw = newHeight / this.window.innerWidth * 100;
          newHeight = vw + "vw";
        } else if (endsWith(height, "vh")) {
          var vh = newHeight / this.window.innerHeight * 100;
          newHeight = vh + "vh";
        }
      }
      var newState = {
        width: this.createSizeForCssProperty(newWidth, "width"),
        height: this.createSizeForCssProperty(newHeight, "height")
      };
      if (this.flexDir === "row") {
        newState.flexBasis = newState.width;
      } else if (this.flexDir === "column") {
        newState.flexBasis = newState.height;
      }
      this.setState(newState);
      if (this.props.onResize) {
        this.props.onResize(event, direction, this.resizable, delta);
      }
    };
    Resizable2.prototype.onMouseUp = function(event) {
      var _a = this.state, isResizing = _a.isResizing, direction = _a.direction, original = _a.original;
      if (!isResizing || !this.resizable) {
        return;
      }
      var delta = {
        width: this.size.width - original.width,
        height: this.size.height - original.height
      };
      if (this.props.onResizeStop) {
        this.props.onResizeStop(event, direction, this.resizable, delta);
      }
      if (this.props.size) {
        this.setState(this.props.size);
      }
      this.unbindEvents();
      this.setState({
        isResizing: false,
        backgroundStyle: __assign$1(__assign$1({}, this.state.backgroundStyle), { cursor: "auto" })
      });
    };
    Resizable2.prototype.updateSize = function(size) {
      this.setState({ width: size.width, height: size.height });
    };
    Resizable2.prototype.renderResizer = function() {
      var _this = this;
      var _a = this.props, enable = _a.enable, handleStyles = _a.handleStyles, handleClasses = _a.handleClasses, handleWrapperStyle = _a.handleWrapperStyle, handleWrapperClass = _a.handleWrapperClass, handleComponent = _a.handleComponent;
      if (!enable) {
        return null;
      }
      var resizers = Object.keys(enable).map(function(dir) {
        if (enable[dir] !== false) {
          return React$2.createElement(Resizer, { key: dir, direction: dir, onResizeStart: _this.onResizeStart, replaceStyles: handleStyles && handleStyles[dir], className: handleClasses && handleClasses[dir] }, handleComponent && handleComponent[dir] ? handleComponent[dir] : null);
        }
        return null;
      });
      return React$2.createElement("div", { className: handleWrapperClass, style: handleWrapperStyle }, resizers);
    };
    Resizable2.prototype.render = function() {
      var _this = this;
      var extendsProps = Object.keys(this.props).reduce(function(acc, key) {
        if (definedProps.indexOf(key) !== -1) {
          return acc;
        }
        acc[key] = _this.props[key];
        return acc;
      }, {});
      var style2 = __assign$1(__assign$1(__assign$1({ position: "relative", userSelect: this.state.isResizing ? "none" : "auto" }, this.props.style), this.sizeStyle), { maxWidth: this.props.maxWidth, maxHeight: this.props.maxHeight, minWidth: this.props.minWidth, minHeight: this.props.minHeight, boxSizing: "border-box", flexShrink: 0 });
      if (this.state.flexBasis) {
        style2.flexBasis = this.state.flexBasis;
      }
      var Wrapper = this.props.as || "div";
      return React$2.createElement(
        Wrapper,
        __assign$1({ ref: this.ref, style: style2, className: this.props.className }, extendsProps),
        this.state.isResizing && React$2.createElement("div", { style: this.state.backgroundStyle }),
        this.props.children,
        this.renderResizer()
      );
    };
    Resizable2.defaultProps = {
      as: "div",
      onResizeStart: function() {
      },
      onResize: function() {
      },
      onResizeStop: function() {
      },
      enable: {
        top: true,
        right: true,
        bottom: true,
        left: true,
        topRight: true,
        bottomRight: true,
        bottomLeft: true,
        topLeft: true
      },
      style: {},
      grid: [1, 1],
      lockAspectRatio: false,
      lockAspectRatioExtraWidth: 0,
      lockAspectRatioExtraHeight: 0,
      scale: 1,
      resizeRatio: 1,
      snapGap: 0
    };
    return Resizable2;
  }(React$2.PureComponent)
);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (b2.hasOwnProperty(p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
var Draggable = DraggableRoot;
var resizableStyle = {
  width: "auto",
  height: "auto",
  display: "inline-block",
  position: "absolute",
  top: 0,
  left: 0
};
var getEnableResizingByFlag = function(flag) {
  return {
    bottom: flag,
    bottomLeft: flag,
    bottomRight: flag,
    left: flag,
    right: flag,
    top: flag,
    topLeft: flag,
    topRight: flag
  };
};
var Rnd = (
  /** @class */
  function(_super) {
    __extends(Rnd2, _super);
    function Rnd2(props) {
      var _this = _super.call(this, props) || this;
      _this.resizingPosition = { x: 0, y: 0 };
      _this.offsetFromParent = { left: 0, top: 0 };
      _this.resizableElement = { current: null };
      _this.originalPosition = { x: 0, y: 0 };
      _this.refDraggable = function(c) {
        if (!c)
          return;
        _this.draggable = c;
      };
      _this.refResizable = function(c) {
        if (!c)
          return;
        _this.resizable = c;
        _this.resizableElement.current = c.resizable;
      };
      _this.state = {
        resizing: false,
        bounds: {
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        },
        maxWidth: props.maxWidth,
        maxHeight: props.maxHeight
      };
      _this.onResizeStart = _this.onResizeStart.bind(_this);
      _this.onResize = _this.onResize.bind(_this);
      _this.onResizeStop = _this.onResizeStop.bind(_this);
      _this.onDragStart = _this.onDragStart.bind(_this);
      _this.onDrag = _this.onDrag.bind(_this);
      _this.onDragStop = _this.onDragStop.bind(_this);
      _this.getMaxSizesFromProps = _this.getMaxSizesFromProps.bind(_this);
      return _this;
    }
    Rnd2.prototype.componentDidMount = function() {
      this.updateOffsetFromParent();
      var _a = this.offsetFromParent, left = _a.left, top = _a.top;
      var _b = this.getDraggablePosition(), x = _b.x, y = _b.y;
      this.draggable.setState({
        x: x - left,
        y: y - top
      });
      this.forceUpdate();
    };
    Rnd2.prototype.getDraggablePosition = function() {
      var _a = this.draggable.state, x = _a.x, y = _a.y;
      return { x, y };
    };
    Rnd2.prototype.getParent = function() {
      return this.resizable && this.resizable.parentNode;
    };
    Rnd2.prototype.getParentSize = function() {
      return this.resizable.getParentSize();
    };
    Rnd2.prototype.getMaxSizesFromProps = function() {
      var maxWidth = typeof this.props.maxWidth === "undefined" ? Number.MAX_SAFE_INTEGER : this.props.maxWidth;
      var maxHeight = typeof this.props.maxHeight === "undefined" ? Number.MAX_SAFE_INTEGER : this.props.maxHeight;
      return { maxWidth, maxHeight };
    };
    Rnd2.prototype.getSelfElement = function() {
      return this.resizable && this.resizable.resizable;
    };
    Rnd2.prototype.getOffsetHeight = function(boundary) {
      var scale = this.props.scale;
      switch (this.props.bounds) {
        case "window":
          return window.innerHeight / scale;
        case "body":
          return document.body.offsetHeight / scale;
        default:
          return boundary.offsetHeight;
      }
    };
    Rnd2.prototype.getOffsetWidth = function(boundary) {
      var scale = this.props.scale;
      switch (this.props.bounds) {
        case "window":
          return window.innerWidth / scale;
        case "body":
          return document.body.offsetWidth / scale;
        default:
          return boundary.offsetWidth;
      }
    };
    Rnd2.prototype.onDragStart = function(e, data2) {
      if (this.props.onDragStart) {
        this.props.onDragStart(e, data2);
      }
      var pos = this.getDraggablePosition();
      this.originalPosition = pos;
      if (!this.props.bounds)
        return;
      var parent = this.getParent();
      var scale = this.props.scale;
      var boundary;
      if (this.props.bounds === "parent") {
        boundary = parent;
      } else if (this.props.bounds === "body") {
        var parentRect_1 = parent.getBoundingClientRect();
        var parentLeft_1 = parentRect_1.left;
        var parentTop_1 = parentRect_1.top;
        var bodyRect = document.body.getBoundingClientRect();
        var left_1 = -(parentLeft_1 - parent.offsetLeft * scale - bodyRect.left) / scale;
        var top_1 = -(parentTop_1 - parent.offsetTop * scale - bodyRect.top) / scale;
        var right = (document.body.offsetWidth - this.resizable.size.width * scale) / scale + left_1;
        var bottom = (document.body.offsetHeight - this.resizable.size.height * scale) / scale + top_1;
        return this.setState({ bounds: { top: top_1, right, bottom, left: left_1 } });
      } else if (this.props.bounds === "window") {
        if (!this.resizable)
          return;
        var parentRect_2 = parent.getBoundingClientRect();
        var parentLeft_2 = parentRect_2.left;
        var parentTop_2 = parentRect_2.top;
        var left_2 = -(parentLeft_2 - parent.offsetLeft * scale) / scale;
        var top_2 = -(parentTop_2 - parent.offsetTop * scale) / scale;
        var right = (window.innerWidth - this.resizable.size.width * scale) / scale + left_2;
        var bottom = (window.innerHeight - this.resizable.size.height * scale) / scale + top_2;
        return this.setState({ bounds: { top: top_2, right, bottom, left: left_2 } });
      } else if (typeof this.props.bounds === "string") {
        boundary = document.querySelector(this.props.bounds);
      } else if (this.props.bounds instanceof HTMLElement) {
        boundary = this.props.bounds;
      }
      if (!(boundary instanceof HTMLElement) || !(parent instanceof HTMLElement)) {
        return;
      }
      var boundaryRect = boundary.getBoundingClientRect();
      var boundaryLeft = boundaryRect.left;
      var boundaryTop = boundaryRect.top;
      var parentRect = parent.getBoundingClientRect();
      var parentLeft = parentRect.left;
      var parentTop = parentRect.top;
      var left = (boundaryLeft - parentLeft) / scale;
      var top = boundaryTop - parentTop;
      if (!this.resizable)
        return;
      this.updateOffsetFromParent();
      var offset2 = this.offsetFromParent;
      this.setState({
        bounds: {
          top: top - offset2.top,
          right: left + (boundary.offsetWidth - this.resizable.size.width) - offset2.left / scale,
          bottom: top + (boundary.offsetHeight - this.resizable.size.height) - offset2.top,
          left: left - offset2.left / scale
        }
      });
    };
    Rnd2.prototype.onDrag = function(e, data2) {
      if (!this.props.onDrag)
        return;
      var _a = this.offsetFromParent, left = _a.left, top = _a.top;
      if (!this.props.dragAxis || this.props.dragAxis === "both") {
        return this.props.onDrag(e, __assign(__assign({}, data2), { x: data2.x - left, y: data2.y - top }));
      } else if (this.props.dragAxis === "x") {
        return this.props.onDrag(e, __assign(__assign({}, data2), { x: data2.x + left, y: this.originalPosition.y + top, deltaY: 0 }));
      } else if (this.props.dragAxis === "y") {
        return this.props.onDrag(e, __assign(__assign({}, data2), { x: this.originalPosition.x + left, y: data2.y + top, deltaX: 0 }));
      }
    };
    Rnd2.prototype.onDragStop = function(e, data2) {
      if (!this.props.onDragStop)
        return;
      var _a = this.offsetFromParent, left = _a.left, top = _a.top;
      if (!this.props.dragAxis || this.props.dragAxis === "both") {
        return this.props.onDragStop(e, __assign(__assign({}, data2), { x: data2.x + left, y: data2.y + top }));
      } else if (this.props.dragAxis === "x") {
        return this.props.onDragStop(e, __assign(__assign({}, data2), { x: data2.x + left, y: this.originalPosition.y + top, deltaY: 0 }));
      } else if (this.props.dragAxis === "y") {
        return this.props.onDragStop(e, __assign(__assign({}, data2), { x: this.originalPosition.x + left, y: data2.y + top, deltaX: 0 }));
      }
    };
    Rnd2.prototype.onResizeStart = function(e, dir, elementRef) {
      e.stopPropagation();
      this.setState({
        resizing: true
      });
      var scale = this.props.scale;
      var offset2 = this.offsetFromParent;
      var pos = this.getDraggablePosition();
      this.resizingPosition = { x: pos.x + offset2.left, y: pos.y + offset2.top };
      this.originalPosition = pos;
      if (this.props.bounds) {
        var parent_1 = this.getParent();
        var boundary = void 0;
        if (this.props.bounds === "parent") {
          boundary = parent_1;
        } else if (this.props.bounds === "body") {
          boundary = document.body;
        } else if (this.props.bounds === "window") {
          boundary = window;
        } else if (typeof this.props.bounds === "string") {
          boundary = document.querySelector(this.props.bounds);
        } else if (this.props.bounds instanceof HTMLElement) {
          boundary = this.props.bounds;
        }
        var self_1 = this.getSelfElement();
        if (self_1 instanceof Element && (boundary instanceof HTMLElement || boundary === window) && parent_1 instanceof HTMLElement) {
          var _a = this.getMaxSizesFromProps(), maxWidth = _a.maxWidth, maxHeight = _a.maxHeight;
          var parentSize = this.getParentSize();
          if (maxWidth && typeof maxWidth === "string") {
            if (maxWidth.endsWith("%")) {
              var ratio = Number(maxWidth.replace("%", "")) / 100;
              maxWidth = parentSize.width * ratio;
            } else if (maxWidth.endsWith("px")) {
              maxWidth = Number(maxWidth.replace("px", ""));
            }
          }
          if (maxHeight && typeof maxHeight === "string") {
            if (maxHeight.endsWith("%")) {
              var ratio = Number(maxHeight.replace("%", "")) / 100;
              maxHeight = parentSize.width * ratio;
            } else if (maxHeight.endsWith("px")) {
              maxHeight = Number(maxHeight.replace("px", ""));
            }
          }
          var selfRect = self_1.getBoundingClientRect();
          var selfLeft = selfRect.left;
          var selfTop = selfRect.top;
          var boundaryRect = this.props.bounds === "window" ? { left: 0, top: 0 } : boundary.getBoundingClientRect();
          var boundaryLeft = boundaryRect.left;
          var boundaryTop = boundaryRect.top;
          var offsetWidth = this.getOffsetWidth(boundary);
          var offsetHeight = this.getOffsetHeight(boundary);
          var hasLeft = dir.toLowerCase().endsWith("left");
          var hasRight = dir.toLowerCase().endsWith("right");
          var hasTop = dir.startsWith("top");
          var hasBottom = dir.startsWith("bottom");
          if ((hasLeft || hasTop) && this.resizable) {
            var max = (selfLeft - boundaryLeft) / scale + this.resizable.size.width;
            this.setState({ maxWidth: max > Number(maxWidth) ? maxWidth : max });
          }
          if (hasRight || this.props.lockAspectRatio && !hasLeft && !hasTop) {
            var max = offsetWidth + (boundaryLeft - selfLeft) / scale;
            this.setState({ maxWidth: max > Number(maxWidth) ? maxWidth : max });
          }
          if ((hasTop || hasLeft) && this.resizable) {
            var max = (selfTop - boundaryTop) / scale + this.resizable.size.height;
            this.setState({
              maxHeight: max > Number(maxHeight) ? maxHeight : max
            });
          }
          if (hasBottom || this.props.lockAspectRatio && !hasTop && !hasLeft) {
            var max = offsetHeight + (boundaryTop - selfTop) / scale;
            this.setState({
              maxHeight: max > Number(maxHeight) ? maxHeight : max
            });
          }
        }
      } else {
        this.setState({
          maxWidth: this.props.maxWidth,
          maxHeight: this.props.maxHeight
        });
      }
      if (this.props.onResizeStart) {
        this.props.onResizeStart(e, dir, elementRef);
      }
    };
    Rnd2.prototype.onResize = function(e, direction, elementRef, delta) {
      var newPos = { x: this.originalPosition.x, y: this.originalPosition.y };
      var left = -delta.width;
      var top = -delta.height;
      var directions = ["top", "left", "topLeft", "bottomLeft", "topRight"];
      if (directions.indexOf(direction) !== -1) {
        if (direction === "bottomLeft") {
          newPos.x += left;
        } else if (direction === "topRight") {
          newPos.y += top;
        } else {
          newPos.x += left;
          newPos.y += top;
        }
      }
      if (newPos.x !== this.draggable.state.x || newPos.y !== this.draggable.state.y) {
        this.draggable.setState(newPos);
      }
      this.updateOffsetFromParent();
      var offset2 = this.offsetFromParent;
      var x = this.getDraggablePosition().x + offset2.left;
      var y = this.getDraggablePosition().y + offset2.top;
      this.resizingPosition = { x, y };
      if (!this.props.onResize)
        return;
      this.props.onResize(e, direction, elementRef, delta, {
        x,
        y
      });
    };
    Rnd2.prototype.onResizeStop = function(e, direction, elementRef, delta) {
      this.setState({
        resizing: false
      });
      var _a = this.getMaxSizesFromProps(), maxWidth = _a.maxWidth, maxHeight = _a.maxHeight;
      this.setState({ maxWidth, maxHeight });
      if (this.props.onResizeStop) {
        this.props.onResizeStop(e, direction, elementRef, delta, this.resizingPosition);
      }
    };
    Rnd2.prototype.updateSize = function(size) {
      if (!this.resizable)
        return;
      this.resizable.updateSize({ width: size.width, height: size.height });
    };
    Rnd2.prototype.updatePosition = function(position2) {
      this.draggable.setState(position2);
    };
    Rnd2.prototype.updateOffsetFromParent = function() {
      var scale = this.props.scale;
      var parent = this.getParent();
      var self2 = this.getSelfElement();
      if (!parent || self2 === null) {
        return {
          top: 0,
          left: 0
        };
      }
      var parentRect = parent.getBoundingClientRect();
      var parentLeft = parentRect.left;
      var parentTop = parentRect.top;
      var selfRect = self2.getBoundingClientRect();
      var position2 = this.getDraggablePosition();
      var scrollLeft = parent.scrollLeft;
      var scrollTop = parent.scrollTop;
      this.offsetFromParent = {
        left: selfRect.left - parentLeft + scrollLeft - position2.x * scale,
        top: selfRect.top - parentTop + scrollTop - position2.y * scale
      };
    };
    Rnd2.prototype.render = function() {
      var _a = this.props, disableDragging = _a.disableDragging, style2 = _a.style, dragHandleClassName = _a.dragHandleClassName, position2 = _a.position, onMouseDown2 = _a.onMouseDown, onMouseUp = _a.onMouseUp, dragAxis = _a.dragAxis, dragGrid = _a.dragGrid, bounds = _a.bounds, enableUserSelectHack = _a.enableUserSelectHack, cancel = _a.cancel, children = _a.children;
      _a.onResizeStart;
      _a.onResize;
      _a.onResizeStop;
      _a.onDragStart;
      _a.onDrag;
      _a.onDragStop;
      var resizeHandleStyles = _a.resizeHandleStyles, resizeHandleClasses = _a.resizeHandleClasses, resizeHandleComponent = _a.resizeHandleComponent, enableResizing = _a.enableResizing, resizeGrid = _a.resizeGrid, resizeHandleWrapperClass = _a.resizeHandleWrapperClass, resizeHandleWrapperStyle = _a.resizeHandleWrapperStyle, scale = _a.scale, allowAnyClick = _a.allowAnyClick, resizableProps = __rest(_a, ["disableDragging", "style", "dragHandleClassName", "position", "onMouseDown", "onMouseUp", "dragAxis", "dragGrid", "bounds", "enableUserSelectHack", "cancel", "children", "onResizeStart", "onResize", "onResizeStop", "onDragStart", "onDrag", "onDragStop", "resizeHandleStyles", "resizeHandleClasses", "resizeHandleComponent", "enableResizing", "resizeGrid", "resizeHandleWrapperClass", "resizeHandleWrapperStyle", "scale", "allowAnyClick"]);
      var defaultValue = this.props.default ? __assign({}, this.props.default) : void 0;
      delete resizableProps.default;
      var cursorStyle = disableDragging || dragHandleClassName ? { cursor: "auto" } : { cursor: "move" };
      var innerStyle = __assign(__assign(__assign({}, resizableStyle), cursorStyle), style2);
      var _b = this.offsetFromParent, left = _b.left, top = _b.top;
      var draggablePosition;
      if (position2) {
        draggablePosition = {
          x: position2.x - left,
          y: position2.y - top
        };
      }
      var pos = this.state.resizing ? void 0 : draggablePosition;
      var dragAxisOrUndefined = this.state.resizing ? "both" : dragAxis;
      return createElement(
        Draggable,
        { ref: this.refDraggable, handle: dragHandleClassName ? ".".concat(dragHandleClassName) : void 0, defaultPosition: defaultValue, onMouseDown: onMouseDown2, onMouseUp, onStart: this.onDragStart, onDrag: this.onDrag, onStop: this.onDragStop, axis: dragAxisOrUndefined, disabled: disableDragging, grid: dragGrid, bounds: bounds ? this.state.bounds : void 0, position: pos, enableUserSelectHack, cancel, scale, allowAnyClick, nodeRef: this.resizableElement },
        createElement(Resizable, __assign({}, resizableProps, { ref: this.refResizable, defaultSize: defaultValue, size: this.props.size, enable: typeof enableResizing === "boolean" ? getEnableResizingByFlag(enableResizing) : enableResizing, onResizeStart: this.onResizeStart, onResize: this.onResize, onResizeStop: this.onResizeStop, style: innerStyle, minWidth: this.props.minWidth, minHeight: this.props.minHeight, maxWidth: this.state.resizing ? this.state.maxWidth : this.props.maxWidth, maxHeight: this.state.resizing ? this.state.maxHeight : this.props.maxHeight, grid: resizeGrid, handleWrapperClass: resizeHandleWrapperClass, handleWrapperStyle: resizeHandleWrapperStyle, lockAspectRatio: this.props.lockAspectRatio, lockAspectRatioExtraWidth: this.props.lockAspectRatioExtraWidth, lockAspectRatioExtraHeight: this.props.lockAspectRatioExtraHeight, handleStyles: resizeHandleStyles, handleClasses: resizeHandleClasses, handleComponent: resizeHandleComponent, scale: this.props.scale }), children)
      );
    };
    Rnd2.defaultProps = {
      maxWidth: Number.MAX_SAFE_INTEGER,
      maxHeight: Number.MAX_SAFE_INTEGER,
      scale: 1,
      onResizeStart: function() {
      },
      onResize: function() {
      },
      onResizeStop: function() {
      },
      onDragStart: function() {
      },
      onDrag: function() {
      },
      onDragStop: function() {
      }
    };
    return Rnd2;
  }(PureComponent)
);
const NumericKeyboard = ({
  show = false,
  onChange,
  integer: integer4 = false,
  onClose,
  dragWrapperClassName = "App"
}) => {
  const [visible, setVisible] = useState(true);
  const [caretPosition, setCaretPosition] = useState(null);
  const [position2, setPosition] = useState({ x: 0, y: 0 });
  const [inputDom, setInputDom] = useState();
  const timer = useRef();
  useEffect(() => {
    setVisible(show ?? false);
  }, [show]);
  useEffect(() => {
    const overallClick = (e) => {
      if (e.target.tagName === "INPUT" && e.target.type === "text" && (!inputDom || e.target.id !== inputDom.id)) {
        setVisible(true);
        const inputDom2 = e.target;
        setInputDom(inputDom2);
      }
    };
    document.addEventListener("click", overallClick);
    return () => document == null ? void 0 : document.removeEventListener("click", overallClick);
  });
  useEffect(() => {
    const inputDomClick = (e) => {
      var _a;
      setCaretPosition((_a = e.target) == null ? void 0 : _a.selectionStart);
    };
    inputDom == null ? void 0 : inputDom.addEventListener("click", inputDomClick);
    return () => {
      inputDom == null ? void 0 : inputDom.removeEventListener("click", inputDomClick);
      if (timer.current) {
        clearTimeout(timer.current);
      }
    };
  }, [inputDom]);
  const updateCaretPos = (index2) => {
    setCaretPosition(index2);
    inputDom == null ? void 0 : inputDom.focus();
    timer.current = setTimeout(() => {
      inputDom == null ? void 0 : inputDom.setSelectionRange(index2, index2);
    }, 0);
  };
  const getUpdatedInput = (button) => {
    let output = (inputDom == null ? void 0 : inputDom.value) || "";
    if (button === "{bksp}") {
      output = removeAt(output);
    } else if (button === "{numspot}") {
      if (integer4)
        return;
      if (output.includes("."))
        return;
      output = addStringAt(output, ".");
    } else {
      output = addStringAt(output, button);
    }
    if (inputDom) {
      inputDom.value = output;
      const event = new Event("input", { bubbles: true });
      event.simulated = true;
      const tracker = inputDom._valueTracker;
      if (tracker) {
        tracker.setValue(inputDom);
      }
      inputDom.dispatchEvent(event);
    }
    onChange == null ? void 0 : onChange(output);
  };
  const removeAt = (source) => {
    const position22 = caretPosition ?? source.length;
    if (!position22 || position22 === 0) {
      return source;
    }
    const output = source.substr(0, position22 - 1) + source.substr(position22);
    updateCaretPos(position22 - 1);
    return output;
  };
  const addStringAt = (source, str) => {
    const position22 = caretPosition ?? source.length;
    let output;
    if (!position22 && position22 !== 0) {
      output = source + str;
    } else {
      output = [source.slice(0, position22), str, source.slice(position22)].join("");
    }
    updateCaretPos(position22 + str.length);
    return output;
  };
  return /* @__PURE__ */ jsx(
    Rnd,
    {
      style: { visibility: visible ? "visible" : "hidden" },
      className: styles$1.boardWrapper,
      size: { width: 210, height: 330 },
      position: position2,
      onDragStop: (_, d) => {
        setPosition({ x: d.x, y: d.y });
      },
      bounds: `.${dragWrapperClassName}`,
      dragHandleClassName: "drag-icon",
      enableResizing: false,
      children: /* @__PURE__ */ jsxs("div", { onMouseDown: (e) => e.preventDefault(), children: [
        /* @__PURE__ */ jsxs("div", { className: styles$1.optHeader, children: [
          /* @__PURE__ */ jsx("div", { className: `${styles$1.optBtn} drag-icon`, children: /* @__PURE__ */ jsx(DragOutlined$1, {}) }),
          /* @__PURE__ */ jsx(
            "div",
            {
              onClick: () => {
                setVisible(false);
                setInputDom(null);
                onClose == null ? void 0 : onClose();
              },
              className: styles$1.optBtn,
              children: /* @__PURE__ */ jsx(CaretDownFilled$1, {})
            }
          )
        ] }),
        /* @__PURE__ */ jsx("div", { className: styles$1.numContent, children: [...new Array(9)].map((_, i) => {
          const num = String(i + 1);
          return /* @__PURE__ */ jsx("div", { className: styles$1.numBtn, onClick: () => getUpdatedInput(num), children: num }, i);
        }) }),
        /* @__PURE__ */ jsxs("div", { className: styles$1.symbolFooter, children: [
          /* @__PURE__ */ jsx("div", { className: styles$1.symbolBtn, onClick: () => getUpdatedInput("{numspot}"), children: "." }),
          /* @__PURE__ */ jsx("div", { className: styles$1.symbolBtn, onClick: () => getUpdatedInput("0"), children: "0" }),
          /* @__PURE__ */ jsx("div", { className: styles$1.clearBtn, onClick: () => getUpdatedInput("{bksp}"), children: /* @__PURE__ */ jsx(CloseCircleOutlined$1, {}) })
        ] })
      ] })
    }
  );
};
const data = [
  {
    citycode: [],
    adcode: "410000",
    name: "河南省",
    center: "113.753094,34.767052",
    level: "province",
    districts: [
      {
        citycode: "0379",
        adcode: "410300",
        name: "洛阳市",
        center: "112.453895,34.619702",
        level: "city",
        districts: [
          {
            citycode: "0379",
            adcode: "410323",
            name: "新安县",
            center: "112.13246,34.728909",
            level: "district",
            districts: []
          },
          {
            citycode: "0379",
            adcode: "410325",
            name: "嵩县",
            center: "112.085432,34.134639",
            level: "district",
            districts: []
          },
          {
            citycode: "0379",
            adcode: "410326",
            name: "汝阳县",
            center: "112.473013,34.154283",
            level: "district",
            districts: []
          },
          {
            citycode: "0379",
            adcode: "410327",
            name: "宜阳县",
            center: "112.179187,34.51462",
            level: "district",
            districts: []
          },
          {
            citycode: "0379",
            adcode: "410328",
            name: "洛宁县",
            center: "111.652958,34.389371",
            level: "district",
            districts: []
          },
          {
            citycode: "0379",
            adcode: "410324",
            name: "栾川县",
            center: "111.615729,33.7857",
            level: "district",
            districts: []
          },
          {
            citycode: "0379",
            adcode: "410303",
            name: "西工区",
            center: "112.428183,34.659959",
            level: "district",
            districts: []
          },
          {
            citycode: "0379",
            adcode: "410304",
            name: "瀍河回族区",
            center: "112.500131,34.679773",
            level: "district",
            districts: []
          },
          {
            citycode: "0379",
            adcode: "410302",
            name: "老城区",
            center: "112.44671,34.698617",
            level: "district",
            districts: []
          },
          {
            citycode: "0379",
            adcode: "410329",
            name: "伊川县",
            center: "112.425751,34.421741",
            level: "district",
            districts: []
          },
          {
            citycode: "0379",
            adcode: "410307",
            name: "偃师区",
            center: "112.789375,34.72715",
            level: "district",
            districts: []
          },
          {
            citycode: "0379",
            adcode: "410308",
            name: "孟津区",
            center: "112.44525,34.825587",
            level: "district",
            districts: []
          },
          {
            citycode: "0379",
            adcode: "410311",
            name: "洛龙区",
            center: "112.463833,34.619711",
            level: "district",
            districts: []
          },
          {
            citycode: "0379",
            adcode: "410305",
            name: "涧西区",
            center: "112.395766,34.658177",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0398",
        adcode: "411200",
        name: "三门峡市",
        center: "111.200482,34.773196",
        level: "city",
        districts: [
          {
            citycode: "0398",
            adcode: "411202",
            name: "湖滨区",
            center: "111.188552,34.771296",
            level: "district",
            districts: []
          },
          {
            citycode: "0398",
            adcode: "411221",
            name: "渑池县",
            center: "111.761753,34.767937",
            level: "district",
            districts: []
          },
          {
            citycode: "0398",
            adcode: "411281",
            name: "义马市",
            center: "111.874726,34.747563",
            level: "district",
            districts: []
          },
          {
            citycode: "0398",
            adcode: "411203",
            name: "陕州区",
            center: "111.103252,34.72066",
            level: "district",
            districts: []
          },
          {
            citycode: "0398",
            adcode: "411224",
            name: "卢氏县",
            center: "111.04522,34.051866",
            level: "district",
            districts: []
          },
          {
            citycode: "0398",
            adcode: "411282",
            name: "灵宝市",
            center: "110.894225,34.517734",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0395",
        adcode: "411100",
        name: "漯河市",
        center: "114.0166,33.58038",
        level: "city",
        districts: [
          {
            citycode: "0395",
            adcode: "411122",
            name: "临颍县",
            center: "113.931121,33.828096",
            level: "district",
            districts: []
          },
          {
            citycode: "0395",
            adcode: "411104",
            name: "召陵区",
            center: "114.093879,33.586509",
            level: "district",
            districts: []
          },
          {
            citycode: "0395",
            adcode: "411102",
            name: "源汇区",
            center: "113.984164,33.572319",
            level: "district",
            districts: []
          },
          {
            citycode: "0395",
            adcode: "411103",
            name: "郾城区",
            center: "114.006596,33.587697",
            level: "district",
            districts: []
          },
          {
            citycode: "0395",
            adcode: "411121",
            name: "舞阳县",
            center: "113.609327,33.438259",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0374",
        adcode: "411000",
        name: "许昌市",
        center: "113.852004,34.03732",
        level: "city",
        districts: [
          {
            citycode: "0374",
            adcode: "411003",
            name: "建安区",
            center: "113.822869,34.124729",
            level: "district",
            districts: []
          },
          {
            citycode: "0374",
            adcode: "411025",
            name: "襄城县",
            center: "113.506904,33.851609",
            level: "district",
            districts: []
          },
          {
            citycode: "0374",
            adcode: "411002",
            name: "魏都区",
            center: "113.830826,34.047189",
            level: "district",
            districts: []
          },
          {
            citycode: "0374",
            adcode: "411024",
            name: "鄢陵县",
            center: "114.177329,34.102985",
            level: "district",
            districts: []
          },
          {
            citycode: "0374",
            adcode: "411081",
            name: "禹州市",
            center: "113.488715,34.142442",
            level: "district",
            districts: []
          },
          {
            citycode: "0374",
            adcode: "411082",
            name: "长葛市",
            center: "113.813972,34.195458",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0376",
        adcode: "411500",
        name: "信阳市",
        center: "114.091058,32.148624",
        level: "city",
        districts: [
          {
            citycode: "0376",
            adcode: "411502",
            name: "浉河区",
            center: "114.05867,32.116885",
            level: "district",
            districts: []
          },
          {
            citycode: "0376",
            adcode: "411525",
            name: "固始县",
            center: "115.654066,32.169239",
            level: "district",
            districts: []
          },
          {
            citycode: "0376",
            adcode: "411527",
            name: "淮滨县",
            center: "115.420101,32.474772",
            level: "district",
            districts: []
          },
          {
            citycode: "0376",
            adcode: "411523",
            name: "新县",
            center: "114.879309,31.643914",
            level: "district",
            districts: []
          },
          {
            citycode: "0376",
            adcode: "411522",
            name: "光山县",
            center: "114.91934,32.010736",
            level: "district",
            districts: []
          },
          {
            citycode: "0376",
            adcode: "411528",
            name: "息县",
            center: "114.740392,32.34312",
            level: "district",
            districts: []
          },
          {
            citycode: "0376",
            adcode: "411521",
            name: "罗山县",
            center: "114.512838,32.20436",
            level: "district",
            districts: []
          },
          {
            citycode: "0376",
            adcode: "411503",
            name: "平桥区",
            center: "114.125595,32.101005",
            level: "district",
            districts: []
          },
          {
            citycode: "0376",
            adcode: "411524",
            name: "商城县",
            center: "115.406894,31.79832",
            level: "district",
            districts: []
          },
          {
            citycode: "0376",
            adcode: "411526",
            name: "潢川县",
            center: "115.051683,32.131426",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0377",
        adcode: "411300",
        name: "南阳市",
        center: "112.528549,32.990218",
        level: "city",
        districts: [
          {
            citycode: "0377",
            adcode: "411303",
            name: "卧龙区",
            center: "112.5287888,32.98987657",
            level: "district",
            districts: []
          },
          {
            citycode: "0377",
            adcode: "411328",
            name: "唐河县",
            center: "112.80829,32.682464",
            level: "district",
            districts: []
          },
          {
            citycode: "0377",
            adcode: "411323",
            name: "西峡县",
            center: "111.473644,33.307272",
            level: "district",
            districts: []
          },
          {
            citycode: "0377",
            adcode: "411321",
            name: "南召县",
            center: "112.429277,33.489804",
            level: "district",
            districts: []
          },
          {
            citycode: "0377",
            adcode: "411324",
            name: "镇平县",
            center: "112.234571,33.033826",
            level: "district",
            districts: []
          },
          {
            citycode: "0377",
            adcode: "411326",
            name: "淅川县",
            center: "111.490902,33.137831",
            level: "district",
            districts: []
          },
          {
            citycode: "0377",
            adcode: "411330",
            name: "桐柏县",
            center: "113.428702,32.379164",
            level: "district",
            districts: []
          },
          {
            citycode: "0377",
            adcode: "411325",
            name: "内乡县",
            center: "111.849354,33.044698",
            level: "district",
            districts: []
          },
          {
            citycode: "0377",
            adcode: "411381",
            name: "邓州市",
            center: "112.08745,32.687732",
            level: "district",
            districts: []
          },
          {
            citycode: "0377",
            adcode: "411329",
            name: "新野县",
            center: "112.3601,32.521282",
            level: "district",
            districts: []
          },
          {
            citycode: "0377",
            adcode: "411327",
            name: "社旗县",
            center: "112.948183,33.056229",
            level: "district",
            districts: []
          },
          {
            citycode: "0377",
            adcode: "411302",
            name: "宛城区",
            center: "112.539506,33.003564",
            level: "district",
            districts: []
          },
          {
            citycode: "0377",
            adcode: "411322",
            name: "方城县",
            center: "113.012849,33.255387",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0396",
        adcode: "411700",
        name: "驻马店市",
        center: "114.021988,33.014038",
        level: "city",
        districts: [
          {
            citycode: "0396",
            adcode: "411728",
            name: "遂平县",
            center: "114.013323,33.146316",
            level: "district",
            districts: []
          },
          {
            citycode: "0396",
            adcode: "411725",
            name: "确山县",
            center: "114.016818,32.82134",
            level: "district",
            districts: []
          },
          {
            citycode: "0396",
            adcode: "411727",
            name: "汝南县",
            center: "114.362477,33.006808",
            level: "district",
            districts: []
          },
          {
            citycode: "0396",
            adcode: "411723",
            name: "平舆县",
            center: "114.618537,32.96344",
            level: "district",
            districts: []
          },
          {
            citycode: "0396",
            adcode: "411721",
            name: "西平县",
            center: "114.021492,33.387658",
            level: "district",
            districts: []
          },
          {
            citycode: "0396",
            adcode: "411726",
            name: "泌阳县",
            center: "113.327144,32.723974",
            level: "district",
            districts: []
          },
          {
            citycode: "0396",
            adcode: "411702",
            name: "驿城区",
            center: "113.993753,32.97455",
            level: "district",
            districts: []
          },
          {
            citycode: "0396",
            adcode: "411722",
            name: "上蔡县",
            center: "114.264381,33.262439",
            level: "district",
            districts: []
          },
          {
            citycode: "0396",
            adcode: "411729",
            name: "新蔡县",
            center: "114.965519,32.74488",
            level: "district",
            districts: []
          },
          {
            citycode: "0396",
            adcode: "411724",
            name: "正阳县",
            center: "114.392774,32.605697",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0394",
        adcode: "411600",
        name: "周口市",
        center: "114.701222,33.634652",
        level: "city",
        districts: [
          {
            citycode: "0394",
            adcode: "411623",
            name: "商水县",
            center: "114.608135,33.562072",
            level: "district",
            districts: []
          },
          {
            citycode: "0394",
            adcode: "411602",
            name: "川汇区",
            center: "114.650551,33.647679",
            level: "district",
            districts: []
          },
          {
            citycode: "0394",
            adcode: "411628",
            name: "鹿邑县",
            center: "115.484525,33.860698",
            level: "district",
            districts: []
          },
          {
            citycode: "0394",
            adcode: "411603",
            name: "淮阳区",
            center: "114.852604,33.731543",
            level: "district",
            districts: []
          },
          {
            citycode: "0394",
            adcode: "411622",
            name: "西华县",
            center: "114.529709,33.768277",
            level: "district",
            districts: []
          },
          {
            citycode: "0394",
            adcode: "411627",
            name: "太康县",
            center: "114.837946,34.064513",
            level: "district",
            districts: []
          },
          {
            citycode: "0394",
            adcode: "411624",
            name: "沈丘县",
            center: "115.098541,33.409805",
            level: "district",
            districts: []
          },
          {
            citycode: "0394",
            adcode: "411681",
            name: "项城市",
            center: "114.875128,33.465609",
            level: "district",
            districts: []
          },
          {
            citycode: "0394",
            adcode: "411621",
            name: "扶沟县",
            center: "114.394666,34.060062",
            level: "district",
            districts: []
          },
          {
            citycode: "0394",
            adcode: "411625",
            name: "郸城县",
            center: "115.177141,33.64601",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0372",
        adcode: "410500",
        name: "安阳市",
        center: "114.39248,36.098779",
        level: "city",
        districts: [
          {
            citycode: "0372",
            adcode: "410527",
            name: "内黄县",
            center: "114.90146,35.972016",
            level: "district",
            districts: []
          },
          {
            citycode: "0372",
            adcode: "410503",
            name: "北关区",
            center: "114.355742,36.10766",
            level: "district",
            districts: []
          },
          {
            citycode: "0372",
            adcode: "410523",
            name: "汤阴县",
            center: "114.357686,35.925155",
            level: "district",
            districts: []
          },
          {
            citycode: "0372",
            adcode: "410581",
            name: "林州市",
            center: "113.819275,36.084127",
            level: "district",
            districts: []
          },
          {
            citycode: "0372",
            adcode: "410526",
            name: "滑县",
            center: "114.517977,35.576128",
            level: "district",
            districts: []
          },
          {
            citycode: "0372",
            adcode: "410522",
            name: "安阳县",
            center: "114.462953,36.09211",
            level: "district",
            districts: []
          },
          {
            citycode: "0372",
            adcode: "410502",
            name: "文峰区",
            center: "114.356967,36.090593",
            level: "district",
            districts: []
          },
          {
            citycode: "0372",
            adcode: "410506",
            name: "龙安区",
            center: "114.301037,36.076937",
            level: "district",
            districts: []
          },
          {
            citycode: "0372",
            adcode: "410505",
            name: "殷都区",
            center: "114.303454,36.109938",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0392",
        adcode: "410600",
        name: "鹤壁市",
        center: "114.297305,35.748329",
        level: "city",
        districts: [
          {
            citycode: "0392",
            adcode: "410622",
            name: "淇县",
            center: "114.208851,35.622571",
            level: "district",
            districts: []
          },
          {
            citycode: "0392",
            adcode: "410603",
            name: "山城区",
            center: "114.184391,35.897862",
            level: "district",
            districts: []
          },
          {
            citycode: "0392",
            adcode: "410602",
            name: "鹤山区",
            center: "114.163133,35.954647",
            level: "district",
            districts: []
          },
          {
            citycode: "0392",
            adcode: "410611",
            name: "淇滨区",
            center: "114.298748,35.741763",
            level: "district",
            districts: []
          },
          {
            citycode: "0392",
            adcode: "410621",
            name: "浚县",
            center: "114.550611,35.677249",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0393",
        adcode: "410900",
        name: "濮阳市",
        center: "115.029246,35.762731",
        level: "city",
        districts: [
          {
            citycode: "0393",
            adcode: "410927",
            name: "台前县",
            center: "115.871671,35.970286",
            level: "district",
            districts: []
          },
          {
            citycode: "0393",
            adcode: "410922",
            name: "清丰县",
            center: "115.104602,35.886694",
            level: "district",
            districts: []
          },
          {
            citycode: "0393",
            adcode: "410926",
            name: "范县",
            center: "115.504081,35.85302",
            level: "district",
            districts: []
          },
          {
            citycode: "0393",
            adcode: "410923",
            name: "南乐县",
            center: "115.205876,36.070219",
            level: "district",
            districts: []
          },
          {
            citycode: "0393",
            adcode: "410928",
            name: "濮阳县",
            center: "115.029165,35.713113",
            level: "district",
            districts: []
          },
          {
            citycode: "0393",
            adcode: "410902",
            name: "华龙区",
            center: "115.074453,35.778289",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "1391",
        adcode: "419001",
        name: "济源市",
        center: "112.602347,35.069057",
        level: "city",
        districts: [
          {
            citycode: "1391",
            adcode: "419001",
            name: "坡头镇",
            center: "112.580245,35.063381",
            level: "street",
            districts: []
          },
          {
            citycode: "1391",
            adcode: "419001",
            name: "梨林镇",
            center: "112.753220,35.088183",
            level: "street",
            districts: []
          },
          {
            citycode: "1391",
            adcode: "419001",
            name: "思礼镇",
            center: "112.388078,35.210276",
            level: "street",
            districts: []
          },
          {
            citycode: "1391",
            adcode: "419001",
            name: "五龙口镇",
            center: "112.761264,35.195598",
            level: "street",
            districts: []
          },
          {
            citycode: "1391",
            adcode: "419001",
            name: "王屋镇",
            center: "112.168531,35.124376",
            level: "street",
            districts: []
          },
          {
            citycode: "1391",
            adcode: "419001",
            name: "玉泉街道",
            center: "112.623553,35.118882",
            level: "street",
            districts: []
          },
          {
            citycode: "1391",
            adcode: "419001",
            name: "轵城镇",
            center: "112.622105,35.062530",
            level: "street",
            districts: []
          },
          {
            citycode: "1391",
            adcode: "419001",
            name: "济水街道",
            center: "112.595477,35.094386",
            level: "street",
            districts: []
          },
          {
            citycode: "1391",
            adcode: "419001",
            name: "沁园街道",
            center: "112.593210,35.082244",
            level: "street",
            districts: []
          },
          {
            citycode: "1391",
            adcode: "419001",
            name: "下冶镇",
            center: "112.212297,35.113088",
            level: "street",
            districts: []
          },
          {
            citycode: "1391",
            adcode: "419001",
            name: "克井镇",
            center: "112.634910,35.255031",
            level: "street",
            districts: []
          },
          {
            citycode: "1391",
            adcode: "419001",
            name: "天坛街道",
            center: "112.566796,35.122905",
            level: "street",
            districts: []
          },
          {
            citycode: "1391",
            adcode: "419001",
            name: "邵原镇",
            center: "112.114016,35.270480",
            level: "street",
            districts: []
          },
          {
            citycode: "1391",
            adcode: "419001",
            name: "北海街道",
            center: "112.568975,35.111552",
            level: "street",
            districts: []
          },
          {
            citycode: "1391",
            adcode: "419001",
            name: "承留镇",
            center: "112.508612,35.024328",
            level: "street",
            districts: []
          },
          {
            citycode: "1391",
            adcode: "419001",
            name: "大峪镇",
            center: "112.318910,35.079253",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "0375",
        adcode: "410400",
        name: "平顶山市",
        center: "113.192595,33.766554",
        level: "city",
        districts: [
          {
            citycode: "0375",
            adcode: "410403",
            name: "卫东区",
            center: "113.335316,33.735388",
            level: "district",
            districts: []
          },
          {
            citycode: "0375",
            adcode: "410423",
            name: "鲁山县",
            center: "112.908052,33.738434",
            level: "district",
            districts: []
          },
          {
            citycode: "0375",
            adcode: "410411",
            name: "湛河区",
            center: "113.3208727,33.72568115",
            level: "district",
            districts: []
          },
          {
            citycode: "0375",
            adcode: "410481",
            name: "舞钢市",
            center: "113.516427,33.314147",
            level: "district",
            districts: []
          },
          {
            citycode: "0375",
            adcode: "410402",
            name: "新华区",
            center: "113.293977,33.737251",
            level: "district",
            districts: []
          },
          {
            citycode: "0375",
            adcode: "410482",
            name: "汝州市",
            center: "112.844696,34.16717",
            level: "district",
            districts: []
          },
          {
            citycode: "0375",
            adcode: "410422",
            name: "叶县",
            center: "113.357476,33.627437",
            level: "district",
            districts: []
          },
          {
            citycode: "0375",
            adcode: "410425",
            name: "郏县",
            center: "113.21261,33.971787",
            level: "district",
            districts: []
          },
          {
            citycode: "0375",
            adcode: "410421",
            name: "宝丰县",
            center: "113.054538,33.869159",
            level: "district",
            districts: []
          },
          {
            citycode: "0375",
            adcode: "410404",
            name: "石龙区",
            center: "112.898845,33.899247",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0378",
        adcode: "410200",
        name: "开封市",
        center: "114.314278,34.798083",
        level: "city",
        districts: [
          {
            citycode: "0378",
            adcode: "410221",
            name: "杞县",
            center: "114.782629,34.549731",
            level: "district",
            districts: []
          },
          {
            citycode: "0378",
            adcode: "410205",
            name: "禹王台区",
            center: "114.348105,34.777052",
            level: "district",
            districts: []
          },
          {
            citycode: "0378",
            adcode: "410222",
            name: "通许县",
            center: "114.47315,34.502053",
            level: "district",
            districts: []
          },
          {
            citycode: "0378",
            adcode: "410223",
            name: "尉氏县",
            center: "114.19305,34.411437",
            level: "district",
            districts: []
          },
          {
            citycode: "0378",
            adcode: "410204",
            name: "鼓楼区",
            center: "114.348356,34.788473",
            level: "district",
            districts: []
          },
          {
            citycode: "0378",
            adcode: "410225",
            name: "兰考县",
            center: "114.818228,34.856372",
            level: "district",
            districts: []
          },
          {
            citycode: "0378",
            adcode: "410203",
            name: "顺河回族区",
            center: "114.360824,34.795933",
            level: "district",
            districts: []
          },
          {
            citycode: "0378",
            adcode: "410212",
            name: "祥符区",
            center: "114.441406,34.757546",
            level: "district",
            districts: []
          },
          {
            citycode: "0378",
            adcode: "410202",
            name: "龙亭区",
            center: "114.355378,34.815515",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0371",
        adcode: "410100",
        name: "郑州市",
        center: "113.625351,34.746303",
        level: "city",
        districts: [
          {
            citycode: "0371",
            adcode: "410185",
            name: "登封市",
            center: "113.05056,34.454877",
            level: "district",
            districts: []
          },
          {
            citycode: "0371",
            adcode: "410183",
            name: "新密市",
            center: "113.390932,34.540216",
            level: "district",
            districts: []
          },
          {
            citycode: "0371",
            adcode: "410102",
            name: "中原区",
            center: "113.612966,34.74828",
            level: "district",
            districts: []
          },
          {
            citycode: "0371",
            adcode: "410108",
            name: "惠济区",
            center: "113.617055,34.867994",
            level: "district",
            districts: []
          },
          {
            citycode: "0371",
            adcode: "410105",
            name: "金水区",
            center: "113.6603,34.800415",
            level: "district",
            districts: []
          },
          {
            citycode: "0371",
            adcode: "410181",
            name: "巩义市",
            center: "113.022354,34.748207",
            level: "district",
            districts: []
          },
          {
            citycode: "0371",
            adcode: "410106",
            name: "上街区",
            center: "113.309185,34.803514",
            level: "district",
            districts: []
          },
          {
            citycode: "0371",
            adcode: "410184",
            name: "新郑市",
            center: "113.74024,34.396479",
            level: "district",
            districts: []
          },
          {
            citycode: "0371",
            adcode: "410104",
            name: "管城回族区",
            center: "113.677446,34.754436",
            level: "district",
            districts: []
          },
          {
            citycode: "0371",
            adcode: "410122",
            name: "中牟县",
            center: "113.975798,34.720535",
            level: "district",
            districts: []
          },
          {
            citycode: "0371",
            adcode: "410103",
            name: "二七区",
            center: "113.640177,34.724138",
            level: "district",
            districts: []
          },
          {
            citycode: "0371",
            adcode: "410182",
            name: "荥阳市",
            center: "113.383385,34.7866",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0370",
        adcode: "411400",
        name: "商丘市",
        center: "115.656358,34.415165",
        level: "city",
        districts: [
          {
            citycode: "0370",
            adcode: "411421",
            name: "民权县",
            center: "115.175019,34.648384",
            level: "district",
            districts: []
          },
          {
            citycode: "0370",
            adcode: "411423",
            name: "宁陵县",
            center: "115.314221,34.461226",
            level: "district",
            districts: []
          },
          {
            citycode: "0370",
            adcode: "411403",
            name: "睢阳区",
            center: "115.653258,34.389048",
            level: "district",
            districts: []
          },
          {
            citycode: "0370",
            adcode: "411402",
            name: "梁园区",
            center: "115.613609,34.444519",
            level: "district",
            districts: []
          },
          {
            citycode: "0370",
            adcode: "411422",
            name: "睢县",
            center: "115.071957,34.446572",
            level: "district",
            districts: []
          },
          {
            citycode: "0370",
            adcode: "411424",
            name: "柘城县",
            center: "115.305182,34.092015",
            level: "district",
            districts: []
          },
          {
            citycode: "0370",
            adcode: "411425",
            name: "虞城县",
            center: "115.828519,34.400868",
            level: "district",
            districts: []
          },
          {
            citycode: "0370",
            adcode: "411481",
            name: "永城市",
            center: "116.449864,33.929927",
            level: "district",
            districts: []
          },
          {
            citycode: "0370",
            adcode: "411426",
            name: "夏邑县",
            center: "116.131422,34.237801",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0391",
        adcode: "410800",
        name: "焦作市",
        center: "113.241902,35.215726",
        level: "city",
        districts: [
          {
            citycode: "0391",
            adcode: "410822",
            name: "博爱县",
            center: "113.064701,35.170332",
            level: "district",
            districts: []
          },
          {
            citycode: "0391",
            adcode: "410803",
            name: "中站区",
            center: "113.182847,35.237227",
            level: "district",
            districts: []
          },
          {
            citycode: "0391",
            adcode: "410802",
            name: "解放区",
            center: "113.230555,35.240403",
            level: "district",
            districts: []
          },
          {
            citycode: "0391",
            adcode: "410811",
            name: "山阳区",
            center: "113.254581,35.215054",
            level: "district",
            districts: []
          },
          {
            citycode: "0391",
            adcode: "410821",
            name: "修武县",
            center: "113.447862,35.22286",
            level: "district",
            districts: []
          },
          {
            citycode: "0391",
            adcode: "410883",
            name: "孟州市",
            center: "112.791372,34.907229",
            level: "district",
            districts: []
          },
          {
            citycode: "0391",
            adcode: "410804",
            name: "马村区",
            center: "113.32212,35.257084",
            level: "district",
            districts: []
          },
          {
            citycode: "0391",
            adcode: "410823",
            name: "武陟县",
            center: "113.401848,35.099458",
            level: "district",
            districts: []
          },
          {
            citycode: "0391",
            adcode: "410882",
            name: "沁阳市",
            center: "112.950873,35.087569",
            level: "district",
            districts: []
          },
          {
            citycode: "0391",
            adcode: "410825",
            name: "温县",
            center: "113.08067,34.93961",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0373",
        adcode: "410700",
        name: "新乡市",
        center: "113.92679,35.303589",
        level: "city",
        districts: [
          {
            citycode: "0373",
            adcode: "410704",
            name: "凤泉区",
            center: "113.916183,35.384428",
            level: "district",
            districts: []
          },
          {
            citycode: "0373",
            adcode: "410724",
            name: "获嘉县",
            center: "113.657551,35.260153",
            level: "district",
            districts: []
          },
          {
            citycode: "0373",
            adcode: "410727",
            name: "封丘县",
            center: "114.418907,35.041237",
            level: "district",
            districts: []
          },
          {
            citycode: "0373",
            adcode: "410781",
            name: "卫辉市",
            center: "114.064584,35.398357",
            level: "district",
            districts: []
          },
          {
            citycode: "0373",
            adcode: "410782",
            name: "辉县市",
            center: "113.80572,35.462964",
            level: "district",
            districts: []
          },
          {
            citycode: "0373",
            adcode: "410711",
            name: "牧野区",
            center: "113.908561,35.315614",
            level: "district",
            districts: []
          },
          {
            citycode: "0373",
            adcode: "410703",
            name: "卫滨区",
            center: "113.865666,35.301796",
            level: "district",
            districts: []
          },
          {
            citycode: "0373",
            adcode: "410783",
            name: "长垣市",
            center: "114.66885,35.201628",
            level: "district",
            districts: []
          },
          {
            citycode: "0373",
            adcode: "410721",
            name: "新乡县",
            center: "113.813884,35.170066",
            level: "district",
            districts: []
          },
          {
            citycode: "0373",
            adcode: "410725",
            name: "原阳县",
            center: "113.939829,35.066873",
            level: "district",
            districts: []
          },
          {
            citycode: "0373",
            adcode: "410726",
            name: "延津县",
            center: "114.205624,35.165876",
            level: "district",
            districts: []
          },
          {
            citycode: "0373",
            adcode: "410702",
            name: "红旗区",
            center: "113.875211,35.302952",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "440000",
    name: "广东省",
    center: "113.266887,23.133306",
    level: "province",
    districts: [
      {
        citycode: "0754",
        adcode: "440500",
        name: "汕头市",
        center: "116.681956,23.354152",
        level: "city",
        districts: [
          {
            citycode: "0754",
            adcode: "440515",
            name: "澄海区",
            center: "116.755945,23.466314",
            level: "district",
            districts: []
          },
          {
            citycode: "0754",
            adcode: "440523",
            name: "南澳县",
            center: "117.023482,23.421658",
            level: "district",
            districts: []
          },
          {
            citycode: "0754",
            adcode: "440512",
            name: "濠江区",
            center: "116.726701,23.286605",
            level: "district",
            districts: []
          },
          {
            citycode: "0754",
            adcode: "440514",
            name: "潮南区",
            center: "116.439105,23.239196",
            level: "district",
            districts: []
          },
          {
            citycode: "0754",
            adcode: "440513",
            name: "潮阳区",
            center: "116.601677,23.264923",
            level: "district",
            districts: []
          },
          {
            citycode: "0754",
            adcode: "440507",
            name: "龙湖区",
            center: "116.716464,23.372211",
            level: "district",
            districts: []
          },
          {
            citycode: "0754",
            adcode: "440511",
            name: "金平区",
            center: "116.70341,23.365716",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0757",
        adcode: "440600",
        name: "佛山市",
        center: "113.121586,23.021351",
        level: "city",
        districts: [
          {
            citycode: "0757",
            adcode: "440608",
            name: "高明区",
            center: "112.892573,22.900047",
            level: "district",
            districts: []
          },
          {
            citycode: "0757",
            adcode: "440607",
            name: "三水区",
            center: "112.897271,23.156675",
            level: "district",
            districts: []
          },
          {
            citycode: "0757",
            adcode: "440606",
            name: "顺德区",
            center: "113.293197,22.805413",
            level: "district",
            districts: []
          },
          {
            citycode: "0757",
            adcode: "440605",
            name: "南海区",
            center: "113.143246,23.028875",
            level: "district",
            districts: []
          },
          {
            citycode: "0757",
            adcode: "440604",
            name: "禅城区",
            center: "113.122532,23.009475",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0758",
        adcode: "441200",
        name: "肇庆市",
        center: "112.465245,23.047747",
        level: "city",
        districts: [
          {
            citycode: "0758",
            adcode: "441224",
            name: "怀集县",
            center: "112.166908,23.920806",
            level: "district",
            districts: []
          },
          {
            citycode: "0758",
            adcode: "441225",
            name: "封开县",
            center: "111.512177,23.423928",
            level: "district",
            districts: []
          },
          {
            citycode: "0758",
            adcode: "441223",
            name: "广宁县",
            center: "112.440694,23.634808",
            level: "district",
            districts: []
          },
          {
            citycode: "0758",
            adcode: "441284",
            name: "四会市",
            center: "112.734309,23.326991",
            level: "district",
            districts: []
          },
          {
            citycode: "0758",
            adcode: "441226",
            name: "德庆县",
            center: "111.785544,23.145035",
            level: "district",
            districts: []
          },
          {
            citycode: "0758",
            adcode: "441203",
            name: "鼎湖区",
            center: "112.56738,23.159062",
            level: "district",
            districts: []
          },
          {
            citycode: "0758",
            adcode: "441202",
            name: "端州区",
            center: "112.485577,23.051847",
            level: "district",
            districts: []
          },
          {
            citycode: "0758",
            adcode: "441204",
            name: "高要区",
            center: "112.458055,23.02474",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0752",
        adcode: "441300",
        name: "惠州市",
        center: "114.415587,23.112368",
        level: "city",
        districts: [
          {
            citycode: "0752",
            adcode: "441324",
            name: "龙门县",
            center: "114.254898,23.727873",
            level: "district",
            districts: []
          },
          {
            citycode: "0752",
            adcode: "441322",
            name: "博罗县",
            center: "114.289602,23.172587",
            level: "district",
            districts: []
          },
          {
            citycode: "0752",
            adcode: "441323",
            name: "惠东县",
            center: "114.720136,22.984831",
            level: "district",
            districts: []
          },
          {
            citycode: "0752",
            adcode: "441303",
            name: "惠阳区",
            center: "114.456107,22.789431",
            level: "district",
            districts: []
          },
          {
            citycode: "0752",
            adcode: "441302",
            name: "惠城区",
            center: "114.382526,23.084657",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0755",
        adcode: "440300",
        name: "深圳市",
        center: "114.057939,22.543527",
        level: "city",
        districts: [
          {
            citycode: "0755",
            adcode: "440306",
            name: "宝安区",
            center: "113.883831,22.554986",
            level: "district",
            districts: []
          },
          {
            citycode: "0755",
            adcode: "440305",
            name: "南山区",
            center: "113.930478,22.533191",
            level: "district",
            districts: []
          },
          {
            citycode: "0755",
            adcode: "440304",
            name: "福田区",
            center: "114.055198,22.520922",
            level: "district",
            districts: []
          },
          {
            citycode: "0755",
            adcode: "440307",
            name: "龙岗区",
            center: "114.246884,22.720889",
            level: "district",
            districts: []
          },
          {
            citycode: "0755",
            adcode: "440311",
            name: "光明区",
            center: "113.936059,22.74875",
            level: "district",
            districts: []
          },
          {
            citycode: "0755",
            adcode: "440308",
            name: "盐田区",
            center: "114.236739,22.557001",
            level: "district",
            districts: []
          },
          {
            citycode: "0755",
            adcode: "440310",
            name: "坪山区",
            center: "114.350844,22.708786",
            level: "district",
            districts: []
          },
          {
            citycode: "0755",
            adcode: "440309",
            name: "龙华区",
            center: "114.04491,22.696735",
            level: "district",
            districts: []
          },
          {
            citycode: "0755",
            adcode: "440303",
            name: "罗湖区",
            center: "114.131611,22.548309",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0756",
        adcode: "440400",
        name: "珠海市",
        center: "113.576892,22.271644",
        level: "city",
        districts: [
          {
            citycode: "0756",
            adcode: "440403",
            name: "斗门区",
            center: "113.296228,22.209134",
            level: "district",
            districts: []
          },
          {
            citycode: "0756",
            adcode: "440402",
            name: "香洲区",
            center: "113.543372,22.265635",
            level: "district",
            districts: []
          },
          {
            citycode: "0756",
            adcode: "440404",
            name: "金湾区",
            center: "113.363224,22.146717",
            level: "district",
            districts: []
          },
          {
            citycode: [],
            adcode: "440499",
            name: "澳门大学横琴校区(由澳门实施管辖)",
            center: "113.548956,22.126197",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0759",
        adcode: "440800",
        name: "湛江市",
        center: "110.357538,21.270108",
        level: "city",
        districts: [
          {
            citycode: "0759",
            adcode: "440881",
            name: "廉江市",
            center: "110.286109,21.609988",
            level: "district",
            districts: []
          },
          {
            citycode: "0759",
            adcode: "440883",
            name: "吴川市",
            center: "110.779361,21.440763",
            level: "district",
            districts: []
          },
          {
            citycode: "0759",
            adcode: "440882",
            name: "雷州市",
            center: "110.097011,20.914548",
            level: "district",
            districts: []
          },
          {
            citycode: "0759",
            adcode: "440811",
            name: "麻章区",
            center: "110.333833,21.26437",
            level: "district",
            districts: []
          },
          {
            citycode: "0759",
            adcode: "440825",
            name: "徐闻县",
            center: "110.17595,20.325969",
            level: "district",
            districts: []
          },
          {
            citycode: "0759",
            adcode: "440804",
            name: "坡头区",
            center: "110.455192,21.244405",
            level: "district",
            districts: []
          },
          {
            citycode: "0759",
            adcode: "440803",
            name: "霞山区",
            center: "110.397721,21.192463",
            level: "district",
            districts: []
          },
          {
            citycode: "0759",
            adcode: "440823",
            name: "遂溪县",
            center: "110.25043,21.378371",
            level: "district",
            districts: []
          },
          {
            citycode: "0759",
            adcode: "440802",
            name: "赤坎区",
            center: "110.365592,21.265948",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0750",
        adcode: "440700",
        name: "江门市",
        center: "113.081548,22.578948",
        level: "city",
        districts: [
          {
            citycode: "0750",
            adcode: "440784",
            name: "鹤山市",
            center: "112.964203,22.765912",
            level: "district",
            districts: []
          },
          {
            citycode: "0750",
            adcode: "440783",
            name: "开平市",
            center: "112.698113,22.377378",
            level: "district",
            districts: []
          },
          {
            citycode: "0750",
            adcode: "440781",
            name: "台山市",
            center: "112.793812,22.251947",
            level: "district",
            districts: []
          },
          {
            citycode: "0750",
            adcode: "440785",
            name: "恩平市",
            center: "112.304904,22.183743",
            level: "district",
            districts: []
          },
          {
            citycode: "0750",
            adcode: "440704",
            name: "江海区",
            center: "113.111029,22.561301",
            level: "district",
            districts: []
          },
          {
            citycode: "0750",
            adcode: "440705",
            name: "新会区",
            center: "113.034454,22.458519",
            level: "district",
            districts: []
          },
          {
            citycode: "0750",
            adcode: "440703",
            name: "蓬江区",
            center: "113.078914,22.595285",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0662",
        adcode: "441700",
        name: "阳江市",
        center: "111.98343,21.856853",
        level: "city",
        districts: [
          {
            citycode: "0662",
            adcode: "441781",
            name: "阳春市",
            center: "111.791587,22.17041",
            level: "district",
            districts: []
          },
          {
            citycode: "0662",
            adcode: "441721",
            name: "阳西县",
            center: "111.617696,21.753935",
            level: "district",
            districts: []
          },
          {
            citycode: "0662",
            adcode: "441702",
            name: "江城区",
            center: "111.95486,21.862451",
            level: "district",
            districts: []
          },
          {
            citycode: "0662",
            adcode: "441704",
            name: "阳东区",
            center: "112.005586,21.869081",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0668",
        adcode: "440900",
        name: "茂名市",
        center: "110.925533,21.662728",
        level: "city",
        districts: [
          {
            citycode: "0668",
            adcode: "440982",
            name: "化州市",
            center: "110.639581,21.664483",
            level: "district",
            districts: []
          },
          {
            citycode: "0668",
            adcode: "440904",
            name: "电白区",
            center: "111.013368,21.513946",
            level: "district",
            districts: []
          },
          {
            citycode: "0668",
            adcode: "440983",
            name: "信宜市",
            center: "110.946866,22.354887",
            level: "district",
            districts: []
          },
          {
            citycode: "0668",
            adcode: "440902",
            name: "茂南区",
            center: "110.918566,21.641661",
            level: "district",
            districts: []
          },
          {
            citycode: "0668",
            adcode: "440981",
            name: "高州市",
            center: "110.853169,21.918017",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0660",
        adcode: "441500",
        name: "汕尾市",
        center: "115.375557,22.787204",
        level: "city",
        districts: [
          {
            citycode: "0660",
            adcode: "441523",
            name: "陆河县",
            center: "115.659978,23.301557",
            level: "district",
            districts: []
          },
          {
            citycode: "0660",
            adcode: "441502",
            name: "城区",
            center: "115.36522,22.779204",
            level: "district",
            districts: []
          },
          {
            citycode: "0660",
            adcode: "441581",
            name: "陆丰市",
            center: "115.652142,22.91874",
            level: "district",
            districts: []
          },
          {
            citycode: "0660",
            adcode: "441521",
            name: "海丰县",
            center: "115.322974,22.967212",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0766",
        adcode: "445300",
        name: "云浮市",
        center: "112.044524,22.915163",
        level: "city",
        districts: [
          {
            citycode: "0766",
            adcode: "445322",
            name: "郁南县",
            center: "111.535387,23.234561",
            level: "district",
            districts: []
          },
          {
            citycode: "0766",
            adcode: "445381",
            name: "罗定市",
            center: "111.569788,22.768345",
            level: "district",
            districts: []
          },
          {
            citycode: "0766",
            adcode: "445321",
            name: "新兴县",
            center: "112.225174,22.695915",
            level: "district",
            districts: []
          },
          {
            citycode: "0766",
            adcode: "445303",
            name: "云安区",
            center: "112.002947,23.070334",
            level: "district",
            districts: []
          },
          {
            citycode: "0766",
            adcode: "445302",
            name: "云城区",
            center: "112.043945,22.92815",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0762",
        adcode: "441600",
        name: "河源市",
        center: "114.700215,23.744276",
        level: "city",
        districts: [
          {
            citycode: "0762",
            adcode: "441623",
            name: "连平县",
            center: "114.488358,24.369552",
            level: "district",
            districts: []
          },
          {
            citycode: "0762",
            adcode: "441621",
            name: "紫金县",
            center: "115.183814,23.635597",
            level: "district",
            districts: []
          },
          {
            citycode: "0762",
            adcode: "441625",
            name: "东源县",
            center: "114.7466,23.790079",
            level: "district",
            districts: []
          },
          {
            citycode: "0762",
            adcode: "441602",
            name: "源城区",
            center: "114.703305,23.734055",
            level: "district",
            districts: []
          },
          {
            citycode: "0762",
            adcode: "441624",
            name: "和平县",
            center: "114.935634,24.469177",
            level: "district",
            districts: []
          },
          {
            citycode: "0762",
            adcode: "441622",
            name: "龙川县",
            center: "115.26002,24.100599",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0768",
        adcode: "445100",
        name: "潮州市",
        center: "116.621901,23.657662",
        level: "city",
        districts: [
          {
            citycode: "0768",
            adcode: "445122",
            name: "饶平县",
            center: "117.0045,23.663294",
            level: "district",
            districts: []
          },
          {
            citycode: "0768",
            adcode: "445102",
            name: "湘桥区",
            center: "116.628343,23.675104",
            level: "district",
            districts: []
          },
          {
            citycode: "0768",
            adcode: "445103",
            name: "潮安区",
            center: "116.676971,23.463598",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0663",
        adcode: "445200",
        name: "揭阳市",
        center: "116.372732,23.550968",
        level: "city",
        districts: [
          {
            citycode: "0663",
            adcode: "445224",
            name: "惠来县",
            center: "116.295038,23.033889",
            level: "district",
            districts: []
          },
          {
            citycode: "0663",
            adcode: "445222",
            name: "揭西县",
            center: "115.841742,23.431314",
            level: "district",
            districts: []
          },
          {
            citycode: "0663",
            adcode: "445202",
            name: "榕城区",
            center: "116.36714,23.525918",
            level: "district",
            districts: []
          },
          {
            citycode: "0663",
            adcode: "445281",
            name: "普宁市",
            center: "116.165646,23.297742",
            level: "district",
            districts: []
          },
          {
            citycode: "0663",
            adcode: "445203",
            name: "揭东区",
            center: "116.411928,23.567252",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0751",
        adcode: "440200",
        name: "韶关市",
        center: "113.597324,24.810977",
        level: "city",
        districts: [
          {
            citycode: "0751",
            adcode: "440224",
            name: "仁化县",
            center: "113.749175,25.085764",
            level: "district",
            districts: []
          },
          {
            citycode: "0751",
            adcode: "440232",
            name: "乳源瑶族自治县",
            center: "113.275875,24.775856",
            level: "district",
            districts: []
          },
          {
            citycode: "0751",
            adcode: "440204",
            name: "浈江区",
            center: "113.611077,24.804898",
            level: "district",
            districts: []
          },
          {
            citycode: "0751",
            adcode: "440282",
            name: "南雄市",
            center: "114.31184,25.117653",
            level: "district",
            districts: []
          },
          {
            citycode: "0751",
            adcode: "440222",
            name: "始兴县",
            center: "114.061998,24.953908",
            level: "district",
            districts: []
          },
          {
            citycode: "0751",
            adcode: "440229",
            name: "翁源县",
            center: "114.129986,24.350581",
            level: "district",
            districts: []
          },
          {
            citycode: "0751",
            adcode: "440203",
            name: "武江区",
            center: "113.58792,24.7929",
            level: "district",
            districts: []
          },
          {
            citycode: "0751",
            adcode: "440205",
            name: "曲江区",
            center: "113.604591,24.682826",
            level: "district",
            districts: []
          },
          {
            citycode: "0751",
            adcode: "440233",
            name: "新丰县",
            center: "114.206641,24.059909",
            level: "district",
            districts: []
          },
          {
            citycode: "0751",
            adcode: "440281",
            name: "乐昌市",
            center: "113.347669,25.129892",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0763",
        adcode: "441800",
        name: "清远市",
        center: "113.056098,23.682064",
        level: "city",
        districts: [
          {
            citycode: "0763",
            adcode: "441882",
            name: "连州市",
            center: "112.377255,24.780873",
            level: "district",
            districts: []
          },
          {
            citycode: "0763",
            adcode: "441825",
            name: "连山壮族瑶族自治县",
            center: "112.093726,24.570553",
            level: "district",
            districts: []
          },
          {
            citycode: "0763",
            adcode: "441826",
            name: "连南瑶族自治县",
            center: "112.287212,24.725953",
            level: "district",
            districts: []
          },
          {
            citycode: "0763",
            adcode: "441881",
            name: "英德市",
            center: "113.401827,24.20716",
            level: "district",
            districts: []
          },
          {
            citycode: "0763",
            adcode: "441823",
            name: "阳山县",
            center: "112.641199,24.465234",
            level: "district",
            districts: []
          },
          {
            citycode: "0763",
            adcode: "441803",
            name: "清新区",
            center: "113.017747,23.734677",
            level: "district",
            districts: []
          },
          {
            citycode: "0763",
            adcode: "441802",
            name: "清城区",
            center: "113.062612,23.697889",
            level: "district",
            districts: []
          },
          {
            citycode: "0763",
            adcode: "441821",
            name: "佛冈县",
            center: "113.531559,23.879455",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "020",
        adcode: "440100",
        name: "广州市",
        center: "113.264499,23.130061",
        level: "city",
        districts: [
          {
            citycode: "020",
            adcode: "440115",
            name: "南沙区",
            center: "113.525178,22.801435",
            level: "district",
            districts: []
          },
          {
            citycode: "020",
            adcode: "440105",
            name: "海珠区",
            center: "113.317412,23.084003",
            level: "district",
            districts: []
          },
          {
            citycode: "020",
            adcode: "440113",
            name: "番禺区",
            center: "113.383917,22.93756",
            level: "district",
            districts: []
          },
          {
            citycode: "020",
            adcode: "440104",
            name: "越秀区",
            center: "113.267065,23.128673",
            level: "district",
            districts: []
          },
          {
            citycode: "020",
            adcode: "440103",
            name: "荔湾区",
            center: "113.218998,23.107123",
            level: "district",
            districts: []
          },
          {
            citycode: "020",
            adcode: "440114",
            name: "花都区",
            center: "113.220125,23.404326",
            level: "district",
            districts: []
          },
          {
            citycode: "020",
            adcode: "440117",
            name: "从化区",
            center: "113.586329,23.54915",
            level: "district",
            districts: []
          },
          {
            citycode: "020",
            adcode: "440118",
            name: "增城区",
            center: "113.810734,23.261452",
            level: "district",
            districts: []
          },
          {
            citycode: "020",
            adcode: "440106",
            name: "天河区",
            center: "113.361597,23.124817",
            level: "district",
            districts: []
          },
          {
            citycode: "020",
            adcode: "440112",
            name: "黄埔区",
            center: "113.480613,23.181355",
            level: "district",
            districts: []
          },
          {
            citycode: "020",
            adcode: "440111",
            name: "白云区",
            center: "113.2732,23.157159",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0760",
        adcode: "442000",
        name: "中山市",
        center: "113.392517,22.517024",
        level: "city",
        districts: [
          {
            citycode: "0760",
            adcode: "442000",
            name: "横栏镇",
            center: "113.223630,22.604755",
            level: "street",
            districts: []
          },
          {
            citycode: "0760",
            adcode: "442000",
            name: "小榄镇",
            center: "113.320629,22.560691",
            level: "street",
            districts: []
          },
          {
            citycode: "0760",
            adcode: "442000",
            name: "神湾镇",
            center: "113.376318,22.276818",
            level: "street",
            districts: []
          },
          {
            citycode: "0760",
            adcode: "442000",
            name: "古镇镇",
            center: "113.221289,22.609652",
            level: "street",
            districts: []
          },
          {
            citycode: "0760",
            adcode: "442000",
            name: "港口镇",
            center: "113.354019,22.602694",
            level: "street",
            districts: []
          },
          {
            citycode: "0760",
            adcode: "442000",
            name: "三乡镇",
            center: "113.431869,22.387876",
            level: "street",
            districts: []
          },
          {
            citycode: "0760",
            adcode: "442000",
            name: "石岐街道",
            center: "113.404120,22.548351",
            level: "street",
            districts: []
          },
          {
            citycode: "0760",
            adcode: "442000",
            name: "大涌镇",
            center: "113.296691,22.483379",
            level: "street",
            districts: []
          },
          {
            citycode: "0760",
            adcode: "442000",
            name: "阜沙镇",
            center: "113.340305,22.640609",
            level: "street",
            districts: []
          },
          {
            citycode: "0760",
            adcode: "442000",
            name: "西区街道",
            center: "113.314421,22.564923",
            level: "street",
            districts: []
          },
          {
            citycode: "0760",
            adcode: "442000",
            name: "沙溪镇",
            center: "113.343971,22.524791",
            level: "street",
            districts: []
          },
          {
            citycode: "0760",
            adcode: "442000",
            name: "东凤镇",
            center: "113.307919,22.680266",
            level: "street",
            districts: []
          },
          {
            citycode: "0760",
            adcode: "442000",
            name: "坦洲镇",
            center: "113.379236,22.286488",
            level: "street",
            districts: []
          },
          {
            citycode: "0760",
            adcode: "442000",
            name: "南区街道",
            center: "113.367676,22.488858",
            level: "street",
            districts: []
          },
          {
            citycode: "0760",
            adcode: "442000",
            name: "三角镇",
            center: "113.400593,22.640197",
            level: "street",
            districts: []
          },
          {
            citycode: "0760",
            adcode: "442000",
            name: "五桂山街道",
            center: "113.476817,22.428448",
            level: "street",
            districts: []
          },
          {
            citycode: "0760",
            adcode: "442000",
            name: "板芙镇",
            center: "113.368695,22.406764",
            level: "street",
            districts: []
          },
          {
            citycode: "0760",
            adcode: "442000",
            name: "南头镇",
            center: "113.299916,22.683684",
            level: "street",
            districts: []
          },
          {
            citycode: "0760",
            adcode: "442000",
            name: "中山港街道",
            center: "113.418677,22.549913",
            level: "street",
            districts: []
          },
          {
            citycode: "0760",
            adcode: "442000",
            name: "黄圃镇",
            center: "113.359373,22.681261",
            level: "street",
            districts: []
          },
          {
            citycode: "0760",
            adcode: "442000",
            name: "南朗街道",
            center: "113.486698,22.525740",
            level: "street",
            districts: []
          },
          {
            citycode: "0760",
            adcode: "442000",
            name: "民众街道",
            center: "113.472738,22.653889",
            level: "street",
            districts: []
          },
          {
            citycode: "0760",
            adcode: "442000",
            name: "东区街道",
            center: "113.436188,22.514086",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "0769",
        adcode: "441900",
        name: "东莞市",
        center: "113.751884,23.021016",
        level: "city",
        districts: [
          {
            citycode: "0769",
            adcode: "441900",
            name: "黄江镇",
            center: "113.983316,22.883915",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "清溪镇",
            center: "114.109028,22.864049",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "桥头镇",
            center: "114.065029,23.031536",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "厚街镇",
            center: "113.776452,22.909733",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "洪梅镇",
            center: "113.606888,23.015507",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "石龙镇",
            center: "113.859537,23.089791",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "虎门镇",
            center: "113.810219,22.851420",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "高埗镇",
            center: "113.772920,23.100117",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "石碣镇",
            center: "113.768285,23.088689",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "麻涌镇",
            center: "113.616702,23.088653",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "塘厦镇",
            center: "114.062352,22.815564",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "望牛墩镇",
            center: "113.675238,23.067562",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "道滘镇",
            center: "113.687246,23.004094",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "万江街道",
            center: "113.714249,23.004871",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "莞城街道",
            center: "113.756157,23.026359",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "企石镇",
            center: "113.989933,23.054588",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "东坑镇",
            center: "113.921005,22.989113",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "大岭山镇",
            center: "113.806239,22.948285",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "东城街道",
            center: "113.772060,22.941938",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "南城街道",
            center: "113.768809,22.941355",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "谢岗镇",
            center: "114.171775,22.984642",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "樟木头镇",
            center: "114.015449,22.869270",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "常平镇",
            center: "114.041069,23.007892",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "凤岗镇",
            center: "114.139781,22.777948",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "寮步镇",
            center: "113.917593,22.981271",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "沙田镇",
            center: "113.582201,22.942601",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "大朗镇",
            center: "113.947048,22.865074",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "横沥镇",
            center: "114.030270,23.035086",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "石排镇",
            center: "113.989827,23.069114",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "茶山镇",
            center: "113.840966,23.092760",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "中堂镇",
            center: "113.612748,23.042585",
            level: "street",
            districts: []
          },
          {
            citycode: "0769",
            adcode: "441900",
            name: "长安镇",
            center: "113.794608,22.836080",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "0753",
        adcode: "441400",
        name: "梅州市",
        center: "116.122046,24.288832",
        level: "city",
        districts: [
          {
            citycode: "0753",
            adcode: "441426",
            name: "平远县",
            center: "115.891235,24.566928",
            level: "district",
            districts: []
          },
          {
            citycode: "0753",
            adcode: "441427",
            name: "蕉岭县",
            center: "116.171477,24.658963",
            level: "district",
            districts: []
          },
          {
            citycode: "0753",
            adcode: "441481",
            name: "兴宁市",
            center: "115.731133,24.137296",
            level: "district",
            districts: []
          },
          {
            citycode: "0753",
            adcode: "441422",
            name: "大埔县",
            center: "116.694825,24.347037",
            level: "district",
            districts: []
          },
          {
            citycode: "0753",
            adcode: "441424",
            name: "五华县",
            center: "115.775751,23.932568",
            level: "district",
            districts: []
          },
          {
            citycode: "0753",
            adcode: "441403",
            name: "梅县区",
            center: "116.081395,24.266191",
            level: "district",
            districts: []
          },
          {
            citycode: "0753",
            adcode: "441402",
            name: "梅江区",
            center: "116.116686,24.31065",
            level: "district",
            districts: []
          },
          {
            citycode: "0753",
            adcode: "441423",
            name: "丰顺县",
            center: "116.181895,23.739364",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "150000",
    name: "内蒙古自治区",
    center: "111.765226,40.818233",
    level: "province",
    districts: [
      {
        citycode: "0473",
        adcode: "150300",
        name: "乌海市",
        center: "106.79415,39.655048",
        level: "city",
        districts: [
          {
            citycode: "0473",
            adcode: "150304",
            name: "乌达区",
            center: "106.726043,39.505609",
            level: "district",
            districts: []
          },
          {
            citycode: "0473",
            adcode: "150302",
            name: "海勃湾区",
            center: "106.8228,39.690873",
            level: "district",
            districts: []
          },
          {
            citycode: "0473",
            adcode: "150303",
            name: "海南区",
            center: "106.891472,39.441803",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0478",
        adcode: "150800",
        name: "巴彦淖尔市",
        center: "107.387767,40.742987",
        level: "city",
        districts: [
          {
            citycode: "0478",
            adcode: "150824",
            name: "乌拉特中旗",
            center: "108.513653,41.58813",
            level: "district",
            districts: []
          },
          {
            citycode: "0478",
            adcode: "150821",
            name: "五原县",
            center: "108.267466,41.088446",
            level: "district",
            districts: []
          },
          {
            citycode: "0478",
            adcode: "150822",
            name: "磴口县",
            center: "107.008288,40.330534",
            level: "district",
            districts: []
          },
          {
            citycode: "0478",
            adcode: "150823",
            name: "乌拉特前旗",
            center: "108.652114,40.737018",
            level: "district",
            districts: []
          },
          {
            citycode: "0478",
            adcode: "150825",
            name: "乌拉特后旗",
            center: "107.074748,41.08412",
            level: "district",
            districts: []
          },
          {
            citycode: "0478",
            adcode: "150802",
            name: "临河区",
            center: "107.363536,40.750969",
            level: "district",
            districts: []
          },
          {
            citycode: "0478",
            adcode: "150826",
            name: "杭锦后旗",
            center: "107.151296,40.886596",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0472",
        adcode: "150200",
        name: "包头市",
        center: "109.95315,40.621327",
        level: "city",
        districts: [
          {
            citycode: "0472",
            adcode: "150221",
            name: "土默特右旗",
            center: "110.527831,40.578253",
            level: "district",
            districts: []
          },
          {
            citycode: "0472",
            adcode: "150223",
            name: "达尔罕茂明安联合旗",
            center: "110.432626,41.698992",
            level: "district",
            districts: []
          },
          {
            citycode: "0472",
            adcode: "150206",
            name: "白云鄂博矿区",
            center: "109.973195,41.769956",
            level: "district",
            districts: []
          },
          {
            citycode: "0472",
            adcode: "150203",
            name: "昆都仑区",
            center: "109.840249,40.658075",
            level: "district",
            districts: []
          },
          {
            citycode: "0472",
            adcode: "150222",
            name: "固阳县",
            center: "110.060055,41.034757",
            level: "district",
            districts: []
          },
          {
            citycode: "0472",
            adcode: "150205",
            name: "石拐区",
            center: "110.060783,40.676736",
            level: "district",
            districts: []
          },
          {
            citycode: "0472",
            adcode: "150202",
            name: "东河区",
            center: "110.044008,40.57626",
            level: "district",
            districts: []
          },
          {
            citycode: "0472",
            adcode: "150204",
            name: "青山区",
            center: "109.902157,40.644081",
            level: "district",
            districts: []
          },
          {
            citycode: "0472",
            adcode: "150207",
            name: "九原区",
            center: "109.968082,40.611346",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0470",
        adcode: "150700",
        name: "呼伦贝尔市",
        center: "119.77845,49.166536",
        level: "city",
        districts: [
          {
            citycode: "0470",
            adcode: "150785",
            name: "根河市",
            center: "121.520165,50.779758",
            level: "district",
            districts: []
          },
          {
            citycode: "0470",
            adcode: "150782",
            name: "牙克石市",
            center: "120.711639,49.285947",
            level: "district",
            districts: []
          },
          {
            citycode: "0470",
            adcode: "150725",
            name: "陈巴尔虎旗",
            center: "119.424026,49.328916",
            level: "district",
            districts: []
          },
          {
            citycode: "0470",
            adcode: "150702",
            name: "海拉尔区",
            center: "119.824542,49.234715",
            level: "district",
            districts: []
          },
          {
            citycode: "0470",
            adcode: "150724",
            name: "鄂温克族自治旗",
            center: "119.755253,49.146692",
            level: "district",
            districts: []
          },
          {
            citycode: "0470",
            adcode: "150721",
            name: "阿荣旗",
            center: "123.458943,48.126553",
            level: "district",
            districts: []
          },
          {
            citycode: "0470",
            adcode: "150783",
            name: "扎兰屯市",
            center: "122.708475,48.028396",
            level: "district",
            districts: []
          },
          {
            citycode: "0470",
            adcode: "150703",
            name: "扎赉诺尔区",
            center: "117.669939,49.511213",
            level: "district",
            districts: []
          },
          {
            citycode: "0470",
            adcode: "150781",
            name: "满洲里市",
            center: "117.379134,49.59862",
            level: "district",
            districts: []
          },
          {
            citycode: "0470",
            adcode: "150727",
            name: "新巴尔虎右旗",
            center: "116.8237,48.671865",
            level: "district",
            districts: []
          },
          {
            citycode: "0470",
            adcode: "150726",
            name: "新巴尔虎左旗",
            center: "118.269782,48.21827",
            level: "district",
            districts: []
          },
          {
            citycode: "0470",
            adcode: "150723",
            name: "鄂伦春自治旗",
            center: "123.725643,50.591604",
            level: "district",
            districts: []
          },
          {
            citycode: "0470",
            adcode: "150784",
            name: "额尔古纳市",
            center: "120.180506,50.243102",
            level: "district",
            districts: []
          },
          {
            citycode: "0470",
            adcode: "150722",
            name: "莫力达瓦达斡尔族自治旗",
            center: "124.519023,48.477728",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0483",
        adcode: "152900",
        name: "阿拉善盟",
        center: "105.729135,38.851554",
        level: "city",
        districts: [
          {
            citycode: "0483",
            adcode: "152923",
            name: "额济纳旗",
            center: "101.055861,41.953963",
            level: "district",
            districts: []
          },
          {
            citycode: "0483",
            adcode: "152922",
            name: "阿拉善右旗",
            center: "101.666917,39.216185",
            level: "district",
            districts: []
          },
          {
            citycode: "0483",
            adcode: "152921",
            name: "阿拉善左旗",
            center: "105.666208,38.833589",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0482",
        adcode: "152200",
        name: "兴安盟",
        center: "122.037796,46.082373",
        level: "city",
        districts: [
          {
            citycode: "0482",
            adcode: "152202",
            name: "阿尔山市",
            center: "119.943577,47.17744",
            level: "district",
            districts: []
          },
          {
            citycode: "0482",
            adcode: "152224",
            name: "突泉县",
            center: "121.593972,45.381918",
            level: "district",
            districts: []
          },
          {
            citycode: "0482",
            adcode: "152222",
            name: "科尔沁右翼中旗",
            center: "121.476357,45.060728",
            level: "district",
            districts: []
          },
          {
            citycode: "0482",
            adcode: "152223",
            name: "扎赉特旗",
            center: "122.899627,46.723154",
            level: "district",
            districts: []
          },
          {
            citycode: "0482",
            adcode: "152221",
            name: "科尔沁右翼前旗",
            center: "121.952638,46.079664",
            level: "district",
            districts: []
          },
          {
            citycode: "0482",
            adcode: "152201",
            name: "乌兰浩特市",
            center: "122.093309,46.072233",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0471",
        adcode: "150100",
        name: "呼和浩特市",
        center: "111.748814,40.842127",
        level: "city",
        districts: [
          {
            citycode: "0471",
            adcode: "150104",
            name: "玉泉区",
            center: "111.674157,40.753054",
            level: "district",
            districts: []
          },
          {
            citycode: "0471",
            adcode: "150103",
            name: "回民区",
            center: "111.623485,40.808906",
            level: "district",
            districts: []
          },
          {
            citycode: "0471",
            adcode: "150125",
            name: "武川县",
            center: "111.451226,41.096511",
            level: "district",
            districts: []
          },
          {
            citycode: "0471",
            adcode: "150122",
            name: "托克托县",
            center: "111.193879,40.277703",
            level: "district",
            districts: []
          },
          {
            citycode: "0471",
            adcode: "150121",
            name: "土默特左旗",
            center: "111.16373,40.729044",
            level: "district",
            districts: []
          },
          {
            citycode: "0471",
            adcode: "150102",
            name: "新城区",
            center: "111.665325,40.858271",
            level: "district",
            districts: []
          },
          {
            citycode: "0471",
            adcode: "150105",
            name: "赛罕区",
            center: "111.701166,40.792508",
            level: "district",
            districts: []
          },
          {
            citycode: "0471",
            adcode: "150124",
            name: "清水河县",
            center: "111.647351,39.921224",
            level: "district",
            districts: []
          },
          {
            citycode: "0471",
            adcode: "150123",
            name: "和林格尔县",
            center: "111.821695,40.379226",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0474",
        adcode: "150900",
        name: "乌兰察布市",
        center: "113.132227,40.994526",
        level: "city",
        districts: [
          {
            citycode: "0474",
            adcode: "150929",
            name: "四子王旗",
            center: "111.706663,41.533542",
            level: "district",
            districts: []
          },
          {
            citycode: "0474",
            adcode: "150922",
            name: "化德县",
            center: "114.01029,41.904123",
            level: "district",
            districts: []
          },
          {
            citycode: "0474",
            adcode: "150923",
            name: "商都县",
            center: "113.577778,41.562176",
            level: "district",
            districts: []
          },
          {
            citycode: "0474",
            adcode: "150928",
            name: "察哈尔右翼后旗",
            center: "113.191505,41.435937",
            level: "district",
            districts: []
          },
          {
            citycode: "0474",
            adcode: "150981",
            name: "丰镇市",
            center: "113.109875,40.437022",
            level: "district",
            districts: []
          },
          {
            citycode: "0474",
            adcode: "150927",
            name: "察哈尔右翼中旗",
            center: "112.635348,41.277449",
            level: "district",
            districts: []
          },
          {
            citycode: "0474",
            adcode: "150921",
            name: "卓资县",
            center: "112.577716,40.894618",
            level: "district",
            districts: []
          },
          {
            citycode: "0474",
            adcode: "150924",
            name: "兴和县",
            center: "113.834176,40.8723",
            level: "district",
            districts: []
          },
          {
            citycode: "0474",
            adcode: "150926",
            name: "察哈尔右翼前旗",
            center: "113.212409,40.783551",
            level: "district",
            districts: []
          },
          {
            citycode: "0474",
            adcode: "150902",
            name: "集宁区",
            center: "113.168973,41.000742",
            level: "district",
            districts: []
          },
          {
            citycode: "0474",
            adcode: "150925",
            name: "凉城县",
            center: "112.504243,40.532358",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0477",
        adcode: "150600",
        name: "鄂尔多斯市",
        center: "109.782473,39.608744",
        level: "city",
        districts: [
          {
            citycode: "0477",
            adcode: "150625",
            name: "杭锦旗",
            center: "108.736011,39.833243",
            level: "district",
            districts: []
          },
          {
            citycode: "0477",
            adcode: "150621",
            name: "达拉特旗",
            center: "110.034133,40.412766",
            level: "district",
            districts: []
          },
          {
            citycode: "0477",
            adcode: "150624",
            name: "鄂托克旗",
            center: "107.975948,39.089549",
            level: "district",
            districts: []
          },
          {
            citycode: "0477",
            adcode: "150626",
            name: "乌审旗",
            center: "108.819485,38.60453",
            level: "district",
            districts: []
          },
          {
            citycode: "0477",
            adcode: "150623",
            name: "鄂托克前旗",
            center: "107.47733,38.182402",
            level: "district",
            districts: []
          },
          {
            citycode: "0477",
            adcode: "150622",
            name: "准格尔旗",
            center: "111.239436,39.864923",
            level: "district",
            districts: []
          },
          {
            citycode: "0477",
            adcode: "150627",
            name: "伊金霍洛旗",
            center: "109.747435,39.565064",
            level: "district",
            districts: []
          },
          {
            citycode: "0477",
            adcode: "150603",
            name: "康巴什区",
            center: "109.858586,39.60793",
            level: "district",
            districts: []
          },
          {
            citycode: "0477",
            adcode: "150602",
            name: "东胜区",
            center: "109.963403,39.823066",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0479",
        adcode: "152500",
        name: "锡林郭勒盟",
        center: "116.047387,43.933212",
        level: "city",
        districts: [
          {
            citycode: "0479",
            adcode: "152525",
            name: "东乌珠穆沁旗",
            center: "116.97526,45.497329",
            level: "district",
            districts: []
          },
          {
            citycode: "0479",
            adcode: "152522",
            name: "阿巴嘎旗",
            center: "114.950185,44.022831",
            level: "district",
            districts: []
          },
          {
            citycode: "0479",
            adcode: "152526",
            name: "西乌珠穆沁旗",
            center: "117.608668,44.587746",
            level: "district",
            districts: []
          },
          {
            citycode: "0479",
            adcode: "152523",
            name: "苏尼特左旗",
            center: "113.667171,43.859718",
            level: "district",
            districts: []
          },
          {
            citycode: "0479",
            adcode: "152502",
            name: "锡林浩特市",
            center: "116.085814,43.933417",
            level: "district",
            districts: []
          },
          {
            citycode: "0479",
            adcode: "152501",
            name: "二连浩特市",
            center: "111.949594,43.64285",
            level: "district",
            districts: []
          },
          {
            citycode: "0479",
            adcode: "152524",
            name: "苏尼特右旗",
            center: "112.641806,42.742417",
            level: "district",
            districts: []
          },
          {
            citycode: "0479",
            adcode: "152530",
            name: "正蓝旗",
            center: "115.991648,42.241815",
            level: "district",
            districts: []
          },
          {
            citycode: "0479",
            adcode: "152529",
            name: "正镶白旗",
            center: "115.029748,42.287493",
            level: "district",
            districts: []
          },
          {
            citycode: "0479",
            adcode: "152528",
            name: "镶黄旗",
            center: "113.847287,42.232371",
            level: "district",
            districts: []
          },
          {
            citycode: "0479",
            adcode: "152531",
            name: "多伦县",
            center: "116.485549,42.203454",
            level: "district",
            districts: []
          },
          {
            citycode: "0479",
            adcode: "152527",
            name: "太仆寺旗",
            center: "115.283173,41.876889",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0475",
        adcode: "150500",
        name: "通辽市",
        center: "122.243309,43.653566",
        level: "city",
        districts: [
          {
            citycode: "0475",
            adcode: "150581",
            name: "霍林郭勒市",
            center: "119.681242,45.533598",
            level: "district",
            districts: []
          },
          {
            citycode: "0475",
            adcode: "150525",
            name: "奈曼旗",
            center: "120.657813,42.867433",
            level: "district",
            districts: []
          },
          {
            citycode: "0475",
            adcode: "150523",
            name: "开鲁县",
            center: "121.319216,43.601446",
            level: "district",
            districts: []
          },
          {
            citycode: "0475",
            adcode: "150524",
            name: "库伦旗",
            center: "121.810629,42.735556",
            level: "district",
            districts: []
          },
          {
            citycode: "0475",
            adcode: "150526",
            name: "扎鲁特旗",
            center: "120.917953,44.567093",
            level: "district",
            districts: []
          },
          {
            citycode: "0475",
            adcode: "150521",
            name: "科尔沁左翼中旗",
            center: "123.312202,44.126606",
            level: "district",
            districts: []
          },
          {
            citycode: "0475",
            adcode: "150522",
            name: "科尔沁左翼后旗",
            center: "122.35677,42.935105",
            level: "district",
            districts: []
          },
          {
            citycode: "0475",
            adcode: "150502",
            name: "科尔沁区",
            center: "122.25545,43.623133",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0476",
        adcode: "150400",
        name: "赤峰市",
        center: "118.887613,42.256876",
        level: "city",
        districts: [
          {
            citycode: "0476",
            adcode: "150423",
            name: "巴林右旗",
            center: "118.664235,43.534171",
            level: "district",
            districts: []
          },
          {
            citycode: "0476",
            adcode: "150422",
            name: "巴林左旗",
            center: "119.362832,43.961547",
            level: "district",
            districts: []
          },
          {
            citycode: "0476",
            adcode: "150424",
            name: "林西县",
            center: "118.05545,43.61812",
            level: "district",
            districts: []
          },
          {
            citycode: "0476",
            adcode: "150430",
            name: "敖汉旗",
            center: "119.921413,42.290731",
            level: "district",
            districts: []
          },
          {
            citycode: "0476",
            adcode: "150402",
            name: "红山区",
            center: "118.953989,42.296317",
            level: "district",
            districts: []
          },
          {
            citycode: "0476",
            adcode: "150404",
            name: "松山区",
            center: "118.916156,42.299795",
            level: "district",
            districts: []
          },
          {
            citycode: "0476",
            adcode: "150426",
            name: "翁牛特旗",
            center: "119.006187,42.936529",
            level: "district",
            districts: []
          },
          {
            citycode: "0476",
            adcode: "150425",
            name: "克什克腾旗",
            center: "117.545413,43.265057",
            level: "district",
            districts: []
          },
          {
            citycode: "0476",
            adcode: "150429",
            name: "宁城县",
            center: "119.320056,41.600193",
            level: "district",
            districts: []
          },
          {
            citycode: "0476",
            adcode: "150421",
            name: "阿鲁科尔沁旗",
            center: "120.065533,43.872398",
            level: "district",
            districts: []
          },
          {
            citycode: "0476",
            adcode: "150403",
            name: "元宝山区",
            center: "119.288475,42.039602",
            level: "district",
            districts: []
          },
          {
            citycode: "0476",
            adcode: "150428",
            name: "喀喇沁旗",
            center: "118.701934,41.927103",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "230000",
    name: "黑龙江省",
    center: "126.661998,45.742253",
    level: "province",
    districts: [
      {
        citycode: "0457",
        adcode: "232700",
        name: "大兴安岭地区",
        center: "124.11786,50.41129",
        level: "city",
        districts: [
          {
            citycode: "0457",
            adcode: "232701",
            name: "漠河市",
            center: "122.539313,52.972465",
            level: "district",
            districts: []
          },
          {
            citycode: "0457",
            adcode: "232722",
            name: "塔河县",
            center: "124.709733,52.334512",
            level: "district",
            districts: []
          },
          {
            citycode: "0457",
            adcode: "232721",
            name: "呼玛县",
            center: "126.651856,51.725924",
            level: "district",
            districts: []
          },
          {
            citycode: "0457",
            adcode: "232718",
            name: "加格达奇区",
            center: "124.139742,50.408822",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0468",
        adcode: "230400",
        name: "鹤岗市",
        center: "130.297687,47.350659",
        level: "city",
        districts: [
          {
            citycode: "0468",
            adcode: "230422",
            name: "绥滨县",
            center: "131.852863,47.289522",
            level: "district",
            districts: []
          },
          {
            citycode: "0468",
            adcode: "230403",
            name: "工农区",
            center: "130.27472,47.318971",
            level: "district",
            districts: []
          },
          {
            citycode: "0468",
            adcode: "230407",
            name: "兴山区",
            center: "130.303598,47.357698",
            level: "district",
            districts: []
          },
          {
            citycode: "0468",
            adcode: "230404",
            name: "南山区",
            center: "130.285991,47.315121",
            level: "district",
            districts: []
          },
          {
            citycode: "0468",
            adcode: "230402",
            name: "向阳区",
            center: "130.294331,47.342478",
            level: "district",
            districts: []
          },
          {
            citycode: "0468",
            adcode: "230405",
            name: "兴安区",
            center: "130.239289,47.252805",
            level: "district",
            districts: []
          },
          {
            citycode: "0468",
            adcode: "230406",
            name: "东山区",
            center: "130.317151,47.338571",
            level: "district",
            districts: []
          },
          {
            citycode: "0468",
            adcode: "230421",
            name: "萝北县",
            center: "130.820566,47.578979",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0464",
        adcode: "230900",
        name: "七台河市",
        center: "131.003015,45.771178",
        level: "city",
        districts: [
          {
            citycode: "0464",
            adcode: "230903",
            name: "桃山区",
            center: "131.020046,45.765733",
            level: "district",
            districts: []
          },
          {
            citycode: "0464",
            adcode: "230921",
            name: "勃利县",
            center: "130.592009,45.755856",
            level: "district",
            districts: []
          },
          {
            citycode: "0464",
            adcode: "230904",
            name: "茄子河区",
            center: "131.067545,45.785755",
            level: "district",
            districts: []
          },
          {
            citycode: "0464",
            adcode: "230902",
            name: "新兴区",
            center: "130.93226,45.816579",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0451",
        adcode: "230100",
        name: "哈尔滨市",
        center: "126.53505,45.802981",
        level: "city",
        districts: [
          {
            citycode: "0451",
            adcode: "230126",
            name: "巴彦县",
            center: "127.403521,46.086182",
            level: "district",
            districts: []
          },
          {
            citycode: "0451",
            adcode: "230123",
            name: "依兰县",
            center: "129.567777,46.325536",
            level: "district",
            districts: []
          },
          {
            citycode: "0451",
            adcode: "230128",
            name: "通河县",
            center: "128.74629,45.990214",
            level: "district",
            districts: []
          },
          {
            citycode: "0451",
            adcode: "230127",
            name: "木兰县",
            center: "128.043194,45.950649",
            level: "district",
            districts: []
          },
          {
            citycode: "0451",
            adcode: "230129",
            name: "延寿县",
            center: "128.311071,45.445956",
            level: "district",
            districts: []
          },
          {
            citycode: "0451",
            adcode: "230125",
            name: "宾县",
            center: "127.466372,45.746313",
            level: "district",
            districts: []
          },
          {
            citycode: "0451",
            adcode: "230124",
            name: "方正县",
            center: "128.829513,45.851673",
            level: "district",
            districts: []
          },
          {
            citycode: "0451",
            adcode: "230108",
            name: "平房区",
            center: "126.63675,45.597529",
            level: "district",
            districts: []
          },
          {
            citycode: "0451",
            adcode: "230183",
            name: "尚志市",
            center: "128.009218,45.209199",
            level: "district",
            districts: []
          },
          {
            citycode: "0451",
            adcode: "230184",
            name: "五常市",
            center: "127.167501,44.932164",
            level: "district",
            districts: []
          },
          {
            citycode: "0451",
            adcode: "230112",
            name: "阿城区",
            center: "126.957984,45.548671",
            level: "district",
            districts: []
          },
          {
            citycode: "0451",
            adcode: "230111",
            name: "呼兰区",
            center: "126.587704,45.889557",
            level: "district",
            districts: []
          },
          {
            citycode: "0451",
            adcode: "230109",
            name: "松北区",
            center: "126.516602,45.794991",
            level: "district",
            districts: []
          },
          {
            citycode: "0451",
            adcode: "230113",
            name: "双城区",
            center: "126.31279,45.382873",
            level: "district",
            districts: []
          },
          {
            citycode: "0451",
            adcode: "230102",
            name: "道里区",
            center: "126.616912,45.755832",
            level: "district",
            districts: []
          },
          {
            citycode: "0451",
            adcode: "230110",
            name: "香坊区",
            center: "126.662959,45.707871",
            level: "district",
            districts: []
          },
          {
            citycode: "0451",
            adcode: "230104",
            name: "道外区",
            center: "126.649094,45.792351",
            level: "district",
            districts: []
          },
          {
            citycode: "0451",
            adcode: "230103",
            name: "南岗区",
            center: "126.66882,45.759967",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0454",
        adcode: "230800",
        name: "佳木斯市",
        center: "130.318916,46.800002",
        level: "city",
        districts: [
          {
            citycode: "0454",
            adcode: "230826",
            name: "桦川县",
            center: "130.71908,47.023001",
            level: "district",
            districts: []
          },
          {
            citycode: "0454",
            adcode: "230828",
            name: "汤原县",
            center: "129.904747,46.730623",
            level: "district",
            districts: []
          },
          {
            citycode: "0454",
            adcode: "230805",
            name: "东风区",
            center: "130.403588,46.822609",
            level: "district",
            districts: []
          },
          {
            citycode: "0454",
            adcode: "230804",
            name: "前进区",
            center: "130.375254,46.81405",
            level: "district",
            districts: []
          },
          {
            citycode: "0454",
            adcode: "230803",
            name: "向阳区",
            center: "130.365263,46.807808",
            level: "district",
            districts: []
          },
          {
            citycode: "0454",
            adcode: "230811",
            name: "郊区",
            center: "130.327182,46.809596",
            level: "district",
            districts: []
          },
          {
            citycode: "0454",
            adcode: "230883",
            name: "抚远市",
            center: "134.30786,48.365027",
            level: "district",
            districts: []
          },
          {
            citycode: "0454",
            adcode: "230822",
            name: "桦南县",
            center: "130.553472,46.239314",
            level: "district",
            districts: []
          },
          {
            citycode: "0454",
            adcode: "230882",
            name: "富锦市",
            center: "132.037659,47.250144",
            level: "district",
            districts: []
          },
          {
            citycode: "0454",
            adcode: "230881",
            name: "同江市",
            center: "132.510113,47.642475",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0469",
        adcode: "230500",
        name: "双鸭山市",
        center: "131.141563,46.676157",
        level: "city",
        districts: [
          {
            citycode: "0469",
            adcode: "230522",
            name: "友谊县",
            center: "131.807815,46.767299",
            level: "district",
            districts: []
          },
          {
            citycode: "0469",
            adcode: "230502",
            name: "尖山区",
            center: "131.158372,46.646083",
            level: "district",
            districts: []
          },
          {
            citycode: "0469",
            adcode: "230503",
            name: "岭东区",
            center: "131.165067,46.592663",
            level: "district",
            districts: []
          },
          {
            citycode: "0469",
            adcode: "230506",
            name: "宝山区",
            center: "131.401589,46.577167",
            level: "district",
            districts: []
          },
          {
            citycode: "0469",
            adcode: "230523",
            name: "宝清县",
            center: "132.196907,46.327335",
            level: "district",
            districts: []
          },
          {
            citycode: "0469",
            adcode: "230524",
            name: "饶河县",
            center: "134.014125,46.79726",
            level: "district",
            districts: []
          },
          {
            citycode: "0469",
            adcode: "230505",
            name: "四方台区",
            center: "131.337636,46.597143",
            level: "district",
            districts: []
          },
          {
            citycode: "0469",
            adcode: "230521",
            name: "集贤县",
            center: "131.141452,46.728448",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0456",
        adcode: "231100",
        name: "黑河市",
        center: "127.528226,50.244887",
        level: "city",
        districts: [
          {
            citycode: "0456",
            adcode: "231102",
            name: "爱辉区",
            center: "127.500703,50.252361",
            level: "district",
            districts: []
          },
          {
            citycode: "0456",
            adcode: "231181",
            name: "北安市",
            center: "126.490989,48.241168",
            level: "district",
            districts: []
          },
          {
            citycode: "0456",
            adcode: "231124",
            name: "孙吴县",
            center: "127.336163,49.425645",
            level: "district",
            districts: []
          },
          {
            citycode: "0456",
            adcode: "231123",
            name: "逊克县",
            center: "128.478698,49.56429",
            level: "district",
            districts: []
          },
          {
            citycode: "0456",
            adcode: "231182",
            name: "五大连池市",
            center: "126.205446,48.517342",
            level: "district",
            districts: []
          },
          {
            citycode: "0456",
            adcode: "231183",
            name: "嫩江市",
            center: "125.221192,49.185766",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0453",
        adcode: "231000",
        name: "牡丹江市",
        center: "129.632928,44.551486",
        level: "city",
        districts: [
          {
            citycode: "0453",
            adcode: "231002",
            name: "东安区",
            center: "129.626651,44.58125",
            level: "district",
            districts: []
          },
          {
            citycode: "0453",
            adcode: "231004",
            name: "爱民区",
            center: "129.591227,44.595897",
            level: "district",
            districts: []
          },
          {
            citycode: "0453",
            adcode: "231081",
            name: "绥芬河市",
            center: "131.151805,44.412487",
            level: "district",
            districts: []
          },
          {
            citycode: "0453",
            adcode: "231003",
            name: "阳明区",
            center: "129.635836,44.595851",
            level: "district",
            districts: []
          },
          {
            citycode: "0453",
            adcode: "231085",
            name: "穆棱市",
            center: "130.52446,44.918842",
            level: "district",
            districts: []
          },
          {
            citycode: "0453",
            adcode: "231025",
            name: "林口县",
            center: "130.282286,45.279754",
            level: "district",
            districts: []
          },
          {
            citycode: "0453",
            adcode: "231083",
            name: "海林市",
            center: "129.380756,44.594017",
            level: "district",
            districts: []
          },
          {
            citycode: "0453",
            adcode: "231086",
            name: "东宁市",
            center: "131.124839,44.090361",
            level: "district",
            districts: []
          },
          {
            citycode: "0453",
            adcode: "231084",
            name: "宁安市",
            center: "129.482505,44.340617",
            level: "district",
            districts: []
          },
          {
            citycode: "0453",
            adcode: "231005",
            name: "西安区",
            center: "129.616021,44.577611",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0455",
        adcode: "231200",
        name: "绥化市",
        center: "126.968714,46.654147",
        level: "city",
        districts: [
          {
            citycode: "0455",
            adcode: "231226",
            name: "绥棱县",
            center: "127.114928,47.235814",
            level: "district",
            districts: []
          },
          {
            citycode: "0455",
            adcode: "231283",
            name: "海伦市",
            center: "126.930191,47.450661",
            level: "district",
            districts: []
          },
          {
            citycode: "0455",
            adcode: "231224",
            name: "庆安县",
            center: "127.507586,46.880628",
            level: "district",
            districts: []
          },
          {
            citycode: "0455",
            adcode: "231202",
            name: "北林区",
            center: "126.984995,46.638114",
            level: "district",
            districts: []
          },
          {
            citycode: "0455",
            adcode: "231221",
            name: "望奎县",
            center: "126.486333,46.832185",
            level: "district",
            districts: []
          },
          {
            citycode: "0455",
            adcode: "231223",
            name: "青冈县",
            center: "126.099314,46.70398",
            level: "district",
            districts: []
          },
          {
            citycode: "0455",
            adcode: "231225",
            name: "明水县",
            center: "125.90601,47.173649",
            level: "district",
            districts: []
          },
          {
            citycode: "0455",
            adcode: "231222",
            name: "兰西县",
            center: "126.287734,46.252966",
            level: "district",
            districts: []
          },
          {
            citycode: "0455",
            adcode: "231282",
            name: "肇东市",
            center: "125.962419,46.050664",
            level: "district",
            districts: []
          },
          {
            citycode: "0455",
            adcode: "231281",
            name: "安达市",
            center: "125.307629,46.451882",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0458",
        adcode: "230700",
        name: "伊春市",
        center: "128.840863,47.728332",
        level: "city",
        districts: [
          {
            citycode: "0458",
            adcode: "230722",
            name: "嘉荫县",
            center: "130.402406,48.888613",
            level: "district",
            districts: []
          },
          {
            citycode: "0458",
            adcode: "230724",
            name: "丰林县",
            center: "129.533661,48.290566",
            level: "district",
            districts: []
          },
          {
            citycode: "0458",
            adcode: "230717",
            name: "伊美区",
            center: "128.907156,47.728257",
            level: "district",
            districts: []
          },
          {
            citycode: "0458",
            adcode: "230723",
            name: "汤旺县",
            center: "129.570935,48.454639",
            level: "district",
            districts: []
          },
          {
            citycode: "0458",
            adcode: "230718",
            name: "乌翠区",
            center: "128.669458,47.726499",
            level: "district",
            districts: []
          },
          {
            citycode: "0458",
            adcode: "230719",
            name: "友好区",
            center: "128.836341,47.840801",
            level: "district",
            districts: []
          },
          {
            citycode: "0458",
            adcode: "230751",
            name: "金林区",
            center: "129.428839,47.413019",
            level: "district",
            districts: []
          },
          {
            citycode: "0458",
            adcode: "230781",
            name: "铁力市",
            center: "128.032554,46.986604",
            level: "district",
            districts: []
          },
          {
            citycode: "0458",
            adcode: "230725",
            name: "大箐山县",
            center: "129.020519,47.028313",
            level: "district",
            districts: []
          },
          {
            citycode: "0458",
            adcode: "230726",
            name: "南岔县",
            center: "129.283584,47.139009",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0459",
        adcode: "230600",
        name: "大庆市",
        center: "125.104078,46.589498",
        level: "city",
        districts: [
          {
            citycode: "0459",
            adcode: "230605",
            name: "红岗区",
            center: "124.891041,46.398567",
            level: "district",
            districts: []
          },
          {
            citycode: "0459",
            adcode: "230606",
            name: "大同区",
            center: "124.812221,46.039972",
            level: "district",
            districts: []
          },
          {
            citycode: "0459",
            adcode: "230623",
            name: "林甸县",
            center: "124.863628,47.171677",
            level: "district",
            districts: []
          },
          {
            citycode: "0459",
            adcode: "230621",
            name: "肇州县",
            center: "125.268449,45.699543",
            level: "district",
            districts: []
          },
          {
            citycode: "0459",
            adcode: "230604",
            name: "让胡路区",
            center: "124.889858,46.642567",
            level: "district",
            districts: []
          },
          {
            citycode: "0459",
            adcode: "230624",
            name: "杜尔伯特蒙古族自治县",
            center: "124.442829,46.862348",
            level: "district",
            districts: []
          },
          {
            citycode: "0459",
            adcode: "230622",
            name: "肇源县",
            center: "125.078311,45.518982",
            level: "district",
            districts: []
          },
          {
            citycode: "0459",
            adcode: "230602",
            name: "萨尔图区",
            center: "125.135269,46.629281",
            level: "district",
            districts: []
          },
          {
            citycode: "0459",
            adcode: "230603",
            name: "龙凤区",
            center: "125.135093,46.562369",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0467",
        adcode: "230300",
        name: "鸡西市",
        center: "130.969385,45.295087",
        level: "city",
        districts: [
          {
            citycode: "0467",
            adcode: "230304",
            name: "滴道区",
            center: "130.844193,45.349068",
            level: "district",
            districts: []
          },
          {
            citycode: "0467",
            adcode: "230302",
            name: "鸡冠区",
            center: "130.981342,45.303892",
            level: "district",
            districts: []
          },
          {
            citycode: "0467",
            adcode: "230306",
            name: "城子河区",
            center: "131.011504,45.338342",
            level: "district",
            districts: []
          },
          {
            citycode: "0467",
            adcode: "230307",
            name: "麻山区",
            center: "130.477691,45.211863",
            level: "district",
            districts: []
          },
          {
            citycode: "0467",
            adcode: "230305",
            name: "梨树区",
            center: "130.69699,45.092046",
            level: "district",
            districts: []
          },
          {
            citycode: "0467",
            adcode: "230303",
            name: "恒山区",
            center: "130.90466,45.21119",
            level: "district",
            districts: []
          },
          {
            citycode: "0467",
            adcode: "230321",
            name: "鸡东县",
            center: "131.124083,45.260413",
            level: "district",
            districts: []
          },
          {
            citycode: "0467",
            adcode: "230381",
            name: "虎林市",
            center: "132.937002,45.763262",
            level: "district",
            districts: []
          },
          {
            citycode: "0467",
            adcode: "230382",
            name: "密山市",
            center: "131.846824,45.529482",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0452",
        adcode: "230200",
        name: "齐齐哈尔市",
        center: "123.918193,47.354892",
        level: "city",
        districts: [
          {
            citycode: "0452",
            adcode: "230229",
            name: "克山县",
            center: "125.875103,48.037748",
            level: "district",
            districts: []
          },
          {
            citycode: "0452",
            adcode: "230225",
            name: "甘南县",
            center: "123.507935,47.921698",
            level: "district",
            districts: []
          },
          {
            citycode: "0452",
            adcode: "230230",
            name: "克东县",
            center: "126.249124,48.041562",
            level: "district",
            districts: []
          },
          {
            citycode: "0452",
            adcode: "230223",
            name: "依安县",
            center: "125.306161,47.893442",
            level: "district",
            districts: []
          },
          {
            citycode: "0452",
            adcode: "230227",
            name: "富裕县",
            center: "124.474411,47.774038",
            level: "district",
            districts: []
          },
          {
            citycode: "0452",
            adcode: "230208",
            name: "梅里斯达斡尔族区",
            center: "123.752482,47.309755",
            level: "district",
            districts: []
          },
          {
            citycode: "0452",
            adcode: "230207",
            name: "碾子山区",
            center: "122.887548,47.516614",
            level: "district",
            districts: []
          },
          {
            citycode: "0452",
            adcode: "230221",
            name: "龙江县",
            center: "123.204953,47.338512",
            level: "district",
            districts: []
          },
          {
            citycode: "0452",
            adcode: "230203",
            name: "建华区",
            center: "123.95555,47.354212",
            level: "district",
            districts: []
          },
          {
            citycode: "0452",
            adcode: "230204",
            name: "铁锋区",
            center: "123.978079,47.340719",
            level: "district",
            districts: []
          },
          {
            citycode: "0452",
            adcode: "230206",
            name: "富拉尔基区",
            center: "123.628926,47.20873",
            level: "district",
            districts: []
          },
          {
            citycode: "0452",
            adcode: "230202",
            name: "龙沙区",
            center: "123.958447,47.317103",
            level: "district",
            districts: []
          },
          {
            citycode: "0452",
            adcode: "230205",
            name: "昂昂溪区",
            center: "123.822137,47.154806",
            level: "district",
            districts: []
          },
          {
            citycode: "0452",
            adcode: "230224",
            name: "泰来县",
            center: "123.416631,46.393694",
            level: "district",
            districts: []
          },
          {
            citycode: "0452",
            adcode: "230231",
            name: "拜泉县",
            center: "126.09905,47.59586",
            level: "district",
            districts: []
          },
          {
            citycode: "0452",
            adcode: "230281",
            name: "讷河市",
            center: "124.88293,48.466829",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "650000",
    name: "新疆维吾尔自治区",
    center: "87.628579,43.793301",
    level: "province",
    districts: [
      {
        citycode: "1906",
        adcode: "659005",
        name: "北屯市",
        center: "87.834419,47.326733",
        level: "city",
        districts: [
          {
            citycode: "1906",
            adcode: "659005",
            name: "海川镇",
            center: "87.518571,47.409865",
            level: "street",
            districts: []
          },
          {
            citycode: "1906",
            adcode: "659005",
            name: "丰庆镇",
            center: "87.927121,47.333864",
            level: "street",
            districts: []
          },
          {
            citycode: "1906",
            adcode: "659005",
            name: "北屯镇",
            center: "87.868844,47.355513",
            level: "street",
            districts: []
          },
          {
            citycode: "1906",
            adcode: "659005",
            name: "双渠镇",
            center: "88.122468,47.126579",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "1996",
        adcode: "659006",
        name: "铁门关市",
        center: "85.670291,41.862997",
        level: "city",
        districts: [
          {
            citycode: "1996",
            adcode: "659006",
            name: "博古其镇",
            center: "85.584894,41.882542",
            level: "street",
            districts: []
          },
          {
            citycode: "1996",
            adcode: "659006",
            name: "双丰镇",
            center: "85.635217,41.880304",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "1999",
        adcode: "659008",
        name: "可克达拉市",
        center: "80.994153,43.940381",
        level: "city",
        districts: [
          {
            citycode: "1999",
            adcode: "659008",
            name: "长丰镇",
            center: "80.990266,43.889725",
            level: "street",
            districts: []
          },
          {
            citycode: "1999",
            adcode: "659008",
            name: "金屯镇",
            center: "80.606773,43.765174",
            level: "street",
            districts: []
          },
          {
            citycode: "1999",
            adcode: "659008",
            name: "金梁镇",
            center: "81.086028,43.959864",
            level: "street",
            districts: []
          },
          {
            citycode: "1999",
            adcode: "659008",
            name: "都拉塔口岸",
            center: "80.661467,43.706479",
            level: "street",
            districts: []
          },
          {
            citycode: "1999",
            adcode: "659008",
            name: "苇湖镇",
            center: "80.648370,44.180308",
            level: "street",
            districts: []
          },
          {
            citycode: "1999",
            adcode: "659008",
            name: "榆树庄镇",
            center: "80.484243,43.931223",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "1909",
        adcode: "659007",
        name: "双河市",
        center: "82.35365587,44.84052409",
        level: "city",
        districts: [
          {
            citycode: "1909",
            adcode: "659007",
            name: "兵团八十九团",
            center: "82.455805,44.812134",
            level: "street",
            districts: []
          },
          {
            citycode: "1909",
            adcode: "659007",
            name: "博河镇",
            center: "82.158974,44.796350",
            level: "street",
            districts: []
          },
          {
            citycode: "1909",
            adcode: "659007",
            name: "双桥镇",
            center: "82.490803,44.746864",
            level: "street",
            districts: []
          },
          {
            citycode: "1909",
            adcode: "659007",
            name: "石峪镇",
            center: "82.066675,45.040830",
            level: "street",
            districts: []
          },
          {
            citycode: "1909",
            adcode: "659007",
            name: "双乐镇",
            center: "82.473143,44.826624",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "0909",
        adcode: "652700",
        name: "博尔塔拉蒙古自治州",
        center: "82.066363,44.906039",
        level: "city",
        districts: [
          {
            citycode: "0909",
            adcode: "652723",
            name: "温泉县",
            center: "81.024827,44.968857",
            level: "district",
            districts: []
          },
          {
            citycode: "0909",
            adcode: "652702",
            name: "阿拉山口市",
            center: "82.554609,45.173274",
            level: "district",
            districts: []
          },
          {
            citycode: "0909",
            adcode: "652701",
            name: "博乐市",
            center: "82.051433,44.853882",
            level: "district",
            districts: []
          },
          {
            citycode: "0909",
            adcode: "652722",
            name: "精河县",
            center: "82.890709,44.599202",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0901",
        adcode: "654200",
        name: "塔城地区",
        center: "82.980316,46.745364",
        level: "city",
        districts: [
          {
            citycode: "0901",
            adcode: "654226",
            name: "和布克赛尔蒙古自治县",
            center: "85.728328,46.793235",
            level: "district",
            districts: []
          },
          {
            citycode: "0901",
            adcode: "654221",
            name: "额敏县",
            center: "83.628303,46.524673",
            level: "district",
            districts: []
          },
          {
            citycode: "0901",
            adcode: "654225",
            name: "裕民县",
            center: "82.982252,46.201049",
            level: "district",
            districts: []
          },
          {
            citycode: "0901",
            adcode: "654201",
            name: "塔城市",
            center: "82.986923,46.751669",
            level: "district",
            districts: []
          },
          {
            citycode: "0901",
            adcode: "654224",
            name: "托里县",
            center: "83.606372,45.948935",
            level: "district",
            districts: []
          },
          {
            citycode: "0901",
            adcode: "654203",
            name: "沙湾市",
            center: "85.619483,44.326267",
            level: "district",
            districts: []
          },
          {
            citycode: "0901",
            adcode: "654202",
            name: "乌苏市",
            center: "84.713762,44.418693",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0903",
        adcode: "653200",
        name: "和田地区",
        center: "79.921646,37.114406",
        level: "city",
        districts: [
          {
            citycode: "0903",
            adcode: "653226",
            name: "于田县",
            center: "81.677417,36.85708",
            level: "district",
            districts: []
          },
          {
            citycode: "0903",
            adcode: "653227",
            name: "民丰县",
            center: "82.695946,37.064428",
            level: "district",
            districts: []
          },
          {
            citycode: "0903",
            adcode: "653201",
            name: "和田市",
            center: "79.912881,37.112246",
            level: "district",
            districts: []
          },
          {
            citycode: "0903",
            adcode: "653221",
            name: "和田县",
            center: "79.81906982,37.12003092",
            level: "district",
            districts: []
          },
          {
            citycode: "0903",
            adcode: "653224",
            name: "洛浦县",
            center: "80.179911,37.066226",
            level: "district",
            districts: []
          },
          {
            citycode: "0903",
            adcode: "653223",
            name: "皮山县",
            center: "78.28548,37.578264",
            level: "district",
            districts: []
          },
          {
            citycode: "0903",
            adcode: "653222",
            name: "墨玉县",
            center: "79.728434,37.277518",
            level: "district",
            districts: []
          },
          {
            citycode: "0903",
            adcode: "653225",
            name: "策勒县",
            center: "80.801433,36.99785",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "1903",
        adcode: "659009",
        name: "昆玉市",
        center: "79.270193,37.215372",
        level: "city",
        districts: [
          {
            citycode: "1903",
            adcode: "659009",
            name: "老兵镇",
            center: "79.603916,37.366638",
            level: "street",
            districts: []
          },
          {
            citycode: "1903",
            adcode: "659009",
            name: "乌尔其乡",
            center: "79.586591,37.332022",
            level: "street",
            districts: []
          },
          {
            citycode: "1903",
            adcode: "659009",
            name: "普恰克其乡",
            center: "79.783046,37.580534",
            level: "street",
            districts: []
          },
          {
            citycode: "1903",
            adcode: "659009",
            name: "阔依其乡",
            center: "79.687575,37.369057",
            level: "street",
            districts: []
          },
          {
            citycode: "1903",
            adcode: "659009",
            name: "喀拉喀什镇",
            center: "79.767779,37.286651",
            level: "street",
            districts: []
          },
          {
            citycode: "1903",
            adcode: "659009",
            name: "乌鲁克萨依乡",
            center: "80.814802,36.292522",
            level: "street",
            districts: []
          },
          {
            citycode: "1903",
            adcode: "659009",
            name: "奴尔乡",
            center: "81.007196,36.260502",
            level: "street",
            districts: []
          },
          {
            citycode: "1903",
            adcode: "659009",
            name: "昆牧镇",
            center: "81.029494,36.315217",
            level: "street",
            districts: []
          },
          {
            citycode: "1903",
            adcode: "659009",
            name: "博斯坦乡",
            center: "81.329779,36.412423",
            level: "street",
            districts: []
          },
          {
            citycode: "1903",
            adcode: "659009",
            name: "昆泉镇",
            center: "78.514768,37.566112",
            level: "street",
            districts: []
          },
          {
            citycode: "1903",
            adcode: "659009",
            name: "兵团二二四团",
            center: "79.341040,37.380043",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "0906",
        adcode: "654300",
        name: "阿勒泰地区",
        center: "88.141253,47.844924",
        level: "city",
        districts: [
          {
            citycode: "0906",
            adcode: "654321",
            name: "布尔津县",
            center: "86.875043,47.701892",
            level: "district",
            districts: []
          },
          {
            citycode: "0906",
            adcode: "654324",
            name: "哈巴河县",
            center: "86.418621,48.060846",
            level: "district",
            districts: []
          },
          {
            citycode: "0906",
            adcode: "654322",
            name: "富蕴县",
            center: "89.525463,46.994046",
            level: "district",
            districts: []
          },
          {
            citycode: "0906",
            adcode: "654326",
            name: "吉木乃县",
            center: "85.874096,47.443101",
            level: "district",
            districts: []
          },
          {
            citycode: "0906",
            adcode: "654325",
            name: "青河县",
            center: "90.375159,46.678532",
            level: "district",
            districts: []
          },
          {
            citycode: "0906",
            adcode: "654323",
            name: "福海县",
            center: "87.486703,47.111918",
            level: "district",
            districts: []
          },
          {
            citycode: "0906",
            adcode: "654301",
            name: "阿勒泰市",
            center: "88.131842,47.827308",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0993",
        adcode: "659001",
        name: "石河子市",
        center: "86.080397,44.305368",
        level: "city",
        districts: [
          {
            citycode: "0993",
            adcode: "659001",
            name: "兵团一五二团",
            center: "86.070393,44.282700",
            level: "street",
            districts: []
          },
          {
            citycode: "0993",
            adcode: "659001",
            name: "向阳街道",
            center: "86.039719,44.342873",
            level: "street",
            districts: []
          },
          {
            citycode: "0993",
            adcode: "659001",
            name: "红山街道",
            center: "86.048043,44.268209",
            level: "street",
            districts: []
          },
          {
            citycode: "0993",
            adcode: "659001",
            name: "东城街道",
            center: "86.068708,44.287316",
            level: "street",
            districts: []
          },
          {
            citycode: "0993",
            adcode: "659001",
            name: "石河子镇",
            center: "86.102202,44.135229",
            level: "street",
            districts: []
          },
          {
            citycode: "0993",
            adcode: "659001",
            name: "老街街道",
            center: "85.990921,44.349559",
            level: "street",
            districts: []
          },
          {
            citycode: "0993",
            adcode: "659001",
            name: "新城街道",
            center: "85.982288,44.289311",
            level: "street",
            districts: []
          },
          {
            citycode: "0993",
            adcode: "659001",
            name: "北泉镇",
            center: "86.098308,44.434587",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "0994",
        adcode: "652300",
        name: "昌吉回族自治州",
        center: "87.308995,44.011044",
        level: "city",
        districts: [
          {
            citycode: "0994",
            adcode: "652325",
            name: "奇台县",
            center: "89.593879,44.022001",
            level: "district",
            districts: []
          },
          {
            citycode: "0994",
            adcode: "652324",
            name: "玛纳斯县",
            center: "86.20488,44.284601",
            level: "district",
            districts: []
          },
          {
            citycode: "0994",
            adcode: "652323",
            name: "呼图壁县",
            center: "86.871532,44.179362",
            level: "district",
            districts: []
          },
          {
            citycode: "0994",
            adcode: "652328",
            name: "木垒哈萨克自治县",
            center: "90.286013,43.834631",
            level: "district",
            districts: []
          },
          {
            citycode: "0994",
            adcode: "652302",
            name: "阜康市",
            center: "87.953826,44.164525",
            level: "district",
            districts: []
          },
          {
            citycode: "0994",
            adcode: "652327",
            name: "吉木萨尔县",
            center: "89.179698,44.000404",
            level: "district",
            districts: []
          },
          {
            citycode: "0994",
            adcode: "652301",
            name: "昌吉市",
            center: "87.267432,44.014468",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "1994",
        adcode: "659004",
        name: "五家渠市",
        center: "87.542852,44.166489",
        level: "city",
        districts: [
          {
            citycode: "1994",
            adcode: "659004",
            name: "梧桐镇",
            center: "87.592476,44.269442",
            level: "street",
            districts: []
          },
          {
            citycode: "1994",
            adcode: "659004",
            name: "人民路街道",
            center: "87.572823,44.182157",
            level: "street",
            districts: []
          },
          {
            citycode: "1994",
            adcode: "659004",
            name: "兵团一零一团",
            center: "87.556234,44.175160",
            level: "street",
            districts: []
          },
          {
            citycode: "1994",
            adcode: "659004",
            name: "蔡家湖镇",
            center: "87.407474,44.531659",
            level: "street",
            districts: []
          },
          {
            citycode: "1994",
            adcode: "659004",
            name: "青湖路街道",
            center: "87.524481,44.176392",
            level: "street",
            districts: []
          },
          {
            citycode: "1994",
            adcode: "659004",
            name: "军垦路街道",
            center: "87.508160,44.188534",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "0996",
        adcode: "652800",
        name: "巴音郭楞蒙古自治州",
        center: "86.145298,41.764115",
        level: "city",
        districts: [
          {
            citycode: "0996",
            adcode: "652827",
            name: "和静县",
            center: "86.384065,42.323625",
            level: "district",
            districts: []
          },
          {
            citycode: "0996",
            adcode: "652828",
            name: "和硕县",
            center: "86.877688,42.28361",
            level: "district",
            districts: []
          },
          {
            citycode: "0996",
            adcode: "652826",
            name: "焉耆回族自治县",
            center: "86.57434,42.059509",
            level: "district",
            districts: []
          },
          {
            citycode: "0996",
            adcode: "652829",
            name: "博湖县",
            center: "86.632116,41.980745",
            level: "district",
            districts: []
          },
          {
            citycode: "0996",
            adcode: "652824",
            name: "若羌县",
            center: "88.167226,39.022626",
            level: "district",
            districts: []
          },
          {
            citycode: "0996",
            adcode: "652825",
            name: "且末县",
            center: "85.529619,38.145749",
            level: "district",
            districts: []
          },
          {
            citycode: "0996",
            adcode: "652801",
            name: "库尔勒市",
            center: "86.174633,41.725891",
            level: "district",
            districts: []
          },
          {
            citycode: "0996",
            adcode: "652822",
            name: "轮台县",
            center: "84.251508,41.778043",
            level: "district",
            districts: []
          },
          {
            citycode: "0996",
            adcode: "652823",
            name: "尉犁县",
            center: "86.261613,41.343871",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0999",
        adcode: "654000",
        name: "伊犁哈萨克自治州",
        center: "81.323691,43.917106",
        level: "city",
        districts: [
          {
            citycode: "0999",
            adcode: "654021",
            name: "伊宁县",
            center: "81.52745,43.977119",
            level: "district",
            districts: []
          },
          {
            citycode: "0999",
            adcode: "654028",
            name: "尼勒克县",
            center: "82.511884,43.798627",
            level: "district",
            districts: []
          },
          {
            citycode: "0999",
            adcode: "654024",
            name: "巩留县",
            center: "82.231219,43.48313",
            level: "district",
            districts: []
          },
          {
            citycode: "0999",
            adcode: "654027",
            name: "特克斯县",
            center: "81.835732,43.218435",
            level: "district",
            districts: []
          },
          {
            citycode: "0999",
            adcode: "654025",
            name: "新源县",
            center: "83.233002,43.434803",
            level: "district",
            districts: []
          },
          {
            citycode: "0999",
            adcode: "654026",
            name: "昭苏县",
            center: "81.130974,43.157293",
            level: "district",
            districts: []
          },
          {
            citycode: "0999",
            adcode: "654022",
            name: "察布查尔锡伯自治县",
            center: "81.151337,43.840726",
            level: "district",
            districts: []
          },
          {
            citycode: "0999",
            adcode: "654023",
            name: "霍城县",
            center: "80.878845,44.056329",
            level: "district",
            districts: []
          },
          {
            citycode: "0999",
            adcode: "654004",
            name: "霍尔果斯市",
            center: "80.414614,44.218381",
            level: "district",
            districts: []
          },
          {
            citycode: "0999",
            adcode: "654002",
            name: "伊宁市",
            center: "81.277715,43.908021",
            level: "district",
            districts: []
          },
          {
            citycode: "0999",
            adcode: "654003",
            name: "奎屯市",
            center: "84.903216,44.426452",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "1997",
        adcode: "659002",
        name: "阿拉尔市",
        center: "81.280532,40.547205",
        level: "city",
        districts: [
          {
            citycode: "1997",
            adcode: "659002",
            name: "幸福路街道",
            center: "81.268130,40.577004",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "阿拉尔农场",
            center: "81.062656,40.556663",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "兵团第一师幸福农场",
            center: "80.990434,40.702482",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "工业园区",
            center: "81.244753,40.546097",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "玛滩镇",
            center: "80.654296,40.656858",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "花桥镇",
            center: "81.561898,40.627686",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "沙河镇",
            center: "80.734788,41.289273",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "托喀依乡",
            center: "81.354140,40.581819",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "青松路街道",
            center: "81.254474,40.542004",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "兵团第一师水利水电工程处",
            center: "81.285832,40.549624",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "塔门镇",
            center: "80.799573,40.597311",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "中心监狱",
            center: "81.276603,40.669193",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "兵团第一师塔里木灌区水利管理处",
            center: "81.287622,40.545393",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "新开岭镇",
            center: "80.787134,40.416267",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "塔南镇",
            center: "81.110877,40.497749",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "金银川路街道",
            center: "81.261298,40.535480",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "昌安镇",
            center: "81.259033,40.638710",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "幸福镇",
            center: "81.473400,40.574242",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "南口街道",
            center: "81.298804,40.515367",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "金杨镇",
            center: "81.873439,40.928322",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "双城镇",
            center: "80.404393,41.039323",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "新井子镇",
            center: "80.027429,40.565638",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "金银川镇",
            center: "80.086552,40.691135",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "兵团农一师沙井子水利管理处",
            center: "79.726734,40.436977",
            level: "street",
            districts: []
          },
          {
            citycode: "1997",
            adcode: "659002",
            name: "甘泉镇",
            center: "79.814651,40.477280",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "0908",
        adcode: "653000",
        name: "克孜勒苏柯尔克孜自治州",
        center: "76.167327,39.714734",
        level: "city",
        districts: [
          {
            citycode: "0908",
            adcode: "653001",
            name: "阿图什市",
            center: "76.167538,39.716586",
            level: "district",
            districts: []
          },
          {
            citycode: "0908",
            adcode: "653024",
            name: "乌恰县",
            center: "75.259228,39.7205",
            level: "district",
            districts: []
          },
          {
            citycode: "0908",
            adcode: "653023",
            name: "阿合奇县",
            center: "78.402073,40.937581",
            level: "district",
            districts: []
          },
          {
            citycode: "0908",
            adcode: "653022",
            name: "阿克陶县",
            center: "75.947396,39.147785",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0998",
        adcode: "653100",
        name: "喀什地区",
        center: "75.989746,39.470492",
        level: "city",
        districts: [
          {
            citycode: "0998",
            adcode: "653129",
            name: "伽师县",
            center: "76.723719,39.488181",
            level: "district",
            districts: []
          },
          {
            citycode: "0998",
            adcode: "653125",
            name: "莎车县",
            center: "77.223197,38.390881",
            level: "district",
            districts: []
          },
          {
            citycode: "0998",
            adcode: "653122",
            name: "疏勒县",
            center: "76.047169,39.401173",
            level: "district",
            districts: []
          },
          {
            citycode: "0998",
            adcode: "653131",
            name: "塔什库尔干塔吉克自治县",
            center: "75.229889,37.772094",
            level: "district",
            districts: []
          },
          {
            citycode: "0998",
            adcode: "653126",
            name: "叶城县",
            center: "77.413669,37.882994",
            level: "district",
            districts: []
          },
          {
            citycode: "0998",
            adcode: "653127",
            name: "麦盖提县",
            center: "77.609099,38.898986",
            level: "district",
            districts: []
          },
          {
            citycode: "0998",
            adcode: "653124",
            name: "泽普县",
            center: "77.260375,38.184639",
            level: "district",
            districts: []
          },
          {
            citycode: "0998",
            adcode: "653130",
            name: "巴楚县",
            center: "78.54799,39.79923",
            level: "district",
            districts: []
          },
          {
            citycode: "0998",
            adcode: "653123",
            name: "英吉沙县",
            center: "76.175729,38.930381",
            level: "district",
            districts: []
          },
          {
            citycode: "0998",
            adcode: "653128",
            name: "岳普湖县",
            center: "76.821269,39.219857",
            level: "district",
            districts: []
          },
          {
            citycode: "0998",
            adcode: "653101",
            name: "喀什市",
            center: "75.993936,39.46823",
            level: "district",
            districts: []
          },
          {
            citycode: "0998",
            adcode: "653121",
            name: "疏附县",
            center: "75.862839,39.375052",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0990",
        adcode: "650200",
        name: "克拉玛依市",
        center: "84.889239,45.577712",
        level: "city",
        districts: [
          {
            citycode: "0990",
            adcode: "650205",
            name: "乌尔禾区",
            center: "85.692518,46.085819",
            level: "district",
            districts: []
          },
          {
            citycode: "0990",
            adcode: "650202",
            name: "独山子区",
            center: "84.886973,44.328096",
            level: "district",
            districts: []
          },
          {
            citycode: "0990",
            adcode: "650204",
            name: "白碱滩区",
            center: "85.119047,45.685416",
            level: "district",
            districts: []
          },
          {
            citycode: "0990",
            adcode: "650203",
            name: "克拉玛依区",
            center: "84.867862,45.602347",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0995",
        adcode: "650400",
        name: "吐鲁番市",
        center: "89.190374,42.950736",
        level: "city",
        districts: [
          {
            citycode: "0995",
            adcode: "650402",
            name: "高昌区",
            center: "89.185891,42.942728",
            level: "district",
            districts: []
          },
          {
            citycode: "0995",
            adcode: "650421",
            name: "鄯善县",
            center: "90.242843,42.900575",
            level: "district",
            districts: []
          },
          {
            citycode: "0995",
            adcode: "650422",
            name: "托克逊县",
            center: "88.643739,42.802585",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0902",
        adcode: "650500",
        name: "哈密市",
        center: "93.515053,42.819346",
        level: "city",
        districts: [
          {
            citycode: "0902",
            adcode: "650522",
            name: "伊吾县",
            center: "94.697074,43.254978",
            level: "district",
            districts: []
          },
          {
            citycode: "0902",
            adcode: "650521",
            name: "巴里坤哈萨克自治县",
            center: "93.016563,43.598756",
            level: "district",
            districts: []
          },
          {
            citycode: "0902",
            adcode: "650502",
            name: "伊州区",
            center: "93.515085,42.827376",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "2940",
        adcode: "659011",
        name: "新星市",
        center: "93.74831,42.797043",
        level: "city",
        districts: [
          {
            citycode: "2940",
            adcode: "659011",
            name: "兵团红星四场",
            center: "94.068557,42.529865",
            level: "street",
            districts: []
          },
          {
            citycode: "2940",
            adcode: "659011",
            name: "兵团红星一场",
            center: "93.645240,42.686620",
            level: "street",
            districts: []
          },
          {
            citycode: "2940",
            adcode: "659011",
            name: "兵团黄田农场",
            center: "93.719461,42.567696",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "1998",
        adcode: "659003",
        name: "图木舒克市",
        center: "79.074965,39.867776",
        level: "city",
        districts: [
          {
            citycode: "1998",
            adcode: "659003",
            name: "海安镇",
            center: "78.756041,39.822379",
            level: "street",
            districts: []
          },
          {
            citycode: "1998",
            adcode: "659003",
            name: "兵团图木舒克市永安坝",
            center: "79.013314,39.838481",
            level: "street",
            districts: []
          },
          {
            citycode: "1998",
            adcode: "659003",
            name: "唐驿镇",
            center: "79.290232,39.988845",
            level: "street",
            districts: []
          },
          {
            citycode: "1998",
            adcode: "659003",
            name: "前海街道",
            center: "79.077771,39.855038",
            level: "street",
            districts: []
          },
          {
            citycode: "1998",
            adcode: "659003",
            name: "喀拉拜勒镇",
            center: "79.011211,39.852615",
            level: "street",
            districts: []
          },
          {
            citycode: "1998",
            adcode: "659003",
            name: "永安坝街道",
            center: "79.022922,39.850664",
            level: "street",
            districts: []
          },
          {
            citycode: "1998",
            adcode: "659003",
            name: "齐干却勒街道",
            center: "79.090585,39.875314",
            level: "street",
            districts: []
          },
          {
            citycode: "1998",
            adcode: "659003",
            name: "金胡杨镇",
            center: "79.321433,40.031839",
            level: "street",
            districts: []
          },
          {
            citycode: "1998",
            adcode: "659003",
            name: "夏河镇",
            center: "79.231481,39.954869",
            level: "street",
            districts: []
          },
          {
            citycode: "1998",
            adcode: "659003",
            name: "永安镇",
            center: "79.192620,39.916764",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "0997",
        adcode: "652900",
        name: "阿克苏地区",
        center: "80.265068,41.170712",
        level: "city",
        districts: [
          {
            citycode: "0997",
            adcode: "652926",
            name: "拜城县",
            center: "81.851289,41.795289",
            level: "district",
            districts: []
          },
          {
            citycode: "0997",
            adcode: "652902",
            name: "库车市",
            center: "82.998544,41.719073",
            level: "district",
            districts: []
          },
          {
            citycode: "0997",
            adcode: "652924",
            name: "沙雅县",
            center: "82.781774,41.221413",
            level: "district",
            districts: []
          },
          {
            citycode: "0997",
            adcode: "652925",
            name: "新和县",
            center: "82.620371,41.552097",
            level: "district",
            districts: []
          },
          {
            citycode: "0997",
            adcode: "652901",
            name: "阿克苏市",
            center: "80.263387,41.16755",
            level: "district",
            districts: []
          },
          {
            citycode: "0997",
            adcode: "652927",
            name: "乌什县",
            center: "79.22118,41.222706",
            level: "district",
            districts: []
          },
          {
            citycode: "0997",
            adcode: "652929",
            name: "柯坪县",
            center: "79.054019,40.501645",
            level: "district",
            districts: []
          },
          {
            citycode: "0997",
            adcode: "652922",
            name: "温宿县",
            center: "80.243273,41.272995",
            level: "district",
            districts: []
          },
          {
            citycode: "0997",
            adcode: "652928",
            name: "阿瓦提县",
            center: "80.375053,40.643647",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0991",
        adcode: "650100",
        name: "乌鲁木齐市",
        center: "87.616824,43.825377",
        level: "city",
        districts: [
          {
            citycode: "0991",
            adcode: "650107",
            name: "达坂城区",
            center: "88.311099,43.363668",
            level: "district",
            districts: []
          },
          {
            citycode: "0991",
            adcode: "650102",
            name: "天山区",
            center: "87.631986,43.794312",
            level: "district",
            districts: []
          },
          {
            citycode: "0991",
            adcode: "650105",
            name: "水磨沟区",
            center: "87.64208,43.832714",
            level: "district",
            districts: []
          },
          {
            citycode: "0991",
            adcode: "650109",
            name: "米东区",
            center: "87.655122,43.97444",
            level: "district",
            districts: []
          },
          {
            citycode: "0991",
            adcode: "650121",
            name: "乌鲁木齐县",
            center: "87.464257,43.509016",
            level: "district",
            districts: []
          },
          {
            citycode: "0991",
            adcode: "650103",
            name: "沙依巴克区",
            center: "87.598043,43.800994",
            level: "district",
            districts: []
          },
          {
            citycode: "0991",
            adcode: "650106",
            name: "头屯河区",
            center: "87.42582303,43.87605225",
            level: "district",
            districts: []
          },
          {
            citycode: "0991",
            adcode: "650104",
            name: "新市区",
            center: "87.592684,43.893023",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0992",
        adcode: "659010",
        name: "胡杨河市",
        center: "84.827592,44.692894",
        level: "city",
        districts: [
          {
            citycode: "0992",
            adcode: "659010",
            name: "兵团一二九团",
            center: "84.733352,44.711517",
            level: "street",
            districts: []
          },
          {
            citycode: "0992",
            adcode: "659010",
            name: "兵团一三零团",
            center: "84.642314,44.754040",
            level: "street",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "420000",
    name: "湖北省",
    center: "114.341552,30.546222",
    level: "province",
    districts: [
      {
        citycode: "0710",
        adcode: "420600",
        name: "襄阳市",
        center: "112.121743,32.010161",
        level: "city",
        districts: [
          {
            citycode: "0710",
            adcode: "420682",
            name: "老河口市",
            center: "111.683861,32.359068",
            level: "district",
            districts: []
          },
          {
            citycode: "0710",
            adcode: "420625",
            name: "谷城县",
            center: "111.653077,32.26339",
            level: "district",
            districts: []
          },
          {
            citycode: "0710",
            adcode: "420683",
            name: "枣阳市",
            center: "112.772723,32.128968",
            level: "district",
            districts: []
          },
          {
            citycode: "0710",
            adcode: "420626",
            name: "保康县",
            center: "111.261308,31.87831",
            level: "district",
            districts: []
          },
          {
            citycode: "0710",
            adcode: "420684",
            name: "宜城市",
            center: "112.256486,31.720278",
            level: "district",
            districts: []
          },
          {
            citycode: "0710",
            adcode: "420624",
            name: "南漳县",
            center: "111.838997,31.774649",
            level: "district",
            districts: []
          },
          {
            citycode: "0710",
            adcode: "420607",
            name: "襄州区",
            center: "112.211365,32.088651",
            level: "district",
            districts: []
          },
          {
            citycode: "0710",
            adcode: "420602",
            name: "襄城区",
            center: "112.134025,32.009932",
            level: "district",
            districts: []
          },
          {
            citycode: "0710",
            adcode: "420606",
            name: "樊城区",
            center: "112.135241,32.045065",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0719",
        adcode: "420300",
        name: "十堰市",
        center: "110.798921,32.629057",
        level: "city",
        districts: [
          {
            citycode: "0719",
            adcode: "420304",
            name: "郧阳区",
            center: "110.812101,32.834847",
            level: "district",
            districts: []
          },
          {
            citycode: "0719",
            adcode: "420303",
            name: "张湾区",
            center: "110.769132,32.652297",
            level: "district",
            districts: []
          },
          {
            citycode: "0719",
            adcode: "420302",
            name: "茅箭区",
            center: "110.813478,32.591847",
            level: "district",
            districts: []
          },
          {
            citycode: "0719",
            adcode: "420324",
            name: "竹溪县",
            center: "109.715322,32.318257",
            level: "district",
            districts: []
          },
          {
            citycode: "0719",
            adcode: "420325",
            name: "房县",
            center: "110.726754,32.04017",
            level: "district",
            districts: []
          },
          {
            citycode: "0719",
            adcode: "420323",
            name: "竹山县",
            center: "110.229696,32.225039",
            level: "district",
            districts: []
          },
          {
            citycode: "0719",
            adcode: "420322",
            name: "郧西县",
            center: "110.426005,32.993095",
            level: "district",
            districts: []
          },
          {
            citycode: "0719",
            adcode: "420381",
            name: "丹江口市",
            center: "111.513318,32.540287",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0717",
        adcode: "420500",
        name: "宜昌市",
        center: "111.286962,30.69217",
        level: "city",
        districts: [
          {
            citycode: "0717",
            adcode: "420526",
            name: "兴山县",
            center: "110.746831,31.348065",
            level: "district",
            districts: []
          },
          {
            citycode: "0717",
            adcode: "420527",
            name: "秭归县",
            center: "110.97793,30.825882",
            level: "district",
            districts: []
          },
          {
            citycode: "0717",
            adcode: "420504",
            name: "点军区",
            center: "111.268338,30.69343",
            level: "district",
            districts: []
          },
          {
            citycode: "0717",
            adcode: "420582",
            name: "当阳市",
            center: "111.78836,30.820893",
            level: "district",
            districts: []
          },
          {
            citycode: "0717",
            adcode: "420528",
            name: "长阳土家族自治县",
            center: "111.20697,30.473038",
            level: "district",
            districts: []
          },
          {
            citycode: "0717",
            adcode: "420581",
            name: "宜都市",
            center: "111.450128,30.378444",
            level: "district",
            districts: []
          },
          {
            citycode: "0717",
            adcode: "420525",
            name: "远安县",
            center: "111.640329,31.060904",
            level: "district",
            districts: []
          },
          {
            citycode: "0717",
            adcode: "420529",
            name: "五峰土家族自治县",
            center: "111.07374,30.156741",
            level: "district",
            districts: []
          },
          {
            citycode: "0717",
            adcode: "420503",
            name: "伍家岗区",
            center: "111.360882,30.644048",
            level: "district",
            districts: []
          },
          {
            citycode: "0717",
            adcode: "420505",
            name: "猇亭区",
            center: "111.434378,30.531133",
            level: "district",
            districts: []
          },
          {
            citycode: "0717",
            adcode: "420583",
            name: "枝江市",
            center: "111.760616,30.425758",
            level: "district",
            districts: []
          },
          {
            citycode: "0717",
            adcode: "420502",
            name: "西陵区",
            center: "111.285696,30.710765",
            level: "district",
            districts: []
          },
          {
            citycode: "0717",
            adcode: "420506",
            name: "夷陵区",
            center: "111.326371,30.769875",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "027",
        adcode: "420100",
        name: "武汉市",
        center: "114.304569,30.593354",
        level: "city",
        districts: [
          {
            citycode: "027",
            adcode: "420116",
            name: "黄陂区",
            center: "114.375698,30.882305",
            level: "district",
            districts: []
          },
          {
            citycode: "027",
            adcode: "420117",
            name: "新洲区",
            center: "114.801284,30.841304",
            level: "district",
            districts: []
          },
          {
            citycode: "027",
            adcode: "420113",
            name: "汉南区",
            center: "114.084582,30.308776",
            level: "district",
            districts: []
          },
          {
            citycode: "027",
            adcode: "420114",
            name: "蔡甸区",
            center: "114.087279,30.536395",
            level: "district",
            districts: []
          },
          {
            citycode: "027",
            adcode: "420115",
            name: "江夏区",
            center: "114.320884,30.37558",
            level: "district",
            districts: []
          },
          {
            citycode: "027",
            adcode: "420106",
            name: "武昌区",
            center: "114.316464,30.55418",
            level: "district",
            districts: []
          },
          {
            citycode: "027",
            adcode: "420102",
            name: "江岸区",
            center: "114.309317,30.600008",
            level: "district",
            districts: []
          },
          {
            citycode: "027",
            adcode: "420112",
            name: "东西湖区",
            center: "114.136295,30.620079",
            level: "district",
            districts: []
          },
          {
            citycode: "027",
            adcode: "420107",
            name: "青山区",
            center: "114.385424,30.639842",
            level: "district",
            districts: []
          },
          {
            citycode: "027",
            adcode: "420111",
            name: "洪山区",
            center: "114.342664,30.500642",
            level: "district",
            districts: []
          },
          {
            citycode: "027",
            adcode: "420103",
            name: "江汉区",
            center: "114.270763,30.601129",
            level: "district",
            districts: []
          },
          {
            citycode: "027",
            adcode: "420104",
            name: "硚口区",
            center: "114.214746,30.582559",
            level: "district",
            districts: []
          },
          {
            citycode: "027",
            adcode: "420105",
            name: "汉阳区",
            center: "114.21859,30.554287",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0713",
        adcode: "421100",
        name: "黄冈市",
        center: "114.872425,30.453722",
        level: "city",
        districts: [
          {
            citycode: "0713",
            adcode: "421181",
            name: "麻城市",
            center: "115.008011,31.172917",
            level: "district",
            districts: []
          },
          {
            citycode: "0713",
            adcode: "421102",
            name: "黄州区",
            center: "114.880104,30.434354",
            level: "district",
            districts: []
          },
          {
            citycode: "0713",
            adcode: "421125",
            name: "浠水县",
            center: "115.265155,30.452212",
            level: "district",
            districts: []
          },
          {
            citycode: "0713",
            adcode: "421124",
            name: "英山县",
            center: "115.680953,30.734989",
            level: "district",
            districts: []
          },
          {
            citycode: "0713",
            adcode: "421121",
            name: "团风县",
            center: "114.872364,30.643225",
            level: "district",
            districts: []
          },
          {
            citycode: "0713",
            adcode: "421122",
            name: "红安县",
            center: "114.618134,31.288167",
            level: "district",
            districts: []
          },
          {
            citycode: "0713",
            adcode: "421126",
            name: "蕲春县",
            center: "115.436423,30.226146",
            level: "district",
            districts: []
          },
          {
            citycode: "0713",
            adcode: "421123",
            name: "罗田县",
            center: "115.399149,30.783047",
            level: "district",
            districts: []
          },
          {
            citycode: "0713",
            adcode: "421182",
            name: "武穴市",
            center: "115.595451,29.869602",
            level: "district",
            districts: []
          },
          {
            citycode: "0713",
            adcode: "421127",
            name: "黄梅县",
            center: "115.944219,30.070453",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "1728",
        adcode: "429006",
        name: "天门市",
        center: "113.166545,30.663706",
        level: "city",
        districts: [
          {
            citycode: "1728",
            adcode: "429006",
            name: "胡市镇",
            center: "113.422187,30.802027",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "多祥镇",
            center: "113.357891,30.423413",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "黄潭镇",
            center: "113.038506,30.692160",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "沉湖管委会",
            center: "113.398615,30.458799",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "干驿镇",
            center: "113.450967,30.502984",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "横林镇",
            center: "113.214590,30.564294",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "马湾镇",
            center: "113.312283,30.599323",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "蒋湖农场",
            center: "112.802317,30.636351",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "小板镇",
            center: "113.263987,30.615139",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "岳口镇",
            center: "113.105000,30.586764",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "蒋场镇",
            center: "112.927266,30.646031",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "石家河镇",
            center: "113.076431,30.821122",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "彭市镇",
            center: "113.157308,30.431522",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "佛子山镇",
            center: "113.067782,30.689228",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "九真镇",
            center: "113.206379,30.824523",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "竟陵街道",
            center: "113.182938,30.706618",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "侯口街道",
            center: "113.133899,30.652014",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "麻洋镇",
            center: "113.309397,30.524900",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "杨林街道",
            center: "113.265467,30.685636",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "汪场镇",
            center: "112.978692,30.638003",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "白茅湖农场",
            center: "113.063412,30.586804",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "张港镇",
            center: "112.800635,30.552922",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "渔薪镇",
            center: "112.879015,30.674436",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "拖市镇",
            center: "112.841174,30.729303",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "皂市镇",
            center: "113.223245,30.795738",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "净潭乡",
            center: "113.450669,30.646405",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "卢市镇",
            center: "113.396655,30.659558",
            level: "street",
            districts: []
          },
          {
            citycode: "1728",
            adcode: "429006",
            name: "多宝镇",
            center: "112.705302,30.627076",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "0728",
        adcode: "429004",
        name: "仙桃市",
        center: "113.442973,30.328407",
        level: "city",
        districts: [
          {
            citycode: "0728",
            adcode: "429004",
            name: "剅河镇",
            center: "113.000417,30.369953",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "通海口镇",
            center: "113.205730,30.272193",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "胡场镇",
            center: "113.290392,30.427800",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "干河街道",
            center: "113.451023,30.375391",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "杨林尾镇",
            center: "113.561091,30.201430",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "赵西垸林场",
            center: "113.027184,30.284971",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "九合垸原种场",
            center: "113.005718,30.247343",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "彭场镇",
            center: "113.445865,30.251787",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "沔城回族镇",
            center: "113.200597,30.192111",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "龙华山街道",
            center: "113.460323,30.364932",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "沙湖原种场",
            center: "113.642513,30.148174",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "陈场镇",
            center: "113.110674,30.287925",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "郑场镇",
            center: "112.978652,30.470679",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "郭河镇",
            center: "113.303624,30.302698",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "排湖风景区",
            center: "113.223499,30.298659",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "沙嘴街道",
            center: "113.441389,30.359636",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "张沟镇",
            center: "113.438252,30.296766",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "毛嘴镇",
            center: "113.045359,30.418813",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "三伏潭镇",
            center: "113.206929,30.339491",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "畜禽良种场",
            center: "113.743681,30.184392",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "五湖渔场",
            center: "113.768784,30.187345",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "西流河镇",
            center: "113.762133,30.296361",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "沙湖镇",
            center: "113.729308,30.117713",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "长埫口镇",
            center: "113.744972,30.356683",
            level: "street",
            districts: []
          },
          {
            citycode: "0728",
            adcode: "429004",
            name: "杜湖街道",
            center: "113.364736,30.306324",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "0724",
        adcode: "420800",
        name: "荆门市",
        center: "112.199009,31.035445",
        level: "city",
        districts: [
          {
            citycode: "0724",
            adcode: "420882",
            name: "京山市",
            center: "113.119561,31.018414",
            level: "district",
            districts: []
          },
          {
            citycode: "0724",
            adcode: "420822",
            name: "沙洋县",
            center: "112.588675,30.709167",
            level: "district",
            districts: []
          },
          {
            citycode: "0724",
            adcode: "420804",
            name: "掇刀区",
            center: "112.2079,30.973397",
            level: "district",
            districts: []
          },
          {
            citycode: "0724",
            adcode: "420802",
            name: "东宝区",
            center: "112.201657,31.05187",
            level: "district",
            districts: []
          },
          {
            citycode: "0724",
            adcode: "420881",
            name: "钟祥市",
            center: "112.588032,31.167933",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0712",
        adcode: "420900",
        name: "孝感市",
        center: "113.956962,30.918311",
        level: "city",
        districts: [
          {
            citycode: "0712",
            adcode: "420923",
            name: "云梦县",
            center: "113.752958,31.021736",
            level: "district",
            districts: []
          },
          {
            citycode: "0712",
            adcode: "420981",
            name: "应城市",
            center: "113.571864,30.928592",
            level: "district",
            districts: []
          },
          {
            citycode: "0712",
            adcode: "420902",
            name: "孝南区",
            center: "113.910769,30.91695",
            level: "district",
            districts: []
          },
          {
            citycode: "0712",
            adcode: "420984",
            name: "汉川市",
            center: "113.838068,30.673219",
            level: "district",
            districts: []
          },
          {
            citycode: "0712",
            adcode: "420921",
            name: "孝昌县",
            center: "113.997794,31.258225",
            level: "district",
            districts: []
          },
          {
            citycode: "0712",
            adcode: "420922",
            name: "大悟县",
            center: "114.127122,31.561179",
            level: "district",
            districts: []
          },
          {
            citycode: "0712",
            adcode: "420982",
            name: "安陆市",
            center: "113.688955,31.25565",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0718",
        adcode: "422800",
        name: "恩施土家族苗族自治州",
        center: "109.488076,30.272104",
        level: "city",
        districts: [
          {
            citycode: "0718",
            adcode: "422822",
            name: "建始县",
            center: "109.722333,30.602195",
            level: "district",
            districts: []
          },
          {
            citycode: "0718",
            adcode: "422801",
            name: "恩施市",
            center: "109.479572,30.295148",
            level: "district",
            districts: []
          },
          {
            citycode: "0718",
            adcode: "422802",
            name: "利川市",
            center: "108.936456,30.290974",
            level: "district",
            districts: []
          },
          {
            citycode: "0718",
            adcode: "422825",
            name: "宣恩县",
            center: "109.489918,29.986856",
            level: "district",
            districts: []
          },
          {
            citycode: "0718",
            adcode: "422823",
            name: "巴东县",
            center: "110.340921,31.042854",
            level: "district",
            districts: []
          },
          {
            citycode: "0718",
            adcode: "422826",
            name: "咸丰县",
            center: "109.140163,29.665215",
            level: "district",
            districts: []
          },
          {
            citycode: "0718",
            adcode: "422827",
            name: "来凤县",
            center: "109.407697,29.493474",
            level: "district",
            districts: []
          },
          {
            citycode: "0718",
            adcode: "422828",
            name: "鹤峰县",
            center: "110.034011,29.890073",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "2728",
        adcode: "429005",
        name: "潜江市",
        center: "112.900279,30.401954",
        level: "city",
        districts: [
          {
            citycode: "2728",
            adcode: "429005",
            name: "泰丰街道",
            center: "112.980898,30.416671",
            level: "street",
            districts: []
          },
          {
            citycode: "2728",
            adcode: "429005",
            name: "广华寺街道",
            center: "112.666286,30.463319",
            level: "street",
            districts: []
          },
          {
            citycode: "2728",
            adcode: "429005",
            name: "周矶管理区",
            center: "112.826244,30.456722",
            level: "street",
            districts: []
          },
          {
            citycode: "2728",
            adcode: "429005",
            name: "总口管理区",
            center: "112.890449,30.258095",
            level: "street",
            districts: []
          },
          {
            citycode: "2728",
            adcode: "429005",
            name: "高场街道",
            center: "112.774574,30.407577",
            level: "street",
            districts: []
          },
          {
            citycode: "2728",
            adcode: "429005",
            name: "周矶街道",
            center: "112.818380,30.457558",
            level: "street",
            districts: []
          },
          {
            citycode: "2728",
            adcode: "429005",
            name: "运粮湖管理区",
            center: "112.581820,30.252044",
            level: "street",
            districts: []
          },
          {
            citycode: "2728",
            adcode: "429005",
            name: "王场镇",
            center: "112.818521,30.490597",
            level: "street",
            districts: []
          },
          {
            citycode: "2728",
            adcode: "429005",
            name: "园林街道",
            center: "112.910007,30.376965",
            level: "street",
            districts: []
          },
          {
            citycode: "2728",
            adcode: "429005",
            name: "竹根滩镇",
            center: "112.979245,30.471601",
            level: "street",
            districts: []
          },
          {
            citycode: "2728",
            adcode: "429005",
            name: "白鹭湖管理区",
            center: "112.715593,30.178757",
            level: "street",
            districts: []
          },
          {
            citycode: "2728",
            adcode: "429005",
            name: "渔洋镇",
            center: "112.966486,30.239237",
            level: "street",
            districts: []
          },
          {
            citycode: "2728",
            adcode: "429005",
            name: "熊口镇",
            center: "112.724425,30.340363",
            level: "street",
            districts: []
          },
          {
            citycode: "2728",
            adcode: "429005",
            name: "熊口管理区",
            center: "112.801611,30.194960",
            level: "street",
            districts: []
          },
          {
            citycode: "2728",
            adcode: "429005",
            name: "后湖管理区",
            center: "112.767709,30.404874",
            level: "street",
            districts: []
          },
          {
            citycode: "2728",
            adcode: "429005",
            name: "张金镇",
            center: "112.577250,30.238919",
            level: "street",
            districts: []
          },
          {
            citycode: "2728",
            adcode: "429005",
            name: "杨市街道",
            center: "112.914959,30.383464",
            level: "street",
            districts: []
          },
          {
            citycode: "2728",
            adcode: "429005",
            name: "浩口镇",
            center: "112.650014,30.369497",
            level: "street",
            districts: []
          },
          {
            citycode: "2728",
            adcode: "429005",
            name: "老新镇",
            center: "112.809637,30.218496",
            level: "street",
            districts: []
          },
          {
            citycode: "2728",
            adcode: "429005",
            name: "浩口原种场",
            center: "112.643291,30.378376",
            level: "street",
            districts: []
          },
          {
            citycode: "2728",
            adcode: "429005",
            name: "龙湾镇",
            center: "112.690016,30.284812",
            level: "street",
            districts: []
          },
          {
            citycode: "2728",
            adcode: "429005",
            name: "高石碑镇",
            center: "112.625570,30.620340",
            level: "street",
            districts: []
          },
          {
            citycode: "2728",
            adcode: "429005",
            name: "积玉口镇",
            center: "112.634123,30.398499",
            level: "street",
            districts: []
          },
          {
            citycode: "2728",
            adcode: "429005",
            name: "泽口街道",
            center: "112.915656,30.488160",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "0716",
        adcode: "421000",
        name: "荆州市",
        center: "112.24143,30.336282",
        level: "city",
        districts: [
          {
            citycode: "0716",
            adcode: "421024",
            name: "江陵县",
            center: "112.424581,30.042227",
            level: "district",
            districts: []
          },
          {
            citycode: "0716",
            adcode: "421081",
            name: "石首市",
            center: "112.42538,29.720944",
            level: "district",
            districts: []
          },
          {
            citycode: "0716",
            adcode: "421083",
            name: "洪湖市",
            center: "113.475984,29.827256",
            level: "district",
            districts: []
          },
          {
            citycode: "0716",
            adcode: "421087",
            name: "松滋市",
            center: "111.756455,30.174717",
            level: "district",
            districts: []
          },
          {
            citycode: "0716",
            adcode: "421088",
            name: "监利市",
            center: "112.904634,29.840229",
            level: "district",
            districts: []
          },
          {
            citycode: "0716",
            adcode: "421002",
            name: "沙市区",
            center: "112.251975,30.326693",
            level: "district",
            districts: []
          },
          {
            citycode: "0716",
            adcode: "421022",
            name: "公安县",
            center: "112.229742,30.058519",
            level: "district",
            districts: []
          },
          {
            citycode: "0716",
            adcode: "421003",
            name: "荆州区",
            center: "112.190282,30.352984",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0715",
        adcode: "421200",
        name: "咸宁市",
        center: "114.322601,29.84135",
        level: "city",
        districts: [
          {
            citycode: "0715",
            adcode: "421221",
            name: "嘉鱼县",
            center: "113.939249,29.970575",
            level: "district",
            districts: []
          },
          {
            citycode: "0715",
            adcode: "421224",
            name: "通山县",
            center: "114.482832,29.606468",
            level: "district",
            districts: []
          },
          {
            citycode: "0715",
            adcode: "421202",
            name: "咸安区",
            center: "114.299002,29.852726",
            level: "district",
            districts: []
          },
          {
            citycode: "0715",
            adcode: "421281",
            name: "赤壁市",
            center: "113.900385,29.725122",
            level: "district",
            districts: []
          },
          {
            citycode: "0715",
            adcode: "421222",
            name: "通城县",
            center: "113.816811,29.2454",
            level: "district",
            districts: []
          },
          {
            citycode: "0715",
            adcode: "421223",
            name: "崇阳县",
            center: "114.039484,29.556866",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "1719",
        adcode: "429021",
        name: "神农架林区",
        center: "110.675879,31.745103",
        level: "city",
        districts: [
          {
            citycode: "1719",
            adcode: "429021",
            name: "木鱼镇",
            center: "110.312498,31.393310",
            level: "street",
            districts: []
          },
          {
            citycode: "1719",
            adcode: "429021",
            name: "新华镇",
            center: "110.842423,31.621763",
            level: "street",
            districts: []
          },
          {
            citycode: "1719",
            adcode: "429021",
            name: "宋洛乡",
            center: "110.589789,31.730290",
            level: "street",
            districts: []
          },
          {
            citycode: "1719",
            adcode: "429021",
            name: "松柏镇",
            center: "110.609207,31.704132",
            level: "street",
            districts: []
          },
          {
            citycode: "1719",
            adcode: "429021",
            name: "红坪镇",
            center: "110.196111,31.471819",
            level: "street",
            districts: []
          },
          {
            citycode: "1719",
            adcode: "429021",
            name: "阳日镇",
            center: "110.763336,31.676979",
            level: "street",
            districts: []
          },
          {
            citycode: "1719",
            adcode: "429021",
            name: "下谷坪土家族乡",
            center: "110.149438,31.355154",
            level: "street",
            districts: []
          },
          {
            citycode: "1719",
            adcode: "429021",
            name: "大九湖镇",
            center: "110.106251,31.408207",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "0722",
        adcode: "421300",
        name: "随州市",
        center: "113.382324,31.690275",
        level: "city",
        districts: [
          {
            citycode: "0722",
            adcode: "421321",
            name: "随县",
            center: "113.29097,31.883233",
            level: "district",
            districts: []
          },
          {
            citycode: "0722",
            adcode: "421303",
            name: "曾都区",
            center: "113.371052,31.716423",
            level: "district",
            districts: []
          },
          {
            citycode: "0722",
            adcode: "421381",
            name: "广水市",
            center: "113.825977,31.617015",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0714",
        adcode: "420200",
        name: "黄石市",
        center: "115.038999,30.201082",
        level: "city",
        districts: [
          {
            citycode: "0714",
            adcode: "420205",
            name: "铁山区",
            center: "114.891603,30.203152",
            level: "district",
            districts: []
          },
          {
            citycode: "0714",
            adcode: "420204",
            name: "下陆区",
            center: "114.960914,30.174148",
            level: "district",
            districts: []
          },
          {
            citycode: "0714",
            adcode: "420203",
            name: "西塞山区",
            center: "115.110067,30.205114",
            level: "district",
            districts: []
          },
          {
            citycode: "0714",
            adcode: "420281",
            name: "大冶市",
            center: "114.98046,30.096263",
            level: "district",
            districts: []
          },
          {
            citycode: "0714",
            adcode: "420202",
            name: "黄石港区",
            center: "115.065653,30.223194",
            level: "district",
            districts: []
          },
          {
            citycode: "0714",
            adcode: "420222",
            name: "阳新县",
            center: "115.215211,29.830236",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0711",
        adcode: "420700",
        name: "鄂州市",
        center: "114.894909,30.391461",
        level: "city",
        districts: [
          {
            citycode: "0711",
            adcode: "420703",
            name: "华容区",
            center: "114.729945,30.53515",
            level: "district",
            districts: []
          },
          {
            citycode: "0711",
            adcode: "420704",
            name: "鄂城区",
            center: "114.89157,30.400535",
            level: "district",
            districts: []
          },
          {
            citycode: "0711",
            adcode: "420702",
            name: "梁子湖区",
            center: "114.684805,30.100146",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "210000",
    name: "辽宁省",
    center: "123.435093,41.836743",
    level: "province",
    districts: [
      {
        citycode: "0429",
        adcode: "211400",
        name: "葫芦岛市",
        center: "120.836783,40.710974",
        level: "city",
        districts: [
          {
            citycode: "0429",
            adcode: "211422",
            name: "建昌县",
            center: "119.836669,40.824484",
            level: "district",
            districts: []
          },
          {
            citycode: "0429",
            adcode: "211403",
            name: "龙港区",
            center: "120.894054,40.735717",
            level: "district",
            districts: []
          },
          {
            citycode: "0429",
            adcode: "211481",
            name: "兴城市",
            center: "120.756661,40.60999",
            level: "district",
            districts: []
          },
          {
            citycode: "0429",
            adcode: "211421",
            name: "绥中县",
            center: "120.34432,40.325576",
            level: "district",
            districts: []
          },
          {
            citycode: "0429",
            adcode: "211404",
            name: "南票区",
            center: "120.74971,41.10721",
            level: "district",
            districts: []
          },
          {
            citycode: "0429",
            adcode: "211402",
            name: "连山区",
            center: "120.869157,40.774784",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0411",
        adcode: "210200",
        name: "大连市",
        center: "121.614786,38.913962",
        level: "city",
        districts: [
          {
            citycode: "0411",
            adcode: "210283",
            name: "庄河市",
            center: "122.965881,39.680825",
            level: "district",
            districts: []
          },
          {
            citycode: "0411",
            adcode: "210281",
            name: "瓦房店市",
            center: "121.979463,39.62701",
            level: "district",
            districts: []
          },
          {
            citycode: "0411",
            adcode: "210214",
            name: "普兰店区",
            center: "121.938299,39.391565",
            level: "district",
            districts: []
          },
          {
            citycode: "0411",
            adcode: "210213",
            name: "金州区",
            center: "121.782513,39.050211",
            level: "district",
            districts: []
          },
          {
            citycode: "0411",
            adcode: "210224",
            name: "长海县",
            center: "122.588487,39.272779",
            level: "district",
            districts: []
          },
          {
            citycode: "0411",
            adcode: "210211",
            name: "甘井子区",
            center: "121.525469,38.952998",
            level: "district",
            districts: []
          },
          {
            citycode: "0411",
            adcode: "210212",
            name: "旅顺口区",
            center: "121.261982,38.851742",
            level: "district",
            districts: []
          },
          {
            citycode: "0411",
            adcode: "210202",
            name: "中山区",
            center: "121.644996,38.918357",
            level: "district",
            districts: []
          },
          {
            citycode: "0411",
            adcode: "210204",
            name: "沙河口区",
            center: "121.594201,38.904771",
            level: "district",
            districts: []
          },
          {
            citycode: "0411",
            adcode: "210203",
            name: "西岗区",
            center: "121.612461,38.914751",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0415",
        adcode: "210600",
        name: "丹东市",
        center: "124.354419,40.000646",
        level: "city",
        districts: [
          {
            citycode: "0415",
            adcode: "210682",
            name: "凤城市",
            center: "124.066873,40.45218",
            level: "district",
            districts: []
          },
          {
            citycode: "0415",
            adcode: "210604",
            name: "振安区",
            center: "124.470005,40.20154",
            level: "district",
            districts: []
          },
          {
            citycode: "0415",
            adcode: "210681",
            name: "东港市",
            center: "124.152581,39.863193",
            level: "district",
            districts: []
          },
          {
            citycode: "0415",
            adcode: "210603",
            name: "振兴区",
            center: "124.383382,40.129706",
            level: "district",
            districts: []
          },
          {
            citycode: "0415",
            adcode: "210624",
            name: "宽甸满族自治县",
            center: "124.783674,40.731319",
            level: "district",
            districts: []
          },
          {
            citycode: "0415",
            adcode: "210602",
            name: "元宝区",
            center: "124.395577,40.136549",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0416",
        adcode: "210700",
        name: "锦州市",
        center: "121.126859,41.096114",
        level: "city",
        districts: [
          {
            citycode: "0416",
            adcode: "210727",
            name: "义县",
            center: "121.239558,41.533553",
            level: "district",
            districts: []
          },
          {
            citycode: "0416",
            adcode: "210711",
            name: "太和区",
            center: "121.103445,41.109232",
            level: "district",
            districts: []
          },
          {
            citycode: "0416",
            adcode: "210781",
            name: "凌海市",
            center: "121.35499,41.160636",
            level: "district",
            districts: []
          },
          {
            citycode: "0416",
            adcode: "210782",
            name: "北镇市",
            center: "121.777503,41.588657",
            level: "district",
            districts: []
          },
          {
            citycode: "0416",
            adcode: "210702",
            name: "古塔区",
            center: "121.128414,41.117481",
            level: "district",
            districts: []
          },
          {
            citycode: "0416",
            adcode: "210703",
            name: "凌河区",
            center: "121.151069,41.115058",
            level: "district",
            districts: []
          },
          {
            citycode: "0416",
            adcode: "210726",
            name: "黑山县",
            center: "122.126645,41.653552",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "024",
        adcode: "210100",
        name: "沈阳市",
        center: "123.464675,41.677576",
        level: "city",
        districts: [
          {
            citycode: "024",
            adcode: "210114",
            name: "于洪区",
            center: "123.308062,41.793925",
            level: "district",
            districts: []
          },
          {
            citycode: "024",
            adcode: "210123",
            name: "康平县",
            center: "123.343701,42.727249",
            level: "district",
            districts: []
          },
          {
            citycode: "024",
            adcode: "210103",
            name: "沈河区",
            center: "123.45884,41.795688",
            level: "district",
            districts: []
          },
          {
            citycode: "024",
            adcode: "210104",
            name: "大东区",
            center: "123.469828,41.805292",
            level: "district",
            districts: []
          },
          {
            citycode: "024",
            adcode: "210115",
            name: "辽中区",
            center: "122.766159,41.517449",
            level: "district",
            districts: []
          },
          {
            citycode: "024",
            adcode: "210106",
            name: "铁西区",
            center: "123.334781,41.821721",
            level: "district",
            districts: []
          },
          {
            citycode: "024",
            adcode: "210113",
            name: "沈北新区",
            center: "123.584209,41.913071",
            level: "district",
            districts: []
          },
          {
            citycode: "024",
            adcode: "210105",
            name: "皇姑区",
            center: "123.441468,41.824574",
            level: "district",
            districts: []
          },
          {
            citycode: "024",
            adcode: "210102",
            name: "和平区",
            center: "123.420401,41.789766",
            level: "district",
            districts: []
          },
          {
            citycode: "024",
            adcode: "210181",
            name: "新民市",
            center: "122.835964,41.985757",
            level: "district",
            districts: []
          },
          {
            citycode: "024",
            adcode: "210124",
            name: "法库县",
            center: "123.440294,42.50108",
            level: "district",
            districts: []
          },
          {
            citycode: "024",
            adcode: "210112",
            name: "浑南区",
            center: "123.449597,41.714729",
            level: "district",
            districts: []
          },
          {
            citycode: "024",
            adcode: "210111",
            name: "苏家屯区",
            center: "123.343937,41.665153",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0410",
        adcode: "211200",
        name: "铁岭市",
        center: "123.726008,42.223709",
        level: "city",
        districts: [
          {
            citycode: "0410",
            adcode: "211282",
            name: "开原市",
            center: "124.051886,42.577645",
            level: "district",
            districts: []
          },
          {
            citycode: "0410",
            adcode: "211281",
            name: "调兵山市",
            center: "123.567039,42.468007",
            level: "district",
            districts: []
          },
          {
            citycode: "0410",
            adcode: "211204",
            name: "清河区",
            center: "124.159232,42.54714",
            level: "district",
            districts: []
          },
          {
            citycode: "0410",
            adcode: "211221",
            name: "铁岭县",
            center: "123.728933,42.223395",
            level: "district",
            districts: []
          },
          {
            citycode: "0410",
            adcode: "211202",
            name: "银州区",
            center: "123.842472,42.286575",
            level: "district",
            districts: []
          },
          {
            citycode: "0410",
            adcode: "211223",
            name: "西丰县",
            center: "124.727491,42.738178",
            level: "district",
            districts: []
          },
          {
            citycode: "0410",
            adcode: "211224",
            name: "昌图县",
            center: "124.086628,42.779333",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0418",
        adcode: "210900",
        name: "阜新市",
        center: "121.670052,42.022028",
        level: "city",
        districts: [
          {
            citycode: "0418",
            adcode: "210905",
            name: "清河门区",
            center: "121.416105,41.7831",
            level: "district",
            districts: []
          },
          {
            citycode: "0418",
            adcode: "210904",
            name: "太平区",
            center: "121.678637,42.010689",
            level: "district",
            districts: []
          },
          {
            citycode: "0418",
            adcode: "210903",
            name: "新邱区",
            center: "121.792067,42.087549",
            level: "district",
            districts: []
          },
          {
            citycode: "0418",
            adcode: "210921",
            name: "阜新蒙古族自治县",
            center: "121.757901,42.065175",
            level: "district",
            districts: []
          },
          {
            citycode: "0418",
            adcode: "210922",
            name: "彰武县",
            center: "122.538563,42.386264",
            level: "district",
            districts: []
          },
          {
            citycode: "0418",
            adcode: "210902",
            name: "海州区",
            center: "121.662594,42.017794",
            level: "district",
            districts: []
          },
          {
            citycode: "0418",
            adcode: "210911",
            name: "细河区",
            center: "121.680157,42.025412",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0414",
        adcode: "210500",
        name: "本溪市",
        center: "123.684984,41.486834",
        level: "city",
        districts: [
          {
            citycode: "0414",
            adcode: "210522",
            name: "桓仁满族自治县",
            center: "125.361061,41.267048",
            level: "district",
            districts: []
          },
          {
            citycode: "0414",
            adcode: "210505",
            name: "南芬区",
            center: "123.744822,41.100273",
            level: "district",
            districts: []
          },
          {
            citycode: "0414",
            adcode: "210504",
            name: "明山区",
            center: "123.861747,41.343624",
            level: "district",
            districts: []
          },
          {
            citycode: "0414",
            adcode: "210521",
            name: "本溪满族自治县",
            center: "124.119545,41.301553",
            level: "district",
            districts: []
          },
          {
            citycode: "0414",
            adcode: "210503",
            name: "溪湖区",
            center: "123.767817,41.32931",
            level: "district",
            districts: []
          },
          {
            citycode: "0414",
            adcode: "210502",
            name: "平山区",
            center: "123.769081,41.299658",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0419",
        adcode: "211000",
        name: "辽阳市",
        center: "123.239669,41.267396",
        level: "city",
        districts: [
          {
            citycode: "0419",
            adcode: "211081",
            name: "灯塔市",
            center: "123.339398,41.426537",
            level: "district",
            districts: []
          },
          {
            citycode: "0419",
            adcode: "211005",
            name: "弓长岭区",
            center: "123.419567,41.151787",
            level: "district",
            districts: []
          },
          {
            citycode: "0419",
            adcode: "211011",
            name: "太子河区",
            center: "123.1814403,41.29502257",
            level: "district",
            districts: []
          },
          {
            citycode: "0419",
            adcode: "211003",
            name: "文圣区",
            center: "123.231262,41.282378",
            level: "district",
            districts: []
          },
          {
            citycode: "0419",
            adcode: "211021",
            name: "辽阳县",
            center: "123.106426,41.206246",
            level: "district",
            districts: []
          },
          {
            citycode: "0419",
            adcode: "211004",
            name: "宏伟区",
            center: "123.196725,41.217852",
            level: "district",
            districts: []
          },
          {
            citycode: "0419",
            adcode: "211002",
            name: "白塔区",
            center: "123.174347,41.270397",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0413",
        adcode: "210400",
        name: "抚顺市",
        center: "123.957053,41.881311",
        level: "city",
        districts: [
          {
            citycode: "0413",
            adcode: "210422",
            name: "新宾满族自治县",
            center: "125.039994,41.734031",
            level: "district",
            districts: []
          },
          {
            citycode: "0413",
            adcode: "210411",
            name: "顺城区",
            center: "123.94504,41.883375",
            level: "district",
            districts: []
          },
          {
            citycode: "0413",
            adcode: "210404",
            name: "望花区",
            center: "123.784235,41.853484",
            level: "district",
            districts: []
          },
          {
            citycode: "0413",
            adcode: "210402",
            name: "新抚区",
            center: "123.91293,41.861922",
            level: "district",
            districts: []
          },
          {
            citycode: "0413",
            adcode: "210421",
            name: "抚顺县",
            center: "123.8999229,41.73009376",
            level: "district",
            districts: []
          },
          {
            citycode: "0413",
            adcode: "210403",
            name: "东洲区",
            center: "124.038491,41.853001",
            level: "district",
            districts: []
          },
          {
            citycode: "0413",
            adcode: "210423",
            name: "清原满族自治县",
            center: "124.924028,42.100804",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0417",
        adcode: "210800",
        name: "营口市",
        center: "122.219148,40.625027",
        level: "city",
        districts: [
          {
            citycode: "0417",
            adcode: "210803",
            name: "西市区",
            center: "122.206431,40.666707",
            level: "district",
            districts: []
          },
          {
            citycode: "0417",
            adcode: "210882",
            name: "大石桥市",
            center: "122.509006,40.644482",
            level: "district",
            districts: []
          },
          {
            citycode: "0417",
            adcode: "210804",
            name: "鲅鱼圈区",
            center: "122.121764,40.226708",
            level: "district",
            districts: []
          },
          {
            citycode: "0417",
            adcode: "210881",
            name: "盖州市",
            center: "122.34845,40.400259",
            level: "district",
            districts: []
          },
          {
            citycode: "0417",
            adcode: "210802",
            name: "站前区",
            center: "122.259058,40.673063",
            level: "district",
            districts: []
          },
          {
            citycode: "0417",
            adcode: "210811",
            name: "老边区",
            center: "122.307956,40.671279",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0421",
        adcode: "211300",
        name: "朝阳市",
        center: "120.488801,41.601855",
        level: "city",
        districts: [
          {
            citycode: "0421",
            adcode: "211324",
            name: "喀喇沁左翼蒙古族自治县",
            center: "119.741223,41.12815",
            level: "district",
            districts: []
          },
          {
            citycode: "0421",
            adcode: "211382",
            name: "凌源市",
            center: "119.401574,41.245445",
            level: "district",
            districts: []
          },
          {
            citycode: "0421",
            adcode: "211381",
            name: "北票市",
            center: "120.771389,41.801117",
            level: "district",
            districts: []
          },
          {
            citycode: "0421",
            adcode: "211303",
            name: "龙城区",
            center: "120.4133759,41.57674859",
            level: "district",
            districts: []
          },
          {
            citycode: "0421",
            adcode: "211322",
            name: "建平县",
            center: "119.64328,41.402891",
            level: "district",
            districts: []
          },
          {
            citycode: "0421",
            adcode: "211302",
            name: "双塔区",
            center: "120.453717,41.565814",
            level: "district",
            districts: []
          },
          {
            citycode: "0421",
            adcode: "211321",
            name: "朝阳县",
            center: "120.390001,41.497923",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0412",
        adcode: "210300",
        name: "鞍山市",
        center: "122.994183,41.108239",
        level: "city",
        districts: [
          {
            citycode: "0412",
            adcode: "210323",
            name: "岫岩满族自治县",
            center: "123.280933,40.290995",
            level: "district",
            districts: []
          },
          {
            citycode: "0412",
            adcode: "210302",
            name: "铁东区",
            center: "122.990888,41.089578",
            level: "district",
            districts: []
          },
          {
            citycode: "0412",
            adcode: "210303",
            name: "铁西区",
            center: "122.969531,41.119719",
            level: "district",
            districts: []
          },
          {
            citycode: "0412",
            adcode: "210304",
            name: "立山区",
            center: "123.029091,41.150401",
            level: "district",
            districts: []
          },
          {
            citycode: "0412",
            adcode: "210311",
            name: "千山区",
            center: "122.9447506,41.0689014",
            level: "district",
            districts: []
          },
          {
            citycode: "0412",
            adcode: "210381",
            name: "海城市",
            center: "122.685176,40.882548",
            level: "district",
            districts: []
          },
          {
            citycode: "0412",
            adcode: "210321",
            name: "台安县",
            center: "122.436037,41.412866",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0427",
        adcode: "211100",
        name: "盘锦市",
        center: "122.170729,40.71956",
        level: "city",
        districts: [
          {
            citycode: "0427",
            adcode: "211122",
            name: "盘山县",
            center: "121.996408,41.243367",
            level: "district",
            districts: []
          },
          {
            citycode: "0427",
            adcode: "211102",
            name: "双台子区",
            center: "122.07597,41.212401",
            level: "district",
            districts: []
          },
          {
            citycode: "0427",
            adcode: "211103",
            name: "兴隆台区",
            center: "122.070685,41.120261",
            level: "district",
            districts: []
          },
          {
            citycode: "0427",
            adcode: "211104",
            name: "大洼区",
            center: "122.082227,41.002679",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "370000",
    name: "山东省",
    center: "117.020725,36.670201",
    level: "province",
    districts: [
      {
        citycode: "0533",
        adcode: "370300",
        name: "淄博市",
        center: "118.054994,36.813787",
        level: "city",
        districts: [
          {
            citycode: "0533",
            adcode: "370321",
            name: "桓台县",
            center: "118.097923,36.959794",
            level: "district",
            districts: []
          },
          {
            citycode: "0533",
            adcode: "370303",
            name: "张店区",
            center: "118.017877,36.807011",
            level: "district",
            districts: []
          },
          {
            citycode: "0533",
            adcode: "370305",
            name: "临淄区",
            center: "118.309398,36.826882",
            level: "district",
            districts: []
          },
          {
            citycode: "0533",
            adcode: "370322",
            name: "高青县",
            center: "117.826743,37.171042",
            level: "district",
            districts: []
          },
          {
            citycode: "0533",
            adcode: "370304",
            name: "博山区",
            center: "117.8627,36.495014",
            level: "district",
            districts: []
          },
          {
            citycode: "0533",
            adcode: "370302",
            name: "淄川区",
            center: "117.966978,36.644211",
            level: "district",
            districts: []
          },
          {
            citycode: "0533",
            adcode: "370323",
            name: "沂源县",
            center: "118.170856,36.185402",
            level: "district",
            districts: []
          },
          {
            citycode: "0533",
            adcode: "370306",
            name: "周村区",
            center: "117.869686,36.80309",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0546",
        adcode: "370500",
        name: "东营市",
        center: "118.674633,37.433992",
        level: "city",
        districts: [
          {
            citycode: "0546",
            adcode: "370522",
            name: "利津县",
            center: "118.255084,37.490919",
            level: "district",
            districts: []
          },
          {
            citycode: "0546",
            adcode: "370523",
            name: "广饶县",
            center: "118.419437,37.053915",
            level: "district",
            districts: []
          },
          {
            citycode: "0546",
            adcode: "370502",
            name: "东营区",
            center: "118.582182,37.449035",
            level: "district",
            districts: []
          },
          {
            citycode: "0546",
            adcode: "370503",
            name: "河口区",
            center: "118.525519,37.886217",
            level: "district",
            districts: []
          },
          {
            citycode: "0546",
            adcode: "370505",
            name: "垦利区",
            center: "118.575234,37.573412",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0543",
        adcode: "371600",
        name: "滨州市",
        center: "117.970731,37.382687",
        level: "city",
        districts: [
          {
            citycode: "0543",
            adcode: "371602",
            name: "滨城区",
            center: "118.019567,37.431997",
            level: "district",
            districts: []
          },
          {
            citycode: "0543",
            adcode: "371625",
            name: "博兴县",
            center: "118.110715,37.154529",
            level: "district",
            districts: []
          },
          {
            citycode: "0543",
            adcode: "371603",
            name: "沾化区",
            center: "118.098962,37.698952",
            level: "district",
            districts: []
          },
          {
            citycode: "0543",
            adcode: "371622",
            name: "阳信县",
            center: "117.603407,37.632773",
            level: "district",
            districts: []
          },
          {
            citycode: "0543",
            adcode: "371623",
            name: "无棣县",
            center: "117.625846,37.770579",
            level: "district",
            districts: []
          },
          {
            citycode: "0543",
            adcode: "371621",
            name: "惠民县",
            center: "117.593744,37.47528",
            level: "district",
            districts: []
          },
          {
            citycode: "0543",
            adcode: "371681",
            name: "邹平市",
            center: "117.74313,36.863393",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0535",
        adcode: "370600",
        name: "烟台市",
        center: "121.447755,37.464551",
        level: "city",
        districts: [
          {
            citycode: "0535",
            adcode: "370683",
            name: "莱州市",
            center: "119.942057,37.178187",
            level: "district",
            districts: []
          },
          {
            citycode: "0535",
            adcode: "370682",
            name: "莱阳市",
            center: "120.711555,36.979757",
            level: "district",
            districts: []
          },
          {
            citycode: "0535",
            adcode: "370687",
            name: "海阳市",
            center: "121.173506,36.688316",
            level: "district",
            districts: []
          },
          {
            citycode: "0535",
            adcode: "370602",
            name: "芝罘区",
            center: "121.400303,37.541312",
            level: "district",
            districts: []
          },
          {
            citycode: "0535",
            adcode: "370681",
            name: "龙口市",
            center: "120.47614,37.645281",
            level: "district",
            districts: []
          },
          {
            citycode: "0535",
            adcode: "370612",
            name: "牟平区",
            center: "121.601015,37.387454",
            level: "district",
            districts: []
          },
          {
            citycode: "0535",
            adcode: "370614",
            name: "蓬莱区",
            center: "120.829141,37.795697",
            level: "district",
            districts: []
          },
          {
            citycode: "0535",
            adcode: "370613",
            name: "莱山区",
            center: "121.444949,37.511322",
            level: "district",
            districts: []
          },
          {
            citycode: "0535",
            adcode: "370611",
            name: "福山区",
            center: "121.267638,37.49833",
            level: "district",
            districts: []
          },
          {
            citycode: "0535",
            adcode: "370686",
            name: "栖霞市",
            center: "120.849595,37.335993",
            level: "district",
            districts: []
          },
          {
            citycode: "0535",
            adcode: "370685",
            name: "招远市",
            center: "120.433904,37.354517",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0631",
        adcode: "371000",
        name: "威海市",
        center: "122.120519,37.513315",
        level: "city",
        districts: [
          {
            citycode: "0631",
            adcode: "371003",
            name: "文登区",
            center: "122.08832,37.196032",
            level: "district",
            districts: []
          },
          {
            citycode: "0631",
            adcode: "371083",
            name: "乳山市",
            center: "121.539557,36.920329",
            level: "district",
            districts: []
          },
          {
            citycode: "0631",
            adcode: "371082",
            name: "荣成市",
            center: "122.487036,37.165698",
            level: "district",
            districts: []
          },
          {
            citycode: "0631",
            adcode: "371002",
            name: "环翠区",
            center: "122.123115,37.501735",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0635",
        adcode: "371500",
        name: "聊城市",
        center: "115.985238,36.455857",
        level: "city",
        districts: [
          {
            citycode: "0635",
            adcode: "371503",
            name: "茌平区",
            center: "116.254865,36.580814",
            level: "district",
            districts: []
          },
          {
            citycode: "0635",
            adcode: "371521",
            name: "阳谷县",
            center: "115.791822,36.114392",
            level: "district",
            districts: []
          },
          {
            citycode: "0635",
            adcode: "371526",
            name: "高唐县",
            center: "116.230126,36.84715",
            level: "district",
            districts: []
          },
          {
            citycode: "0635",
            adcode: "371522",
            name: "莘县",
            center: "115.669843,36.233711",
            level: "district",
            districts: []
          },
          {
            citycode: "0635",
            adcode: "371525",
            name: "冠县",
            center: "115.441684,36.484011",
            level: "district",
            districts: []
          },
          {
            citycode: "0635",
            adcode: "371581",
            name: "临清市",
            center: "115.704982,36.83828",
            level: "district",
            districts: []
          },
          {
            citycode: "0635",
            adcode: "371502",
            name: "东昌府区",
            center: "116.006399,36.412737",
            level: "district",
            districts: []
          },
          {
            citycode: "0635",
            adcode: "371524",
            name: "东阿县",
            center: "116.247655,36.335198",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0633",
        adcode: "371100",
        name: "日照市",
        center: "119.52685,35.416912",
        level: "city",
        districts: [
          {
            citycode: "0633",
            adcode: "371121",
            name: "五莲县",
            center: "119.213673,35.760154",
            level: "district",
            districts: []
          },
          {
            citycode: "0633",
            adcode: "371103",
            name: "岚山区",
            center: "119.31881,35.121985",
            level: "district",
            districts: []
          },
          {
            citycode: "0633",
            adcode: "371102",
            name: "东港区",
            center: "119.462287,35.426037",
            level: "district",
            districts: []
          },
          {
            citycode: "0633",
            adcode: "371122",
            name: "莒县",
            center: "118.869059,35.59125",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0536",
        adcode: "370700",
        name: "潍坊市",
        center: "119.161721,36.707668",
        level: "city",
        districts: [
          {
            citycode: "0536",
            adcode: "370702",
            name: "潍城区",
            center: "119.02491,36.728077",
            level: "district",
            districts: []
          },
          {
            citycode: "0536",
            adcode: "370783",
            name: "寿光市",
            center: "118.791062,36.857133",
            level: "district",
            districts: []
          },
          {
            citycode: "0536",
            adcode: "370782",
            name: "诸城市",
            center: "119.410051,35.996404",
            level: "district",
            districts: []
          },
          {
            citycode: "0536",
            adcode: "370784",
            name: "安丘市",
            center: "119.21892,36.479642",
            level: "district",
            districts: []
          },
          {
            citycode: "0536",
            adcode: "370725",
            name: "昌乐县",
            center: "118.841035,36.688035",
            level: "district",
            districts: []
          },
          {
            citycode: "0536",
            adcode: "370786",
            name: "昌邑市",
            center: "119.403185,36.843256",
            level: "district",
            districts: []
          },
          {
            citycode: "0536",
            adcode: "370781",
            name: "青州市",
            center: "118.479637,36.685178",
            level: "district",
            districts: []
          },
          {
            citycode: "0536",
            adcode: "370785",
            name: "高密市",
            center: "119.755271,36.382973",
            level: "district",
            districts: []
          },
          {
            citycode: "0536",
            adcode: "370724",
            name: "临朐县",
            center: "118.543274,36.51246",
            level: "district",
            districts: []
          },
          {
            citycode: "0536",
            adcode: "370705",
            name: "奎文区",
            center: "119.132288,36.707459",
            level: "district",
            districts: []
          },
          {
            citycode: "0536",
            adcode: "370704",
            name: "坊子区",
            center: "119.166343,36.653671",
            level: "district",
            districts: []
          },
          {
            citycode: "0536",
            adcode: "370703",
            name: "寒亭区",
            center: "119.211251,36.755925",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0530",
        adcode: "371700",
        name: "菏泽市",
        center: "115.479646,35.234309",
        level: "city",
        districts: [
          {
            citycode: "0530",
            adcode: "371724",
            name: "巨野县",
            center: "116.062585,35.388543",
            level: "district",
            districts: []
          },
          {
            citycode: "0530",
            adcode: "371723",
            name: "成武县",
            center: "115.889775,34.95278",
            level: "district",
            districts: []
          },
          {
            citycode: "0530",
            adcode: "371728",
            name: "东明县",
            center: "115.107402,35.275664",
            level: "district",
            districts: []
          },
          {
            citycode: "0530",
            adcode: "371726",
            name: "鄄城县",
            center: "115.544507,35.534088",
            level: "district",
            districts: []
          },
          {
            citycode: "0530",
            adcode: "371722",
            name: "单县",
            center: "116.106396,34.779282",
            level: "district",
            districts: []
          },
          {
            citycode: "0530",
            adcode: "371725",
            name: "郓城县",
            center: "115.938939,35.575276",
            level: "district",
            districts: []
          },
          {
            citycode: "0530",
            adcode: "371721",
            name: "曹县",
            center: "115.556393,34.85875",
            level: "district",
            districts: []
          },
          {
            citycode: "0530",
            adcode: "371702",
            name: "牡丹区",
            center: "115.417021,35.251911",
            level: "district",
            districts: []
          },
          {
            citycode: "0530",
            adcode: "371703",
            name: "定陶区",
            center: "115.583172,35.105742",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0539",
        adcode: "371300",
        name: "临沂市",
        center: "118.356464,35.103771",
        level: "city",
        districts: [
          {
            citycode: "0539",
            adcode: "371321",
            name: "沂南县",
            center: "118.465259,35.550078",
            level: "district",
            districts: []
          },
          {
            citycode: "0539",
            adcode: "371312",
            name: "河东区",
            center: "118.403073,35.088936",
            level: "district",
            districts: []
          },
          {
            citycode: "0539",
            adcode: "371327",
            name: "莒南县",
            center: "118.835166,35.206252",
            level: "district",
            districts: []
          },
          {
            citycode: "0539",
            adcode: "371325",
            name: "费县",
            center: "117.9776,35.265851",
            level: "district",
            districts: []
          },
          {
            citycode: "0539",
            adcode: "371324",
            name: "兰陵县",
            center: "118.070912,34.858235",
            level: "district",
            districts: []
          },
          {
            citycode: "0539",
            adcode: "371323",
            name: "沂水县",
            center: "118.628142,35.790919",
            level: "district",
            districts: []
          },
          {
            citycode: "0539",
            adcode: "371311",
            name: "罗庄区",
            center: "118.284693,34.997061",
            level: "district",
            districts: []
          },
          {
            citycode: "0539",
            adcode: "371302",
            name: "兰山区",
            center: "118.347332,35.052797",
            level: "district",
            districts: []
          },
          {
            citycode: "0539",
            adcode: "371329",
            name: "临沭县",
            center: "118.650828,34.920171",
            level: "district",
            districts: []
          },
          {
            citycode: "0539",
            adcode: "371328",
            name: "蒙阴县",
            center: "117.953367,35.720128",
            level: "district",
            districts: []
          },
          {
            citycode: "0539",
            adcode: "371326",
            name: "平邑县",
            center: "117.615201,35.516849",
            level: "district",
            districts: []
          },
          {
            citycode: "0539",
            adcode: "371322",
            name: "郯城县",
            center: "118.36727,34.614077",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0531",
        adcode: "370100",
        name: "济南市",
        center: "117.120128,36.652069",
        level: "city",
        districts: [
          {
            citycode: "0531",
            adcode: "370112",
            name: "历城区",
            center: "117.065233,36.680731",
            level: "district",
            districts: []
          },
          {
            citycode: "0531",
            adcode: "370102",
            name: "历下区",
            center: "117.07632,36.666395",
            level: "district",
            districts: []
          },
          {
            citycode: "0531",
            adcode: "370117",
            name: "钢城区",
            center: "117.811604,36.059393",
            level: "district",
            districts: []
          },
          {
            citycode: "0531",
            adcode: "370103",
            name: "市中区",
            center: "116.997472,36.651121",
            level: "district",
            districts: []
          },
          {
            citycode: "0531",
            adcode: "370104",
            name: "槐荫区",
            center: "116.901057,36.652264",
            level: "district",
            districts: []
          },
          {
            citycode: "0531",
            adcode: "370115",
            name: "济阳区",
            center: "117.173722,36.978299",
            level: "district",
            districts: []
          },
          {
            citycode: "0531",
            adcode: "370105",
            name: "天桥区",
            center: "116.987106,36.678665",
            level: "district",
            districts: []
          },
          {
            citycode: "0531",
            adcode: "370114",
            name: "章丘区",
            center: "117.526228,36.681258",
            level: "district",
            districts: []
          },
          {
            citycode: "0531",
            adcode: "370126",
            name: "商河县",
            center: "117.157165,37.309694",
            level: "district",
            districts: []
          },
          {
            citycode: "0531",
            adcode: "370113",
            name: "长清区",
            center: "116.752101,36.554251",
            level: "district",
            districts: []
          },
          {
            citycode: "0531",
            adcode: "370116",
            name: "莱芜区",
            center: "117.675828,36.214895",
            level: "district",
            districts: []
          },
          {
            citycode: "0531",
            adcode: "370124",
            name: "平阴县",
            center: "116.455865,36.289813",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0534",
        adcode: "371400",
        name: "德州市",
        center: "116.359244,37.436492",
        level: "city",
        districts: [
          {
            citycode: "0534",
            adcode: "371481",
            name: "乐陵市",
            center: "117.232085,37.729769",
            level: "district",
            districts: []
          },
          {
            citycode: "0534",
            adcode: "371422",
            name: "宁津县",
            center: "116.800279,37.652456",
            level: "district",
            districts: []
          },
          {
            citycode: "0534",
            adcode: "371402",
            name: "德城区",
            center: "116.299558,37.451051",
            level: "district",
            districts: []
          },
          {
            citycode: "0534",
            adcode: "371428",
            name: "武城县",
            center: "116.069312,37.213398",
            level: "district",
            districts: []
          },
          {
            citycode: "0534",
            adcode: "371403",
            name: "陵城区",
            center: "116.576148,37.336444",
            level: "district",
            districts: []
          },
          {
            citycode: "0534",
            adcode: "371426",
            name: "平原县",
            center: "116.434016,37.165453",
            level: "district",
            districts: []
          },
          {
            citycode: "0534",
            adcode: "371482",
            name: "禹城市",
            center: "116.638558,36.934198",
            level: "district",
            districts: []
          },
          {
            citycode: "0534",
            adcode: "371423",
            name: "庆云县",
            center: "117.384163,37.774376",
            level: "district",
            districts: []
          },
          {
            citycode: "0534",
            adcode: "371427",
            name: "夏津县",
            center: "116.001796,36.948013",
            level: "district",
            districts: []
          },
          {
            citycode: "0534",
            adcode: "371425",
            name: "齐河县",
            center: "116.762767,36.784164",
            level: "district",
            districts: []
          },
          {
            citycode: "0534",
            adcode: "371424",
            name: "临邑县",
            center: "116.866568,37.190139",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0532",
        adcode: "370200",
        name: "青岛市",
        center: "120.382665,36.066938",
        level: "city",
        districts: [
          {
            citycode: "0532",
            adcode: "370285",
            name: "莱西市",
            center: "120.517581,36.889167",
            level: "district",
            districts: []
          },
          {
            citycode: "0532",
            adcode: "370211",
            name: "黄岛区",
            center: "120.19777,35.960688",
            level: "district",
            districts: []
          },
          {
            citycode: "0532",
            adcode: "370281",
            name: "胶州市",
            center: "120.033382,36.26468",
            level: "district",
            districts: []
          },
          {
            citycode: "0532",
            adcode: "370283",
            name: "平度市",
            center: "119.970192,36.753895",
            level: "district",
            districts: []
          },
          {
            citycode: "0532",
            adcode: "370214",
            name: "城阳区",
            center: "120.396255,36.307624",
            level: "district",
            districts: []
          },
          {
            citycode: "0532",
            adcode: "370213",
            name: "李沧区",
            center: "120.432652,36.145987",
            level: "district",
            districts: []
          },
          {
            citycode: "0532",
            adcode: "370202",
            name: "市南区",
            center: "120.412002,36.075867",
            level: "district",
            districts: []
          },
          {
            citycode: "0532",
            adcode: "370203",
            name: "市北区",
            center: "120.374675,36.08765",
            level: "district",
            districts: []
          },
          {
            citycode: "0532",
            adcode: "370212",
            name: "崂山区",
            center: "120.469282,36.107069",
            level: "district",
            districts: []
          },
          {
            citycode: "0532",
            adcode: "370215",
            name: "即墨区",
            center: "120.447691,36.390217",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0538",
        adcode: "370900",
        name: "泰安市",
        center: "117.086963,36.201784",
        level: "city",
        districts: [
          {
            citycode: "0538",
            adcode: "370902",
            name: "泰山区",
            center: "117.135215,36.192833",
            level: "district",
            districts: []
          },
          {
            citycode: "0538",
            adcode: "370921",
            name: "宁阳县",
            center: "116.805578,35.758919",
            level: "district",
            districts: []
          },
          {
            citycode: "0538",
            adcode: "370982",
            name: "新泰市",
            center: "117.768069,35.90953",
            level: "district",
            districts: []
          },
          {
            citycode: "0538",
            adcode: "370911",
            name: "岱岳区",
            center: "117.041651,36.188088",
            level: "district",
            districts: []
          },
          {
            citycode: "0538",
            adcode: "370983",
            name: "肥城市",
            center: "116.769098,36.181975",
            level: "district",
            districts: []
          },
          {
            citycode: "0538",
            adcode: "370923",
            name: "东平县",
            center: "116.470211,35.937049",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0537",
        adcode: "370800",
        name: "济宁市",
        center: "116.587116,35.415117",
        level: "city",
        districts: [
          {
            citycode: "0537",
            adcode: "370829",
            name: "嘉祥县",
            center: "116.342308,35.40794",
            level: "district",
            districts: []
          },
          {
            citycode: "0537",
            adcode: "370828",
            name: "金乡县",
            center: "116.311549,35.06658",
            level: "district",
            districts: []
          },
          {
            citycode: "0537",
            adcode: "370826",
            name: "微山县",
            center: "117.129188,34.806657",
            level: "district",
            districts: []
          },
          {
            citycode: "0537",
            adcode: "370827",
            name: "鱼台县",
            center: "116.650526,35.012706",
            level: "district",
            districts: []
          },
          {
            citycode: "0537",
            adcode: "370832",
            name: "梁山县",
            center: "116.131779,35.765957",
            level: "district",
            districts: []
          },
          {
            citycode: "0537",
            adcode: "370830",
            name: "汶上县",
            center: "116.497277,35.711891",
            level: "district",
            districts: []
          },
          {
            citycode: "0537",
            adcode: "370812",
            name: "兖州区",
            center: "116.78365,35.551938",
            level: "district",
            districts: []
          },
          {
            citycode: "0537",
            adcode: "370811",
            name: "任城区",
            center: "116.605763,35.444226",
            level: "district",
            districts: []
          },
          {
            citycode: "0537",
            adcode: "370881",
            name: "曲阜市",
            center: "116.986212,35.581933",
            level: "district",
            districts: []
          },
          {
            citycode: "0537",
            adcode: "370831",
            name: "泗水县",
            center: "117.250824,35.664719",
            level: "district",
            districts: []
          },
          {
            citycode: "0537",
            adcode: "370883",
            name: "邹城市",
            center: "117.007406,35.402536",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0632",
        adcode: "370400",
        name: "枣庄市",
        center: "117.323759,34.810858",
        level: "city",
        districts: [
          {
            citycode: "0632",
            adcode: "370405",
            name: "台儿庄区",
            center: "117.734287,34.563103",
            level: "district",
            districts: []
          },
          {
            citycode: "0632",
            adcode: "370402",
            name: "市中区",
            center: "117.556125,34.863791",
            level: "district",
            districts: []
          },
          {
            citycode: "0632",
            adcode: "370404",
            name: "峄城区",
            center: "117.590738,34.772931",
            level: "district",
            districts: []
          },
          {
            citycode: "0632",
            adcode: "370406",
            name: "山亭区",
            center: "117.461866,35.099638",
            level: "district",
            districts: []
          },
          {
            citycode: "0632",
            adcode: "370403",
            name: "薛城区",
            center: "117.286371,34.783282",
            level: "district",
            districts: []
          },
          {
            citycode: "0632",
            adcode: "370481",
            name: "滕州市",
            center: "117.165881,35.11412",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "610000",
    name: "陕西省",
    center: "108.953939,34.266611",
    level: "province",
    districts: [
      {
        citycode: "0914",
        adcode: "611000",
        name: "商洛市",
        center: "109.918646,33.873358",
        level: "city",
        districts: [
          {
            citycode: "0914",
            adcode: "611022",
            name: "丹凤县",
            center: "110.327542,33.696254",
            level: "district",
            districts: []
          },
          {
            citycode: "0914",
            adcode: "611023",
            name: "商南县",
            center: "110.881741,33.531071",
            level: "district",
            districts: []
          },
          {
            citycode: "0914",
            adcode: "611021",
            name: "洛南县",
            center: "110.148526,34.090815",
            level: "district",
            districts: []
          },
          {
            citycode: "0914",
            adcode: "611002",
            name: "商州区",
            center: "109.941452,33.862979",
            level: "district",
            districts: []
          },
          {
            citycode: "0914",
            adcode: "611026",
            name: "柞水县",
            center: "109.114006,33.686048",
            level: "district",
            districts: []
          },
          {
            citycode: "0914",
            adcode: "611025",
            name: "镇安县",
            center: "109.152833,33.423764",
            level: "district",
            districts: []
          },
          {
            citycode: "0914",
            adcode: "611024",
            name: "山阳县",
            center: "109.882289,33.532172",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0916",
        adcode: "610700",
        name: "汉中市",
        center: "107.02319,33.066373",
        level: "city",
        districts: [
          {
            citycode: "0916",
            adcode: "610727",
            name: "略阳县",
            center: "106.15658,33.327293",
            level: "district",
            districts: []
          },
          {
            citycode: "0916",
            adcode: "610730",
            name: "佛坪县",
            center: "107.990551,33.524261",
            level: "district",
            districts: []
          },
          {
            citycode: "0916",
            adcode: "610723",
            name: "洋县",
            center: "107.545678,33.222808",
            level: "district",
            districts: []
          },
          {
            citycode: "0916",
            adcode: "610729",
            name: "留坝县",
            center: "106.920781,33.617637",
            level: "district",
            districts: []
          },
          {
            citycode: "0916",
            adcode: "610726",
            name: "宁强县",
            center: "106.257636,32.830032",
            level: "district",
            districts: []
          },
          {
            citycode: "0916",
            adcode: "610725",
            name: "勉县",
            center: "106.673217,33.153636",
            level: "district",
            districts: []
          },
          {
            citycode: "0916",
            adcode: "610702",
            name: "汉台区",
            center: "107.03201,33.067523",
            level: "district",
            districts: []
          },
          {
            citycode: "0916",
            adcode: "610703",
            name: "南郑区",
            center: "106.936235,33.000034",
            level: "district",
            districts: []
          },
          {
            citycode: "0916",
            adcode: "610728",
            name: "镇巴县",
            center: "107.895015,32.536706",
            level: "district",
            districts: []
          },
          {
            citycode: "0916",
            adcode: "610722",
            name: "城固县",
            center: "107.333787,33.156937",
            level: "district",
            districts: []
          },
          {
            citycode: "0916",
            adcode: "610724",
            name: "西乡县",
            center: "107.766477,32.983282",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0919",
        adcode: "610200",
        name: "铜川市",
        center: "108.945116,34.897133",
        level: "city",
        districts: [
          {
            citycode: "0919",
            adcode: "610222",
            name: "宜君县",
            center: "109.117063,35.398624",
            level: "district",
            districts: []
          },
          {
            citycode: "0919",
            adcode: "610203",
            name: "印台区",
            center: "109.099848,35.11454",
            level: "district",
            districts: []
          },
          {
            citycode: "0919",
            adcode: "610204",
            name: "耀州区",
            center: "108.980095,34.909685",
            level: "district",
            districts: []
          },
          {
            citycode: "0919",
            adcode: "610202",
            name: "王益区",
            center: "109.075615,35.068925",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0911",
        adcode: "610600",
        name: "延安市",
        center: "109.49468,36.650109",
        level: "city",
        districts: [
          {
            citycode: "0911",
            adcode: "610681",
            name: "子长市",
            center: "109.675284,37.142462",
            level: "district",
            districts: []
          },
          {
            citycode: "0911",
            adcode: "610626",
            name: "吴起县",
            center: "108.176501,36.92746",
            level: "district",
            districts: []
          },
          {
            citycode: "0911",
            adcode: "610603",
            name: "安塞区",
            center: "109.329236,36.864571",
            level: "district",
            districts: []
          },
          {
            citycode: "0911",
            adcode: "610625",
            name: "志丹县",
            center: "108.767816,36.822232",
            level: "district",
            districts: []
          },
          {
            citycode: "0911",
            adcode: "610622",
            name: "延川县",
            center: "110.193503,36.878324",
            level: "district",
            districts: []
          },
          {
            citycode: "0911",
            adcode: "610602",
            name: "宝塔区",
            center: "109.489726,36.585138",
            level: "district",
            districts: []
          },
          {
            citycode: "0911",
            adcode: "610621",
            name: "延长县",
            center: "110.012455,36.579354",
            level: "district",
            districts: []
          },
          {
            citycode: "0911",
            adcode: "610627",
            name: "甘泉县",
            center: "109.351046,36.276645",
            level: "district",
            districts: []
          },
          {
            citycode: "0911",
            adcode: "610630",
            name: "宜川县",
            center: "110.168963,36.050178",
            level: "district",
            districts: []
          },
          {
            citycode: "0911",
            adcode: "610628",
            name: "富县",
            center: "109.37884,35.988111",
            level: "district",
            districts: []
          },
          {
            citycode: "0911",
            adcode: "610629",
            name: "洛川县",
            center: "109.43249,35.762626",
            level: "district",
            districts: []
          },
          {
            citycode: "0911",
            adcode: "610632",
            name: "黄陵县",
            center: "109.262919,35.579421",
            level: "district",
            districts: []
          },
          {
            citycode: "0911",
            adcode: "610631",
            name: "黄龙县",
            center: "109.84029,35.584655",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "029",
        adcode: "610100",
        name: "西安市",
        center: "108.939645,34.343207",
        level: "city",
        districts: [
          {
            citycode: "029",
            adcode: "610115",
            name: "临潼区",
            center: "109.214249,34.367181",
            level: "district",
            districts: []
          },
          {
            citycode: "029",
            adcode: "610111",
            name: "灞桥区",
            center: "109.064675,34.273111",
            level: "district",
            districts: []
          },
          {
            citycode: "029",
            adcode: "610116",
            name: "长安区",
            center: "108.906944,34.158668",
            level: "district",
            districts: []
          },
          {
            citycode: "029",
            adcode: "610122",
            name: "蓝田县",
            center: "109.323473,34.151256",
            level: "district",
            districts: []
          },
          {
            citycode: "029",
            adcode: "610118",
            name: "鄠邑区",
            center: "108.604772,34.108707",
            level: "district",
            districts: []
          },
          {
            citycode: "029",
            adcode: "610124",
            name: "周至县",
            center: "108.222219,34.163592",
            level: "district",
            districts: []
          },
          {
            citycode: "029",
            adcode: "610114",
            name: "阎良区",
            center: "109.226124,34.662232",
            level: "district",
            districts: []
          },
          {
            citycode: "029",
            adcode: "610104",
            name: "莲湖区",
            center: "108.944161,34.26535",
            level: "district",
            districts: []
          },
          {
            citycode: "029",
            adcode: "610113",
            name: "雁塔区",
            center: "108.948592,34.222517",
            level: "district",
            districts: []
          },
          {
            citycode: "029",
            adcode: "610117",
            name: "高陵区",
            center: "109.088269,34.53502",
            level: "district",
            districts: []
          },
          {
            citycode: "029",
            adcode: "610103",
            name: "碑林区",
            center: "108.940681,34.256727",
            level: "district",
            districts: []
          },
          {
            citycode: "029",
            adcode: "610112",
            name: "未央区",
            center: "108.946665,34.293109",
            level: "district",
            districts: []
          },
          {
            citycode: "029",
            adcode: "610102",
            name: "新城区",
            center: "108.960707,34.266601",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0913",
        adcode: "610500",
        name: "渭南市",
        center: "109.470962,34.520632",
        level: "city",
        districts: [
          {
            citycode: "0913",
            adcode: "610581",
            name: "韩城市",
            center: "110.44295,35.477145",
            level: "district",
            districts: []
          },
          {
            citycode: "0913",
            adcode: "610527",
            name: "白水县",
            center: "109.590501,35.177497",
            level: "district",
            districts: []
          },
          {
            citycode: "0913",
            adcode: "610522",
            name: "潼关县",
            center: "110.246105,34.544294",
            level: "district",
            districts: []
          },
          {
            citycode: "0913",
            adcode: "610525",
            name: "澄城县",
            center: "109.932439,35.190256",
            level: "district",
            districts: []
          },
          {
            citycode: "0913",
            adcode: "610526",
            name: "蒲城县",
            center: "109.586263,34.955755",
            level: "district",
            districts: []
          },
          {
            citycode: "0913",
            adcode: "610524",
            name: "合阳县",
            center: "110.149412,35.237881",
            level: "district",
            districts: []
          },
          {
            citycode: "0913",
            adcode: "610503",
            name: "华州区",
            center: "109.775765,34.497019",
            level: "district",
            districts: []
          },
          {
            citycode: "0913",
            adcode: "610582",
            name: "华阴市",
            center: "110.092286,34.566552",
            level: "district",
            districts: []
          },
          {
            citycode: "0913",
            adcode: "610523",
            name: "大荔县",
            center: "109.941784,34.797073",
            level: "district",
            districts: []
          },
          {
            citycode: "0913",
            adcode: "610502",
            name: "临渭区",
            center: "109.510051,34.498902",
            level: "district",
            districts: []
          },
          {
            citycode: "0913",
            adcode: "610528",
            name: "富平县",
            center: "109.179903,34.751599",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0915",
        adcode: "610900",
        name: "安康市",
        center: "109.029017,32.685435",
        level: "city",
        districts: [
          {
            citycode: "0915",
            adcode: "610923",
            name: "宁陕县",
            center: "108.314299,33.310284",
            level: "district",
            districts: []
          },
          {
            citycode: "0915",
            adcode: "610922",
            name: "石泉县",
            center: "108.248061,33.03805",
            level: "district",
            districts: []
          },
          {
            citycode: "0915",
            adcode: "610925",
            name: "岚皋县",
            center: "108.902049,32.307001",
            level: "district",
            districts: []
          },
          {
            citycode: "0915",
            adcode: "610924",
            name: "紫阳县",
            center: "108.534291,32.520209",
            level: "district",
            districts: []
          },
          {
            citycode: "0915",
            adcode: "610921",
            name: "汉阴县",
            center: "108.508792,32.893057",
            level: "district",
            districts: []
          },
          {
            citycode: "0915",
            adcode: "610927",
            name: "镇坪县",
            center: "109.526873,31.883672",
            level: "district",
            districts: []
          },
          {
            citycode: "0915",
            adcode: "610929",
            name: "白河县",
            center: "110.112608,32.80901",
            level: "district",
            districts: []
          },
          {
            citycode: "0915",
            adcode: "610981",
            name: "旬阳市",
            center: "109.361783,32.832213",
            level: "district",
            districts: []
          },
          {
            citycode: "0915",
            adcode: "610902",
            name: "汉滨区",
            center: "109.026928,32.695436",
            level: "district",
            districts: []
          },
          {
            citycode: "0915",
            adcode: "610926",
            name: "平利县",
            center: "109.361919,32.389061",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0912",
        adcode: "610800",
        name: "榆林市",
        center: "109.734104,38.28576",
        level: "city",
        districts: [
          {
            citycode: "0912",
            adcode: "610822",
            name: "府谷县",
            center: "111.016431,39.015658",
            level: "district",
            districts: []
          },
          {
            citycode: "0912",
            adcode: "610802",
            name: "榆阳区",
            center: "109.72054,38.277078",
            level: "district",
            districts: []
          },
          {
            citycode: "0912",
            adcode: "610831",
            name: "子洲县",
            center: "110.035124,37.610554",
            level: "district",
            districts: []
          },
          {
            citycode: "0912",
            adcode: "610827",
            name: "米脂县",
            center: "110.183984,37.755134",
            level: "district",
            districts: []
          },
          {
            citycode: "0912",
            adcode: "610826",
            name: "绥德县",
            center: "110.263226,37.502984",
            level: "district",
            districts: []
          },
          {
            citycode: "0912",
            adcode: "610881",
            name: "神木市",
            center: "110.466867,38.899742",
            level: "district",
            districts: []
          },
          {
            citycode: "0912",
            adcode: "610829",
            name: "吴堡县",
            center: "110.739726,37.452179",
            level: "district",
            districts: []
          },
          {
            citycode: "0912",
            adcode: "610824",
            name: "靖边县",
            center: "108.794153,37.600351",
            level: "district",
            districts: []
          },
          {
            citycode: "0912",
            adcode: "610830",
            name: "清涧县",
            center: "110.121181,37.088921",
            level: "district",
            districts: []
          },
          {
            citycode: "0912",
            adcode: "610825",
            name: "定边县",
            center: "107.601048,37.594976",
            level: "district",
            districts: []
          },
          {
            citycode: "0912",
            adcode: "610828",
            name: "佳县",
            center: "110.491345,38.01951",
            level: "district",
            districts: []
          },
          {
            citycode: "0912",
            adcode: "610803",
            name: "横山区",
            center: "109.294144,37.962477",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0910",
        adcode: "610400",
        name: "咸阳市",
        center: "108.708837,34.329896",
        level: "city",
        districts: [
          {
            citycode: "0910",
            adcode: "610424",
            name: "乾县",
            center: "108.239316,34.528262",
            level: "district",
            districts: []
          },
          {
            citycode: "0910",
            adcode: "610422",
            name: "三原县",
            center: "108.940754,34.617282",
            level: "district",
            districts: []
          },
          {
            citycode: "0910",
            adcode: "610430",
            name: "淳化县",
            center: "108.580164,34.798596",
            level: "district",
            districts: []
          },
          {
            citycode: "0910",
            adcode: "610403",
            name: "杨陵区",
            center: "108.084661,34.272084",
            level: "district",
            districts: []
          },
          {
            citycode: "0910",
            adcode: "610431",
            name: "武功县",
            center: "108.200275,34.261026",
            level: "district",
            districts: []
          },
          {
            citycode: "0910",
            adcode: "610481",
            name: "兴平市",
            center: "108.490497,34.299199",
            level: "district",
            districts: []
          },
          {
            citycode: "0910",
            adcode: "610429",
            name: "旬邑县",
            center: "108.333815,35.111787",
            level: "district",
            districts: []
          },
          {
            citycode: "0910",
            adcode: "610428",
            name: "长武县",
            center: "107.79906,35.206273",
            level: "district",
            districts: []
          },
          {
            citycode: "0910",
            adcode: "610404",
            name: "渭城区",
            center: "108.737062,34.36202",
            level: "district",
            districts: []
          },
          {
            citycode: "0910",
            adcode: "610402",
            name: "秦都区",
            center: "108.706347,34.329478",
            level: "district",
            districts: []
          },
          {
            citycode: "0910",
            adcode: "610425",
            name: "礼泉县",
            center: "108.424682,34.481875",
            level: "district",
            districts: []
          },
          {
            citycode: "0910",
            adcode: "610426",
            name: "永寿县",
            center: "108.142197,34.69188",
            level: "district",
            districts: []
          },
          {
            citycode: "0910",
            adcode: "610482",
            name: "彬州市",
            center: "108.081892,35.035702",
            level: "district",
            districts: []
          },
          {
            citycode: "0910",
            adcode: "610423",
            name: "泾阳县",
            center: "108.843029,34.526557",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0917",
        adcode: "610300",
        name: "宝鸡市",
        center: "107.237682,34.362862",
        level: "city",
        districts: [
          {
            citycode: "0917",
            adcode: "610327",
            name: "陇县",
            center: "106.864404,34.892985",
            level: "district",
            districts: []
          },
          {
            citycode: "0917",
            adcode: "610328",
            name: "千阳县",
            center: "107.132421,34.642374",
            level: "district",
            districts: []
          },
          {
            citycode: "0917",
            adcode: "610303",
            name: "金台区",
            center: "107.232733,34.397071",
            level: "district",
            districts: []
          },
          {
            citycode: "0917",
            adcode: "610302",
            name: "渭滨区",
            center: "107.155344,34.355068",
            level: "district",
            districts: []
          },
          {
            citycode: "0917",
            adcode: "610330",
            name: "凤县",
            center: "106.515841,33.910797",
            level: "district",
            districts: []
          },
          {
            citycode: "0917",
            adcode: "610331",
            name: "太白县",
            center: "107.318932,34.058299",
            level: "district",
            districts: []
          },
          {
            citycode: "0917",
            adcode: "610326",
            name: "眉县",
            center: "107.750039,34.274774",
            level: "district",
            districts: []
          },
          {
            citycode: "0917",
            adcode: "610324",
            name: "扶风县",
            center: "107.900157,34.375636",
            level: "district",
            districts: []
          },
          {
            citycode: "0917",
            adcode: "610304",
            name: "陈仓区",
            center: "107.368993,34.35073",
            level: "district",
            districts: []
          },
          {
            citycode: "0917",
            adcode: "610305",
            name: "凤翔区",
            center: "107.401029,34.522167",
            level: "district",
            districts: []
          },
          {
            citycode: "0917",
            adcode: "610323",
            name: "岐山县",
            center: "107.621397,34.44373",
            level: "district",
            districts: []
          },
          {
            citycode: "0917",
            adcode: "610329",
            name: "麟游县",
            center: "107.793524,34.677902",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: "021",
    adcode: "310000",
    name: "上海市",
    center: "121.473667,31.230525",
    level: "province",
    districts: [
      {
        citycode: "021",
        adcode: "310100",
        name: "上海城区",
        center: "121.472644,31.231706",
        level: "city",
        districts: [
          {
            citycode: "021",
            adcode: "310151",
            name: "崇明区",
            center: "121.397662,31.623863",
            level: "district",
            districts: []
          },
          {
            citycode: "021",
            adcode: "310115",
            name: "浦东新区",
            center: "121.544346,31.221461",
            level: "district",
            districts: []
          },
          {
            citycode: "021",
            adcode: "310120",
            name: "奉贤区",
            center: "121.473945,30.918406",
            level: "district",
            districts: []
          },
          {
            citycode: "021",
            adcode: "310116",
            name: "金山区",
            center: "121.341774,30.742769",
            level: "district",
            districts: []
          },
          {
            citycode: "021",
            adcode: "310107",
            name: "普陀区",
            center: "121.39547,31.249618",
            level: "district",
            districts: []
          },
          {
            citycode: "021",
            adcode: "310101",
            name: "黄浦区",
            center: "121.48442,31.231661",
            level: "district",
            districts: []
          },
          {
            citycode: "021",
            adcode: "310110",
            name: "杨浦区",
            center: "121.525409,31.259588",
            level: "district",
            districts: []
          },
          {
            citycode: "021",
            adcode: "310109",
            name: "虹口区",
            center: "121.504994,31.264917",
            level: "district",
            districts: []
          },
          {
            citycode: "021",
            adcode: "310104",
            name: "徐汇区",
            center: "121.436307,31.188334",
            level: "district",
            districts: []
          },
          {
            citycode: "021",
            adcode: "310106",
            name: "静安区",
            center: "121.447348,31.227718",
            level: "district",
            districts: []
          },
          {
            citycode: "021",
            adcode: "310113",
            name: "宝山区",
            center: "121.489431,31.405242",
            level: "district",
            districts: []
          },
          {
            citycode: "021",
            adcode: "310114",
            name: "嘉定区",
            center: "121.265276,31.375566",
            level: "district",
            districts: []
          },
          {
            citycode: "021",
            adcode: "310105",
            name: "长宁区",
            center: "121.424751,31.220537",
            level: "district",
            districts: []
          },
          {
            citycode: "021",
            adcode: "310112",
            name: "闵行区",
            center: "121.380857,31.112834",
            level: "district",
            districts: []
          },
          {
            citycode: "021",
            adcode: "310117",
            name: "松江区",
            center: "121.227676,31.03257",
            level: "district",
            districts: []
          },
          {
            citycode: "021",
            adcode: "310118",
            name: "青浦区",
            center: "121.124249,31.15098",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "520000",
    name: "贵州省",
    center: "106.705251,26.600328",
    level: "province",
    districts: [
      {
        citycode: "0852",
        adcode: "520300",
        name: "遵义市",
        center: "107.031922,27.721931",
        level: "city",
        districts: [
          {
            citycode: "0852",
            adcode: "520328",
            name: "湄潭县",
            center: "107.465492,27.748942",
            level: "district",
            districts: []
          },
          {
            citycode: "0852",
            adcode: "520329",
            name: "余庆县",
            center: "107.906043,27.21513",
            level: "district",
            districts: []
          },
          {
            citycode: "0852",
            adcode: "520323",
            name: "绥阳县",
            center: "107.191326,27.946049",
            level: "district",
            districts: []
          },
          {
            citycode: "0852",
            adcode: "520304",
            name: "播州区",
            center: "106.829081,27.535735",
            level: "district",
            districts: []
          },
          {
            citycode: "0852",
            adcode: "520325",
            name: "道真仡佬族苗族自治县",
            center: "107.613076,28.862548",
            level: "district",
            districts: []
          },
          {
            citycode: "0852",
            adcode: "520326",
            name: "务川仡佬族苗族自治县",
            center: "107.899353,28.562921",
            level: "district",
            districts: []
          },
          {
            citycode: "0852",
            adcode: "520327",
            name: "凤冈县",
            center: "107.71646,27.954424",
            level: "district",
            districts: []
          },
          {
            citycode: "0852",
            adcode: "520324",
            name: "正安县",
            center: "107.454463,28.553507",
            level: "district",
            districts: []
          },
          {
            citycode: "0852",
            adcode: "520330",
            name: "习水县",
            center: "106.19715,28.332923",
            level: "district",
            districts: []
          },
          {
            citycode: "0852",
            adcode: "520303",
            name: "汇川区",
            center: "106.933727,27.749716",
            level: "district",
            districts: []
          },
          {
            citycode: "0852",
            adcode: "520302",
            name: "红花岗区",
            center: "106.893598,27.644793",
            level: "district",
            districts: []
          },
          {
            citycode: "0852",
            adcode: "520382",
            name: "仁怀市",
            center: "106.401322,27.791883",
            level: "district",
            districts: []
          },
          {
            citycode: "0852",
            adcode: "520381",
            name: "赤水市",
            center: "105.697501,28.590474",
            level: "district",
            districts: []
          },
          {
            citycode: "0852",
            adcode: "520322",
            name: "桐梓县",
            center: "106.824661,28.132991",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0856",
        adcode: "520600",
        name: "铜仁市",
        center: "109.189528,27.731555",
        level: "city",
        districts: [
          {
            citycode: "0856",
            adcode: "520623",
            name: "石阡县",
            center: "108.223686,27.513499",
            level: "district",
            districts: []
          },
          {
            citycode: "0856",
            adcode: "520626",
            name: "德江县",
            center: "108.120773,28.264028",
            level: "district",
            districts: []
          },
          {
            citycode: "0856",
            adcode: "520624",
            name: "思南县",
            center: "108.253798,27.937464",
            level: "district",
            districts: []
          },
          {
            citycode: "0856",
            adcode: "520621",
            name: "江口县",
            center: "108.843993,27.704883",
            level: "district",
            districts: []
          },
          {
            citycode: "0856",
            adcode: "520628",
            name: "松桃苗族自治县",
            center: "109.202877,28.15427",
            level: "district",
            districts: []
          },
          {
            citycode: "0856",
            adcode: "520625",
            name: "印江土家族苗族自治县",
            center: "108.409638,27.994442",
            level: "district",
            districts: []
          },
          {
            citycode: "0856",
            adcode: "520602",
            name: "碧江区",
            center: "109.264271,27.815244",
            level: "district",
            districts: []
          },
          {
            citycode: "0856",
            adcode: "520603",
            name: "万山区",
            center: "109.153685,27.671268",
            level: "district",
            districts: []
          },
          {
            citycode: "0856",
            adcode: "520627",
            name: "沿河土家族自治县",
            center: "108.503152,28.564083",
            level: "district",
            districts: []
          },
          {
            citycode: "0856",
            adcode: "520622",
            name: "玉屏侗族自治县",
            center: "108.906415,27.235816",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0858",
        adcode: "520200",
        name: "六盘水市",
        center: "104.830357,26.592538",
        level: "city",
        districts: [
          {
            citycode: "0858",
            adcode: "520201",
            name: "钟山区",
            center: "104.843723,26.574699",
            level: "district",
            districts: []
          },
          {
            citycode: "0858",
            adcode: "520204",
            name: "水城区",
            center: "104.957871,26.547604",
            level: "district",
            districts: []
          },
          {
            citycode: "0858",
            adcode: "520203",
            name: "六枝特区",
            center: "105.477199,26.214356",
            level: "district",
            districts: []
          },
          {
            citycode: "0858",
            adcode: "520281",
            name: "盘州市",
            center: "104.471554,25.709878",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0854",
        adcode: "522700",
        name: "黔南布依族苗族自治州",
        center: "107.522303,26.253136",
        level: "city",
        districts: [
          {
            citycode: "0854",
            adcode: "522731",
            name: "惠水县",
            center: "106.656993,26.132045",
            level: "district",
            districts: []
          },
          {
            citycode: "0854",
            adcode: "522727",
            name: "平塘县",
            center: "107.322635,25.822395",
            level: "district",
            districts: []
          },
          {
            citycode: "0854",
            adcode: "522728",
            name: "罗甸县",
            center: "106.751724,25.42616",
            level: "district",
            districts: []
          },
          {
            citycode: "0854",
            adcode: "522722",
            name: "荔波县",
            center: "107.88057,25.402528",
            level: "district",
            districts: []
          },
          {
            citycode: "0854",
            adcode: "522729",
            name: "长顺县",
            center: "106.44057,26.003187",
            level: "district",
            districts: []
          },
          {
            citycode: "0854",
            adcode: "522730",
            name: "龙里县",
            center: "106.979177,26.453546",
            level: "district",
            districts: []
          },
          {
            citycode: "0854",
            adcode: "522723",
            name: "贵定县",
            center: "107.232208,26.557205",
            level: "district",
            districts: []
          },
          {
            citycode: "0854",
            adcode: "522702",
            name: "福泉市",
            center: "107.520371,26.686773",
            level: "district",
            districts: []
          },
          {
            citycode: "0854",
            adcode: "522725",
            name: "瓮安县",
            center: "107.471307,27.07838",
            level: "district",
            districts: []
          },
          {
            citycode: "0854",
            adcode: "522732",
            name: "三都水族自治县",
            center: "107.869489,25.983572",
            level: "district",
            districts: []
          },
          {
            citycode: "0854",
            adcode: "522701",
            name: "都匀市",
            center: "107.518628,26.259456",
            level: "district",
            districts: []
          },
          {
            citycode: "0854",
            adcode: "522726",
            name: "独山县",
            center: "107.557591,25.865418",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0853",
        adcode: "520400",
        name: "安顺市",
        center: "105.9476,26.253103",
        level: "city",
        districts: [
          {
            citycode: "0853",
            adcode: "520402",
            name: "西秀区",
            center: "105.966086,26.243928",
            level: "district",
            districts: []
          },
          {
            citycode: "0853",
            adcode: "520425",
            name: "紫云苗族布依族自治县",
            center: "106.084441,25.751047",
            level: "district",
            districts: []
          },
          {
            citycode: "0853",
            adcode: "520424",
            name: "关岭布依族苗族自治县",
            center: "105.538335,25.953518",
            level: "district",
            districts: []
          },
          {
            citycode: "0853",
            adcode: "520403",
            name: "平坝区",
            center: "106.255768,26.405968",
            level: "district",
            districts: []
          },
          {
            citycode: "0853",
            adcode: "520422",
            name: "普定县",
            center: "105.743156,26.301876",
            level: "district",
            districts: []
          },
          {
            citycode: "0853",
            adcode: "520423",
            name: "镇宁布依族苗族自治县",
            center: "105.770543,26.057248",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0859",
        adcode: "522300",
        name: "黔西南布依族苗族自治州",
        center: "104.906419,25.087733",
        level: "city",
        districts: [
          {
            citycode: "0859",
            adcode: "522328",
            name: "安龙县",
            center: "105.442702,25.099014",
            level: "district",
            districts: []
          },
          {
            citycode: "0859",
            adcode: "522327",
            name: "册亨县",
            center: "105.811592,24.983663",
            level: "district",
            districts: []
          },
          {
            citycode: "0859",
            adcode: "522302",
            name: "兴仁市",
            center: "105.186132,25.43509",
            level: "district",
            districts: []
          },
          {
            citycode: "0859",
            adcode: "522324",
            name: "晴隆县",
            center: "105.218956,25.834729",
            level: "district",
            districts: []
          },
          {
            citycode: "0859",
            adcode: "522325",
            name: "贞丰县",
            center: "105.64976,25.38558",
            level: "district",
            districts: []
          },
          {
            citycode: "0859",
            adcode: "522326",
            name: "望谟县",
            center: "106.094864,25.174204",
            level: "district",
            districts: []
          },
          {
            citycode: "0859",
            adcode: "522301",
            name: "兴义市",
            center: "104.895503,25.09196",
            level: "district",
            districts: []
          },
          {
            citycode: "0859",
            adcode: "522323",
            name: "普安县",
            center: "104.953289,25.784225",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0855",
        adcode: "522600",
        name: "黔东南苗族侗族自治州",
        center: "107.982838,26.583759",
        level: "city",
        districts: [
          {
            citycode: "0855",
            adcode: "522634",
            name: "雷山县",
            center: "108.078217,26.378892",
            level: "district",
            districts: []
          },
          {
            citycode: "0855",
            adcode: "522632",
            name: "榕江县",
            center: "108.52188,25.931893",
            level: "district",
            districts: []
          },
          {
            citycode: "0855",
            adcode: "522627",
            name: "天柱县",
            center: "109.207826,26.909548",
            level: "district",
            districts: []
          },
          {
            citycode: "0855",
            adcode: "522623",
            name: "施秉县",
            center: "108.124531,27.033107",
            level: "district",
            districts: []
          },
          {
            citycode: "0855",
            adcode: "522625",
            name: "镇远县",
            center: "108.429536,27.049033",
            level: "district",
            districts: []
          },
          {
            citycode: "0855",
            adcode: "522601",
            name: "凯里市",
            center: "107.981409,26.5662",
            level: "district",
            districts: []
          },
          {
            citycode: "0855",
            adcode: "522636",
            name: "丹寨县",
            center: "107.789301,26.19857",
            level: "district",
            districts: []
          },
          {
            citycode: "0855",
            adcode: "522631",
            name: "黎平县",
            center: "109.125826,26.213304",
            level: "district",
            districts: []
          },
          {
            citycode: "0855",
            adcode: "522633",
            name: "从江县",
            center: "108.904998,25.754638",
            level: "district",
            districts: []
          },
          {
            citycode: "0855",
            adcode: "522628",
            name: "锦屏县",
            center: "109.200808,26.675919",
            level: "district",
            districts: []
          },
          {
            citycode: "0855",
            adcode: "522622",
            name: "黄平县",
            center: "107.916651,26.905278",
            level: "district",
            districts: []
          },
          {
            citycode: "0855",
            adcode: "522630",
            name: "台江县",
            center: "108.321244,26.667525",
            level: "district",
            districts: []
          },
          {
            citycode: "0855",
            adcode: "522635",
            name: "麻江县",
            center: "107.589455,26.49129",
            level: "district",
            districts: []
          },
          {
            citycode: "0855",
            adcode: "522629",
            name: "剑河县",
            center: "108.441501,26.728274",
            level: "district",
            districts: []
          },
          {
            citycode: "0855",
            adcode: "522624",
            name: "三穗县",
            center: "108.675265,26.953359",
            level: "district",
            districts: []
          },
          {
            citycode: "0855",
            adcode: "522626",
            name: "岑巩县",
            center: "108.815855,27.174124",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0857",
        adcode: "520500",
        name: "毕节市",
        center: "105.291544,27.283615",
        level: "city",
        districts: [
          {
            citycode: "0857",
            adcode: "520523",
            name: "金沙县",
            center: "106.220112,27.458601",
            level: "district",
            districts: []
          },
          {
            citycode: "0857",
            adcode: "520581",
            name: "黔西市",
            center: "106.032277,27.008681",
            level: "district",
            districts: []
          },
          {
            citycode: "0857",
            adcode: "520524",
            name: "织金县",
            center: "105.770249,26.663649",
            level: "district",
            districts: []
          },
          {
            citycode: "0857",
            adcode: "520526",
            name: "威宁彝族回族苗族自治县",
            center: "104.252787,26.873872",
            level: "district",
            districts: []
          },
          {
            citycode: "0857",
            adcode: "520521",
            name: "大方县",
            center: "105.601963,27.14443",
            level: "district",
            districts: []
          },
          {
            citycode: "0857",
            adcode: "520525",
            name: "纳雍县",
            center: "105.414578,26.779344",
            level: "district",
            districts: []
          },
          {
            citycode: "0857",
            adcode: "520502",
            name: "七星关区",
            center: "105.305219,27.298304",
            level: "district",
            districts: []
          },
          {
            citycode: "0857",
            adcode: "520527",
            name: "赫章县",
            center: "104.728011,27.117933",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0851",
        adcode: "520100",
        name: "贵阳市",
        center: "106.628201,26.646694",
        level: "city",
        districts: [
          {
            citycode: "0851",
            adcode: "520121",
            name: "开阳县",
            center: "106.964716,27.057823",
            level: "district",
            districts: []
          },
          {
            citycode: "0851",
            adcode: "520113",
            name: "白云区",
            center: "106.623069,26.677932",
            level: "district",
            districts: []
          },
          {
            citycode: "0851",
            adcode: "520123",
            name: "修文县",
            center: "106.591958,26.836048",
            level: "district",
            districts: []
          },
          {
            citycode: "0851",
            adcode: "520122",
            name: "息烽县",
            center: "106.740407,27.090479",
            level: "district",
            districts: []
          },
          {
            citycode: "0851",
            adcode: "520181",
            name: "清镇市",
            center: "106.468686,26.570435",
            level: "district",
            districts: []
          },
          {
            citycode: "0851",
            adcode: "520112",
            name: "乌当区",
            center: "106.75069,26.630911",
            level: "district",
            districts: []
          },
          {
            citycode: "0851",
            adcode: "520111",
            name: "花溪区",
            center: "106.67026,26.409817",
            level: "district",
            districts: []
          },
          {
            citycode: "0851",
            adcode: "520102",
            name: "南明区",
            center: "106.714305,26.568055",
            level: "district",
            districts: []
          },
          {
            citycode: "0851",
            adcode: "520103",
            name: "云岩区",
            center: "106.724394,26.604604",
            level: "district",
            districts: []
          },
          {
            citycode: "0851",
            adcode: "520115",
            name: "观山湖区",
            center: "106.598978,26.616134",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: "023",
    adcode: "500000",
    name: "重庆市",
    center: "106.550483,29.563707",
    level: "province",
    districts: [
      {
        citycode: "023",
        adcode: "500200",
        name: "重庆郊县",
        center: "108.170255,29.291965",
        level: "city",
        districts: [
          {
            citycode: "023",
            adcode: "500236",
            name: "奉节县",
            center: "109.401056,31.018505",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500238",
            name: "巫溪县",
            center: "109.570038,31.398619",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500243",
            name: "彭水苗族土家族自治县",
            center: "108.165571,29.293748",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500235",
            name: "云阳县",
            center: "108.6975,30.930628",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500241",
            name: "秀山土家族苗族自治县",
            center: "109.007096,28.448248",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500240",
            name: "石柱土家族自治县",
            center: "108.114251,29.999066",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500237",
            name: "巫山县",
            center: "109.878995,31.07478",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500230",
            name: "丰都县",
            center: "107.731056,29.863785",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500229",
            name: "城口县",
            center: "108.664349,31.947319",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500231",
            name: "垫江县",
            center: "107.332511,30.327548",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500242",
            name: "酉阳土家族苗族自治县",
            center: "108.76726,28.841409",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500233",
            name: "忠县",
            center: "108.038073,30.299817",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "023",
        adcode: "500100",
        name: "重庆城区",
        center: "106.504962,29.533155",
        level: "city",
        districts: [
          {
            citycode: "023",
            adcode: "500117",
            name: "合川区",
            center: "106.27617,29.971968",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500152",
            name: "潼南区",
            center: "105.840487,30.191077",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500115",
            name: "长寿区",
            center: "107.080945,29.857916",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500151",
            name: "铜梁区",
            center: "106.056265,29.845248",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500111",
            name: "大足区",
            center: "105.721825,29.707555",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500104",
            name: "大渡口区",
            center: "106.482299,29.484464",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500107",
            name: "九龙坡区",
            center: "106.510515,29.502325",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500101",
            name: "万州区",
            center: "108.408591,30.807621",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500114",
            name: "黔江区",
            center: "108.770677,29.533609",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500108",
            name: "南岸区",
            center: "106.644254,29.50109",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500156",
            name: "武隆区",
            center: "107.759955,29.325707",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500118",
            name: "永川区",
            center: "105.926951,29.356384",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500153",
            name: "荣昌区",
            center: "105.6118,29.416892",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500110",
            name: "綦江区",
            center: "106.651213,29.028117",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500120",
            name: "璧山区",
            center: "106.204885,29.577455",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500116",
            name: "江津区",
            center: "106.264435,29.319984",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500113",
            name: "巴南区",
            center: "106.540603,29.402348",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500154",
            name: "开州区",
            center: "108.39336,31.160416",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500105",
            name: "江北区",
            center: "106.574395,29.606224",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500112",
            name: "渝北区",
            center: "106.631155,29.718087",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500102",
            name: "涪陵区",
            center: "107.246521,29.752475",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500109",
            name: "北碚区",
            center: "106.395593,29.805197",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500155",
            name: "梁平区",
            center: "107.769568,30.654233",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500106",
            name: "沙坪坝区",
            center: "106.456939,29.541017",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500103",
            name: "渝中区",
            center: "106.568955,29.552642",
            level: "district",
            districts: []
          },
          {
            citycode: "023",
            adcode: "500119",
            name: "南川区",
            center: "107.099147,29.157879",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "340000",
    name: "安徽省",
    center: "117.330139,31.734559",
    level: "province",
    districts: [
      {
        citycode: "0562",
        adcode: "340700",
        name: "铜陵市",
        center: "117.811298,30.945214",
        level: "city",
        districts: [
          {
            citycode: "0562",
            adcode: "340711",
            name: "郊区",
            center: "117.767919,30.821699",
            level: "district",
            districts: []
          },
          {
            citycode: "0562",
            adcode: "340705",
            name: "铜官区",
            center: "117.856541,30.936772",
            level: "district",
            districts: []
          },
          {
            citycode: "0562",
            adcode: "340722",
            name: "枞阳县",
            center: "117.250191,30.705466",
            level: "district",
            districts: []
          },
          {
            citycode: "0562",
            adcode: "340706",
            name: "义安区",
            center: "117.937405,30.950619",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0566",
        adcode: "341700",
        name: "池州市",
        center: "117.495663,30.674264",
        level: "city",
        districts: [
          {
            citycode: "0566",
            adcode: "341702",
            name: "贵池区",
            center: "117.568432,30.687389",
            level: "district",
            districts: []
          },
          {
            citycode: "0566",
            adcode: "341723",
            name: "青阳县",
            center: "117.847366,30.639006",
            level: "district",
            districts: []
          },
          {
            citycode: "0566",
            adcode: "341721",
            name: "东至县",
            center: "117.027533,30.111182",
            level: "district",
            districts: []
          },
          {
            citycode: "0566",
            adcode: "341722",
            name: "石台县",
            center: "117.486211,30.210218",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0556",
        adcode: "340800",
        name: "安庆市",
        center: "117.115349,30.531828",
        level: "city",
        districts: [
          {
            citycode: "0556",
            adcode: "340881",
            name: "桐城市",
            center: "116.936588,31.035476",
            level: "district",
            districts: []
          },
          {
            citycode: "0556",
            adcode: "340828",
            name: "岳西县",
            center: "116.359732,30.849716",
            level: "district",
            districts: []
          },
          {
            citycode: "0556",
            adcode: "340802",
            name: "迎江区",
            center: "117.090878,30.512768",
            level: "district",
            districts: []
          },
          {
            citycode: "0556",
            adcode: "340882",
            name: "潜山市",
            center: "116.581224,30.631022",
            level: "district",
            districts: []
          },
          {
            citycode: "0556",
            adcode: "340811",
            name: "宜秀区",
            center: "116.987469,30.613189",
            level: "district",
            districts: []
          },
          {
            citycode: "0556",
            adcode: "340803",
            name: "大观区",
            center: "117.013469,30.553697",
            level: "district",
            districts: []
          },
          {
            citycode: "0556",
            adcode: "340825",
            name: "太湖县",
            center: "116.30881,30.454198",
            level: "district",
            districts: []
          },
          {
            citycode: "0556",
            adcode: "340822",
            name: "怀宁县",
            center: "116.829612,30.73484",
            level: "district",
            districts: []
          },
          {
            citycode: "0556",
            adcode: "340827",
            name: "望江县",
            center: "116.70641,30.128404",
            level: "district",
            districts: []
          },
          {
            citycode: "0556",
            adcode: "340826",
            name: "宿松县",
            center: "116.134485,30.171663",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0561",
        adcode: "340600",
        name: "淮北市",
        center: "116.798362,33.956264",
        level: "city",
        districts: [
          {
            citycode: "0561",
            adcode: "340602",
            name: "杜集区",
            center: "116.827949,33.991412",
            level: "district",
            districts: []
          },
          {
            citycode: "0561",
            adcode: "340603",
            name: "相山区",
            center: "116.795233,33.959927",
            level: "district",
            districts: []
          },
          {
            citycode: "0561",
            adcode: "340604",
            name: "烈山区",
            center: "116.813221,33.895407",
            level: "district",
            districts: []
          },
          {
            citycode: "0561",
            adcode: "340621",
            name: "濉溪县",
            center: "116.76616,33.915612",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0555",
        adcode: "340500",
        name: "马鞍山市",
        center: "118.50685,31.668765",
        level: "city",
        districts: [
          {
            citycode: "0555",
            adcode: "340504",
            name: "雨山区",
            center: "118.498675,31.682374",
            level: "district",
            districts: []
          },
          {
            citycode: "0555",
            adcode: "340522",
            name: "含山县",
            center: "118.101448,31.735559",
            level: "district",
            districts: []
          },
          {
            citycode: "0555",
            adcode: "340521",
            name: "当涂县",
            center: "118.497873,31.570857",
            level: "district",
            districts: []
          },
          {
            citycode: "0555",
            adcode: "340506",
            name: "博望区",
            center: "118.818276,31.55117",
            level: "district",
            districts: []
          },
          {
            citycode: "0555",
            adcode: "340523",
            name: "和县",
            center: "118.353668,31.74248",
            level: "district",
            districts: []
          },
          {
            citycode: "0555",
            adcode: "340503",
            name: "花山区",
            center: "118.511366,31.700127",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0553",
        adcode: "340200",
        name: "芜湖市",
        center: "118.433065,31.352614",
        level: "city",
        districts: [
          {
            citycode: "0553",
            adcode: "340281",
            name: "无为市",
            center: "117.902265,31.304462",
            level: "district",
            districts: []
          },
          {
            citycode: "0553",
            adcode: "340202",
            name: "镜湖区",
            center: "118.385133,31.34056",
            level: "district",
            districts: []
          },
          {
            citycode: "0553",
            adcode: "340210",
            name: "湾沚区",
            center: "118.576124,31.134809",
            level: "district",
            districts: []
          },
          {
            citycode: "0553",
            adcode: "340209",
            name: "弋江区",
            center: "118.372664,31.311421",
            level: "district",
            districts: []
          },
          {
            citycode: "0553",
            adcode: "340207",
            name: "鸠江区",
            center: "118.392337,31.369752",
            level: "district",
            districts: []
          },
          {
            citycode: "0553",
            adcode: "340223",
            name: "南陵县",
            center: "118.334083,30.914621",
            level: "district",
            districts: []
          },
          {
            citycode: "0553",
            adcode: "340212",
            name: "繁昌区",
            center: "118.198536,31.101766",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0564",
        adcode: "341500",
        name: "六安市",
        center: "116.519729,31.735892",
        level: "city",
        districts: [
          {
            citycode: "0564",
            adcode: "341503",
            name: "裕安区",
            center: "116.479505,31.738789",
            level: "district",
            districts: []
          },
          {
            citycode: "0564",
            adcode: "341522",
            name: "霍邱县",
            center: "116.277966,32.353362",
            level: "district",
            districts: []
          },
          {
            citycode: "0564",
            adcode: "341502",
            name: "金安区",
            center: "116.539458,31.75014",
            level: "district",
            districts: []
          },
          {
            citycode: "0564",
            adcode: "341504",
            name: "叶集区",
            center: "115.925271,31.863693",
            level: "district",
            districts: []
          },
          {
            citycode: "0564",
            adcode: "341523",
            name: "舒城县",
            center: "116.94863,31.462036",
            level: "district",
            districts: []
          },
          {
            citycode: "0564",
            adcode: "341524",
            name: "金寨县",
            center: "115.934253,31.727295",
            level: "district",
            districts: []
          },
          {
            citycode: "0564",
            adcode: "341525",
            name: "霍山县",
            center: "116.348274,31.409668",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0558",
        adcode: "341600",
        name: "亳州市",
        center: "115.778588,33.846285",
        level: "city",
        districts: [
          {
            citycode: "0558",
            adcode: "341621",
            name: "涡阳县",
            center: "116.21665,33.494134",
            level: "district",
            districts: []
          },
          {
            citycode: "0558",
            adcode: "341622",
            name: "蒙城县",
            center: "116.56434,33.265671",
            level: "district",
            districts: []
          },
          {
            citycode: "0558",
            adcode: "341602",
            name: "谯城区",
            center: "115.779081,33.876436",
            level: "district",
            districts: []
          },
          {
            citycode: "0558",
            adcode: "341623",
            name: "利辛县",
            center: "116.206396,33.158424",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0559",
        adcode: "341000",
        name: "黄山市",
        center: "118.337643,29.714886",
        level: "city",
        districts: [
          {
            citycode: "0559",
            adcode: "341003",
            name: "黄山区",
            center: "118.141632,30.272991",
            level: "district",
            districts: []
          },
          {
            citycode: "0559",
            adcode: "341023",
            name: "黟县",
            center: "117.938139,29.92477",
            level: "district",
            districts: []
          },
          {
            citycode: "0559",
            adcode: "341002",
            name: "屯溪区",
            center: "118.315012,29.69655",
            level: "district",
            districts: []
          },
          {
            citycode: "0559",
            adcode: "341022",
            name: "休宁县",
            center: "118.193533,29.784532",
            level: "district",
            districts: []
          },
          {
            citycode: "0559",
            adcode: "341024",
            name: "祁门县",
            center: "117.717452,29.854179",
            level: "district",
            districts: []
          },
          {
            citycode: "0559",
            adcode: "341021",
            name: "歙县",
            center: "118.415258,29.861354",
            level: "district",
            districts: []
          },
          {
            citycode: "0559",
            adcode: "341004",
            name: "徽州区",
            center: "118.336799,29.827291",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0552",
        adcode: "340300",
        name: "蚌埠市",
        center: "117.388566,32.91682",
        level: "city",
        districts: [
          {
            citycode: "0552",
            adcode: "340311",
            name: "淮上区",
            center: "117.359352,32.96557",
            level: "district",
            districts: []
          },
          {
            citycode: "0552",
            adcode: "340322",
            name: "五河县",
            center: "117.881312,33.126532",
            level: "district",
            districts: []
          },
          {
            citycode: "0552",
            adcode: "340304",
            name: "禹会区",
            center: "117.34186,32.929715",
            level: "district",
            districts: []
          },
          {
            citycode: "0552",
            adcode: "340303",
            name: "蚌山区",
            center: "117.373347,32.916393",
            level: "district",
            districts: []
          },
          {
            citycode: "0552",
            adcode: "340302",
            name: "龙子湖区",
            center: "117.454544,32.90863",
            level: "district",
            districts: []
          },
          {
            citycode: "0552",
            adcode: "340321",
            name: "怀远县",
            center: "117.205083,32.971543",
            level: "district",
            districts: []
          },
          {
            citycode: "0552",
            adcode: "340323",
            name: "固镇县",
            center: "117.316585,33.318371",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0563",
        adcode: "341800",
        name: "宣城市",
        center: "118.759127,30.939278",
        level: "city",
        districts: [
          {
            citycode: "0563",
            adcode: "341825",
            name: "旌德县",
            center: "118.550043,30.298287",
            level: "district",
            districts: []
          },
          {
            citycode: "0563",
            adcode: "341823",
            name: "泾县",
            center: "118.419552,30.688793",
            level: "district",
            districts: []
          },
          {
            citycode: "0563",
            adcode: "341881",
            name: "宁国市",
            center: "118.983085,30.634032",
            level: "district",
            districts: []
          },
          {
            citycode: "0563",
            adcode: "341802",
            name: "宣州区",
            center: "118.786098,30.944356",
            level: "district",
            districts: []
          },
          {
            citycode: "0563",
            adcode: "341824",
            name: "绩溪县",
            center: "118.578519,30.067533",
            level: "district",
            districts: []
          },
          {
            citycode: "0563",
            adcode: "341821",
            name: "郎溪县",
            center: "119.184326,31.142995",
            level: "district",
            districts: []
          },
          {
            citycode: "0563",
            adcode: "341882",
            name: "广德市",
            center: "119.420799,30.877608",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0550",
        adcode: "341100",
        name: "滁州市",
        center: "118.333439,32.255904",
        level: "city",
        districts: [
          {
            citycode: "0550",
            adcode: "341181",
            name: "天长市",
            center: "119.004838,32.667409",
            level: "district",
            districts: []
          },
          {
            citycode: "0550",
            adcode: "341126",
            name: "凤阳县",
            center: "117.531791,32.875714",
            level: "district",
            districts: []
          },
          {
            citycode: "0550",
            adcode: "341125",
            name: "定远县",
            center: "117.698528,32.530741",
            level: "district",
            districts: []
          },
          {
            citycode: "0550",
            adcode: "341124",
            name: "全椒县",
            center: "118.274149,32.08593",
            level: "district",
            districts: []
          },
          {
            citycode: "0550",
            adcode: "341182",
            name: "明光市",
            center: "118.018197,32.78193",
            level: "district",
            districts: []
          },
          {
            citycode: "0550",
            adcode: "341102",
            name: "琅琊区",
            center: "118.32115,32.334475",
            level: "district",
            districts: []
          },
          {
            citycode: "0550",
            adcode: "341103",
            name: "南谯区",
            center: "118.416715,32.200084",
            level: "district",
            districts: []
          },
          {
            citycode: "0550",
            adcode: "341122",
            name: "来安县",
            center: "118.432581,32.423072",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0557",
        adcode: "341300",
        name: "宿州市",
        center: "116.96419,33.647726",
        level: "city",
        districts: [
          {
            citycode: "0557",
            adcode: "341324",
            name: "泗县",
            center: "117.910277,33.483686",
            level: "district",
            districts: []
          },
          {
            citycode: "0557",
            adcode: "341321",
            name: "砀山县",
            center: "116.366257,34.442139",
            level: "district",
            districts: []
          },
          {
            citycode: "0557",
            adcode: "341323",
            name: "灵璧县",
            center: "117.549321,33.554464",
            level: "district",
            districts: []
          },
          {
            citycode: "0557",
            adcode: "341302",
            name: "埇桥区",
            center: "116.977039,33.640205",
            level: "district",
            districts: []
          },
          {
            citycode: "0557",
            adcode: "341322",
            name: "萧县",
            center: "116.947289,34.18884",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "1558",
        adcode: "341200",
        name: "阜阳市",
        center: "115.814252,32.891032",
        level: "city",
        districts: [
          {
            citycode: "1558",
            adcode: "341202",
            name: "颍州区",
            center: "115.806916,32.883322",
            level: "district",
            districts: []
          },
          {
            citycode: "1558",
            adcode: "341221",
            name: "临泉县",
            center: "115.26312,33.038884",
            level: "district",
            districts: []
          },
          {
            citycode: "1558",
            adcode: "341204",
            name: "颍泉区",
            center: "115.807415,32.925461",
            level: "district",
            districts: []
          },
          {
            citycode: "1558",
            adcode: "341282",
            name: "界首市",
            center: "115.374688,33.257799",
            level: "district",
            districts: []
          },
          {
            citycode: "1558",
            adcode: "341222",
            name: "太和县",
            center: "115.621941,33.160327",
            level: "district",
            districts: []
          },
          {
            citycode: "1558",
            adcode: "341226",
            name: "颍上县",
            center: "116.256772,32.653211",
            level: "district",
            districts: []
          },
          {
            citycode: "1558",
            adcode: "341225",
            name: "阜南县",
            center: "115.596003,32.659681",
            level: "district",
            districts: []
          },
          {
            citycode: "1558",
            adcode: "341203",
            name: "颍东区",
            center: "115.856728,32.91173",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0554",
        adcode: "340400",
        name: "淮南市",
        center: "117.018603,32.585384",
        level: "city",
        districts: [
          {
            citycode: "0554",
            adcode: "340405",
            name: "八公山区",
            center: "116.832979,32.630922",
            level: "district",
            districts: []
          },
          {
            citycode: "0554",
            adcode: "340406",
            name: "潘集区",
            center: "116.834715,32.77208",
            level: "district",
            districts: []
          },
          {
            citycode: "0554",
            adcode: "340402",
            name: "大通区",
            center: "117.053314,32.631519",
            level: "district",
            districts: []
          },
          {
            citycode: "0554",
            adcode: "340404",
            name: "谢家集区",
            center: "116.860026,32.599173",
            level: "district",
            districts: []
          },
          {
            citycode: "0554",
            adcode: "340421",
            name: "凤台县",
            center: "116.710947,32.710536",
            level: "district",
            districts: []
          },
          {
            citycode: "0554",
            adcode: "340403",
            name: "田家庵区",
            center: "117.017263,32.647456",
            level: "district",
            districts: []
          },
          {
            citycode: "0554",
            adcode: "340422",
            name: "寿县",
            center: "116.798203,32.545027",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0551",
        adcode: "340100",
        name: "合肥市",
        center: "117.227267,31.820567",
        level: "city",
        districts: [
          {
            citycode: "0551",
            adcode: "340111",
            name: "包河区",
            center: "117.310133,31.793801",
            level: "district",
            districts: []
          },
          {
            citycode: "0551",
            adcode: "340124",
            name: "庐江县",
            center: "117.288165,31.256978",
            level: "district",
            districts: []
          },
          {
            citycode: "0551",
            adcode: "340103",
            name: "庐阳区",
            center: "117.265088,31.878722",
            level: "district",
            districts: []
          },
          {
            citycode: "0551",
            adcode: "340121",
            name: "长丰县",
            center: "117.167632,32.478347",
            level: "district",
            districts: []
          },
          {
            citycode: "0551",
            adcode: "340181",
            name: "巢湖市",
            center: "117.890236,31.624464",
            level: "district",
            districts: []
          },
          {
            citycode: "0551",
            adcode: "340122",
            name: "肥东县",
            center: "117.4779,31.878601",
            level: "district",
            districts: []
          },
          {
            citycode: "0551",
            adcode: "340102",
            name: "瑶海区",
            center: "117.30944,31.858111",
            level: "district",
            districts: []
          },
          {
            citycode: "0551",
            adcode: "340123",
            name: "肥西县",
            center: "117.158416,31.707006",
            level: "district",
            districts: []
          },
          {
            citycode: "0551",
            adcode: "340104",
            name: "蜀山区",
            center: "117.26053,31.851211",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "350000",
    name: "福建省",
    center: "119.296194,26.101082",
    level: "province",
    districts: [
      {
        citycode: "0591",
        adcode: "350100",
        name: "福州市",
        center: "119.296411,26.074286",
        level: "city",
        districts: [
          {
            citycode: "0591",
            adcode: "350122",
            name: "连江县",
            center: "119.539542,26.197737",
            level: "district",
            districts: []
          },
          {
            citycode: "0591",
            adcode: "350124",
            name: "闽清县",
            center: "118.863334,26.221099",
            level: "district",
            districts: []
          },
          {
            citycode: "0591",
            adcode: "350123",
            name: "罗源县",
            center: "119.549129,26.490215",
            level: "district",
            districts: []
          },
          {
            citycode: "0591",
            adcode: "350112",
            name: "长乐区",
            center: "119.522952,25.962925",
            level: "district",
            districts: []
          },
          {
            citycode: "0591",
            adcode: "350181",
            name: "福清市",
            center: "119.384388,25.720081",
            level: "district",
            districts: []
          },
          {
            citycode: "0591",
            adcode: "350128",
            name: "平潭县",
            center: "119.789893,25.498767",
            level: "district",
            districts: []
          },
          {
            citycode: "0591",
            adcode: "350103",
            name: "台江区",
            center: "119.31419,26.052826",
            level: "district",
            districts: []
          },
          {
            citycode: "0591",
            adcode: "350104",
            name: "仓山区",
            center: "119.27322,26.047027",
            level: "district",
            districts: []
          },
          {
            citycode: "0591",
            adcode: "350125",
            name: "永泰县",
            center: "118.932746,25.867198",
            level: "district",
            districts: []
          },
          {
            citycode: "0591",
            adcode: "350105",
            name: "马尾区",
            center: "119.439259,25.998657",
            level: "district",
            districts: []
          },
          {
            citycode: "0591",
            adcode: "350102",
            name: "鼓楼区",
            center: "119.304507,26.082666",
            level: "district",
            districts: []
          },
          {
            citycode: "0591",
            adcode: "350111",
            name: "晋安区",
            center: "119.328591,26.081963",
            level: "district",
            districts: []
          },
          {
            citycode: "0591",
            adcode: "350121",
            name: "闽侯县",
            center: "119.131362,26.150428",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0593",
        adcode: "350900",
        name: "宁德市",
        center: "119.547729,26.666222",
        level: "city",
        districts: [
          {
            citycode: "0593",
            adcode: "350982",
            name: "福鼎市",
            center: "120.216559,27.324796",
            level: "district",
            districts: []
          },
          {
            citycode: "0593",
            adcode: "350922",
            name: "古田县",
            center: "118.74603,26.578134",
            level: "district",
            districts: []
          },
          {
            citycode: "0593",
            adcode: "350902",
            name: "蕉城区",
            center: "119.526284,26.660658",
            level: "district",
            districts: []
          },
          {
            citycode: "0593",
            adcode: "350921",
            name: "霞浦县",
            center: "120.005267,26.885971",
            level: "district",
            districts: []
          },
          {
            citycode: "0593",
            adcode: "350981",
            name: "福安市",
            center: "119.647871,27.088274",
            level: "district",
            districts: []
          },
          {
            citycode: "0593",
            adcode: "350926",
            name: "柘荣县",
            center: "119.900597,27.23421",
            level: "district",
            districts: []
          },
          {
            citycode: "0593",
            adcode: "350923",
            name: "屏南县",
            center: "118.985759,26.908256",
            level: "district",
            districts: []
          },
          {
            citycode: "0593",
            adcode: "350925",
            name: "周宁县",
            center: "119.338998,27.104797",
            level: "district",
            districts: []
          },
          {
            citycode: "0593",
            adcode: "350924",
            name: "寿宁县",
            center: "119.514589,27.45467",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0594",
        adcode: "350300",
        name: "莆田市",
        center: "119.007662,25.454202",
        level: "city",
        districts: [
          {
            citycode: "0594",
            adcode: "350305",
            name: "秀屿区",
            center: "119.105177,25.318649",
            level: "district",
            districts: []
          },
          {
            citycode: "0594",
            adcode: "350304",
            name: "荔城区",
            center: "119.014821,25.432268",
            level: "district",
            districts: []
          },
          {
            citycode: "0594",
            adcode: "350302",
            name: "城厢区",
            center: "118.994261,25.419062",
            level: "district",
            districts: []
          },
          {
            citycode: "0594",
            adcode: "350322",
            name: "仙游县",
            center: "118.689745,25.373373",
            level: "district",
            districts: []
          },
          {
            citycode: "0594",
            adcode: "350303",
            name: "涵江区",
            center: "119.116173,25.459057",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0595",
        adcode: "350500",
        name: "泉州市",
        center: "118.675724,24.874452",
        level: "city",
        districts: [
          {
            citycode: "0595",
            adcode: "350582",
            name: "晋江市",
            center: "118.551659,24.781635",
            level: "district",
            districts: []
          },
          {
            citycode: "0595",
            adcode: "350504",
            name: "洛江区",
            center: "118.671168,24.939319",
            level: "district",
            districts: []
          },
          {
            citycode: "0595",
            adcode: "350583",
            name: "南安市",
            center: "118.385929,24.960056",
            level: "district",
            districts: []
          },
          {
            citycode: "0595",
            adcode: "350527",
            name: "金门县",
            center: "118.319179,24.437147",
            level: "district",
            districts: []
          },
          {
            citycode: "0595",
            adcode: "350521",
            name: "惠安县",
            center: "118.781037,25.012449",
            level: "district",
            districts: []
          },
          {
            citycode: "0595",
            adcode: "350581",
            name: "石狮市",
            center: "118.647945,24.731969",
            level: "district",
            districts: []
          },
          {
            citycode: "0595",
            adcode: "350505",
            name: "泉港区",
            center: "118.915804,25.120399",
            level: "district",
            districts: []
          },
          {
            citycode: "0595",
            adcode: "350525",
            name: "永春县",
            center: "118.29416,25.321849",
            level: "district",
            districts: []
          },
          {
            citycode: "0595",
            adcode: "350524",
            name: "安溪县",
            center: "118.186295,25.056065",
            level: "district",
            districts: []
          },
          {
            citycode: "0595",
            adcode: "350503",
            name: "丰泽区",
            center: "118.613007,24.890373",
            level: "district",
            districts: []
          },
          {
            citycode: "0595",
            adcode: "350502",
            name: "鲤城区",
            center: "118.58652,24.908133",
            level: "district",
            districts: []
          },
          {
            citycode: "0595",
            adcode: "350526",
            name: "德化县",
            center: "118.241104,25.492102",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0592",
        adcode: "350200",
        name: "厦门市",
        center: "118.08891,24.479627",
        level: "city",
        districts: [
          {
            citycode: "0592",
            adcode: "350206",
            name: "湖里区",
            center: "118.146825,24.512858",
            level: "district",
            districts: []
          },
          {
            citycode: "0592",
            adcode: "350203",
            name: "思明区",
            center: "118.082745,24.445676",
            level: "district",
            districts: []
          },
          {
            citycode: "0592",
            adcode: "350213",
            name: "翔安区",
            center: "118.247911,24.618583",
            level: "district",
            districts: []
          },
          {
            citycode: "0592",
            adcode: "350205",
            name: "海沧区",
            center: "118.032883,24.484688",
            level: "district",
            districts: []
          },
          {
            citycode: "0592",
            adcode: "350212",
            name: "同安区",
            center: "118.150823,24.723299",
            level: "district",
            districts: []
          },
          {
            citycode: "0592",
            adcode: "350211",
            name: "集美区",
            center: "118.097407,24.575976",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0596",
        adcode: "350600",
        name: "漳州市",
        center: "117.647298,24.515297",
        level: "city",
        districts: [
          {
            citycode: "0596",
            adcode: "350604",
            name: "龙海区",
            center: "117.818485,24.446839",
            level: "district",
            districts: []
          },
          {
            citycode: "0596",
            adcode: "350623",
            name: "漳浦县",
            center: "117.613783,24.11741",
            level: "district",
            districts: []
          },
          {
            citycode: "0596",
            adcode: "350626",
            name: "东山县",
            center: "117.4295,23.702034",
            level: "district",
            districts: []
          },
          {
            citycode: "0596",
            adcode: "350622",
            name: "云霄县",
            center: "117.334351,23.935433",
            level: "district",
            districts: []
          },
          {
            citycode: "0596",
            adcode: "350627",
            name: "南靖县",
            center: "117.357061,24.5151",
            level: "district",
            districts: []
          },
          {
            citycode: "0596",
            adcode: "350628",
            name: "平和县",
            center: "117.314798,24.363831",
            level: "district",
            districts: []
          },
          {
            citycode: "0596",
            adcode: "350603",
            name: "龙文区",
            center: "117.711188,24.503523",
            level: "district",
            districts: []
          },
          {
            citycode: "0596",
            adcode: "350629",
            name: "华安县",
            center: "117.53411,25.00445",
            level: "district",
            districts: []
          },
          {
            citycode: "0596",
            adcode: "350605",
            name: "长泰区",
            center: "117.759119,24.625989",
            level: "district",
            districts: []
          },
          {
            citycode: "0596",
            adcode: "350602",
            name: "芗城区",
            center: "117.653727,24.510937",
            level: "district",
            districts: []
          },
          {
            citycode: "0596",
            adcode: "350624",
            name: "诏安县",
            center: "117.175314,23.711674",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0597",
        adcode: "350800",
        name: "龙岩市",
        center: "117.017362,25.075884",
        level: "city",
        districts: [
          {
            citycode: "0597",
            adcode: "350824",
            name: "武平县",
            center: "116.100216,25.096139",
            level: "district",
            districts: []
          },
          {
            citycode: "0597",
            adcode: "350823",
            name: "上杭县",
            center: "116.419447,25.049867",
            level: "district",
            districts: []
          },
          {
            citycode: "0597",
            adcode: "350821",
            name: "长汀县",
            center: "116.357581,25.833531",
            level: "district",
            districts: []
          },
          {
            citycode: "0597",
            adcode: "350825",
            name: "连城县",
            center: "116.754472,25.710538",
            level: "district",
            districts: []
          },
          {
            citycode: "0597",
            adcode: "350802",
            name: "新罗区",
            center: "117.036816,25.098942",
            level: "district",
            districts: []
          },
          {
            citycode: "0597",
            adcode: "350881",
            name: "漳平市",
            center: "117.419823,25.290481",
            level: "district",
            districts: []
          },
          {
            citycode: "0597",
            adcode: "350803",
            name: "永定区",
            center: "116.732216,24.724148",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0599",
        adcode: "350700",
        name: "南平市",
        center: "118.081325,27.382829",
        level: "city",
        districts: [
          {
            citycode: "0599",
            adcode: "350723",
            name: "光泽县",
            center: "117.333812,27.541061",
            level: "district",
            districts: []
          },
          {
            citycode: "0599",
            adcode: "350722",
            name: "浦城县",
            center: "118.541079,27.917804",
            level: "district",
            districts: []
          },
          {
            citycode: "0599",
            adcode: "350783",
            name: "建瓯市",
            center: "118.304712,27.023233",
            level: "district",
            districts: []
          },
          {
            citycode: "0599",
            adcode: "350725",
            name: "政和县",
            center: "118.857703,27.366122",
            level: "district",
            districts: []
          },
          {
            citycode: "0599",
            adcode: "350724",
            name: "松溪县",
            center: "118.785429,27.526028",
            level: "district",
            districts: []
          },
          {
            citycode: "0599",
            adcode: "350703",
            name: "建阳区",
            center: "118.120392,27.331996",
            level: "district",
            districts: []
          },
          {
            citycode: "0599",
            adcode: "350721",
            name: "顺昌县",
            center: "117.809433,26.793455",
            level: "district",
            districts: []
          },
          {
            citycode: "0599",
            adcode: "350702",
            name: "延平区",
            center: "118.181806,26.637503",
            level: "district",
            districts: []
          },
          {
            citycode: "0599",
            adcode: "350782",
            name: "武夷山市",
            center: "118.035321,27.756422",
            level: "district",
            districts: []
          },
          {
            citycode: "0599",
            adcode: "350781",
            name: "邵武市",
            center: "117.492778,27.340672",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0598",
        adcode: "350400",
        name: "三明市",
        center: "117.638919,26.263455",
        level: "city",
        districts: [
          {
            citycode: "0598",
            adcode: "350405",
            name: "沙县区",
            center: "117.792551,26.396843",
            level: "district",
            districts: []
          },
          {
            citycode: "0598",
            adcode: "350430",
            name: "建宁县",
            center: "116.848488,26.833566",
            level: "district",
            districts: []
          },
          {
            citycode: "0598",
            adcode: "350421",
            name: "明溪县",
            center: "117.202119,26.355938",
            level: "district",
            districts: []
          },
          {
            citycode: "0598",
            adcode: "350428",
            name: "将乐县",
            center: "117.471127,26.728917",
            level: "district",
            districts: []
          },
          {
            citycode: "0598",
            adcode: "350424",
            name: "宁化县",
            center: "116.654369,26.262298",
            level: "district",
            districts: []
          },
          {
            citycode: "0598",
            adcode: "350404",
            name: "三元区",
            center: "117.646153,26.271653",
            level: "district",
            districts: []
          },
          {
            citycode: "0598",
            adcode: "350423",
            name: "清流县",
            center: "116.816772,26.177658",
            level: "district",
            districts: []
          },
          {
            citycode: "0598",
            adcode: "350481",
            name: "永安市",
            center: "117.365046,25.941671",
            level: "district",
            districts: []
          },
          {
            citycode: "0598",
            adcode: "350426",
            name: "尤溪县",
            center: "118.190515,26.169942",
            level: "district",
            districts: []
          },
          {
            citycode: "0598",
            adcode: "350429",
            name: "泰宁县",
            center: "117.175448,26.900244",
            level: "district",
            districts: []
          },
          {
            citycode: "0598",
            adcode: "350425",
            name: "大田县",
            center: "117.846828,25.692535",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "430000",
    name: "湖南省",
    center: "112.982951,28.116007",
    level: "province",
    districts: [
      {
        citycode: "0730",
        adcode: "430600",
        name: "岳阳市",
        center: "113.128922,29.35648",
        level: "city",
        districts: [
          {
            citycode: "0730",
            adcode: "430623",
            name: "华容县",
            center: "112.540448,29.530775",
            level: "district",
            districts: []
          },
          {
            citycode: "0730",
            adcode: "430603",
            name: "云溪区",
            center: "113.272312,29.472745",
            level: "district",
            districts: []
          },
          {
            citycode: "0730",
            adcode: "430611",
            name: "君山区",
            center: "113.006434,29.461017",
            level: "district",
            districts: []
          },
          {
            citycode: "0730",
            adcode: "430681",
            name: "汨罗市",
            center: "113.067097,28.806937",
            level: "district",
            districts: []
          },
          {
            citycode: "0730",
            adcode: "430624",
            name: "湘阴县",
            center: "112.909248,28.690123",
            level: "district",
            districts: []
          },
          {
            citycode: "0730",
            adcode: "430682",
            name: "临湘市",
            center: "113.450461,29.476687",
            level: "district",
            districts: []
          },
          {
            citycode: "0730",
            adcode: "430602",
            name: "岳阳楼区",
            center: "113.129362,29.371356",
            level: "district",
            districts: []
          },
          {
            citycode: "0730",
            adcode: "430621",
            name: "岳阳县",
            center: "113.116152,29.144681",
            level: "district",
            districts: []
          },
          {
            citycode: "0730",
            adcode: "430626",
            name: "平江县",
            center: "113.581296,28.702018",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0744",
        adcode: "430800",
        name: "张家界市",
        center: "110.478887,29.117343",
        level: "city",
        districts: [
          {
            citycode: "0744",
            adcode: "430802",
            name: "永定区",
            center: "110.537379,29.119662",
            level: "district",
            districts: []
          },
          {
            citycode: "0744",
            adcode: "430821",
            name: "慈利县",
            center: "111.139424,29.430429",
            level: "district",
            districts: []
          },
          {
            citycode: "0744",
            adcode: "430811",
            name: "武陵源区",
            center: "110.550309,29.345721",
            level: "district",
            districts: []
          },
          {
            citycode: "0744",
            adcode: "430822",
            name: "桑植县",
            center: "110.204804,29.414112",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0745",
        adcode: "431200",
        name: "怀化市",
        center: "110.001598,27.569813",
        level: "city",
        districts: [
          {
            citycode: "0745",
            adcode: "431228",
            name: "芷江侗族自治县",
            center: "109.684696,27.443429",
            level: "district",
            districts: []
          },
          {
            citycode: "0745",
            adcode: "431230",
            name: "通道侗族自治县",
            center: "109.784409,26.158032",
            level: "district",
            districts: []
          },
          {
            citycode: "0745",
            adcode: "431222",
            name: "沅陵县",
            center: "110.393782,28.452103",
            level: "district",
            districts: []
          },
          {
            citycode: "0745",
            adcode: "431223",
            name: "辰溪县",
            center: "110.183159,28.006235",
            level: "district",
            districts: []
          },
          {
            citycode: "0745",
            adcode: "431224",
            name: "溆浦县",
            center: "110.594419,27.908869",
            level: "district",
            districts: []
          },
          {
            citycode: "0745",
            adcode: "431225",
            name: "会同县",
            center: "109.734724,26.887156",
            level: "district",
            districts: []
          },
          {
            citycode: "0745",
            adcode: "431229",
            name: "靖州苗族侗族自治县",
            center: "109.696249,26.575111",
            level: "district",
            districts: []
          },
          {
            citycode: "0745",
            adcode: "431226",
            name: "麻阳苗族自治县",
            center: "109.817703,27.857666",
            level: "district",
            districts: []
          },
          {
            citycode: "0745",
            adcode: "431227",
            name: "新晃侗族自治县",
            center: "109.174808,27.352094",
            level: "district",
            districts: []
          },
          {
            citycode: "0745",
            adcode: "431202",
            name: "鹤城区",
            center: "110.040099,27.578581",
            level: "district",
            districts: []
          },
          {
            citycode: "0745",
            adcode: "431221",
            name: "中方县",
            center: "109.945436,27.440554",
            level: "district",
            districts: []
          },
          {
            citycode: "0745",
            adcode: "431281",
            name: "洪江市",
            center: "109.836475,27.209385",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0743",
        adcode: "433100",
        name: "湘西土家族苗族自治州",
        center: "109.737428,28.312592",
        level: "city",
        districts: [
          {
            citycode: "0743",
            adcode: "433125",
            name: "保靖县",
            center: "109.660433,28.699939",
            level: "district",
            districts: []
          },
          {
            citycode: "0743",
            adcode: "433127",
            name: "永顺县",
            center: "109.857142,28.979819",
            level: "district",
            districts: []
          },
          {
            citycode: "0743",
            adcode: "433124",
            name: "花垣县",
            center: "109.482378,28.57191",
            level: "district",
            districts: []
          },
          {
            citycode: "0743",
            adcode: "433101",
            name: "吉首市",
            center: "109.698348,28.261948",
            level: "district",
            districts: []
          },
          {
            citycode: "0743",
            adcode: "433126",
            name: "古丈县",
            center: "109.95072,28.616971",
            level: "district",
            districts: []
          },
          {
            citycode: "0743",
            adcode: "433122",
            name: "泸溪县",
            center: "110.219619,28.216109",
            level: "district",
            districts: []
          },
          {
            citycode: "0743",
            adcode: "433123",
            name: "凤凰县",
            center: "109.580815,27.957441",
            level: "district",
            districts: []
          },
          {
            citycode: "0743",
            adcode: "433130",
            name: "龙山县",
            center: "109.443974,29.457623",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0736",
        adcode: "430700",
        name: "常德市",
        center: "111.69905,29.031446",
        level: "city",
        districts: [
          {
            citycode: "0736",
            adcode: "430723",
            name: "澧县",
            center: "111.758806,29.633138",
            level: "district",
            districts: []
          },
          {
            citycode: "0736",
            adcode: "430781",
            name: "津市市",
            center: "111.877957,29.606512",
            level: "district",
            districts: []
          },
          {
            citycode: "0736",
            adcode: "430722",
            name: "汉寿县",
            center: "111.970725,28.906063",
            level: "district",
            districts: []
          },
          {
            citycode: "0736",
            adcode: "430703",
            name: "鼎城区",
            center: "111.679896,29.017596",
            level: "district",
            districts: []
          },
          {
            citycode: "0736",
            adcode: "430725",
            name: "桃源县",
            center: "111.488985,28.90232",
            level: "district",
            districts: []
          },
          {
            citycode: "0736",
            adcode: "430721",
            name: "安乡县",
            center: "112.171107,29.41131",
            level: "district",
            districts: []
          },
          {
            citycode: "0736",
            adcode: "430726",
            name: "石门县",
            center: "111.380056,29.584344",
            level: "district",
            districts: []
          },
          {
            citycode: "0736",
            adcode: "430724",
            name: "临澧县",
            center: "111.647547,29.440813",
            level: "district",
            districts: []
          },
          {
            citycode: "0736",
            adcode: "430702",
            name: "武陵区",
            center: "111.683043,29.055332",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0737",
        adcode: "430900",
        name: "益阳市",
        center: "112.355994,28.554853",
        level: "city",
        districts: [
          {
            citycode: "0737",
            adcode: "430902",
            name: "资阳区",
            center: "112.324286,28.59149",
            level: "district",
            districts: []
          },
          {
            citycode: "0737",
            adcode: "430922",
            name: "桃江县",
            center: "112.156432,28.518215",
            level: "district",
            districts: []
          },
          {
            citycode: "0737",
            adcode: "430923",
            name: "安化县",
            center: "111.213296,28.374223",
            level: "district",
            districts: []
          },
          {
            citycode: "0737",
            adcode: "430921",
            name: "南县",
            center: "112.396323,29.362396",
            level: "district",
            districts: []
          },
          {
            citycode: "0737",
            adcode: "430981",
            name: "沅江市",
            center: "112.354657,28.845755",
            level: "district",
            districts: []
          },
          {
            citycode: "0737",
            adcode: "430903",
            name: "赫山区",
            center: "112.373895,28.58011",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0739",
        adcode: "430500",
        name: "邵阳市",
        center: "111.467855,27.239528",
        level: "city",
        districts: [
          {
            citycode: "0739",
            adcode: "430524",
            name: "隆回县",
            center: "111.032437,27.113978",
            level: "district",
            districts: []
          },
          {
            citycode: "0739",
            adcode: "430511",
            name: "北塔区",
            center: "111.451988,27.246244",
            level: "district",
            districts: []
          },
          {
            citycode: "0739",
            adcode: "430503",
            name: "大祥区",
            center: "111.438892,27.222078",
            level: "district",
            districts: []
          },
          {
            citycode: "0739",
            adcode: "430523",
            name: "邵阳县",
            center: "111.273872,26.990785",
            level: "district",
            districts: []
          },
          {
            citycode: "0739",
            adcode: "430527",
            name: "绥宁县",
            center: "110.155532,26.582027",
            level: "district",
            districts: []
          },
          {
            citycode: "0739",
            adcode: "430502",
            name: "双清区",
            center: "111.496946,27.232286",
            level: "district",
            districts: []
          },
          {
            citycode: "0739",
            adcode: "430582",
            name: "邵东市",
            center: "111.744268,27.259812",
            level: "district",
            districts: []
          },
          {
            citycode: "0739",
            adcode: "430528",
            name: "新宁县",
            center: "110.857294,26.432913",
            level: "district",
            districts: []
          },
          {
            citycode: "0739",
            adcode: "430525",
            name: "洞口县",
            center: "110.575962,27.060274",
            level: "district",
            districts: []
          },
          {
            citycode: "0739",
            adcode: "430581",
            name: "武冈市",
            center: "110.632286,26.727414",
            level: "district",
            districts: []
          },
          {
            citycode: "0739",
            adcode: "430529",
            name: "城步苗族自治县",
            center: "110.322239,26.390598",
            level: "district",
            districts: []
          },
          {
            citycode: "0739",
            adcode: "430522",
            name: "新邵县",
            center: "111.458656,27.320917",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0734",
        adcode: "430400",
        name: "衡阳市",
        center: "112.572016,26.894216",
        level: "city",
        districts: [
          {
            citycode: "0734",
            adcode: "430423",
            name: "衡山县",
            center: "112.868361,27.230225",
            level: "district",
            districts: []
          },
          {
            citycode: "0734",
            adcode: "430421",
            name: "衡阳县",
            center: "112.370649,26.970258",
            level: "district",
            districts: []
          },
          {
            citycode: "0734",
            adcode: "430405",
            name: "珠晖区",
            center: "112.620653,26.894796",
            level: "district",
            districts: []
          },
          {
            citycode: "0734",
            adcode: "430407",
            name: "石鼓区",
            center: "112.597937,26.944257",
            level: "district",
            districts: []
          },
          {
            citycode: "0734",
            adcode: "430412",
            name: "南岳区",
            center: "112.737678,27.231846",
            level: "district",
            districts: []
          },
          {
            citycode: "0734",
            adcode: "430422",
            name: "衡南县",
            center: "112.677572,26.739665",
            level: "district",
            districts: []
          },
          {
            citycode: "0734",
            adcode: "430406",
            name: "雁峰区",
            center: "112.613914,26.840335",
            level: "district",
            districts: []
          },
          {
            citycode: "0734",
            adcode: "430481",
            name: "耒阳市",
            center: "112.859806,26.422149",
            level: "district",
            districts: []
          },
          {
            citycode: "0734",
            adcode: "430408",
            name: "蒸湘区",
            center: "112.567333,26.912388",
            level: "district",
            districts: []
          },
          {
            citycode: "0734",
            adcode: "430482",
            name: "常宁市",
            center: "112.399894,26.421717",
            level: "district",
            districts: []
          },
          {
            citycode: "0734",
            adcode: "430424",
            name: "衡东县",
            center: "112.953113,27.081086",
            level: "district",
            districts: []
          },
          {
            citycode: "0734",
            adcode: "430426",
            name: "祁东县",
            center: "112.090319,26.799284",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0731",
        adcode: "430100",
        name: "长沙市",
        center: "112.938882,28.228304",
        level: "city",
        districts: [
          {
            citycode: "0731",
            adcode: "430104",
            name: "岳麓区",
            center: "112.930116,28.234202",
            level: "district",
            districts: []
          },
          {
            citycode: "0731",
            adcode: "430112",
            name: "望城区",
            center: "112.83125,28.353221",
            level: "district",
            districts: []
          },
          {
            citycode: "0731",
            adcode: "430181",
            name: "浏阳市",
            center: "113.64328,28.163866",
            level: "district",
            districts: []
          },
          {
            citycode: "0731",
            adcode: "430105",
            name: "开福区",
            center: "112.985284,28.257286",
            level: "district",
            districts: []
          },
          {
            citycode: "0731",
            adcode: "430121",
            name: "长沙县",
            center: "113.080555,28.246821",
            level: "district",
            districts: []
          },
          {
            citycode: "0731",
            adcode: "430102",
            name: "芙蓉区",
            center: "113.032605,28.185351",
            level: "district",
            districts: []
          },
          {
            citycode: "0731",
            adcode: "430111",
            name: "雨花区",
            center: "113.03853,28.135795",
            level: "district",
            districts: []
          },
          {
            citycode: "0731",
            adcode: "430103",
            name: "天心区",
            center: "112.98978,28.114544",
            level: "district",
            districts: []
          },
          {
            citycode: "0731",
            adcode: "430182",
            name: "宁乡市",
            center: "112.551887,28.277709",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0732",
        adcode: "430300",
        name: "湘潭市",
        center: "112.945439,27.83136",
        level: "city",
        districts: [
          {
            citycode: "0732",
            adcode: "430302",
            name: "雨湖区",
            center: "112.907334,27.856115",
            level: "district",
            districts: []
          },
          {
            citycode: "0732",
            adcode: "430304",
            name: "岳塘区",
            center: "112.969444,27.872013",
            level: "district",
            districts: []
          },
          {
            citycode: "0732",
            adcode: "430382",
            name: "韶山市",
            center: "112.525364,27.914796",
            level: "district",
            districts: []
          },
          {
            citycode: "0732",
            adcode: "430321",
            name: "湘潭县",
            center: "112.950767,27.779669",
            level: "district",
            districts: []
          },
          {
            citycode: "0732",
            adcode: "430381",
            name: "湘乡市",
            center: "112.550268,27.718655",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0733",
        adcode: "430200",
        name: "株洲市",
        center: "113.132783,27.828862",
        level: "city",
        districts: [
          {
            citycode: "0733",
            adcode: "430202",
            name: "荷塘区",
            center: "113.173169,27.856314",
            level: "district",
            districts: []
          },
          {
            citycode: "0733",
            adcode: "430224",
            name: "茶陵县",
            center: "113.537907,26.777957",
            level: "district",
            districts: []
          },
          {
            citycode: "0733",
            adcode: "430281",
            name: "醴陵市",
            center: "113.497119,27.6457",
            level: "district",
            districts: []
          },
          {
            citycode: "0733",
            adcode: "430223",
            name: "攸县",
            center: "113.397152,27.01516",
            level: "district",
            districts: []
          },
          {
            citycode: "0733",
            adcode: "430225",
            name: "炎陵县",
            center: "113.772665,26.489847",
            level: "district",
            districts: []
          },
          {
            citycode: "0733",
            adcode: "430204",
            name: "石峰区",
            center: "113.117763,27.875513",
            level: "district",
            districts: []
          },
          {
            citycode: "0733",
            adcode: "430211",
            name: "天元区",
            center: "113.082227,27.826738",
            level: "district",
            districts: []
          },
          {
            citycode: "0733",
            adcode: "430212",
            name: "渌口区",
            center: "113.143832,27.699361",
            level: "district",
            districts: []
          },
          {
            citycode: "0733",
            adcode: "430203",
            name: "芦淞区",
            center: "113.153455,27.785198",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0738",
        adcode: "431300",
        name: "娄底市",
        center: "111.994468,27.699838",
        level: "city",
        districts: [
          {
            citycode: "0738",
            adcode: "431381",
            name: "冷水江市",
            center: "111.459199,27.656017",
            level: "district",
            districts: []
          },
          {
            citycode: "0738",
            adcode: "431321",
            name: "双峰县",
            center: "112.174623,27.457437",
            level: "district",
            districts: []
          },
          {
            citycode: "0738",
            adcode: "431382",
            name: "涟源市",
            center: "111.663837,27.693813",
            level: "district",
            districts: []
          },
          {
            citycode: "0738",
            adcode: "431302",
            name: "娄星区",
            center: "112.001922,27.730208",
            level: "district",
            districts: []
          },
          {
            citycode: "0738",
            adcode: "431322",
            name: "新化县",
            center: "111.327674,27.725416",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0746",
        adcode: "431100",
        name: "永州市",
        center: "111.613482,26.419861",
        level: "city",
        districts: [
          {
            citycode: "0746",
            adcode: "431122",
            name: "东安县",
            center: "111.315893,26.392173",
            level: "district",
            districts: []
          },
          {
            citycode: "0746",
            adcode: "431102",
            name: "零陵区",
            center: "111.629806,26.222278",
            level: "district",
            districts: []
          },
          {
            citycode: "0746",
            adcode: "431103",
            name: "冷水滩区",
            center: "111.592373,26.461313",
            level: "district",
            districts: []
          },
          {
            citycode: "0746",
            adcode: "431128",
            name: "新田县",
            center: "112.203396,25.903965",
            level: "district",
            districts: []
          },
          {
            citycode: "0746",
            adcode: "431126",
            name: "宁远县",
            center: "111.945925,25.570817",
            level: "district",
            districts: []
          },
          {
            citycode: "0746",
            adcode: "431123",
            name: "双牌县",
            center: "111.659967,25.961909",
            level: "district",
            districts: []
          },
          {
            citycode: "0746",
            adcode: "431124",
            name: "道县",
            center: "111.600866,25.526282",
            level: "district",
            districts: []
          },
          {
            citycode: "0746",
            adcode: "431125",
            name: "江永县",
            center: "111.343543,25.274461",
            level: "district",
            districts: []
          },
          {
            citycode: "0746",
            adcode: "431129",
            name: "江华瑶族自治县",
            center: "111.57951,25.185257",
            level: "district",
            districts: []
          },
          {
            citycode: "0746",
            adcode: "431127",
            name: "蓝山县",
            center: "112.195842,25.369575",
            level: "district",
            districts: []
          },
          {
            citycode: "0746",
            adcode: "431181",
            name: "祁阳市",
            center: "111.840253,26.580292",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0735",
        adcode: "431000",
        name: "郴州市",
        center: "113.015517,25.770117",
        level: "city",
        districts: [
          {
            citycode: "0735",
            adcode: "431026",
            name: "汝城县",
            center: "113.685193,25.533024",
            level: "district",
            districts: []
          },
          {
            citycode: "0735",
            adcode: "431081",
            name: "资兴市",
            center: "113.235841,25.977226",
            level: "district",
            districts: []
          },
          {
            citycode: "0735",
            adcode: "431027",
            name: "桂东县",
            center: "113.944792,26.077609",
            level: "district",
            districts: []
          },
          {
            citycode: "0735",
            adcode: "431024",
            name: "嘉禾县",
            center: "112.379216,25.616025",
            level: "district",
            districts: []
          },
          {
            citycode: "0735",
            adcode: "431002",
            name: "北湖区",
            center: "113.010606,25.784632",
            level: "district",
            districts: []
          },
          {
            citycode: "0735",
            adcode: "431022",
            name: "宜章县",
            center: "112.948806,25.40059",
            level: "district",
            districts: []
          },
          {
            citycode: "0735",
            adcode: "431025",
            name: "临武县",
            center: "112.563833,25.276459",
            level: "district",
            districts: []
          },
          {
            citycode: "0735",
            adcode: "431028",
            name: "安仁县",
            center: "113.269703,26.708569",
            level: "district",
            districts: []
          },
          {
            citycode: "0735",
            adcode: "431021",
            name: "桂阳县",
            center: "112.733804,25.75382",
            level: "district",
            districts: []
          },
          {
            citycode: "0735",
            adcode: "431003",
            name: "苏仙区",
            center: "113.042364,25.799624",
            level: "district",
            districts: []
          },
          {
            citycode: "0735",
            adcode: "431023",
            name: "永兴县",
            center: "113.116587,26.127155",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "460000",
    name: "海南省",
    center: "110.348781,20.018639",
    level: "province",
    districts: [
      {
        citycode: "1896",
        adcode: "469024",
        name: "临高县",
        center: "109.690508,19.912025",
        level: "city",
        districts: [
          {
            citycode: "1896",
            adcode: "469024",
            name: "博厚镇",
            center: "109.807195,19.989365",
            level: "street",
            districts: []
          },
          {
            citycode: "1896",
            adcode: "469024",
            name: "南宝镇",
            center: "109.638149,19.751609",
            level: "street",
            districts: []
          },
          {
            citycode: "1896",
            adcode: "469024",
            name: "和舍镇",
            center: "109.714907,19.671698",
            level: "street",
            districts: []
          },
          {
            citycode: "1896",
            adcode: "469024",
            name: "调楼镇",
            center: "109.609769,19.923138",
            level: "street",
            districts: []
          },
          {
            citycode: "1896",
            adcode: "469024",
            name: "东英镇",
            center: "109.612973,19.934938",
            level: "street",
            districts: []
          },
          {
            citycode: "1896",
            adcode: "469024",
            name: "加来镇",
            center: "109.650909,19.759074",
            level: "street",
            districts: []
          },
          {
            citycode: "1896",
            adcode: "469024",
            name: "临城镇",
            center: "109.632657,19.753184",
            level: "street",
            districts: []
          },
          {
            citycode: "1896",
            adcode: "469024",
            name: "多文镇",
            center: "109.751742,19.673620",
            level: "street",
            districts: []
          },
          {
            citycode: "1896",
            adcode: "469024",
            name: "新盈镇",
            center: "109.619413,19.864946",
            level: "street",
            districts: []
          },
          {
            citycode: "1896",
            adcode: "469024",
            name: "波莲镇",
            center: "109.614806,19.855541",
            level: "street",
            districts: []
          },
          {
            citycode: "1896",
            adcode: "469024",
            name: "皇桐镇",
            center: "109.856872,19.732264",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "1892",
        adcode: "469022",
        name: "屯昌县",
        center: "110.101667,19.351662",
        level: "city",
        districts: [
          {
            citycode: "1892",
            adcode: "469022",
            name: "南坤镇",
            center: "110.034905,19.407514",
            level: "street",
            districts: []
          },
          {
            citycode: "1892",
            adcode: "469022",
            name: "南吕镇",
            center: "110.042989,19.268166",
            level: "street",
            districts: []
          },
          {
            citycode: "1892",
            adcode: "469022",
            name: "屯城镇",
            center: "110.180636,19.319861",
            level: "street",
            districts: []
          },
          {
            citycode: "1892",
            adcode: "469022",
            name: "新兴镇",
            center: "110.136198,19.558967",
            level: "street",
            districts: []
          },
          {
            citycode: "1892",
            adcode: "469022",
            name: "西昌镇",
            center: "109.953863,19.415440",
            level: "street",
            districts: []
          },
          {
            citycode: "1892",
            adcode: "469022",
            name: "乌坡镇",
            center: "110.083261,19.206717",
            level: "street",
            districts: []
          },
          {
            citycode: "1892",
            adcode: "469022",
            name: "枫木镇",
            center: "109.973395,19.190743",
            level: "street",
            districts: []
          },
          {
            citycode: "1892",
            adcode: "469022",
            name: "坡心镇",
            center: "110.214429,19.310397",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "0802",
        adcode: "469025",
        name: "白沙黎族自治县",
        center: "109.4429,19.221641",
        level: "city",
        districts: [
          {
            citycode: "0802",
            adcode: "469025",
            name: "南开乡",
            center: "109.293018,19.059602",
            level: "street",
            districts: []
          },
          {
            citycode: "0802",
            adcode: "469025",
            name: "阜龙乡",
            center: "109.436387,19.331650",
            level: "street",
            districts: []
          },
          {
            citycode: "0802",
            adcode: "469025",
            name: "细水乡",
            center: "109.526636,19.201248",
            level: "street",
            districts: []
          },
          {
            citycode: "0802",
            adcode: "469025",
            name: "牙叉镇",
            center: "109.399183,19.138439",
            level: "street",
            districts: []
          },
          {
            citycode: "0802",
            adcode: "469025",
            name: "元门乡",
            center: "109.449713,19.095705",
            level: "street",
            districts: []
          },
          {
            citycode: "0802",
            adcode: "469025",
            name: "打安镇",
            center: "109.358207,19.378075",
            level: "street",
            districts: []
          },
          {
            citycode: "0802",
            adcode: "469025",
            name: "金波乡",
            center: "109.171689,19.276555",
            level: "street",
            districts: []
          },
          {
            citycode: "0802",
            adcode: "469025",
            name: "青松乡",
            center: "109.293018,19.059602",
            level: "street",
            districts: []
          },
          {
            citycode: "0802",
            adcode: "469025",
            name: "七坊镇",
            center: "109.139587,19.311855",
            level: "street",
            districts: []
          },
          {
            citycode: "0802",
            adcode: "469025",
            name: "邦溪镇",
            center: "109.043497,19.419968",
            level: "street",
            districts: []
          },
          {
            citycode: "0802",
            adcode: "469025",
            name: "荣邦乡",
            center: "109.047772,19.432678",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "1894",
        adcode: "469002",
        name: "琼海市",
        center: "110.474524,19.259112",
        level: "city",
        districts: [
          {
            citycode: "1894",
            adcode: "469002",
            name: "石壁镇",
            center: "110.330819,19.151644",
            level: "street",
            districts: []
          },
          {
            citycode: "1894",
            adcode: "469002",
            name: "龙江镇",
            center: "110.377839,19.152396",
            level: "street",
            districts: []
          },
          {
            citycode: "1894",
            adcode: "469002",
            name: "会山镇",
            center: "110.153445,19.012397",
            level: "street",
            districts: []
          },
          {
            citycode: "1894",
            adcode: "469002",
            name: "长坡镇",
            center: "110.497644,19.427753",
            level: "street",
            districts: []
          },
          {
            citycode: "1894",
            adcode: "469002",
            name: "阳江镇",
            center: "110.343829,19.128946",
            level: "street",
            districts: []
          },
          {
            citycode: "1894",
            adcode: "469002",
            name: "潭门镇",
            center: "110.539051,19.210843",
            level: "street",
            districts: []
          },
          {
            citycode: "1894",
            adcode: "469002",
            name: "嘉积镇",
            center: "110.421334,19.291689",
            level: "street",
            districts: []
          },
          {
            citycode: "1894",
            adcode: "469002",
            name: "塔洋镇",
            center: "110.472088,19.325894",
            level: "street",
            districts: []
          },
          {
            citycode: "1894",
            adcode: "469002",
            name: "大路镇",
            center: "110.529076,19.373803",
            level: "street",
            districts: []
          },
          {
            citycode: "1894",
            adcode: "469002",
            name: "万泉镇",
            center: "110.414108,19.355227",
            level: "street",
            districts: []
          },
          {
            citycode: "1894",
            adcode: "469002",
            name: "中原镇",
            center: "110.431959,19.060809",
            level: "street",
            districts: []
          },
          {
            citycode: "1894",
            adcode: "469002",
            name: "博鳌镇",
            center: "110.492863,19.177047",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "1899",
        adcode: "469030",
        name: "琼中黎族苗族自治县",
        center: "109.838423,19.03327",
        level: "city",
        districts: [
          {
            citycode: "1899",
            adcode: "469030",
            name: "什运乡",
            center: "109.583026,18.923692",
            level: "street",
            districts: []
          },
          {
            citycode: "1899",
            adcode: "469030",
            name: "湾岭镇",
            center: "109.865175,19.096504",
            level: "street",
            districts: []
          },
          {
            citycode: "1899",
            adcode: "469030",
            name: "上安乡",
            center: "109.712993,18.899738",
            level: "street",
            districts: []
          },
          {
            citycode: "1899",
            adcode: "469030",
            name: "吊罗山乡",
            center: "109.930063,18.865272",
            level: "street",
            districts: []
          },
          {
            citycode: "1899",
            adcode: "469030",
            name: "黎母山镇",
            center: "109.824353,19.190837",
            level: "street",
            districts: []
          },
          {
            citycode: "1899",
            adcode: "469030",
            name: "和平镇",
            center: "110.052562,18.755917",
            level: "street",
            districts: []
          },
          {
            citycode: "1899",
            adcode: "469030",
            name: "红毛镇",
            center: "109.608031,19.033716",
            level: "street",
            districts: []
          },
          {
            citycode: "1899",
            adcode: "469030",
            name: "中平镇",
            center: "110.032689,18.966494",
            level: "street",
            districts: []
          },
          {
            citycode: "1899",
            adcode: "469030",
            name: "营根镇",
            center: "109.930582,19.089045",
            level: "street",
            districts: []
          },
          {
            citycode: "1899",
            adcode: "469030",
            name: "长征镇",
            center: "109.793068,18.896296",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "0807",
        adcode: "469007",
        name: "东方市",
        center: "108.651829,19.095187",
        level: "city",
        districts: [
          {
            citycode: "0807",
            adcode: "469007",
            name: "感城镇",
            center: "108.787859,18.842201",
            level: "street",
            districts: []
          },
          {
            citycode: "0807",
            adcode: "469007",
            name: "新龙镇",
            center: "108.678972,19.017898",
            level: "street",
            districts: []
          },
          {
            citycode: "0807",
            adcode: "469007",
            name: "大田镇",
            center: "108.771554,19.042603",
            level: "street",
            districts: []
          },
          {
            citycode: "0807",
            adcode: "469007",
            name: "三家镇",
            center: "108.833188,19.259935",
            level: "street",
            districts: []
          },
          {
            citycode: "0807",
            adcode: "469007",
            name: "四更镇",
            center: "108.596055,19.187648",
            level: "street",
            districts: []
          },
          {
            citycode: "0807",
            adcode: "469007",
            name: "八所镇",
            center: "108.780679,19.124742",
            level: "street",
            districts: []
          },
          {
            citycode: "0807",
            adcode: "469007",
            name: "板桥镇",
            center: "108.910695,18.807162",
            level: "street",
            districts: []
          },
          {
            citycode: "0807",
            adcode: "469007",
            name: "东河镇",
            center: "109.015044,19.084384",
            level: "street",
            districts: []
          },
          {
            citycode: "0807",
            adcode: "469007",
            name: "天安乡",
            center: "108.804715,18.975480",
            level: "street",
            districts: []
          },
          {
            citycode: "0807",
            adcode: "469007",
            name: "江边乡",
            center: "109.091697,18.906129",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "1898",
        adcode: "469006",
        name: "万宁市",
        center: "110.392605,18.793697",
        level: "city",
        districts: [
          {
            citycode: "1898",
            adcode: "469006",
            name: "后安镇",
            center: "110.374318,18.908719",
            level: "street",
            districts: []
          },
          {
            citycode: "1898",
            adcode: "469006",
            name: "和乐镇",
            center: "110.415860,18.962463",
            level: "street",
            districts: []
          },
          {
            citycode: "1898",
            adcode: "469006",
            name: "东澳镇",
            center: "110.429479,18.640771",
            level: "street",
            districts: []
          },
          {
            citycode: "1898",
            adcode: "469006",
            name: "山根镇",
            center: "110.451557,18.990371",
            level: "street",
            districts: []
          },
          {
            citycode: "1898",
            adcode: "469006",
            name: "龙滚镇",
            center: "110.475633,18.993293",
            level: "street",
            districts: []
          },
          {
            citycode: "1898",
            adcode: "469006",
            name: "南桥镇",
            center: "110.030918,18.747164",
            level: "street",
            districts: []
          },
          {
            citycode: "1898",
            adcode: "469006",
            name: "北大镇",
            center: "110.418437,18.985185",
            level: "street",
            districts: []
          },
          {
            citycode: "1898",
            adcode: "469006",
            name: "三更罗镇",
            center: "110.113025,18.948777",
            level: "street",
            districts: []
          },
          {
            citycode: "1898",
            adcode: "469006",
            name: "礼纪镇",
            center: "110.265921,18.748523",
            level: "street",
            districts: []
          },
          {
            citycode: "1898",
            adcode: "469006",
            name: "大茂镇",
            center: "110.391696,18.876747",
            level: "street",
            districts: []
          },
          {
            citycode: "1898",
            adcode: "469006",
            name: "万城镇",
            center: "110.412512,18.826291",
            level: "street",
            districts: []
          },
          {
            citycode: "1898",
            adcode: "469006",
            name: "长丰镇",
            center: "110.281098,18.855580",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "2802",
        adcode: "469027",
        name: "乐东黎族自治县",
        center: "109.173384,18.750063",
        level: "city",
        districts: [
          {
            citycode: "2802",
            adcode: "469027",
            name: "莺歌海镇",
            center: "108.754600,18.546375",
            level: "street",
            districts: []
          },
          {
            citycode: "2802",
            adcode: "469027",
            name: "大安镇",
            center: "109.231993,18.734953",
            level: "street",
            districts: []
          },
          {
            citycode: "2802",
            adcode: "469027",
            name: "尖峰镇",
            center: "108.843833,18.624901",
            level: "street",
            districts: []
          },
          {
            citycode: "2802",
            adcode: "469027",
            name: "佛罗镇",
            center: "108.789451,18.579735",
            level: "street",
            districts: []
          },
          {
            citycode: "2802",
            adcode: "469027",
            name: "志仲镇",
            center: "109.386810,18.609590",
            level: "street",
            districts: []
          },
          {
            citycode: "2802",
            adcode: "469027",
            name: "黄流镇",
            center: "108.804819,18.594264",
            level: "street",
            districts: []
          },
          {
            citycode: "2802",
            adcode: "469027",
            name: "利国镇",
            center: "108.938223,18.495361",
            level: "street",
            districts: []
          },
          {
            citycode: "2802",
            adcode: "469027",
            name: "万冲镇",
            center: "109.331720,18.913271",
            level: "street",
            districts: []
          },
          {
            citycode: "2802",
            adcode: "469027",
            name: "九所镇",
            center: "109.080605,18.450650",
            level: "street",
            districts: []
          },
          {
            citycode: "2802",
            adcode: "469027",
            name: "千家镇",
            center: "109.149747,18.465259",
            level: "street",
            districts: []
          },
          {
            citycode: "2802",
            adcode: "469027",
            name: "抱由镇",
            center: "109.027958,18.797154",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "0809",
        adcode: "469028",
        name: "陵水黎族自治县",
        center: "110.037553,18.506045",
        level: "city",
        districts: [
          {
            citycode: "0809",
            adcode: "469028",
            name: "椰林镇",
            center: "110.019690,18.482546",
            level: "street",
            districts: []
          },
          {
            citycode: "0809",
            adcode: "469028",
            name: "提蒙乡",
            center: "110.013235,18.640359",
            level: "street",
            districts: []
          },
          {
            citycode: "0809",
            adcode: "469028",
            name: "黎安镇",
            center: "110.027365,18.450385",
            level: "street",
            districts: []
          },
          {
            citycode: "0809",
            adcode: "469028",
            name: "群英乡",
            center: "109.847456,18.569653",
            level: "street",
            districts: []
          },
          {
            citycode: "0809",
            adcode: "469028",
            name: "文罗镇",
            center: "109.914457,18.573364",
            level: "street",
            districts: []
          },
          {
            citycode: "0809",
            adcode: "469028",
            name: "三才镇",
            center: "109.963149,18.491519",
            level: "street",
            districts: []
          },
          {
            citycode: "0809",
            adcode: "469028",
            name: "新村镇",
            center: "110.026125,18.445965",
            level: "street",
            districts: []
          },
          {
            citycode: "0809",
            adcode: "469028",
            name: "隆广镇",
            center: "109.857549,18.480188",
            level: "street",
            districts: []
          },
          {
            citycode: "0809",
            adcode: "469028",
            name: "英州镇",
            center: "109.875526,18.473898",
            level: "street",
            districts: []
          },
          {
            citycode: "0809",
            adcode: "469028",
            name: "光坡镇",
            center: "110.036496,18.559416",
            level: "street",
            districts: []
          },
          {
            citycode: "0809",
            adcode: "469028",
            name: "本号镇",
            center: "109.837130,18.632318",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "2898",
        adcode: "460300",
        name: "三沙市",
        center: "112.338649,16.831004",
        level: "city",
        districts: [
          {
            citycode: "2898",
            adcode: "460301",
            name: "西沙区",
            center: "112.346961,16.834372",
            level: "district",
            districts: []
          },
          {
            citycode: "2898",
            adcode: "460302",
            name: "南沙区",
            center: "112.896229,9.548531",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "1893",
        adcode: "469005",
        name: "文昌市",
        center: "110.797473,19.544234",
        level: "city",
        districts: [
          {
            citycode: "1893",
            adcode: "469005",
            name: "文教镇",
            center: "110.855856,19.708320",
            level: "street",
            districts: []
          },
          {
            citycode: "1893",
            adcode: "469005",
            name: "铺前镇",
            center: "110.675271,20.037734",
            level: "street",
            districts: []
          },
          {
            citycode: "1893",
            adcode: "469005",
            name: "龙楼镇",
            center: "110.938472,19.660636",
            level: "street",
            districts: []
          },
          {
            citycode: "1893",
            adcode: "469005",
            name: "东郊镇",
            center: "110.910447,19.629115",
            level: "street",
            districts: []
          },
          {
            citycode: "1893",
            adcode: "469005",
            name: "昌洒镇",
            center: "110.894780,19.826152",
            level: "street",
            districts: []
          },
          {
            citycode: "1893",
            adcode: "469005",
            name: "锦山镇",
            center: "110.664000,20.027062",
            level: "street",
            districts: []
          },
          {
            citycode: "1893",
            adcode: "469005",
            name: "文城镇",
            center: "110.702595,19.503784",
            level: "street",
            districts: []
          },
          {
            citycode: "1893",
            adcode: "469005",
            name: "冯坡镇",
            center: "110.790950,20.028869",
            level: "street",
            districts: []
          },
          {
            citycode: "1893",
            adcode: "469005",
            name: "潭牛镇",
            center: "110.773474,19.744417",
            level: "street",
            districts: []
          },
          {
            citycode: "1893",
            adcode: "469005",
            name: "公坡镇",
            center: "110.826694,19.852259",
            level: "street",
            districts: []
          },
          {
            citycode: "1893",
            adcode: "469005",
            name: "会文镇",
            center: "110.722572,19.484181",
            level: "street",
            districts: []
          },
          {
            citycode: "1893",
            adcode: "469005",
            name: "翁田镇",
            center: "110.808995,19.920147",
            level: "street",
            districts: []
          },
          {
            citycode: "1893",
            adcode: "469005",
            name: "东路镇",
            center: "110.716883,19.722600",
            level: "street",
            districts: []
          },
          {
            citycode: "1893",
            adcode: "469005",
            name: "蓬莱镇",
            center: "110.509637,19.558919",
            level: "street",
            districts: []
          },
          {
            citycode: "1893",
            adcode: "469005",
            name: "抱罗镇",
            center: "110.739711,19.888896",
            level: "street",
            districts: []
          },
          {
            citycode: "1893",
            adcode: "469005",
            name: "东阁镇",
            center: "110.855599,19.705977",
            level: "street",
            districts: []
          },
          {
            citycode: "1893",
            adcode: "469005",
            name: "重兴镇",
            center: "110.569437,19.477879",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "0805",
        adcode: "460400",
        name: "儋州市",
        center: "109.580812,19.520948",
        level: "city",
        districts: [
          {
            citycode: "0805",
            adcode: "460400",
            name: "光村镇",
            center: "109.467340,19.903531",
            level: "street",
            districts: []
          },
          {
            citycode: "0805",
            adcode: "460400",
            name: "中和镇",
            center: "109.351017,19.774675",
            level: "street",
            districts: []
          },
          {
            citycode: "0805",
            adcode: "460400",
            name: "海头镇",
            center: "109.028046,19.432317",
            level: "street",
            districts: []
          },
          {
            citycode: "0805",
            adcode: "460400",
            name: "新州镇",
            center: "109.320933,19.752347",
            level: "street",
            districts: []
          },
          {
            citycode: "0805",
            adcode: "460400",
            name: "峨蔓镇",
            center: "109.332639,19.843794",
            level: "street",
            districts: []
          },
          {
            citycode: "0805",
            adcode: "460400",
            name: "三都镇",
            center: "109.204266,19.830050",
            level: "street",
            districts: []
          },
          {
            citycode: "0805",
            adcode: "460400",
            name: "王五镇",
            center: "109.277591,19.624562",
            level: "street",
            districts: []
          },
          {
            citycode: "0805",
            adcode: "460400",
            name: "木棠镇",
            center: "109.346666,19.900381",
            level: "street",
            districts: []
          },
          {
            citycode: "0805",
            adcode: "460400",
            name: "白马井镇",
            center: "109.232173,19.580719",
            level: "street",
            districts: []
          },
          {
            citycode: "0805",
            adcode: "460400",
            name: "排浦镇",
            center: "109.219523,19.631492",
            level: "street",
            districts: []
          },
          {
            citycode: "0805",
            adcode: "460400",
            name: "雅星镇",
            center: "109.305133,19.393438",
            level: "street",
            districts: []
          },
          {
            citycode: "0805",
            adcode: "460400",
            name: "大成镇",
            center: "109.371806,19.478206",
            level: "street",
            districts: []
          },
          {
            citycode: "0805",
            adcode: "460400",
            name: "和庆镇",
            center: "109.739681,19.587333",
            level: "street",
            districts: []
          },
          {
            citycode: "0805",
            adcode: "460400",
            name: "东成镇",
            center: "109.597935,19.726594",
            level: "street",
            districts: []
          },
          {
            citycode: "0805",
            adcode: "460400",
            name: "南丰镇",
            center: "109.543297,19.504378",
            level: "street",
            districts: []
          },
          {
            citycode: "0805",
            adcode: "460400",
            name: "那大镇",
            center: "109.559561,19.500110",
            level: "street",
            districts: []
          },
          {
            citycode: "0805",
            adcode: "460400",
            name: "兰洋镇",
            center: "109.735770,19.408360",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "0899",
        adcode: "460200",
        name: "三亚市",
        center: "109.511709,18.252865",
        level: "city",
        districts: [
          {
            citycode: "0899",
            adcode: "460202",
            name: "海棠区",
            center: "109.735676,18.384177",
            level: "district",
            districts: []
          },
          {
            citycode: "0899",
            adcode: "460205",
            name: "崖州区",
            center: "109.172298,18.357572",
            level: "district",
            districts: []
          },
          {
            citycode: "0899",
            adcode: "460203",
            name: "吉阳区",
            center: "109.578238,18.28146",
            level: "district",
            districts: []
          },
          {
            citycode: "0899",
            adcode: "460204",
            name: "天涯区",
            center: "109.452325,18.298975",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0801",
        adcode: "469029",
        name: "保亭黎族苗族自治县",
        center: "109.700279,18.640339",
        level: "city",
        districts: [
          {
            citycode: "0801",
            adcode: "469029",
            name: "南林乡",
            center: "109.576563,18.389262",
            level: "street",
            districts: []
          },
          {
            citycode: "0801",
            adcode: "469029",
            name: "毛感乡",
            center: "109.503131,18.556288",
            level: "street",
            districts: []
          },
          {
            citycode: "0801",
            adcode: "469029",
            name: "什玲镇",
            center: "109.736545,18.697785",
            level: "street",
            districts: []
          },
          {
            citycode: "0801",
            adcode: "469029",
            name: "六弓乡",
            center: "109.744740,18.574041",
            level: "street",
            districts: []
          },
          {
            citycode: "0801",
            adcode: "469029",
            name: "加茂镇",
            center: "109.674549,18.516922",
            level: "street",
            districts: []
          },
          {
            citycode: "0801",
            adcode: "469029",
            name: "三道镇",
            center: "109.702909,18.430953",
            level: "street",
            districts: []
          },
          {
            citycode: "0801",
            adcode: "469029",
            name: "新政镇",
            center: "109.603989,18.435464",
            level: "street",
            districts: []
          },
          {
            citycode: "0801",
            adcode: "469029",
            name: "保城镇",
            center: "109.773883,18.600774",
            level: "street",
            districts: []
          },
          {
            citycode: "0801",
            adcode: "469029",
            name: "响水镇",
            center: "109.550646,18.610753",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "1897",
        adcode: "469001",
        name: "五指山市",
        center: "109.516784,18.774827",
        level: "city",
        districts: [
          {
            citycode: "1897",
            adcode: "469001",
            name: "毛阳镇",
            center: "109.449705,18.881089",
            level: "street",
            districts: []
          },
          {
            citycode: "1897",
            adcode: "469001",
            name: "水满乡",
            center: "109.600698,18.899478",
            level: "street",
            districts: []
          },
          {
            citycode: "1897",
            adcode: "469001",
            name: "番阳镇",
            center: "109.333537,18.913174",
            level: "street",
            districts: []
          },
          {
            citycode: "1897",
            adcode: "469001",
            name: "毛道乡",
            center: "109.356022,18.713388",
            level: "street",
            districts: []
          },
          {
            citycode: "1897",
            adcode: "469001",
            name: "畅好乡",
            center: "109.383431,18.682307",
            level: "street",
            districts: []
          },
          {
            citycode: "1897",
            adcode: "469001",
            name: "通什镇",
            center: "109.623006,18.822353",
            level: "street",
            districts: []
          },
          {
            citycode: "1897",
            adcode: "469001",
            name: "南圣镇",
            center: "109.684604,18.822608",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "0898",
        adcode: "460100",
        name: "海口市",
        center: "110.198418,20.045805",
        level: "city",
        districts: [
          {
            citycode: "0898",
            adcode: "460108",
            name: "美兰区",
            center: "110.366359,20.028983",
            level: "district",
            districts: []
          },
          {
            citycode: "0898",
            adcode: "460105",
            name: "秀英区",
            center: "110.293566,20.007703",
            level: "district",
            districts: []
          },
          {
            citycode: "0898",
            adcode: "460106",
            name: "龙华区",
            center: "110.328628,20.030843",
            level: "district",
            districts: []
          },
          {
            citycode: "0898",
            adcode: "460107",
            name: "琼山区",
            center: "110.384318,19.984293",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0803",
        adcode: "469026",
        name: "昌江黎族自治县",
        center: "109.055783,19.298139",
        level: "city",
        districts: [
          {
            citycode: "0803",
            adcode: "469026",
            name: "乌烈镇",
            center: "108.809852,19.352543",
            level: "street",
            districts: []
          },
          {
            citycode: "0803",
            adcode: "469026",
            name: "叉河镇",
            center: "108.997547,19.244929",
            level: "street",
            districts: []
          },
          {
            citycode: "0803",
            adcode: "469026",
            name: "石碌镇",
            center: "108.997547,19.244929",
            level: "street",
            districts: []
          },
          {
            citycode: "0803",
            adcode: "469026",
            name: "昌化镇",
            center: "108.731720,19.383636",
            level: "street",
            districts: []
          },
          {
            citycode: "0803",
            adcode: "469026",
            name: "王下乡",
            center: "109.094025,18.905182",
            level: "street",
            districts: []
          },
          {
            citycode: "0803",
            adcode: "469026",
            name: "十月田镇",
            center: "108.842173,19.252501",
            level: "street",
            districts: []
          },
          {
            citycode: "0803",
            adcode: "469026",
            name: "七叉镇",
            center: "109.077512,19.190357",
            level: "street",
            districts: []
          },
          {
            citycode: "0803",
            adcode: "469026",
            name: "海尾镇",
            center: "108.952319,19.494543",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "0806",
        adcode: "469021",
        name: "定安县",
        center: "110.358001,19.681215",
        level: "city",
        districts: [
          {
            citycode: "0806",
            adcode: "469021",
            name: "岭口镇",
            center: "110.276026,19.360104",
            level: "street",
            districts: []
          },
          {
            citycode: "0806",
            adcode: "469021",
            name: "龙门镇",
            center: "110.297826,19.499676",
            level: "street",
            districts: []
          },
          {
            citycode: "0806",
            adcode: "469021",
            name: "龙河镇",
            center: "110.258715,19.361056",
            level: "street",
            districts: []
          },
          {
            citycode: "0806",
            adcode: "469021",
            name: "定城镇",
            center: "110.317065,19.701678",
            level: "street",
            districts: []
          },
          {
            citycode: "0806",
            adcode: "469021",
            name: "黄竹镇",
            center: "110.348146,19.445919",
            level: "street",
            districts: []
          },
          {
            citycode: "0806",
            adcode: "469021",
            name: "翰林镇",
            center: "110.285870,19.349021",
            level: "street",
            districts: []
          },
          {
            citycode: "0806",
            adcode: "469021",
            name: "雷鸣镇",
            center: "110.300530,19.498361",
            level: "street",
            districts: []
          },
          {
            citycode: "0806",
            adcode: "469021",
            name: "新竹镇",
            center: "110.165312,19.577271",
            level: "street",
            districts: []
          },
          {
            citycode: "0806",
            adcode: "469021",
            name: "富文镇",
            center: "110.223762,19.422974",
            level: "street",
            districts: []
          },
          {
            citycode: "0806",
            adcode: "469021",
            name: "龙湖镇",
            center: "110.401131,19.606699",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "0804",
        adcode: "469023",
        name: "澄迈县",
        center: "110.007497,19.738885",
        level: "city",
        districts: [
          {
            citycode: "0804",
            adcode: "469023",
            name: "老城镇",
            center: "110.158713,19.952869",
            level: "street",
            districts: []
          },
          {
            citycode: "0804",
            adcode: "469023",
            name: "大丰镇",
            center: "109.988855,19.904039",
            level: "street",
            districts: []
          },
          {
            citycode: "0804",
            adcode: "469023",
            name: "瑞溪镇",
            center: "110.111302,19.789006",
            level: "street",
            districts: []
          },
          {
            citycode: "0804",
            adcode: "469023",
            name: "仁兴镇",
            center: "109.776963,19.382054",
            level: "street",
            districts: []
          },
          {
            citycode: "0804",
            adcode: "469023",
            name: "中兴镇",
            center: "109.760023,19.528937",
            level: "street",
            districts: []
          },
          {
            citycode: "0804",
            adcode: "469023",
            name: "加乐镇",
            center: "110.061273,19.617646",
            level: "street",
            districts: []
          },
          {
            citycode: "0804",
            adcode: "469023",
            name: "金江镇",
            center: "109.976112,19.774256",
            level: "street",
            districts: []
          },
          {
            citycode: "0804",
            adcode: "469023",
            name: "福山镇",
            center: "109.919175,19.929023",
            level: "street",
            districts: []
          },
          {
            citycode: "0804",
            adcode: "469023",
            name: "桥头镇",
            center: "109.936766,19.914013",
            level: "street",
            districts: []
          },
          {
            citycode: "0804",
            adcode: "469023",
            name: "文儒镇",
            center: "110.134745,19.633652",
            level: "street",
            districts: []
          },
          {
            citycode: "0804",
            adcode: "469023",
            name: "永发镇",
            center: "110.186668,19.641706",
            level: "street",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "320000",
    name: "江苏省",
    center: "118.763563,32.061377",
    level: "province",
    districts: [
      {
        citycode: "0518",
        adcode: "320700",
        name: "连云港市",
        center: "119.221487,34.596639",
        level: "city",
        districts: [
          {
            citycode: "0518",
            adcode: "320724",
            name: "灌南县",
            center: "119.315583,34.087251",
            level: "district",
            districts: []
          },
          {
            citycode: "0518",
            adcode: "320707",
            name: "赣榆区",
            center: "119.173173,34.841336",
            level: "district",
            districts: []
          },
          {
            citycode: "0518",
            adcode: "320703",
            name: "连云区",
            center: "119.338901,34.760317",
            level: "district",
            districts: []
          },
          {
            citycode: "0518",
            adcode: "320723",
            name: "灌云县",
            center: "119.239426,34.284074",
            level: "district",
            districts: []
          },
          {
            citycode: "0518",
            adcode: "320706",
            name: "海州区",
            center: "119.163492,34.572506",
            level: "district",
            districts: []
          },
          {
            citycode: "0518",
            adcode: "320722",
            name: "东海县",
            center: "118.752869,34.542194",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0513",
        adcode: "320600",
        name: "南通市",
        center: "120.894522,31.981269",
        level: "city",
        districts: [
          {
            citycode: "0513",
            adcode: "320623",
            name: "如东县",
            center: "121.18495,32.331584",
            level: "district",
            districts: []
          },
          {
            citycode: "0513",
            adcode: "320613",
            name: "崇川区",
            center: "120.857253,32.010277",
            level: "district",
            districts: []
          },
          {
            citycode: "0513",
            adcode: "320681",
            name: "启东市",
            center: "121.65523,31.792831",
            level: "district",
            districts: []
          },
          {
            citycode: "0513",
            adcode: "320614",
            name: "海门区",
            center: "121.182016,31.869418",
            level: "district",
            districts: []
          },
          {
            citycode: "0513",
            adcode: "320612",
            name: "通州区",
            center: "121.073742,32.065972",
            level: "district",
            districts: []
          },
          {
            citycode: "0513",
            adcode: "320682",
            name: "如皋市",
            center: "120.574028,32.371493",
            level: "district",
            districts: []
          },
          {
            citycode: "0513",
            adcode: "320685",
            name: "海安市",
            center: "120.46779,32.532853",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0527",
        adcode: "321300",
        name: "宿迁市",
        center: "118.275228,33.963186",
        level: "city",
        districts: [
          {
            citycode: "0527",
            adcode: "321323",
            name: "泗阳县",
            center: "118.703636,33.723576",
            level: "district",
            districts: []
          },
          {
            citycode: "0527",
            adcode: "321324",
            name: "泗洪县",
            center: "118.223941,33.476575",
            level: "district",
            districts: []
          },
          {
            citycode: "0527",
            adcode: "321311",
            name: "宿豫区",
            center: "118.330423,33.94813",
            level: "district",
            districts: []
          },
          {
            citycode: "0527",
            adcode: "321302",
            name: "宿城区",
            center: "118.242048,33.963891",
            level: "district",
            districts: []
          },
          {
            citycode: "0527",
            adcode: "321322",
            name: "沭阳县",
            center: "118.804321,34.110642",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0517",
        adcode: "320800",
        name: "淮安市",
        center: "119.113166,33.551495",
        level: "city",
        districts: [
          {
            citycode: "0517",
            adcode: "320804",
            name: "淮阴区",
            center: "119.034895,33.632588",
            level: "district",
            districts: []
          },
          {
            citycode: "0517",
            adcode: "320813",
            name: "洪泽区",
            center: "118.873132,33.294095",
            level: "district",
            districts: []
          },
          {
            citycode: "0517",
            adcode: "320830",
            name: "盱眙县",
            center: "118.544545,33.011905",
            level: "district",
            districts: []
          },
          {
            citycode: "0517",
            adcode: "320831",
            name: "金湖县",
            center: "119.020432,33.024663",
            level: "district",
            districts: []
          },
          {
            citycode: "0517",
            adcode: "320826",
            name: "涟水县",
            center: "119.260589,33.781648",
            level: "district",
            districts: []
          },
          {
            citycode: "0517",
            adcode: "320812",
            name: "清江浦区",
            center: "119.026662,33.552579",
            level: "district",
            districts: []
          },
          {
            citycode: "0517",
            adcode: "320803",
            name: "淮安区",
            center: "119.141183,33.50296",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0511",
        adcode: "321100",
        name: "镇江市",
        center: "119.424441,32.188141",
        level: "city",
        districts: [
          {
            citycode: "0511",
            adcode: "321182",
            name: "扬中市",
            center: "119.796816,32.236476",
            level: "district",
            districts: []
          },
          {
            citycode: "0511",
            adcode: "321111",
            name: "润州区",
            center: "119.411383,32.195146",
            level: "district",
            districts: []
          },
          {
            citycode: "0511",
            adcode: "321112",
            name: "丹徒区",
            center: "119.433854,32.132118",
            level: "district",
            districts: []
          },
          {
            citycode: "0511",
            adcode: "321183",
            name: "句容市",
            center: "119.168693,31.945732",
            level: "district",
            districts: []
          },
          {
            citycode: "0511",
            adcode: "321181",
            name: "丹阳市",
            center: "119.606071,32.010035",
            level: "district",
            districts: []
          },
          {
            citycode: "0511",
            adcode: "321102",
            name: "京口区",
            center: "119.470186,32.198285",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0514",
        adcode: "321000",
        name: "扬州市",
        center: "119.412834,32.394404",
        level: "city",
        districts: [
          {
            citycode: "0514",
            adcode: "321023",
            name: "宝应县",
            center: "119.358389,33.241125",
            level: "district",
            districts: []
          },
          {
            citycode: "0514",
            adcode: "321003",
            name: "邗江区",
            center: "119.397935,32.37741",
            level: "district",
            districts: []
          },
          {
            citycode: "0514",
            adcode: "321002",
            name: "广陵区",
            center: "119.431785,32.395654",
            level: "district",
            districts: []
          },
          {
            citycode: "0514",
            adcode: "321084",
            name: "高邮市",
            center: "119.45892,32.781606",
            level: "district",
            districts: []
          },
          {
            citycode: "0514",
            adcode: "321012",
            name: "江都区",
            center: "119.569684,32.43571",
            level: "district",
            districts: []
          },
          {
            citycode: "0514",
            adcode: "321081",
            name: "仪征市",
            center: "119.184468,32.272833",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "025",
        adcode: "320100",
        name: "南京市",
        center: "118.796624,32.059344",
        level: "city",
        districts: [
          {
            citycode: "025",
            adcode: "320115",
            name: "江宁区",
            center: "118.83951,31.953195",
            level: "district",
            districts: []
          },
          {
            citycode: "025",
            adcode: "320114",
            name: "雨花台区",
            center: "118.779087,31.991291",
            level: "district",
            districts: []
          },
          {
            citycode: "025",
            adcode: "320117",
            name: "溧水区",
            center: "119.028414,31.651108",
            level: "district",
            districts: []
          },
          {
            citycode: "025",
            adcode: "320118",
            name: "高淳区",
            center: "118.892074,31.328678",
            level: "district",
            districts: []
          },
          {
            citycode: "025",
            adcode: "320105",
            name: "建邺区",
            center: "118.731642,32.003343",
            level: "district",
            districts: []
          },
          {
            citycode: "025",
            adcode: "320111",
            name: "浦口区",
            center: "118.627165,32.059796",
            level: "district",
            districts: []
          },
          {
            citycode: "025",
            adcode: "320102",
            name: "玄武区",
            center: "118.797779,32.048644",
            level: "district",
            districts: []
          },
          {
            citycode: "025",
            adcode: "320104",
            name: "秦淮区",
            center: "118.794792,32.039065",
            level: "district",
            districts: []
          },
          {
            citycode: "025",
            adcode: "320116",
            name: "六合区",
            center: "118.822241,32.323235",
            level: "district",
            districts: []
          },
          {
            citycode: "025",
            adcode: "320106",
            name: "鼓楼区",
            center: "118.769943,32.066814",
            level: "district",
            districts: []
          },
          {
            citycode: "025",
            adcode: "320113",
            name: "栖霞区",
            center: "118.909117,32.096423",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0515",
        adcode: "320900",
        name: "盐城市",
        center: "120.16263,33.348176",
        level: "city",
        districts: [
          {
            citycode: "0515",
            adcode: "320922",
            name: "滨海县",
            center: "119.820713,33.990372",
            level: "district",
            districts: []
          },
          {
            citycode: "0515",
            adcode: "320924",
            name: "射阳县",
            center: "120.326338,33.766277",
            level: "district",
            districts: []
          },
          {
            citycode: "0515",
            adcode: "320903",
            name: "盐都区",
            center: "120.153567,33.338538",
            level: "district",
            districts: []
          },
          {
            citycode: "0515",
            adcode: "320921",
            name: "响水县",
            center: "119.578332,34.199172",
            level: "district",
            districts: []
          },
          {
            citycode: "0515",
            adcode: "320902",
            name: "亭湖区",
            center: "120.196148,33.391414",
            level: "district",
            districts: []
          },
          {
            citycode: "0515",
            adcode: "320981",
            name: "东台市",
            center: "120.320308,32.867845",
            level: "district",
            districts: []
          },
          {
            citycode: "0515",
            adcode: "320923",
            name: "阜宁县",
            center: "119.802271,33.758857",
            level: "district",
            districts: []
          },
          {
            citycode: "0515",
            adcode: "320925",
            name: "建湖县",
            center: "119.788743,33.438931",
            level: "district",
            districts: []
          },
          {
            citycode: "0515",
            adcode: "320904",
            name: "大丰区",
            center: "120.500761,33.200047",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0516",
        adcode: "320300",
        name: "徐州市",
        center: "117.283752,34.204224",
        level: "city",
        districts: [
          {
            citycode: "0516",
            adcode: "320381",
            name: "新沂市",
            center: "118.354747,34.369585",
            level: "district",
            districts: []
          },
          {
            citycode: "0516",
            adcode: "320305",
            name: "贾汪区",
            center: "117.465137,34.436492",
            level: "district",
            districts: []
          },
          {
            citycode: "0516",
            adcode: "320382",
            name: "邳州市",
            center: "118.012511,34.339208",
            level: "district",
            districts: []
          },
          {
            citycode: "0516",
            adcode: "320321",
            name: "丰县",
            center: "116.658111,34.697232",
            level: "district",
            districts: []
          },
          {
            citycode: "0516",
            adcode: "320302",
            name: "鼓楼区",
            center: "117.185643,34.288736",
            level: "district",
            districts: []
          },
          {
            citycode: "0516",
            adcode: "320311",
            name: "泉山区",
            center: "117.194405,34.22655",
            level: "district",
            districts: []
          },
          {
            citycode: "0516",
            adcode: "320312",
            name: "铜山区",
            center: "117.169698,34.181162",
            level: "district",
            districts: []
          },
          {
            citycode: "0516",
            adcode: "320324",
            name: "睢宁县",
            center: "117.941364,33.913727",
            level: "district",
            districts: []
          },
          {
            citycode: "0516",
            adcode: "320322",
            name: "沛县",
            center: "116.936353,34.760761",
            level: "district",
            districts: []
          },
          {
            citycode: "0516",
            adcode: "320303",
            name: "云龙区",
            center: "117.251515,34.253638",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0523",
        adcode: "321200",
        name: "泰州市",
        center: "119.922883,32.456692",
        level: "city",
        districts: [
          {
            citycode: "0523",
            adcode: "321202",
            name: "海陵区",
            center: "119.923825,32.49248",
            level: "district",
            districts: []
          },
          {
            citycode: "0523",
            adcode: "321282",
            name: "靖江市",
            center: "120.277124,31.98325",
            level: "district",
            districts: []
          },
          {
            citycode: "0523",
            adcode: "321204",
            name: "姜堰区",
            center: "120.12807,32.51029",
            level: "district",
            districts: []
          },
          {
            citycode: "0523",
            adcode: "321283",
            name: "泰兴市",
            center: "120.051475,32.173072",
            level: "district",
            districts: []
          },
          {
            citycode: "0523",
            adcode: "321203",
            name: "高港区",
            center: "119.88154,32.31923",
            level: "district",
            districts: []
          },
          {
            citycode: "0523",
            adcode: "321281",
            name: "兴化市",
            center: "119.85255,32.911952",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0512",
        adcode: "320500",
        name: "苏州市",
        center: "120.585294,31.299758",
        level: "city",
        districts: [
          {
            citycode: "0512",
            adcode: "320508",
            name: "姑苏区",
            center: "120.617367,31.335648",
            level: "district",
            districts: []
          },
          {
            citycode: "0512",
            adcode: "320505",
            name: "虎丘区",
            center: "120.434238,31.329601",
            level: "district",
            districts: []
          },
          {
            citycode: "0512",
            adcode: "320506",
            name: "吴中区",
            center: "120.632094,31.263604",
            level: "district",
            districts: []
          },
          {
            citycode: "0512",
            adcode: "320585",
            name: "太仓市",
            center: "121.130344,31.458043",
            level: "district",
            districts: []
          },
          {
            citycode: "0512",
            adcode: "320582",
            name: "张家港市",
            center: "120.555979,31.876739",
            level: "district",
            districts: []
          },
          {
            citycode: "0512",
            adcode: "320509",
            name: "吴江区",
            center: "120.645728,31.138525",
            level: "district",
            districts: []
          },
          {
            citycode: "0512",
            adcode: "320583",
            name: "昆山市",
            center: "120.980795,31.385476",
            level: "district",
            districts: []
          },
          {
            citycode: "0512",
            adcode: "320507",
            name: "相城区",
            center: "120.642391,31.369189",
            level: "district",
            districts: []
          },
          {
            citycode: "0512",
            adcode: "320581",
            name: "常熟市",
            center: "120.752512,31.656016",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0510",
        adcode: "320200",
        name: "无锡市",
        center: "120.311889,31.491064",
        level: "city",
        districts: [
          {
            citycode: "0510",
            adcode: "320282",
            name: "宜兴市",
            center: "119.821873,31.338429",
            level: "district",
            districts: []
          },
          {
            citycode: "0510",
            adcode: "320211",
            name: "滨湖区",
            center: "120.284381,31.527846",
            level: "district",
            districts: []
          },
          {
            citycode: "0510",
            adcode: "320214",
            name: "新吴区",
            center: "120.364303,31.49085",
            level: "district",
            districts: []
          },
          {
            citycode: "0510",
            adcode: "320205",
            name: "锡山区",
            center: "120.357732,31.589484",
            level: "district",
            districts: []
          },
          {
            citycode: "0510",
            adcode: "320281",
            name: "江阴市",
            center: "120.284794,31.921642",
            level: "district",
            districts: []
          },
          {
            citycode: "0510",
            adcode: "320213",
            name: "梁溪区",
            center: "120.303551,31.566226",
            level: "district",
            districts: []
          },
          {
            citycode: "0510",
            adcode: "320206",
            name: "惠山区",
            center: "120.29843,31.680282",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0519",
        adcode: "320400",
        name: "常州市",
        center: "119.974092,31.811313",
        level: "city",
        districts: [
          {
            citycode: "0519",
            adcode: "320404",
            name: "钟楼区",
            center: "119.902081,31.802608",
            level: "district",
            districts: []
          },
          {
            citycode: "0519",
            adcode: "320402",
            name: "天宁区",
            center: "119.999439,31.79232",
            level: "district",
            districts: []
          },
          {
            citycode: "0519",
            adcode: "320413",
            name: "金坛区",
            center: "119.587503,31.722384",
            level: "district",
            districts: []
          },
          {
            citycode: "0519",
            adcode: "320411",
            name: "新北区",
            center: "119.960925,31.86355",
            level: "district",
            districts: []
          },
          {
            citycode: "0519",
            adcode: "320412",
            name: "武进区",
            center: "119.942441,31.701252",
            level: "district",
            districts: []
          },
          {
            citycode: "0519",
            adcode: "320481",
            name: "溧阳市",
            center: "119.484164,31.416967",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "630000",
    name: "青海省",
    center: "101.780482,36.622538",
    level: "province",
    districts: [
      {
        citycode: "0972",
        adcode: "630200",
        name: "海东市",
        center: "102.41064,36.473448",
        level: "city",
        districts: [
          {
            citycode: "0972",
            adcode: "630202",
            name: "乐都区",
            center: "102.401614,36.482242",
            level: "district",
            districts: []
          },
          {
            citycode: "0972",
            adcode: "630222",
            name: "民和回族土族自治县",
            center: "102.830775,36.320038",
            level: "district",
            districts: []
          },
          {
            citycode: "0972",
            adcode: "630225",
            name: "循化撒拉族自治县",
            center: "102.488958,35.851079",
            level: "district",
            districts: []
          },
          {
            citycode: "0972",
            adcode: "630203",
            name: "平安区",
            center: "102.108538,36.500166",
            level: "district",
            districts: []
          },
          {
            citycode: "0972",
            adcode: "630223",
            name: "互助土族自治县",
            center: "101.958519,36.844027",
            level: "district",
            districts: []
          },
          {
            citycode: "0972",
            adcode: "630224",
            name: "化隆回族自治县",
            center: "102.266007,36.096124",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0974",
        adcode: "632500",
        name: "海南藏族自治州",
        center: "100.622647,36.296399",
        level: "city",
        districts: [
          {
            citycode: "0974",
            adcode: "632523",
            name: "贵德县",
            center: "101.43403,36.039672",
            level: "district",
            districts: []
          },
          {
            citycode: "0974",
            adcode: "632525",
            name: "贵南县",
            center: "100.747731,35.587239",
            level: "district",
            districts: []
          },
          {
            citycode: "0974",
            adcode: "632522",
            name: "同德县",
            center: "100.577859,35.254297",
            level: "district",
            districts: []
          },
          {
            citycode: "0974",
            adcode: "632524",
            name: "兴海县",
            center: "99.987799,35.589086",
            level: "district",
            districts: []
          },
          {
            citycode: "0974",
            adcode: "632521",
            name: "共和县",
            center: "100.619405,36.284158",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0977",
        adcode: "632800",
        name: "海西蒙古族藏族自治州",
        center: "97.33197,37.348114",
        level: "city",
        districts: [
          {
            citycode: "0977",
            adcode: "632823",
            name: "天峻县",
            center: "99.02297,37.301206",
            level: "district",
            districts: []
          },
          {
            citycode: "0977",
            adcode: "632802",
            name: "德令哈市",
            center: "97.361528,37.369865",
            level: "district",
            districts: []
          },
          {
            citycode: "0977",
            adcode: "632801",
            name: "格尔木市",
            center: "94.928293,36.407272",
            level: "district",
            districts: []
          },
          {
            citycode: "0977",
            adcode: "632822",
            name: "都兰县",
            center: "98.095889,36.302098",
            level: "district",
            districts: []
          },
          {
            citycode: "0977",
            adcode: "632821",
            name: "乌兰县",
            center: "98.47988,36.941279",
            level: "district",
            districts: []
          },
          {
            citycode: "0977",
            adcode: "632825",
            name: "海西蒙古族藏族自治州直辖",
            center: "95.357233,37.853631",
            level: "district",
            districts: []
          },
          {
            citycode: "0977",
            adcode: "632803",
            name: "茫崖市",
            center: "90.856372,38.247537",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0976",
        adcode: "632700",
        name: "玉树藏族自治州",
        center: "97.006292,33.006308",
        level: "city",
        districts: [
          {
            citycode: "0976",
            adcode: "632724",
            name: "治多县",
            center: "95.618954,33.844854",
            level: "district",
            districts: []
          },
          {
            citycode: "0976",
            adcode: "632726",
            name: "曲麻莱县",
            center: "95.805463,34.137353",
            level: "district",
            districts: []
          },
          {
            citycode: "0976",
            adcode: "632723",
            name: "称多县",
            center: "97.109487,33.377504",
            level: "district",
            districts: []
          },
          {
            citycode: "0976",
            adcode: "632722",
            name: "杂多县",
            center: "95.300723,32.893185",
            level: "district",
            districts: []
          },
          {
            citycode: "0976",
            adcode: "632701",
            name: "玉树市",
            center: "97.009184,32.992934",
            level: "district",
            districts: []
          },
          {
            citycode: "0976",
            adcode: "632725",
            name: "囊谦县",
            center: "96.489538,32.203193",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0973",
        adcode: "632300",
        name: "黄南藏族自治州",
        center: "102.015397,35.519317",
        level: "city",
        districts: [
          {
            citycode: "0973",
            adcode: "632301",
            name: "同仁市",
            center: "102.018663,35.515769",
            level: "district",
            districts: []
          },
          {
            citycode: "0973",
            adcode: "632323",
            name: "泽库县",
            center: "101.466565,35.035322",
            level: "district",
            districts: []
          },
          {
            citycode: "0973",
            adcode: "632322",
            name: "尖扎县",
            center: "102.040094,35.943253",
            level: "district",
            districts: []
          },
          {
            citycode: "0973",
            adcode: "632324",
            name: "河南蒙古族自治县",
            center: "101.617719,34.734777",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0975",
        adcode: "632600",
        name: "果洛藏族自治州",
        center: "100.245161,34.472179",
        level: "city",
        districts: [
          {
            citycode: "0975",
            adcode: "632621",
            name: "玛沁县",
            center: "100.238873,34.478049",
            level: "district",
            districts: []
          },
          {
            citycode: "0975",
            adcode: "632623",
            name: "甘德县",
            center: "99.900923,33.969216",
            level: "district",
            districts: []
          },
          {
            citycode: "0975",
            adcode: "632624",
            name: "达日县",
            center: "99.651863,33.739293",
            level: "district",
            districts: []
          },
          {
            citycode: "0975",
            adcode: "632625",
            name: "久治县",
            center: "101.482831,33.429471",
            level: "district",
            districts: []
          },
          {
            citycode: "0975",
            adcode: "632622",
            name: "班玛县",
            center: "100.737138,32.932723",
            level: "district",
            districts: []
          },
          {
            citycode: "0975",
            adcode: "632626",
            name: "玛多县",
            center: "98.209217,34.915645",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0971",
        adcode: "630100",
        name: "西宁市",
        center: "101.777795,36.616621",
        level: "city",
        districts: [
          {
            citycode: "0971",
            adcode: "630123",
            name: "湟源县",
            center: "101.256464,36.682426",
            level: "district",
            districts: []
          },
          {
            citycode: "0971",
            adcode: "630121",
            name: "大通回族土族自治县",
            center: "101.685503,36.926872",
            level: "district",
            districts: []
          },
          {
            citycode: "0971",
            adcode: "630104",
            name: "城西区",
            center: "101.765915,36.628288",
            level: "district",
            districts: []
          },
          {
            citycode: "0971",
            adcode: "630106",
            name: "湟中区",
            center: "101.571683,36.501291",
            level: "district",
            districts: []
          },
          {
            citycode: "0971",
            adcode: "630105",
            name: "城北区",
            center: "101.766308,36.650064",
            level: "district",
            districts: []
          },
          {
            citycode: "0971",
            adcode: "630103",
            name: "城中区",
            center: "101.705357,36.545545",
            level: "district",
            districts: []
          },
          {
            citycode: "0971",
            adcode: "630102",
            name: "城东区",
            center: "101.803717,36.599744",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0970",
        adcode: "632200",
        name: "海北藏族自治州",
        center: "100.900944,36.954612",
        level: "city",
        districts: [
          {
            citycode: "0970",
            adcode: "632223",
            name: "海晏县",
            center: "100.994521,36.896667",
            level: "district",
            districts: []
          },
          {
            citycode: "0970",
            adcode: "632221",
            name: "门源回族自治县",
            center: "101.611524,37.388567",
            level: "district",
            districts: []
          },
          {
            citycode: "0970",
            adcode: "632224",
            name: "刚察县",
            center: "100.145662,37.325096",
            level: "district",
            districts: []
          },
          {
            citycode: "0970",
            adcode: "632222",
            name: "祁连县",
            center: "100.253211,38.177112",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "450000",
    name: "广西壮族自治区",
    center: "108.327537,22.816659",
    level: "province",
    districts: [
      {
        citycode: "0776",
        adcode: "451000",
        name: "百色市",
        center: "106.61869,23.90307",
        level: "city",
        districts: [
          {
            citycode: "0776",
            adcode: "451031",
            name: "隆林各族自治县",
            center: "105.343816,24.770649",
            level: "district",
            districts: []
          },
          {
            citycode: "0776",
            adcode: "451028",
            name: "乐业县",
            center: "106.556564,24.776812",
            level: "district",
            districts: []
          },
          {
            citycode: "0776",
            adcode: "451027",
            name: "凌云县",
            center: "106.56114,24.347444",
            level: "district",
            districts: []
          },
          {
            citycode: "0776",
            adcode: "451030",
            name: "西林县",
            center: "105.097229,24.50762",
            level: "district",
            districts: []
          },
          {
            citycode: "0776",
            adcode: "451082",
            name: "平果市",
            center: "107.589768,23.329815",
            level: "district",
            districts: []
          },
          {
            citycode: "0776",
            adcode: "451002",
            name: "右江区",
            center: "106.618151,23.900804",
            level: "district",
            districts: []
          },
          {
            citycode: "0776",
            adcode: "451081",
            name: "靖西市",
            center: "106.417666,23.134375",
            level: "district",
            districts: []
          },
          {
            citycode: "0776",
            adcode: "451026",
            name: "那坡县",
            center: "105.83234,23.387997",
            level: "district",
            districts: []
          },
          {
            citycode: "0776",
            adcode: "451029",
            name: "田林县",
            center: "106.22874,24.294627",
            level: "district",
            districts: []
          },
          {
            citycode: "0776",
            adcode: "451022",
            name: "田东县",
            center: "107.125609,23.596706",
            level: "district",
            districts: []
          },
          {
            citycode: "0776",
            adcode: "451003",
            name: "田阳区",
            center: "106.915424,23.735631",
            level: "district",
            districts: []
          },
          {
            citycode: "0776",
            adcode: "451024",
            name: "德保县",
            center: "106.615087,23.324084",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0777",
        adcode: "450700",
        name: "钦州市",
        center: "108.654355,21.980894",
        level: "city",
        districts: [
          {
            citycode: "0777",
            adcode: "450702",
            name: "钦南区",
            center: "108.657427,21.940438",
            level: "district",
            districts: []
          },
          {
            citycode: "0777",
            adcode: "450703",
            name: "钦北区",
            center: "108.638738,22.0024",
            level: "district",
            districts: []
          },
          {
            citycode: "0777",
            adcode: "450721",
            name: "灵山县",
            center: "109.290698,22.416671",
            level: "district",
            districts: []
          },
          {
            citycode: "0777",
            adcode: "450722",
            name: "浦北县",
            center: "109.556232,22.271902",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0779",
        adcode: "450500",
        name: "北海市",
        center: "109.120248,21.481305",
        level: "city",
        districts: [
          {
            citycode: "0779",
            adcode: "450503",
            name: "银海区",
            center: "109.139689,21.449729",
            level: "district",
            districts: []
          },
          {
            citycode: "0779",
            adcode: "450512",
            name: "铁山港区",
            center: "109.422099,21.529878",
            level: "district",
            districts: []
          },
          {
            citycode: "0779",
            adcode: "450502",
            name: "海城区",
            center: "109.117256,21.474914",
            level: "district",
            districts: []
          },
          {
            citycode: "0779",
            adcode: "450521",
            name: "合浦县",
            center: "109.207236,21.66132",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0774",
        adcode: "450400",
        name: "梧州市",
        center: "111.279022,23.476733",
        level: "city",
        districts: [
          {
            citycode: "0774",
            adcode: "450423",
            name: "蒙山县",
            center: "110.525003,24.193567",
            level: "district",
            districts: []
          },
          {
            citycode: "0774",
            adcode: "450406",
            name: "龙圩区",
            center: "111.247514,23.414869",
            level: "district",
            districts: []
          },
          {
            citycode: "0774",
            adcode: "450481",
            name: "岑溪市",
            center: "110.994955,22.918327",
            level: "district",
            districts: []
          },
          {
            citycode: "0774",
            adcode: "450405",
            name: "长洲区",
            center: "111.274276,23.486279",
            level: "district",
            districts: []
          },
          {
            citycode: "0774",
            adcode: "450422",
            name: "藤县",
            center: "110.914606,23.375538",
            level: "district",
            districts: []
          },
          {
            citycode: "0774",
            adcode: "450421",
            name: "苍梧县",
            center: "111.547244,23.868208",
            level: "district",
            districts: []
          },
          {
            citycode: "0774",
            adcode: "450403",
            name: "万秀区",
            center: "111.318065,23.470543",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "1771",
        adcode: "451400",
        name: "崇左市",
        center: "107.364973,22.377139",
        level: "city",
        districts: [
          {
            citycode: "1771",
            adcode: "451421",
            name: "扶绥县",
            center: "107.90389,22.635542",
            level: "district",
            districts: []
          },
          {
            citycode: "1771",
            adcode: "451402",
            name: "江州区",
            center: "107.353694,22.40609",
            level: "district",
            districts: []
          },
          {
            citycode: "1771",
            adcode: "451423",
            name: "龙州县",
            center: "106.854001,22.343591",
            level: "district",
            districts: []
          },
          {
            citycode: "1771",
            adcode: "451481",
            name: "凭祥市",
            center: "106.766715,22.094421",
            level: "district",
            districts: []
          },
          {
            citycode: "1771",
            adcode: "451422",
            name: "宁明县",
            center: "107.076394,22.140242",
            level: "district",
            districts: []
          },
          {
            citycode: "1771",
            adcode: "451424",
            name: "大新县",
            center: "107.200654,22.829287",
            level: "district",
            districts: []
          },
          {
            citycode: "1771",
            adcode: "451425",
            name: "天等县",
            center: "107.143539,23.080818",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0770",
        adcode: "450600",
        name: "防城港市",
        center: "108.35467,21.686732",
        level: "city",
        districts: [
          {
            citycode: "0770",
            adcode: "450602",
            name: "港口区",
            center: "108.380273,21.643426",
            level: "district",
            districts: []
          },
          {
            citycode: "0770",
            adcode: "450681",
            name: "东兴市",
            center: "107.971828,21.547821",
            level: "district",
            districts: []
          },
          {
            citycode: "0770",
            adcode: "450621",
            name: "上思县",
            center: "107.983627,22.153671",
            level: "district",
            districts: []
          },
          {
            citycode: "0770",
            adcode: "450603",
            name: "防城区",
            center: "108.353978,21.768826",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0771",
        adcode: "450100",
        name: "南宁市",
        center: "108.366407,22.8177",
        level: "city",
        districts: [
          {
            citycode: "0771",
            adcode: "450124",
            name: "马山县",
            center: "108.177764,23.708448",
            level: "district",
            districts: []
          },
          {
            citycode: "0771",
            adcode: "450125",
            name: "上林县",
            center: "108.605089,23.432451",
            level: "district",
            districts: []
          },
          {
            citycode: "0771",
            adcode: "450110",
            name: "武鸣区",
            center: "108.274869,23.159257",
            level: "district",
            districts: []
          },
          {
            citycode: "0771",
            adcode: "450126",
            name: "宾阳县",
            center: "108.810336,23.217771",
            level: "district",
            districts: []
          },
          {
            citycode: "0771",
            adcode: "450105",
            name: "江南区",
            center: "108.273206,22.781166",
            level: "district",
            districts: []
          },
          {
            citycode: "0771",
            adcode: "450109",
            name: "邕宁区",
            center: "108.487438,22.758633",
            level: "district",
            districts: []
          },
          {
            citycode: "0771",
            adcode: "450108",
            name: "良庆区",
            center: "108.393889,22.753613",
            level: "district",
            districts: []
          },
          {
            citycode: "0771",
            adcode: "450107",
            name: "西乡塘区",
            center: "108.31344,22.833852",
            level: "district",
            districts: []
          },
          {
            citycode: "0771",
            adcode: "450103",
            name: "青秀区",
            center: "108.495204,22.785833",
            level: "district",
            districts: []
          },
          {
            citycode: "0771",
            adcode: "450102",
            name: "兴宁区",
            center: "108.368071,22.85354",
            level: "district",
            districts: []
          },
          {
            citycode: "0771",
            adcode: "450123",
            name: "隆安县",
            center: "107.695721,23.166356",
            level: "district",
            districts: []
          },
          {
            citycode: "0771",
            adcode: "450181",
            name: "横州市",
            center: "109.262448,22.681257",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "1772",
        adcode: "451300",
        name: "来宾市",
        center: "109.221243,23.750105",
        level: "city",
        districts: [
          {
            citycode: "1772",
            adcode: "451324",
            name: "金秀瑶族自治县",
            center: "110.190354,24.130509",
            level: "district",
            districts: []
          },
          {
            citycode: "1772",
            adcode: "451322",
            name: "象州县",
            center: "109.704852,23.973832",
            level: "district",
            districts: []
          },
          {
            citycode: "1772",
            adcode: "451302",
            name: "兴宾区",
            center: "109.183284,23.727647",
            level: "district",
            districts: []
          },
          {
            citycode: "1772",
            adcode: "451381",
            name: "合山市",
            center: "108.885829,23.807032",
            level: "district",
            districts: []
          },
          {
            citycode: "1772",
            adcode: "451323",
            name: "武宣县",
            center: "109.663153,23.594444",
            level: "district",
            districts: []
          },
          {
            citycode: "1772",
            adcode: "451321",
            name: "忻城县",
            center: "108.665641,24.066176",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0773",
        adcode: "450300",
        name: "桂林市",
        center: "110.179752,25.235615",
        level: "city",
        districts: [
          {
            citycode: "0773",
            adcode: "450311",
            name: "雁山区",
            center: "110.286611,25.101798",
            level: "district",
            districts: []
          },
          {
            citycode: "0773",
            adcode: "450305",
            name: "七星区",
            center: "110.317576,25.253093",
            level: "district",
            districts: []
          },
          {
            citycode: "0773",
            adcode: "450327",
            name: "灌阳县",
            center: "111.160764,25.489419",
            level: "district",
            districts: []
          },
          {
            citycode: "0773",
            adcode: "450303",
            name: "叠彩区",
            center: "110.301489,25.314158",
            level: "district",
            districts: []
          },
          {
            citycode: "0773",
            adcode: "450329",
            name: "资源县",
            center: "110.652612,26.042452",
            level: "district",
            districts: []
          },
          {
            citycode: "0773",
            adcode: "450330",
            name: "平乐县",
            center: "110.632867,24.622814",
            level: "district",
            districts: []
          },
          {
            citycode: "0773",
            adcode: "450332",
            name: "恭城瑶族自治县",
            center: "110.82841,24.831581",
            level: "district",
            districts: []
          },
          {
            citycode: "0773",
            adcode: "450324",
            name: "全州县",
            center: "111.087089,25.94939",
            level: "district",
            districts: []
          },
          {
            citycode: "0773",
            adcode: "450325",
            name: "兴安县",
            center: "110.672013,25.612576",
            level: "district",
            districts: []
          },
          {
            citycode: "0773",
            adcode: "450326",
            name: "永福县",
            center: "109.982974,24.980447",
            level: "district",
            districts: []
          },
          {
            citycode: "0773",
            adcode: "450328",
            name: "龙胜各族自治县",
            center: "110.011662,25.79803",
            level: "district",
            districts: []
          },
          {
            citycode: "0773",
            adcode: "450304",
            name: "象山区",
            center: "110.281223,25.261585",
            level: "district",
            districts: []
          },
          {
            citycode: "0773",
            adcode: "450381",
            name: "荔浦市",
            center: "110.395232,24.48843",
            level: "district",
            districts: []
          },
          {
            citycode: "0773",
            adcode: "450321",
            name: "阳朔县",
            center: "110.496305,24.778785",
            level: "district",
            districts: []
          },
          {
            citycode: "0773",
            adcode: "450312",
            name: "临桂区",
            center: "110.212425,25.238556",
            level: "district",
            districts: []
          },
          {
            citycode: "0773",
            adcode: "450323",
            name: "灵川县",
            center: "110.319837,25.3948",
            level: "district",
            districts: []
          },
          {
            citycode: "0773",
            adcode: "450302",
            name: "秀峰区",
            center: "110.264102,25.273954",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "1774",
        adcode: "451100",
        name: "贺州市",
        center: "111.567216,24.404182",
        level: "city",
        districts: [
          {
            citycode: "1774",
            adcode: "451123",
            name: "富川瑶族自治县",
            center: "111.296012,24.811601",
            level: "district",
            districts: []
          },
          {
            citycode: "1774",
            adcode: "451121",
            name: "昭平县",
            center: "110.811158,24.169675",
            level: "district",
            districts: []
          },
          {
            citycode: "1774",
            adcode: "451103",
            name: "平桂区",
            center: "111.479839,24.453094",
            level: "district",
            districts: []
          },
          {
            citycode: "1774",
            adcode: "451122",
            name: "钟山县",
            center: "111.303085,24.526041",
            level: "district",
            districts: []
          },
          {
            citycode: "1774",
            adcode: "451102",
            name: "八步区",
            center: "111.552029,24.411822",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "1755",
        adcode: "450800",
        name: "贵港市",
        center: "109.598903,23.11182",
        level: "city",
        districts: [
          {
            citycode: "1755",
            adcode: "450802",
            name: "港北区",
            center: "109.572227,23.11136",
            level: "district",
            districts: []
          },
          {
            citycode: "1755",
            adcode: "450803",
            name: "港南区",
            center: "109.599357,23.075816",
            level: "district",
            districts: []
          },
          {
            citycode: "1755",
            adcode: "450804",
            name: "覃塘区",
            center: "109.452668,23.127405",
            level: "district",
            districts: []
          },
          {
            citycode: "1755",
            adcode: "450821",
            name: "平南县",
            center: "110.392489,23.540413",
            level: "district",
            districts: []
          },
          {
            citycode: "1755",
            adcode: "450881",
            name: "桂平市",
            center: "110.079315,23.394208",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0775",
        adcode: "450900",
        name: "玉林市",
        center: "110.18097,22.654001",
        level: "city",
        districts: [
          {
            citycode: "0775",
            adcode: "450903",
            name: "福绵区",
            center: "110.059564,22.585316",
            level: "district",
            districts: []
          },
          {
            citycode: "0775",
            adcode: "450922",
            name: "陆川县",
            center: "110.26412,22.321563",
            level: "district",
            districts: []
          },
          {
            citycode: "0775",
            adcode: "450902",
            name: "玉州区",
            center: "110.150717,22.628476",
            level: "district",
            districts: []
          },
          {
            citycode: "0775",
            adcode: "450923",
            name: "博白县",
            center: "109.975856,22.273539",
            level: "district",
            districts: []
          },
          {
            citycode: "0775",
            adcode: "450924",
            name: "兴业县",
            center: "109.875223,22.736395",
            level: "district",
            districts: []
          },
          {
            citycode: "0775",
            adcode: "450981",
            name: "北流市",
            center: "110.353765,22.708415",
            level: "district",
            districts: []
          },
          {
            citycode: "0775",
            adcode: "450921",
            name: "容县",
            center: "110.558093,22.85844",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0778",
        adcode: "451200",
        name: "河池市",
        center: "108.63639,24.48523",
        level: "city",
        districts: [
          {
            citycode: "0778",
            adcode: "451222",
            name: "天峨县",
            center: "107.172287,24.999181",
            level: "district",
            districts: []
          },
          {
            citycode: "0778",
            adcode: "451225",
            name: "罗城仫佬族自治县",
            center: "108.904613,24.777501",
            level: "district",
            districts: []
          },
          {
            citycode: "0778",
            adcode: "451223",
            name: "凤山县",
            center: "107.042157,24.546913",
            level: "district",
            districts: []
          },
          {
            citycode: "0778",
            adcode: "451224",
            name: "东兰县",
            center: "107.374259,24.510698",
            level: "district",
            districts: []
          },
          {
            citycode: "0778",
            adcode: "451229",
            name: "大化瑶族自治县",
            center: "107.998151,23.735699",
            level: "district",
            districts: []
          },
          {
            citycode: "0778",
            adcode: "451227",
            name: "巴马瑶族自治县",
            center: "107.258671,24.142216",
            level: "district",
            districts: []
          },
          {
            citycode: "0778",
            adcode: "451228",
            name: "都安瑶族自治县",
            center: "108.105229,23.932704",
            level: "district",
            districts: []
          },
          {
            citycode: "0778",
            adcode: "451226",
            name: "环江毛南族自治县",
            center: "108.258426,24.825923",
            level: "district",
            districts: []
          },
          {
            citycode: "0778",
            adcode: "451221",
            name: "南丹县",
            center: "107.540578,24.975066",
            level: "district",
            districts: []
          },
          {
            citycode: "0778",
            adcode: "451202",
            name: "金城江区",
            center: "108.037384,24.689475",
            level: "district",
            districts: []
          },
          {
            citycode: "0778",
            adcode: "451203",
            name: "宜州区",
            center: "108.611303,24.500981",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0772",
        adcode: "450200",
        name: "柳州市",
        center: "109.428071,24.326442",
        level: "city",
        districts: [
          {
            citycode: "0772",
            adcode: "450226",
            name: "三江侗族自治县",
            center: "109.607675,25.783197",
            level: "district",
            districts: []
          },
          {
            citycode: "0772",
            adcode: "450225",
            name: "融水苗族自治县",
            center: "109.256609,25.066624",
            level: "district",
            districts: []
          },
          {
            citycode: "0772",
            adcode: "450224",
            name: "融安县",
            center: "109.397538,25.224549",
            level: "district",
            districts: []
          },
          {
            citycode: "0772",
            adcode: "450222",
            name: "柳城县",
            center: "109.267125,24.654329",
            level: "district",
            districts: []
          },
          {
            citycode: "0772",
            adcode: "450206",
            name: "柳江区",
            center: "109.326365,24.255644",
            level: "district",
            districts: []
          },
          {
            citycode: "0772",
            adcode: "450223",
            name: "鹿寨县",
            center: "109.750527,24.472897",
            level: "district",
            districts: []
          },
          {
            citycode: "0772",
            adcode: "450202",
            name: "城中区",
            center: "109.427398,24.366964",
            level: "district",
            districts: []
          },
          {
            citycode: "0772",
            adcode: "450205",
            name: "柳北区",
            center: "109.402009,24.362611",
            level: "district",
            districts: []
          },
          {
            citycode: "0772",
            adcode: "450203",
            name: "鱼峰区",
            center: "109.452781,24.318276",
            level: "district",
            districts: []
          },
          {
            citycode: "0772",
            adcode: "450204",
            name: "柳南区",
            center: "109.385504,24.336229",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "640000",
    name: "宁夏回族自治区",
    center: "106.258889,38.472273",
    level: "province",
    districts: [
      {
        citycode: "0954",
        adcode: "640400",
        name: "固原市",
        center: "106.24267,36.01628",
        level: "city",
        districts: [
          {
            citycode: "0954",
            adcode: "640423",
            name: "隆德县",
            center: "106.111321,35.62592",
            level: "district",
            districts: []
          },
          {
            citycode: "0954",
            adcode: "640425",
            name: "彭阳县",
            center: "106.632151,35.860067",
            level: "district",
            districts: []
          },
          {
            citycode: "0954",
            adcode: "640424",
            name: "泾源县",
            center: "106.330569,35.497887",
            level: "district",
            districts: []
          },
          {
            citycode: "0954",
            adcode: "640422",
            name: "西吉县",
            center: "105.729189,35.963885",
            level: "district",
            districts: []
          },
          {
            citycode: "0954",
            adcode: "640402",
            name: "原州区",
            center: "106.28784,36.003777",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0952",
        adcode: "640200",
        name: "石嘴山市",
        center: "106.382792,38.984632",
        level: "city",
        districts: [
          {
            citycode: "0952",
            adcode: "640205",
            name: "惠农区",
            center: "106.781013,39.239292",
            level: "district",
            districts: []
          },
          {
            citycode: "0952",
            adcode: "640221",
            name: "平罗县",
            center: "106.523411,38.913923",
            level: "district",
            districts: []
          },
          {
            citycode: "0952",
            adcode: "640202",
            name: "大武口区",
            center: "106.368128,39.019375",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0953",
        adcode: "640300",
        name: "吴忠市",
        center: "106.198613,37.997755",
        level: "city",
        districts: [
          {
            citycode: "0953",
            adcode: "640381",
            name: "青铜峡市",
            center: "106.07906,38.021579",
            level: "district",
            districts: []
          },
          {
            citycode: "0953",
            adcode: "640323",
            name: "盐池县",
            center: "107.407184,37.783276",
            level: "district",
            districts: []
          },
          {
            citycode: "0953",
            adcode: "640324",
            name: "同心县",
            center: "105.895412,36.954635",
            level: "district",
            districts: []
          },
          {
            citycode: "0953",
            adcode: "640302",
            name: "利通区",
            center: "106.212479,37.984586",
            level: "district",
            districts: []
          },
          {
            citycode: "0953",
            adcode: "640303",
            name: "红寺堡区",
            center: "106.06216,37.425494",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0951",
        adcode: "640100",
        name: "银川市",
        center: "106.230977,38.487783",
        level: "city",
        districts: [
          {
            citycode: "0951",
            adcode: "640105",
            name: "西夏区",
            center: "106.161208,38.502325",
            level: "district",
            districts: []
          },
          {
            citycode: "0951",
            adcode: "640121",
            name: "永宁县",
            center: "106.25337,38.277376",
            level: "district",
            districts: []
          },
          {
            citycode: "0951",
            adcode: "640181",
            name: "灵武市",
            center: "106.339978,38.102456",
            level: "district",
            districts: []
          },
          {
            citycode: "0951",
            adcode: "640106",
            name: "金凤区",
            center: "106.239339,38.474277",
            level: "district",
            districts: []
          },
          {
            citycode: "0951",
            adcode: "640104",
            name: "兴庆区",
            center: "106.288452,38.473972",
            level: "district",
            districts: []
          },
          {
            citycode: "0951",
            adcode: "640122",
            name: "贺兰县",
            center: "106.365074,38.579147",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "1953",
        adcode: "640500",
        name: "中卫市",
        center: "105.19677,37.500185",
        level: "city",
        districts: [
          {
            citycode: "1953",
            adcode: "640522",
            name: "海原县",
            center: "105.643449,36.565189",
            level: "district",
            districts: []
          },
          {
            citycode: "1953",
            adcode: "640521",
            name: "中宁县",
            center: "105.684729,37.492092",
            level: "district",
            districts: []
          },
          {
            citycode: "1953",
            adcode: "640502",
            name: "沙坡头区",
            center: "105.173875,37.516859",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "330000",
    name: "浙江省",
    center: "120.152575,30.266619",
    level: "province",
    districts: [
      {
        citycode: "0580",
        adcode: "330900",
        name: "舟山市",
        center: "122.207395,29.985578",
        level: "city",
        districts: [
          {
            citycode: "0580",
            adcode: "330922",
            name: "嵊泗县",
            center: "122.45132,30.725677",
            level: "district",
            districts: []
          },
          {
            citycode: "0580",
            adcode: "330921",
            name: "岱山县",
            center: "122.225718,30.264533",
            level: "district",
            districts: []
          },
          {
            citycode: "0580",
            adcode: "330902",
            name: "定海区",
            center: "122.106844,30.019795",
            level: "district",
            districts: []
          },
          {
            citycode: "0580",
            adcode: "330903",
            name: "普陀区",
            center: "122.323297,29.970571",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0573",
        adcode: "330400",
        name: "嘉兴市",
        center: "120.755623,30.746814",
        level: "city",
        districts: [
          {
            citycode: "0573",
            adcode: "330482",
            name: "平湖市",
            center: "121.015619,30.677804",
            level: "district",
            districts: []
          },
          {
            citycode: "0573",
            adcode: "330402",
            name: "南湖区",
            center: "120.782952,30.747738",
            level: "district",
            districts: []
          },
          {
            citycode: "0573",
            adcode: "330483",
            name: "桐乡市",
            center: "120.565127,30.630375",
            level: "district",
            districts: []
          },
          {
            citycode: "0573",
            adcode: "330411",
            name: "秀洲区",
            center: "120.709047,30.764811",
            level: "district",
            districts: []
          },
          {
            citycode: "0573",
            adcode: "330424",
            name: "海盐县",
            center: "120.94628,30.52664",
            level: "district",
            districts: []
          },
          {
            citycode: "0573",
            adcode: "330421",
            name: "嘉善县",
            center: "120.926031,30.83085",
            level: "district",
            districts: []
          },
          {
            citycode: "0573",
            adcode: "330481",
            name: "海宁市",
            center: "120.680224,30.511536",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0574",
        adcode: "330200",
        name: "宁波市",
        center: "121.62454,29.860258",
        level: "city",
        districts: [
          {
            citycode: "0574",
            adcode: "330206",
            name: "北仑区",
            center: "121.844601,29.899548",
            level: "district",
            districts: []
          },
          {
            citycode: "0574",
            adcode: "330225",
            name: "象山县",
            center: "121.869251,29.476826",
            level: "district",
            districts: []
          },
          {
            citycode: "0574",
            adcode: "330211",
            name: "镇海区",
            center: "121.596686,29.965212",
            level: "district",
            districts: []
          },
          {
            citycode: "0574",
            adcode: "330205",
            name: "江北区",
            center: "121.555067,29.88673",
            level: "district",
            districts: []
          },
          {
            citycode: "0574",
            adcode: "330203",
            name: "海曙区",
            center: "121.550485,29.873705",
            level: "district",
            districts: []
          },
          {
            citycode: "0574",
            adcode: "330212",
            name: "鄞州区",
            center: "121.546617,29.817302",
            level: "district",
            districts: []
          },
          {
            citycode: "0574",
            adcode: "330213",
            name: "奉化区",
            center: "121.406151,29.655292",
            level: "district",
            districts: []
          },
          {
            citycode: "0574",
            adcode: "330281",
            name: "余姚市",
            center: "121.154572,30.037967",
            level: "district",
            districts: []
          },
          {
            citycode: "0574",
            adcode: "330282",
            name: "慈溪市",
            center: "121.266525,30.170695",
            level: "district",
            districts: []
          },
          {
            citycode: "0574",
            adcode: "330226",
            name: "宁海县",
            center: "121.429729,29.287929",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0576",
        adcode: "331000",
        name: "台州市",
        center: "121.42079,28.655716",
        level: "city",
        districts: [
          {
            citycode: "0576",
            adcode: "331082",
            name: "临海市",
            center: "121.144625,28.859042",
            level: "district",
            districts: []
          },
          {
            citycode: "0576",
            adcode: "331002",
            name: "椒江区",
            center: "121.442859,28.673334",
            level: "district",
            districts: []
          },
          {
            citycode: "0576",
            adcode: "331004",
            name: "路桥区",
            center: "121.337874,28.578244",
            level: "district",
            districts: []
          },
          {
            citycode: "0576",
            adcode: "331083",
            name: "玉环市",
            center: "121.231915,28.136703",
            level: "district",
            districts: []
          },
          {
            citycode: "0576",
            adcode: "331081",
            name: "温岭市",
            center: "121.385435,28.372805",
            level: "district",
            districts: []
          },
          {
            citycode: "0576",
            adcode: "331022",
            name: "三门县",
            center: "121.39561,29.104888",
            level: "district",
            districts: []
          },
          {
            citycode: "0576",
            adcode: "331024",
            name: "仙居县",
            center: "120.728733,28.846856",
            level: "district",
            districts: []
          },
          {
            citycode: "0576",
            adcode: "331003",
            name: "黄岩区",
            center: "121.261804,28.649433",
            level: "district",
            districts: []
          },
          {
            citycode: "0576",
            adcode: "331023",
            name: "天台县",
            center: "121.006657,29.144594",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0577",
        adcode: "330300",
        name: "温州市",
        center: "120.699279,27.993849",
        level: "city",
        districts: [
          {
            citycode: "0577",
            adcode: "330326",
            name: "平阳县",
            center: "120.565161,27.662394",
            level: "district",
            districts: []
          },
          {
            citycode: "0577",
            adcode: "330305",
            name: "洞头区",
            center: "121.157406,27.836412",
            level: "district",
            districts: []
          },
          {
            citycode: "0577",
            adcode: "330327",
            name: "苍南县",
            center: "120.425957,27.518636",
            level: "district",
            districts: []
          },
          {
            citycode: "0577",
            adcode: "330381",
            name: "瑞安市",
            center: "120.655245,27.778967",
            level: "district",
            districts: []
          },
          {
            citycode: "0577",
            adcode: "330328",
            name: "文成县",
            center: "120.090929,27.786856",
            level: "district",
            districts: []
          },
          {
            citycode: "0577",
            adcode: "330329",
            name: "泰顺县",
            center: "119.717643,27.556578",
            level: "district",
            districts: []
          },
          {
            citycode: "0577",
            adcode: "330382",
            name: "乐清市",
            center: "120.986297,28.112519",
            level: "district",
            districts: []
          },
          {
            citycode: "0577",
            adcode: "330324",
            name: "永嘉县",
            center: "120.69136,28.153914",
            level: "district",
            districts: []
          },
          {
            citycode: "0577",
            adcode: "330303",
            name: "龙湾区",
            center: "120.812333,27.933261",
            level: "district",
            districts: []
          },
          {
            citycode: "0577",
            adcode: "330302",
            name: "鹿城区",
            center: "120.655199,28.015776",
            level: "district",
            districts: []
          },
          {
            citycode: "0577",
            adcode: "330304",
            name: "瓯海区",
            center: "120.615149,27.967445",
            level: "district",
            districts: []
          },
          {
            citycode: "0577",
            adcode: "330383",
            name: "龙港市",
            center: "120.552952,27.578379",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0570",
        adcode: "330800",
        name: "衢州市",
        center: "118.859307,28.970229",
        level: "city",
        districts: [
          {
            citycode: "0570",
            adcode: "330802",
            name: "柯城区",
            center: "118.874138,28.936937",
            level: "district",
            districts: []
          },
          {
            citycode: "0570",
            adcode: "330881",
            name: "江山市",
            center: "118.627228,28.73796",
            level: "district",
            districts: []
          },
          {
            citycode: "0570",
            adcode: "330822",
            name: "常山县",
            center: "118.511224,28.902446",
            level: "district",
            districts: []
          },
          {
            citycode: "0570",
            adcode: "330803",
            name: "衢江区",
            center: "118.959139,28.980356",
            level: "district",
            districts: []
          },
          {
            citycode: "0570",
            adcode: "330825",
            name: "龙游县",
            center: "119.1723,29.028214",
            level: "district",
            districts: []
          },
          {
            citycode: "0570",
            adcode: "330824",
            name: "开化县",
            center: "118.415756,29.136729",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0572",
        adcode: "330500",
        name: "湖州市",
        center: "120.086881,30.894178",
        level: "city",
        districts: [
          {
            citycode: "0572",
            adcode: "330522",
            name: "长兴县",
            center: "119.911212,31.026962",
            level: "district",
            districts: []
          },
          {
            citycode: "0572",
            adcode: "330502",
            name: "吴兴区",
            center: "120.185608,30.857184",
            level: "district",
            districts: []
          },
          {
            citycode: "0572",
            adcode: "330503",
            name: "南浔区",
            center: "120.418244,30.850835",
            level: "district",
            districts: []
          },
          {
            citycode: "0572",
            adcode: "330521",
            name: "德清县",
            center: "119.9774,30.54251",
            level: "district",
            districts: []
          },
          {
            citycode: "0572",
            adcode: "330523",
            name: "安吉县",
            center: "119.680261,30.638803",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0579",
        adcode: "330700",
        name: "金华市",
        center: "119.647265,29.079195",
        level: "city",
        districts: [
          {
            citycode: "0579",
            adcode: "330784",
            name: "永康市",
            center: "120.047356,28.88899",
            level: "district",
            districts: []
          },
          {
            citycode: "0579",
            adcode: "330723",
            name: "武义县",
            center: "119.816341,28.892562",
            level: "district",
            districts: []
          },
          {
            citycode: "0579",
            adcode: "330703",
            name: "金东区",
            center: "119.692821,29.099822",
            level: "district",
            districts: []
          },
          {
            citycode: "0579",
            adcode: "330782",
            name: "义乌市",
            center: "120.075679,29.306296",
            level: "district",
            districts: []
          },
          {
            citycode: "0579",
            adcode: "330726",
            name: "浦江县",
            center: "119.89259,29.453363",
            level: "district",
            districts: []
          },
          {
            citycode: "0579",
            adcode: "330702",
            name: "婺城区",
            center: "119.571574,29.087311",
            level: "district",
            districts: []
          },
          {
            citycode: "0579",
            adcode: "330781",
            name: "兰溪市",
            center: "119.460404,29.209059",
            level: "district",
            districts: []
          },
          {
            citycode: "0579",
            adcode: "330727",
            name: "磐安县",
            center: "120.449937,29.054491",
            level: "district",
            districts: []
          },
          {
            citycode: "0579",
            adcode: "330783",
            name: "东阳市",
            center: "120.24179,29.290158",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0578",
        adcode: "331100",
        name: "丽水市",
        center: "119.923249,28.467694",
        level: "city",
        districts: [
          {
            citycode: "0578",
            adcode: "331124",
            name: "松阳县",
            center: "119.481406,28.448883",
            level: "district",
            districts: []
          },
          {
            citycode: "0578",
            adcode: "331181",
            name: "龙泉市",
            center: "119.14126,28.074916",
            level: "district",
            districts: []
          },
          {
            citycode: "0578",
            adcode: "331125",
            name: "云和县",
            center: "119.573454,28.116024",
            level: "district",
            districts: []
          },
          {
            citycode: "0578",
            adcode: "331123",
            name: "遂昌县",
            center: "119.275865,28.592388",
            level: "district",
            districts: []
          },
          {
            citycode: "0578",
            adcode: "331127",
            name: "景宁畲族自治县",
            center: "119.635686,27.973594",
            level: "district",
            districts: []
          },
          {
            citycode: "0578",
            adcode: "331122",
            name: "缙云县",
            center: "120.091685,28.659294",
            level: "district",
            districts: []
          },
          {
            citycode: "0578",
            adcode: "331121",
            name: "青田县",
            center: "120.289693,28.1396",
            level: "district",
            districts: []
          },
          {
            citycode: "0578",
            adcode: "331102",
            name: "莲都区",
            center: "119.912266,28.4461",
            level: "district",
            districts: []
          },
          {
            citycode: "0578",
            adcode: "331126",
            name: "庆元县",
            center: "119.062572,27.619213",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0575",
        adcode: "330600",
        name: "绍兴市",
        center: "120.582886,30.051549",
        level: "city",
        districts: [
          {
            citycode: "0575",
            adcode: "330683",
            name: "嵊州市",
            center: "120.830505,29.561519",
            level: "district",
            districts: []
          },
          {
            citycode: "0575",
            adcode: "330624",
            name: "新昌县",
            center: "120.903918,29.500525",
            level: "district",
            districts: []
          },
          {
            citycode: "0575",
            adcode: "330681",
            name: "诸暨市",
            center: "120.246602,29.709398",
            level: "district",
            districts: []
          },
          {
            citycode: "0575",
            adcode: "330603",
            name: "柯桥区",
            center: "120.495532,30.083039",
            level: "district",
            districts: []
          },
          {
            citycode: "0575",
            adcode: "330604",
            name: "上虞区",
            center: "120.868571,30.033862",
            level: "district",
            districts: []
          },
          {
            citycode: "0575",
            adcode: "330602",
            name: "越城区",
            center: "120.582338,29.989092",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0571",
        adcode: "330100",
        name: "杭州市",
        center: "120.210792,30.246026",
        level: "city",
        districts: [
          {
            citycode: "0571",
            adcode: "330108",
            name: "滨江区",
            center: "120.211981,30.208332",
            level: "district",
            districts: []
          },
          {
            citycode: "0571",
            adcode: "330122",
            name: "桐庐县",
            center: "119.691755,29.79418",
            level: "district",
            districts: []
          },
          {
            citycode: "0571",
            adcode: "330111",
            name: "富阳区",
            center: "119.96022,30.048803",
            level: "district",
            districts: []
          },
          {
            citycode: "0571",
            adcode: "330127",
            name: "淳安县",
            center: "119.042015,29.609678",
            level: "district",
            districts: []
          },
          {
            citycode: "0571",
            adcode: "330114",
            name: "钱塘区",
            center: "120.493941,30.32304",
            level: "district",
            districts: []
          },
          {
            citycode: "0571",
            adcode: "330102",
            name: "上城区",
            center: "120.19732,30.226543",
            level: "district",
            districts: []
          },
          {
            citycode: "0571",
            adcode: "330105",
            name: "拱墅区",
            center: "120.141503,30.319126",
            level: "district",
            districts: []
          },
          {
            citycode: "0571",
            adcode: "330182",
            name: "建德市",
            center: "119.281195,29.474964",
            level: "district",
            districts: []
          },
          {
            citycode: "0571",
            adcode: "330106",
            name: "西湖区",
            center: "120.130396,30.259242",
            level: "district",
            districts: []
          },
          {
            citycode: "0571",
            adcode: "330113",
            name: "临平区",
            center: "120.299222,30.419154",
            level: "district",
            districts: []
          },
          {
            citycode: "0571",
            adcode: "330109",
            name: "萧山区",
            center: "120.264263,30.184119",
            level: "district",
            districts: []
          },
          {
            citycode: "0571",
            adcode: "330110",
            name: "余杭区",
            center: "119.978742,30.273705",
            level: "district",
            districts: []
          },
          {
            citycode: "0571",
            adcode: "330112",
            name: "临安区",
            center: "119.724457,30.234375",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "130000",
    name: "河北省",
    center: "114.530399,38.037707",
    level: "province",
    districts: [
      {
        citycode: "0315",
        adcode: "130200",
        name: "唐山市",
        center: "118.180149,39.63068",
        level: "city",
        districts: [
          {
            citycode: "0315",
            adcode: "130283",
            name: "迁安市",
            center: "118.701021,39.998861",
            level: "district",
            districts: []
          },
          {
            citycode: "0315",
            adcode: "130225",
            name: "乐亭县",
            center: "118.91245,39.425748",
            level: "district",
            districts: []
          },
          {
            citycode: "0315",
            adcode: "130229",
            name: "玉田县",
            center: "117.738196,39.901827",
            level: "district",
            districts: []
          },
          {
            citycode: "0315",
            adcode: "130202",
            name: "路南区",
            center: "118.154348,39.624988",
            level: "district",
            districts: []
          },
          {
            citycode: "0315",
            adcode: "130209",
            name: "曹妃甸区",
            center: "118.460197,39.273528",
            level: "district",
            districts: []
          },
          {
            citycode: "0315",
            adcode: "130224",
            name: "滦南县",
            center: "118.68363,39.520272",
            level: "district",
            districts: []
          },
          {
            citycode: "0315",
            adcode: "130203",
            name: "路北区",
            center: "118.201085,39.625079",
            level: "district",
            districts: []
          },
          {
            citycode: "0315",
            adcode: "130207",
            name: "丰南区",
            center: "118.085169,39.576031",
            level: "district",
            districts: []
          },
          {
            citycode: "0315",
            adcode: "130205",
            name: "开平区",
            center: "118.262246,39.671634",
            level: "district",
            districts: []
          },
          {
            citycode: "0315",
            adcode: "130204",
            name: "古冶区",
            center: "118.447134,39.73392",
            level: "district",
            districts: []
          },
          {
            citycode: "0315",
            adcode: "130227",
            name: "迁西县",
            center: "118.31467,40.141486",
            level: "district",
            districts: []
          },
          {
            citycode: "0315",
            adcode: "130284",
            name: "滦州市",
            center: "118.70301,39.740963",
            level: "district",
            districts: []
          },
          {
            citycode: "0315",
            adcode: "130208",
            name: "丰润区",
            center: "118.162426,39.832919",
            level: "district",
            districts: []
          },
          {
            citycode: "0315",
            adcode: "130281",
            name: "遵化市",
            center: "117.965878,40.189119",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0335",
        adcode: "130300",
        name: "秦皇岛市",
        center: "119.52022,39.888243",
        level: "city",
        districts: [
          {
            citycode: "0335",
            adcode: "130324",
            name: "卢龙县",
            center: "118.891931,39.892564",
            level: "district",
            districts: []
          },
          {
            citycode: "0335",
            adcode: "130303",
            name: "山海关区",
            center: "119.775187,39.978882",
            level: "district",
            districts: []
          },
          {
            citycode: "0335",
            adcode: "130302",
            name: "海港区",
            center: "119.564962,39.94756",
            level: "district",
            districts: []
          },
          {
            citycode: "0335",
            adcode: "130306",
            name: "抚宁区",
            center: "119.244847,39.876253",
            level: "district",
            districts: []
          },
          {
            citycode: "0335",
            adcode: "130322",
            name: "昌黎县",
            center: "119.199846,39.699677",
            level: "district",
            districts: []
          },
          {
            citycode: "0335",
            adcode: "130304",
            name: "北戴河区",
            center: "119.48449,39.834912",
            level: "district",
            districts: []
          },
          {
            citycode: "0335",
            adcode: "130321",
            name: "青龙满族自治县",
            center: "118.94985,40.407473",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0314",
        adcode: "130800",
        name: "承德市",
        center: "117.962749,40.952942",
        level: "city",
        districts: [
          {
            citycode: "0314",
            adcode: "130826",
            name: "丰宁满族自治县",
            center: "116.645798,41.209951",
            level: "district",
            districts: []
          },
          {
            citycode: "0314",
            adcode: "130825",
            name: "隆化县",
            center: "117.739026,41.314402",
            level: "district",
            districts: []
          },
          {
            citycode: "0314",
            adcode: "130828",
            name: "围场满族蒙古族自治县",
            center: "117.75934,41.938372",
            level: "district",
            districts: []
          },
          {
            citycode: "0314",
            adcode: "130827",
            name: "宽城满族自治县",
            center: "118.485472,40.611333",
            level: "district",
            districts: []
          },
          {
            citycode: "0314",
            adcode: "130804",
            name: "鹰手营子矿区",
            center: "117.659341,40.546424",
            level: "district",
            districts: []
          },
          {
            citycode: "0314",
            adcode: "130824",
            name: "滦平县",
            center: "117.332652,40.941644",
            level: "district",
            districts: []
          },
          {
            citycode: "0314",
            adcode: "130803",
            name: "双滦区",
            center: "117.799588,40.959426",
            level: "district",
            districts: []
          },
          {
            citycode: "0314",
            adcode: "130802",
            name: "双桥区",
            center: "117.943121,40.974679",
            level: "district",
            districts: []
          },
          {
            citycode: "0314",
            adcode: "130821",
            name: "承德县",
            center: "118.174166,40.768082",
            level: "district",
            districts: []
          },
          {
            citycode: "0314",
            adcode: "130822",
            name: "兴隆县",
            center: "117.500558,40.417358",
            level: "district",
            districts: []
          },
          {
            citycode: "0314",
            adcode: "130881",
            name: "平泉市",
            center: "118.702032,41.018482",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0311",
        adcode: "130100",
        name: "石家庄市",
        center: "114.514976,38.042007",
        level: "city",
        districts: [
          {
            citycode: "0311",
            adcode: "130126",
            name: "灵寿县",
            center: "114.383013,38.307908",
            level: "district",
            districts: []
          },
          {
            citycode: "0311",
            adcode: "130130",
            name: "无极县",
            center: "114.976256,38.178852",
            level: "district",
            districts: []
          },
          {
            citycode: "0311",
            adcode: "130183",
            name: "晋州市",
            center: "115.044141,38.033937",
            level: "district",
            districts: []
          },
          {
            citycode: "0311",
            adcode: "130132",
            name: "元氏县",
            center: "114.525508,37.767332",
            level: "district",
            districts: []
          },
          {
            citycode: "0311",
            adcode: "130127",
            name: "高邑县",
            center: "114.611659,37.615905",
            level: "district",
            districts: []
          },
          {
            citycode: "0311",
            adcode: "130123",
            name: "正定县",
            center: "114.57043,38.14699",
            level: "district",
            districts: []
          },
          {
            citycode: "0311",
            adcode: "130184",
            name: "新乐市",
            center: "114.683745,38.343952",
            level: "district",
            districts: []
          },
          {
            citycode: "0311",
            adcode: "130181",
            name: "辛集市",
            center: "115.217626,37.943239",
            level: "district",
            districts: []
          },
          {
            citycode: "0311",
            adcode: "130121",
            name: "井陉县",
            center: "114.145669,38.032366",
            level: "district",
            districts: []
          },
          {
            citycode: "0311",
            adcode: "130107",
            name: "井陉矿区",
            center: "114.062258,38.065446",
            level: "district",
            districts: []
          },
          {
            citycode: "0311",
            adcode: "130128",
            name: "深泽县",
            center: "115.20089,38.184572",
            level: "district",
            districts: []
          },
          {
            citycode: "0311",
            adcode: "130133",
            name: "赵县",
            center: "114.775914,37.756935",
            level: "district",
            districts: []
          },
          {
            citycode: "0311",
            adcode: "130125",
            name: "行唐县",
            center: "114.553044,38.437535",
            level: "district",
            districts: []
          },
          {
            citycode: "0311",
            adcode: "130105",
            name: "新华区",
            center: "114.463904,38.050749",
            level: "district",
            districts: []
          },
          {
            citycode: "0311",
            adcode: "130110",
            name: "鹿泉区",
            center: "114.313559,38.086536",
            level: "district",
            districts: []
          },
          {
            citycode: "0311",
            adcode: "130131",
            name: "平山县",
            center: "114.186007,38.260288",
            level: "district",
            districts: []
          },
          {
            citycode: "0311",
            adcode: "130104",
            name: "桥西区",
            center: "114.45004,38.025245",
            level: "district",
            districts: []
          },
          {
            citycode: "0311",
            adcode: "130129",
            name: "赞皇县",
            center: "114.386114,37.666549",
            level: "district",
            districts: []
          },
          {
            citycode: "0311",
            adcode: "130111",
            name: "栾城区",
            center: "114.647922,37.900915",
            level: "district",
            districts: []
          },
          {
            citycode: "0311",
            adcode: "130108",
            name: "裕华区",
            center: "114.531599,38.007002",
            level: "district",
            districts: []
          },
          {
            citycode: "0311",
            adcode: "130109",
            name: "藁城区",
            center: "114.846562,38.022177",
            level: "district",
            districts: []
          },
          {
            citycode: "0311",
            adcode: "130102",
            name: "长安区",
            center: "114.538955,38.03682",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0319",
        adcode: "130500",
        name: "邢台市",
        center: "114.49742,37.060227",
        level: "city",
        districts: [
          {
            citycode: "0319",
            adcode: "130524",
            name: "柏乡县",
            center: "114.693447,37.48288",
            level: "district",
            districts: []
          },
          {
            citycode: "0319",
            adcode: "130581",
            name: "南宫市",
            center: "115.40866,37.358907",
            level: "district",
            districts: []
          },
          {
            citycode: "0319",
            adcode: "130530",
            name: "新河县",
            center: "115.251005,37.520891",
            level: "district",
            districts: []
          },
          {
            citycode: "0319",
            adcode: "130534",
            name: "清河县",
            center: "115.665081,37.0451",
            level: "district",
            districts: []
          },
          {
            citycode: "0319",
            adcode: "130531",
            name: "广宗县",
            center: "115.142766,37.074795",
            level: "district",
            districts: []
          },
          {
            citycode: "0319",
            adcode: "130532",
            name: "平乡县",
            center: "115.03008,37.063771",
            level: "district",
            districts: []
          },
          {
            citycode: "0319",
            adcode: "130506",
            name: "南和区",
            center: "114.683683,37.005626",
            level: "district",
            districts: []
          },
          {
            citycode: "0319",
            adcode: "130528",
            name: "宁晋县",
            center: "114.940006,37.624524",
            level: "district",
            districts: []
          },
          {
            citycode: "0319",
            adcode: "130533",
            name: "威县",
            center: "115.266829,36.975164",
            level: "district",
            districts: []
          },
          {
            citycode: "0319",
            adcode: "130535",
            name: "临西县",
            center: "115.501258,36.871312",
            level: "district",
            districts: []
          },
          {
            citycode: "0319",
            adcode: "130582",
            name: "沙河市",
            center: "114.503023,36.855548",
            level: "district",
            districts: []
          },
          {
            citycode: "0319",
            adcode: "130522",
            name: "临城县",
            center: "114.498651,37.444512",
            level: "district",
            districts: []
          },
          {
            citycode: "0319",
            adcode: "130523",
            name: "内丘县",
            center: "114.512226,37.287612",
            level: "district",
            districts: []
          },
          {
            citycode: "0319",
            adcode: "130502",
            name: "襄都区",
            center: "114.507443,37.071314",
            level: "district",
            districts: []
          },
          {
            citycode: "0319",
            adcode: "130503",
            name: "信都区",
            center: "114.468229,37.093798",
            level: "district",
            districts: []
          },
          {
            citycode: "0319",
            adcode: "130525",
            name: "隆尧县",
            center: "114.770509,37.351232",
            level: "district",
            districts: []
          },
          {
            citycode: "0319",
            adcode: "130529",
            name: "巨鹿县",
            center: "115.037884,37.221293",
            level: "district",
            districts: []
          },
          {
            citycode: "0319",
            adcode: "130505",
            name: "任泽区",
            center: "114.671339,37.121958",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0316",
        adcode: "131000",
        name: "廊坊市",
        center: "116.683546,39.538304",
        level: "city",
        districts: [
          {
            citycode: "0316",
            adcode: "131028",
            name: "大厂回族自治县",
            center: "116.98961,39.886569",
            level: "district",
            districts: []
          },
          {
            citycode: "0316",
            adcode: "131026",
            name: "文安县",
            center: "116.457628,38.873185",
            level: "district",
            districts: []
          },
          {
            citycode: "0316",
            adcode: "131003",
            name: "广阳区",
            center: "116.710667,39.52343",
            level: "district",
            districts: []
          },
          {
            citycode: "0316",
            adcode: "131082",
            name: "三河市",
            center: "117.078269,39.982933",
            level: "district",
            districts: []
          },
          {
            citycode: "0316",
            adcode: "131081",
            name: "霸州市",
            center: "116.391488,39.125238",
            level: "district",
            districts: []
          },
          {
            citycode: "0316",
            adcode: "131022",
            name: "固安县",
            center: "116.298696,39.438797",
            level: "district",
            districts: []
          },
          {
            citycode: "0316",
            adcode: "131024",
            name: "香河县",
            center: "117.006072,39.763772",
            level: "district",
            districts: []
          },
          {
            citycode: "0316",
            adcode: "131025",
            name: "大城县",
            center: "116.653917,38.705232",
            level: "district",
            districts: []
          },
          {
            citycode: "0316",
            adcode: "131023",
            name: "永清县",
            center: "116.50608,39.330983",
            level: "district",
            districts: []
          },
          {
            citycode: "0316",
            adcode: "131002",
            name: "安次区",
            center: "116.6945443,39.50256863",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0310",
        adcode: "130400",
        name: "邯郸市",
        center: "114.53915,36.625849",
        level: "city",
        districts: [
          {
            citycode: "0310",
            adcode: "130407",
            name: "肥乡区",
            center: "114.800199,36.548545",
            level: "district",
            districts: []
          },
          {
            citycode: "0310",
            adcode: "130431",
            name: "鸡泽县",
            center: "114.889951,36.911525",
            level: "district",
            districts: []
          },
          {
            citycode: "0310",
            adcode: "130435",
            name: "曲周县",
            center: "114.957549,36.766347",
            level: "district",
            districts: []
          },
          {
            citycode: "0310",
            adcode: "130408",
            name: "永年区",
            center: "114.536626,36.74188",
            level: "district",
            districts: []
          },
          {
            citycode: "0310",
            adcode: "130433",
            name: "馆陶县",
            center: "115.281818,36.548295",
            level: "district",
            districts: []
          },
          {
            citycode: "0310",
            adcode: "130430",
            name: "邱县",
            center: "115.200049,36.811783",
            level: "district",
            districts: []
          },
          {
            citycode: "0310",
            adcode: "130432",
            name: "广平县",
            center: "114.948638,36.48382",
            level: "district",
            districts: []
          },
          {
            citycode: "0310",
            adcode: "130423",
            name: "临漳县",
            center: "114.585514,36.322504",
            level: "district",
            districts: []
          },
          {
            citycode: "0310",
            adcode: "130434",
            name: "魏县",
            center: "114.939217,36.35926",
            level: "district",
            districts: []
          },
          {
            citycode: "0310",
            adcode: "130424",
            name: "成安县",
            center: "114.670094,36.445331",
            level: "district",
            districts: []
          },
          {
            citycode: "0310",
            adcode: "130404",
            name: "复兴区",
            center: "114.462581,36.638879",
            level: "district",
            districts: []
          },
          {
            citycode: "0310",
            adcode: "130427",
            name: "磁县",
            center: "114.373965,36.37507",
            level: "district",
            districts: []
          },
          {
            citycode: "0310",
            adcode: "130406",
            name: "峰峰矿区",
            center: "114.212571,36.419298",
            level: "district",
            districts: []
          },
          {
            citycode: "0310",
            adcode: "130403",
            name: "丛台区",
            center: "114.492875,36.636434",
            level: "district",
            districts: []
          },
          {
            citycode: "0310",
            adcode: "130402",
            name: "邯山区",
            center: "114.531062,36.59457",
            level: "district",
            districts: []
          },
          {
            citycode: "0310",
            adcode: "130425",
            name: "大名县",
            center: "115.147985,36.286406",
            level: "district",
            districts: []
          },
          {
            citycode: "0310",
            adcode: "130426",
            name: "涉县",
            center: "113.692157,36.586073",
            level: "district",
            districts: []
          },
          {
            citycode: "0310",
            adcode: "130481",
            name: "武安市",
            center: "114.203685,36.69759",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0312",
        adcode: "130600",
        name: "保定市",
        center: "115.464523,38.874476",
        level: "city",
        districts: [
          {
            citycode: "0312",
            adcode: "130636",
            name: "顺平县",
            center: "115.135133,38.837988",
            level: "district",
            districts: []
          },
          {
            citycode: "0312",
            adcode: "130632",
            name: "安新县",
            center: "115.935688,38.936102",
            level: "district",
            districts: []
          },
          {
            citycode: "0312",
            adcode: "130683",
            name: "安国市",
            center: "115.327088,38.418985",
            level: "district",
            districts: []
          },
          {
            citycode: "0312",
            adcode: "130682",
            name: "定州市",
            center: "114.990321,38.516746",
            level: "district",
            districts: []
          },
          {
            citycode: "0312",
            adcode: "130623",
            name: "涞水县",
            center: "115.713651,39.394305",
            level: "district",
            districts: []
          },
          {
            citycode: "0312",
            adcode: "130624",
            name: "阜平县",
            center: "114.195118,38.849221",
            level: "district",
            districts: []
          },
          {
            citycode: "0312",
            adcode: "130631",
            name: "望都县",
            center: "115.15542,38.696221",
            level: "district",
            districts: []
          },
          {
            citycode: "0312",
            adcode: "130627",
            name: "唐县",
            center: "114.982968,38.748477",
            level: "district",
            districts: []
          },
          {
            citycode: "0312",
            adcode: "130684",
            name: "高碑店市",
            center: "115.873612,39.327233",
            level: "district",
            districts: []
          },
          {
            citycode: "0312",
            adcode: "130626",
            name: "定兴县",
            center: "115.808183,39.263219",
            level: "district",
            districts: []
          },
          {
            citycode: "0312",
            adcode: "130629",
            name: "容城县",
            center: "115.861635,39.043321",
            level: "district",
            districts: []
          },
          {
            citycode: "0312",
            adcode: "130638",
            name: "雄县",
            center: "116.108624,38.994825",
            level: "district",
            districts: []
          },
          {
            citycode: "0312",
            adcode: "130637",
            name: "博野县",
            center: "115.464295,38.458048",
            level: "district",
            districts: []
          },
          {
            citycode: "0312",
            adcode: "130634",
            name: "曲阳县",
            center: "114.740476,38.614409",
            level: "district",
            districts: []
          },
          {
            citycode: "0312",
            adcode: "130633",
            name: "易县",
            center: "115.497487,39.350219",
            level: "district",
            districts: []
          },
          {
            citycode: "0312",
            adcode: "130635",
            name: "蠡县",
            center: "115.583701,38.488064",
            level: "district",
            districts: []
          },
          {
            citycode: "0312",
            adcode: "130628",
            name: "高阳县",
            center: "115.779149,38.700846",
            level: "district",
            districts: []
          },
          {
            citycode: "0312",
            adcode: "130681",
            name: "涿州市",
            center: "115.97444,39.485684",
            level: "district",
            districts: []
          },
          {
            citycode: "0312",
            adcode: "130630",
            name: "涞源县",
            center: "114.694416,39.360622",
            level: "district",
            districts: []
          },
          {
            citycode: "0312",
            adcode: "130609",
            name: "徐水区",
            center: "115.655772,39.018781",
            level: "district",
            districts: []
          },
          {
            citycode: "0312",
            adcode: "130602",
            name: "竞秀区",
            center: "115.458671,38.877318",
            level: "district",
            districts: []
          },
          {
            citycode: "0312",
            adcode: "130607",
            name: "满城区",
            center: "115.322246,38.949732",
            level: "district",
            districts: []
          },
          {
            citycode: "0312",
            adcode: "130608",
            name: "清苑区",
            center: "115.48988,38.76527",
            level: "district",
            districts: []
          },
          {
            citycode: "0312",
            adcode: "130606",
            name: "莲池区",
            center: "115.497153,38.883528",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0318",
        adcode: "131100",
        name: "衡水市",
        center: "115.668987,37.739367",
        level: "city",
        districts: [
          {
            citycode: "0318",
            adcode: "131102",
            name: "桃城区",
            center: "115.675208,37.735152",
            level: "district",
            districts: []
          },
          {
            citycode: "0318",
            adcode: "131182",
            name: "深州市",
            center: "115.559576,38.001535",
            level: "district",
            districts: []
          },
          {
            citycode: "0318",
            adcode: "131124",
            name: "饶阳县",
            center: "115.725898,38.235313",
            level: "district",
            districts: []
          },
          {
            citycode: "0318",
            adcode: "131125",
            name: "安平县",
            center: "115.518918,38.234769",
            level: "district",
            districts: []
          },
          {
            citycode: "0318",
            adcode: "131128",
            name: "阜城县",
            center: "116.175424,37.862984",
            level: "district",
            districts: []
          },
          {
            citycode: "0318",
            adcode: "131103",
            name: "冀州区",
            center: "115.579392,37.550922",
            level: "district",
            districts: []
          },
          {
            citycode: "0318",
            adcode: "131126",
            name: "故城县",
            center: "115.965877,37.347873",
            level: "district",
            districts: []
          },
          {
            citycode: "0318",
            adcode: "131122",
            name: "武邑县",
            center: "115.887498,37.802036",
            level: "district",
            districts: []
          },
          {
            citycode: "0318",
            adcode: "131123",
            name: "武强县",
            center: "115.982119,38.041447",
            level: "district",
            districts: []
          },
          {
            citycode: "0318",
            adcode: "131121",
            name: "枣强县",
            center: "115.724365,37.514217",
            level: "district",
            districts: []
          },
          {
            citycode: "0318",
            adcode: "131127",
            name: "景县",
            center: "116.270558,37.692831",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0317",
        adcode: "130900",
        name: "沧州市",
        center: "116.838715,38.304676",
        level: "city",
        districts: [
          {
            citycode: "0317",
            adcode: "130982",
            name: "任丘市",
            center: "116.084412,38.685325",
            level: "district",
            districts: []
          },
          {
            citycode: "0317",
            adcode: "130929",
            name: "献县",
            center: "116.122767,38.189924",
            level: "district",
            districts: []
          },
          {
            citycode: "0317",
            adcode: "130923",
            name: "东光县",
            center: "116.537138,37.888844",
            level: "district",
            districts: []
          },
          {
            citycode: "0317",
            adcode: "130924",
            name: "海兴县",
            center: "117.497545,38.143308",
            level: "district",
            districts: []
          },
          {
            citycode: "0317",
            adcode: "130928",
            name: "吴桥县",
            center: "116.391557,37.628225",
            level: "district",
            districts: []
          },
          {
            citycode: "0317",
            adcode: "130983",
            name: "黄骅市",
            center: "117.330043,38.372266",
            level: "district",
            districts: []
          },
          {
            citycode: "0317",
            adcode: "130902",
            name: "新华区",
            center: "116.866309,38.314094",
            level: "district",
            districts: []
          },
          {
            citycode: "0317",
            adcode: "130981",
            name: "泊头市",
            center: "116.578322,38.084262",
            level: "district",
            districts: []
          },
          {
            citycode: "0317",
            adcode: "130903",
            name: "运河区",
            center: "116.842964,38.283456",
            level: "district",
            districts: []
          },
          {
            citycode: "0317",
            adcode: "130921",
            name: "沧县",
            center: "117.007478,38.21985569",
            level: "district",
            districts: []
          },
          {
            citycode: "0317",
            adcode: "130930",
            name: "孟村回族自治县",
            center: "117.104514,38.053438",
            level: "district",
            districts: []
          },
          {
            citycode: "0317",
            adcode: "130925",
            name: "盐山县",
            center: "117.230681,38.058074",
            level: "district",
            districts: []
          },
          {
            citycode: "0317",
            adcode: "130927",
            name: "南皮县",
            center: "116.708603,38.038761",
            level: "district",
            districts: []
          },
          {
            citycode: "0317",
            adcode: "130922",
            name: "青县",
            center: "116.804137,38.583657",
            level: "district",
            districts: []
          },
          {
            citycode: "0317",
            adcode: "130926",
            name: "肃宁县",
            center: "115.829619,38.423044",
            level: "district",
            districts: []
          },
          {
            citycode: "0317",
            adcode: "130984",
            name: "河间市",
            center: "116.099362,38.446656",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0313",
        adcode: "130700",
        name: "张家口市",
        center: "114.885895,40.768931",
        level: "city",
        districts: [
          {
            citycode: "0313",
            adcode: "130724",
            name: "沽源县",
            center: "115.688544,41.670497",
            level: "district",
            districts: []
          },
          {
            citycode: "0313",
            adcode: "130723",
            name: "康保县",
            center: "114.60018,41.853016",
            level: "district",
            districts: []
          },
          {
            citycode: "0313",
            adcode: "130732",
            name: "赤城县",
            center: "115.831256,40.913348",
            level: "district",
            districts: []
          },
          {
            citycode: "0313",
            adcode: "130706",
            name: "下花园区",
            center: "115.287127,40.502628",
            level: "district",
            districts: []
          },
          {
            citycode: "0313",
            adcode: "130709",
            name: "崇礼区",
            center: "115.282345,40.974741",
            level: "district",
            districts: []
          },
          {
            citycode: "0313",
            adcode: "130731",
            name: "涿鹿县",
            center: "115.196835,40.382681",
            level: "district",
            districts: []
          },
          {
            citycode: "0313",
            adcode: "130702",
            name: "桥东区",
            center: "114.894114,40.788472",
            level: "district",
            districts: []
          },
          {
            citycode: "0313",
            adcode: "130705",
            name: "宣化区",
            center: "115.099515,40.609444",
            level: "district",
            districts: []
          },
          {
            citycode: "0313",
            adcode: "130726",
            name: "蔚县",
            center: "114.589136,39.840154",
            level: "district",
            districts: []
          },
          {
            citycode: "0313",
            adcode: "130728",
            name: "怀安县",
            center: "114.386488,40.67527",
            level: "district",
            districts: []
          },
          {
            citycode: "0313",
            adcode: "130703",
            name: "桥西区",
            center: "114.868604,40.819553",
            level: "district",
            districts: []
          },
          {
            citycode: "0313",
            adcode: "130722",
            name: "张北县",
            center: "114.719927,41.159039",
            level: "district",
            districts: []
          },
          {
            citycode: "0313",
            adcode: "130725",
            name: "尚义县",
            center: "113.968763,41.076588",
            level: "district",
            districts: []
          },
          {
            citycode: "0313",
            adcode: "130708",
            name: "万全区",
            center: "114.740584,40.767377",
            level: "district",
            districts: []
          },
          {
            citycode: "0313",
            adcode: "130730",
            name: "怀来县",
            center: "115.517868,40.415625",
            level: "district",
            districts: []
          },
          {
            citycode: "0313",
            adcode: "130727",
            name: "阳原县",
            center: "114.150267,40.104303",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: "1852",
    adcode: "810000",
    name: "香港特别行政区",
    center: "114.171203,22.277468",
    level: "province",
    districts: [
      {
        citycode: "1852",
        adcode: "810015",
        name: "西贡区",
        center: "114.264645,22.31421306",
        level: "district",
        districts: []
      },
      {
        citycode: "1852",
        adcode: "810013",
        name: "北区",
        center: "114.1473639,22.49610389",
        level: "district",
        districts: []
      },
      {
        citycode: "1852",
        adcode: "810014",
        name: "大埔区",
        center: "114.1717431,22.44565306",
        level: "district",
        districts: []
      },
      {
        citycode: "1852",
        adcode: "810016",
        name: "沙田区",
        center: "114.1953653,22.37953167",
        level: "district",
        districts: []
      },
      {
        citycode: "1852",
        adcode: "810008",
        name: "黄大仙区",
        center: "114.2038856,22.33632056",
        level: "district",
        districts: []
      },
      {
        citycode: "1852",
        adcode: "810018",
        name: "离岛区",
        center: "113.94612,22.28640778",
        level: "district",
        districts: []
      },
      {
        citycode: "1852",
        adcode: "810006",
        name: "深水埗区",
        center: "114.1632417,22.33385417",
        level: "district",
        districts: []
      },
      {
        citycode: "1852",
        adcode: "810011",
        name: "屯门区",
        center: "113.9765742,22.39384417",
        level: "district",
        districts: []
      },
      {
        citycode: "1852",
        adcode: "810007",
        name: "九龙城区",
        center: "114.1928467,22.31251",
        level: "district",
        districts: []
      },
      {
        citycode: "1852",
        adcode: "810009",
        name: "观塘区",
        center: "114.2140542,22.32083778",
        level: "district",
        districts: []
      },
      {
        citycode: "1852",
        adcode: "810001",
        name: "中西区",
        center: "114.1543731,22.28198083",
        level: "district",
        districts: []
      },
      {
        citycode: "1852",
        adcode: "810005",
        name: "油尖旺区",
        center: "114.1733317,22.31170389",
        level: "district",
        districts: []
      },
      {
        citycode: "1852",
        adcode: "810003",
        name: "东区",
        center: "114.2260031,22.27969306",
        level: "district",
        districts: []
      },
      {
        citycode: "1852",
        adcode: "810002",
        name: "湾仔区",
        center: "114.1829153,22.27638889",
        level: "district",
        districts: []
      },
      {
        citycode: "1852",
        adcode: "810004",
        name: "南区",
        center: "114.1600117,22.24589667",
        level: "district",
        districts: []
      },
      {
        citycode: "1852",
        adcode: "810012",
        name: "元朗区",
        center: "114.0324381,22.44142833",
        level: "district",
        districts: []
      },
      {
        citycode: "1852",
        adcode: "810010",
        name: "荃湾区",
        center: "114.1210792,22.36830667",
        level: "district",
        districts: []
      },
      {
        citycode: "1852",
        adcode: "810017",
        name: "葵青区",
        center: "114.1393194,22.36387667",
        level: "district",
        districts: []
      }
    ]
  },
  {
    citycode: "1886",
    adcode: "710000",
    name: "台湾省",
    center: "121.509062,25.044332",
    level: "province",
    districts: []
  },
  {
    citycode: "1853",
    adcode: "820000",
    name: "澳门特别行政区",
    center: "113.543076,22.186927",
    level: "province",
    districts: [
      {
        citycode: "1853",
        adcode: "820008",
        name: "圣方济各堂区",
        center: "113.5599542,22.12348639",
        level: "district",
        districts: []
      },
      {
        citycode: "1853",
        adcode: "820007",
        name: "路凼填海区",
        center: "113.5695992,22.13663",
        level: "district",
        districts: []
      },
      {
        citycode: "1853",
        adcode: "820005",
        name: "风顺堂区",
        center: "113.5419278,22.18736806",
        level: "district",
        districts: []
      },
      {
        citycode: "1853",
        adcode: "820006",
        name: "嘉模堂区",
        center: "113.5587044,22.15375944",
        level: "district",
        districts: []
      },
      {
        citycode: "1853",
        adcode: "820001",
        name: "花地玛堂区",
        center: "113.5528956,22.20787",
        level: "district",
        districts: []
      },
      {
        citycode: "1853",
        adcode: "820002",
        name: "花王堂区",
        center: "113.5489608,22.1992075",
        level: "district",
        districts: []
      },
      {
        citycode: "1853",
        adcode: "820003",
        name: "望德堂区",
        center: "113.5501828,22.19372083",
        level: "district",
        districts: []
      },
      {
        citycode: "1853",
        adcode: "820004",
        name: "大堂区",
        center: "113.5536475,22.18853944",
        level: "district",
        districts: []
      }
    ]
  },
  {
    citycode: [],
    adcode: "620000",
    name: "甘肃省",
    center: "103.826777,36.060634",
    level: "province",
    districts: [
      {
        citycode: "0937",
        adcode: "620900",
        name: "酒泉市",
        center: "98.49432,39.733416",
        level: "city",
        districts: [
          {
            citycode: "0937",
            adcode: "620923",
            name: "肃北蒙古族自治县",
            center: "94.876533,39.512158",
            level: "district",
            districts: []
          },
          {
            citycode: "0937",
            adcode: "620981",
            name: "玉门市",
            center: "97.045617,40.292344",
            level: "district",
            districts: []
          },
          {
            citycode: "0937",
            adcode: "620982",
            name: "敦煌市",
            center: "94.66201,40.142141",
            level: "district",
            districts: []
          },
          {
            citycode: "0937",
            adcode: "620921",
            name: "金塔县",
            center: "98.901523,39.984146",
            level: "district",
            districts: []
          },
          {
            citycode: "0937",
            adcode: "620902",
            name: "肃州区",
            center: "98.507834,39.74511",
            level: "district",
            districts: []
          },
          {
            citycode: "0937",
            adcode: "620922",
            name: "瓜州县",
            center: "95.782255,40.520457",
            level: "district",
            districts: []
          },
          {
            citycode: "0937",
            adcode: "620924",
            name: "阿克塞哈萨克族自治县",
            center: "94.340202,39.633944",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "1937",
        adcode: "620200",
        name: "嘉峪关市",
        center: "98.2882,39.77325",
        level: "city",
        districts: [
          {
            citycode: "1937",
            adcode: "620200",
            name: "峪泉镇",
            center: "98.320410,39.958254",
            level: "street",
            districts: []
          },
          {
            citycode: "1937",
            adcode: "620200",
            name: "新城镇",
            center: "98.362748,39.958127",
            level: "street",
            districts: []
          },
          {
            citycode: "1937",
            adcode: "620200",
            name: "文殊镇",
            center: "98.157893,39.696861",
            level: "street",
            districts: []
          },
          {
            citycode: "1937",
            adcode: "620200",
            name: "钢城街道",
            center: "98.292606,39.755770",
            level: "street",
            districts: []
          },
          {
            citycode: "1937",
            adcode: "620200",
            name: "雄关街道",
            center: "98.239097,39.892952",
            level: "street",
            districts: []
          }
        ]
      },
      {
        citycode: "0935",
        adcode: "620300",
        name: "金昌市",
        center: "102.187972,38.521468",
        level: "city",
        districts: [
          {
            citycode: "0935",
            adcode: "620321",
            name: "永昌县",
            center: "101.984642,38.243534",
            level: "district",
            districts: []
          },
          {
            citycode: "0935",
            adcode: "620302",
            name: "金川区",
            center: "102.1939,38.520373",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0931",
        adcode: "620100",
        name: "兰州市",
        center: "103.834228,36.060798",
        level: "city",
        districts: [
          {
            citycode: "0931",
            adcode: "620111",
            name: "红古区",
            center: "102.859338,36.345768",
            level: "district",
            districts: []
          },
          {
            citycode: "0931",
            adcode: "620104",
            name: "西固区",
            center: "103.627966,36.08845",
            level: "district",
            districts: []
          },
          {
            citycode: "0931",
            adcode: "620103",
            name: "七里河区",
            center: "103.786261,36.066249",
            level: "district",
            districts: []
          },
          {
            citycode: "0931",
            adcode: "620123",
            name: "榆中县",
            center: "104.112541,35.843354",
            level: "district",
            districts: []
          },
          {
            citycode: "0931",
            adcode: "620102",
            name: "城关区",
            center: "103.825315,36.056948",
            level: "district",
            districts: []
          },
          {
            citycode: "0931",
            adcode: "620105",
            name: "安宁区",
            center: "103.718953,36.104493",
            level: "district",
            districts: []
          },
          {
            citycode: "0931",
            adcode: "620122",
            name: "皋兰县",
            center: "103.947345,36.332434",
            level: "district",
            districts: []
          },
          {
            citycode: "0931",
            adcode: "620121",
            name: "永登县",
            center: "103.260273,36.736457",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0933",
        adcode: "620800",
        name: "平凉市",
        center: "106.664913,35.542417",
        level: "city",
        districts: [
          {
            citycode: "0933",
            adcode: "620825",
            name: "庄浪县",
            center: "106.036201,35.20266",
            level: "district",
            districts: []
          },
          {
            citycode: "0933",
            adcode: "620802",
            name: "崆峒区",
            center: "106.67489,35.542437",
            level: "district",
            districts: []
          },
          {
            citycode: "0933",
            adcode: "620823",
            name: "崇信县",
            center: "107.025762,35.305648",
            level: "district",
            districts: []
          },
          {
            citycode: "0933",
            adcode: "620826",
            name: "静宁县",
            center: "105.732165,35.522035",
            level: "district",
            districts: []
          },
          {
            citycode: "0933",
            adcode: "620881",
            name: "华亭市",
            center: "106.628899,35.207695",
            level: "district",
            districts: []
          },
          {
            citycode: "0933",
            adcode: "620822",
            name: "灵台县",
            center: "107.595874,35.070027",
            level: "district",
            districts: []
          },
          {
            citycode: "0933",
            adcode: "620821",
            name: "泾川县",
            center: "107.367608,35.332992",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0936",
        adcode: "620700",
        name: "张掖市",
        center: "100.449858,38.924766",
        level: "city",
        districts: [
          {
            citycode: "0936",
            adcode: "620724",
            name: "高台县",
            center: "99.819265,39.378294",
            level: "district",
            districts: []
          },
          {
            citycode: "0936",
            adcode: "620721",
            name: "肃南裕固族自治县",
            center: "99.615601,38.836931",
            level: "district",
            districts: []
          },
          {
            citycode: "0936",
            adcode: "620725",
            name: "山丹县",
            center: "101.088611,38.7846",
            level: "district",
            districts: []
          },
          {
            citycode: "0936",
            adcode: "620722",
            name: "民乐县",
            center: "100.812047,38.430318",
            level: "district",
            districts: []
          },
          {
            citycode: "0936",
            adcode: "620702",
            name: "甘州区",
            center: "100.415324,38.944315",
            level: "district",
            districts: []
          },
          {
            citycode: "0936",
            adcode: "620723",
            name: "临泽县",
            center: "100.164333,39.15224",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0934",
        adcode: "621000",
        name: "庆阳市",
        center: "107.643433,35.709459",
        level: "city",
        districts: [
          {
            citycode: "0934",
            adcode: "621025",
            name: "正宁县",
            center: "108.359964,35.492158",
            level: "district",
            districts: []
          },
          {
            citycode: "0934",
            adcode: "621027",
            name: "镇原县",
            center: "107.200888,35.677705",
            level: "district",
            districts: []
          },
          {
            citycode: "0934",
            adcode: "621022",
            name: "环县",
            center: "107.308788,36.568566",
            level: "district",
            districts: []
          },
          {
            citycode: "0934",
            adcode: "621026",
            name: "宁县",
            center: "107.913463,35.509252",
            level: "district",
            districts: []
          },
          {
            citycode: "0934",
            adcode: "621024",
            name: "合水县",
            center: "108.021859,35.833908",
            level: "district",
            districts: []
          },
          {
            citycode: "0934",
            adcode: "621002",
            name: "西峰区",
            center: "107.650563,35.730318",
            level: "district",
            districts: []
          },
          {
            citycode: "0934",
            adcode: "621021",
            name: "庆城县",
            center: "107.881706,36.016125",
            level: "district",
            districts: []
          },
          {
            citycode: "0934",
            adcode: "621023",
            name: "华池县",
            center: "107.98972,36.461474",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0943",
        adcode: "620400",
        name: "白银市",
        center: "104.138872,36.545123",
        level: "city",
        districts: [
          {
            citycode: "0943",
            adcode: "620402",
            name: "白银区",
            center: "104.14956,36.53469",
            level: "district",
            districts: []
          },
          {
            citycode: "0943",
            adcode: "620422",
            name: "会宁县",
            center: "105.052883,35.693241",
            level: "district",
            districts: []
          },
          {
            citycode: "0943",
            adcode: "620421",
            name: "靖远县",
            center: "104.676202,36.571736",
            level: "district",
            districts: []
          },
          {
            citycode: "0943",
            adcode: "620423",
            name: "景泰县",
            center: "104.063125,37.18351",
            level: "district",
            districts: []
          },
          {
            citycode: "0943",
            adcode: "620403",
            name: "平川区",
            center: "104.825275,36.728494",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "1935",
        adcode: "620600",
        name: "武威市",
        center: "102.637821,37.92898",
        level: "city",
        districts: [
          {
            citycode: "1935",
            adcode: "620602",
            name: "凉州区",
            center: "102.641959,37.928217",
            level: "district",
            districts: []
          },
          {
            citycode: "1935",
            adcode: "620622",
            name: "古浪县",
            center: "102.897542,37.470882",
            level: "district",
            districts: []
          },
          {
            citycode: "1935",
            adcode: "620621",
            name: "民勤县",
            center: "103.093671,38.624293",
            level: "district",
            districts: []
          },
          {
            citycode: "1935",
            adcode: "620623",
            name: "天祝藏族自治县",
            center: "103.142416,36.971978",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "2935",
        adcode: "621200",
        name: "陇南市",
        center: "104.960296,33.370174",
        level: "city",
        districts: [
          {
            citycode: "2935",
            adcode: "621227",
            name: "徽县",
            center: "106.087156,33.769927",
            level: "district",
            districts: []
          },
          {
            citycode: "2935",
            adcode: "621202",
            name: "武都区",
            center: "104.921861,33.400685",
            level: "district",
            districts: []
          },
          {
            citycode: "2935",
            adcode: "621222",
            name: "文县",
            center: "104.6835,32.944031",
            level: "district",
            districts: []
          },
          {
            citycode: "2935",
            adcode: "621225",
            name: "西和县",
            center: "105.298756,34.014215",
            level: "district",
            districts: []
          },
          {
            citycode: "2935",
            adcode: "621221",
            name: "成县",
            center: "105.742508,33.750722",
            level: "district",
            districts: []
          },
          {
            citycode: "2935",
            adcode: "621224",
            name: "康县",
            center: "105.608609,33.329212",
            level: "district",
            districts: []
          },
          {
            citycode: "2935",
            adcode: "621226",
            name: "礼县",
            center: "105.17864,34.189345",
            level: "district",
            districts: []
          },
          {
            citycode: "2935",
            adcode: "621223",
            name: "宕昌县",
            center: "104.393385,34.047261",
            level: "district",
            districts: []
          },
          {
            citycode: "2935",
            adcode: "621228",
            name: "两当县",
            center: "106.304973,33.908952",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0932",
        adcode: "621100",
        name: "定西市",
        center: "104.592342,35.607947",
        level: "city",
        districts: [
          {
            citycode: "0932",
            adcode: "621123",
            name: "渭源县",
            center: "104.215092,35.137028",
            level: "district",
            districts: []
          },
          {
            citycode: "0932",
            adcode: "621124",
            name: "临洮县",
            center: "103.859446,35.394993",
            level: "district",
            districts: []
          },
          {
            citycode: "0932",
            adcode: "621126",
            name: "岷县",
            center: "104.036731,34.43833",
            level: "district",
            districts: []
          },
          {
            citycode: "0932",
            adcode: "621125",
            name: "漳县",
            center: "104.471722,34.84854",
            level: "district",
            districts: []
          },
          {
            citycode: "0932",
            adcode: "621102",
            name: "安定区",
            center: "104.610647,35.580918",
            level: "district",
            districts: []
          },
          {
            citycode: "0932",
            adcode: "621122",
            name: "陇西县",
            center: "104.634928,35.003899",
            level: "district",
            districts: []
          },
          {
            citycode: "0932",
            adcode: "621121",
            name: "通渭县",
            center: "105.242312,35.211311",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0938",
        adcode: "620500",
        name: "天水市",
        center: "105.724828,34.581514",
        level: "city",
        districts: [
          {
            citycode: "0938",
            adcode: "620525",
            name: "张家川回族自治县",
            center: "106.20513,34.988676",
            level: "district",
            districts: []
          },
          {
            citycode: "0938",
            adcode: "620521",
            name: "清水县",
            center: "106.137318,34.749906",
            level: "district",
            districts: []
          },
          {
            citycode: "0938",
            adcode: "620502",
            name: "秦州区",
            center: "105.724914,34.581187",
            level: "district",
            districts: []
          },
          {
            citycode: "0938",
            adcode: "620524",
            name: "武山县",
            center: "104.89121,34.72183",
            level: "district",
            districts: []
          },
          {
            citycode: "0938",
            adcode: "620503",
            name: "麦积区",
            center: "105.889452,34.571143",
            level: "district",
            districts: []
          },
          {
            citycode: "0938",
            adcode: "620523",
            name: "甘谷县",
            center: "105.340789,34.745447",
            level: "district",
            districts: []
          },
          {
            citycode: "0938",
            adcode: "620522",
            name: "秦安县",
            center: "105.675799,34.859094",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0930",
        adcode: "622900",
        name: "临夏回族自治州",
        center: "103.210386,35.601792",
        level: "city",
        districts: [
          {
            citycode: "0930",
            adcode: "622924",
            name: "广河县",
            center: "103.575582,35.488248",
            level: "district",
            districts: []
          },
          {
            citycode: "0930",
            adcode: "622925",
            name: "和政县",
            center: "103.350996,35.424602",
            level: "district",
            districts: []
          },
          {
            citycode: "0930",
            adcode: "622927",
            name: "积石山保安族东乡族撒拉族自治县",
            center: "102.875939,35.717697",
            level: "district",
            districts: []
          },
          {
            citycode: "0930",
            adcode: "622923",
            name: "永靖县",
            center: "103.285853,35.958306",
            level: "district",
            districts: []
          },
          {
            citycode: "0930",
            adcode: "622921",
            name: "临夏县",
            center: "103.04068,35.478726",
            level: "district",
            districts: []
          },
          {
            citycode: "0930",
            adcode: "622901",
            name: "临夏市",
            center: "103.24222,35.604682",
            level: "district",
            districts: []
          },
          {
            citycode: "0930",
            adcode: "622926",
            name: "东乡族自治县",
            center: "103.388122,35.664409",
            level: "district",
            districts: []
          },
          {
            citycode: "0930",
            adcode: "622922",
            name: "康乐县",
            center: "103.708507,35.370296",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0941",
        adcode: "623000",
        name: "甘南藏族自治州",
        center: "102.911736,34.983266",
        level: "city",
        districts: [
          {
            citycode: "0941",
            adcode: "623027",
            name: "夏河县",
            center: "102.548303,35.203857",
            level: "district",
            districts: []
          },
          {
            citycode: "0941",
            adcode: "623001",
            name: "合作市",
            center: "102.910305,35.000228",
            level: "district",
            districts: []
          },
          {
            citycode: "0941",
            adcode: "623021",
            name: "临潭县",
            center: "103.353665,34.693009",
            level: "district",
            districts: []
          },
          {
            citycode: "0941",
            adcode: "623024",
            name: "迭部县",
            center: "103.221735,34.055888",
            level: "district",
            districts: []
          },
          {
            citycode: "0941",
            adcode: "623022",
            name: "卓尼县",
            center: "103.506849,34.589476",
            level: "district",
            districts: []
          },
          {
            citycode: "0941",
            adcode: "623026",
            name: "碌曲县",
            center: "102.487512,34.591084",
            level: "district",
            districts: []
          },
          {
            citycode: "0941",
            adcode: "623025",
            name: "玛曲县",
            center: "102.072608,33.998145",
            level: "district",
            districts: []
          },
          {
            citycode: "0941",
            adcode: "623023",
            name: "舟曲县",
            center: "104.251543,33.793695",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "510000",
    name: "四川省",
    center: "104.076452,30.651696",
    level: "province",
    districts: [
      {
        citycode: "0839",
        adcode: "510800",
        name: "广元市",
        center: "105.844004,32.435774",
        level: "city",
        districts: [
          {
            citycode: "0839",
            adcode: "510812",
            name: "朝天区",
            center: "105.882848,32.651352",
            level: "district",
            districts: []
          },
          {
            citycode: "0839",
            adcode: "510811",
            name: "昭化区",
            center: "105.957612,32.333173",
            level: "district",
            districts: []
          },
          {
            citycode: "0839",
            adcode: "510824",
            name: "苍溪县",
            center: "105.934756,31.731709",
            level: "district",
            districts: []
          },
          {
            citycode: "0839",
            adcode: "510823",
            name: "剑阁县",
            center: "105.524699,32.288681",
            level: "district",
            districts: []
          },
          {
            citycode: "0839",
            adcode: "510822",
            name: "青川县",
            center: "105.238498,32.575821",
            level: "district",
            districts: []
          },
          {
            citycode: "0839",
            adcode: "510821",
            name: "旺苍县",
            center: "106.290124,32.229074",
            level: "district",
            districts: []
          },
          {
            citycode: "0839",
            adcode: "510802",
            name: "利州区",
            center: "105.845307,32.433756",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0817",
        adcode: "511300",
        name: "南充市",
        center: "106.110565,30.837235",
        level: "city",
        districts: [
          {
            citycode: "0817",
            adcode: "511321",
            name: "南部县",
            center: "106.036349,31.348255",
            level: "district",
            districts: []
          },
          {
            citycode: "0817",
            adcode: "511322",
            name: "营山县",
            center: "106.565524,31.077057",
            level: "district",
            districts: []
          },
          {
            citycode: "0817",
            adcode: "511325",
            name: "西充县",
            center: "105.900894,30.995546",
            level: "district",
            districts: []
          },
          {
            citycode: "0817",
            adcode: "511304",
            name: "嘉陵区",
            center: "106.07208,30.758831",
            level: "district",
            districts: []
          },
          {
            citycode: "0817",
            adcode: "511324",
            name: "仪陇县",
            center: "106.303082,31.271693",
            level: "district",
            districts: []
          },
          {
            citycode: "0817",
            adcode: "511302",
            name: "顺庆区",
            center: "106.092327,30.797366",
            level: "district",
            districts: []
          },
          {
            citycode: "0817",
            adcode: "511381",
            name: "阆中市",
            center: "106.005046,31.558356",
            level: "district",
            districts: []
          },
          {
            citycode: "0817",
            adcode: "511303",
            name: "高坪区",
            center: "106.118931,30.781284",
            level: "district",
            districts: []
          },
          {
            citycode: "0817",
            adcode: "511323",
            name: "蓬安县",
            center: "106.412156,31.028537",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0827",
        adcode: "511900",
        name: "巴中市",
        center: "106.747548,31.867853",
        level: "city",
        districts: [
          {
            citycode: "0827",
            adcode: "511921",
            name: "通江县",
            center: "107.245033,31.911705",
            level: "district",
            districts: []
          },
          {
            citycode: "0827",
            adcode: "511902",
            name: "巴州区",
            center: "106.76887,31.851458",
            level: "district",
            districts: []
          },
          {
            citycode: "0827",
            adcode: "511922",
            name: "南江县",
            center: "106.828697,32.346589",
            level: "district",
            districts: []
          },
          {
            citycode: "0827",
            adcode: "511923",
            name: "平昌县",
            center: "107.103613,31.560436",
            level: "district",
            districts: []
          },
          {
            citycode: "0827",
            adcode: "511903",
            name: "恩阳区",
            center: "106.654386,31.787186",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0838",
        adcode: "510600",
        name: "德阳市",
        center: "104.397795,31.127449",
        level: "city",
        districts: [
          {
            citycode: "0838",
            adcode: "510623",
            name: "中江县",
            center: "104.678601,31.03327",
            level: "district",
            districts: []
          },
          {
            citycode: "0838",
            adcode: "510682",
            name: "什邡市",
            center: "104.167345,31.12655",
            level: "district",
            districts: []
          },
          {
            citycode: "0838",
            adcode: "510604",
            name: "罗江区",
            center: "104.510457,31.317388",
            level: "district",
            districts: []
          },
          {
            citycode: "0838",
            adcode: "510681",
            name: "广汉市",
            center: "104.282204,30.977264",
            level: "district",
            districts: []
          },
          {
            citycode: "0838",
            adcode: "510603",
            name: "旌阳区",
            center: "104.417061,31.143335",
            level: "district",
            districts: []
          },
          {
            citycode: "0838",
            adcode: "510683",
            name: "绵竹市",
            center: "104.220679,31.339251",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0816",
        adcode: "510700",
        name: "绵阳市",
        center: "104.679127,31.467673",
        level: "city",
        districts: [
          {
            citycode: "0816",
            adcode: "510781",
            name: "江油市",
            center: "104.74564,31.778572",
            level: "district",
            districts: []
          },
          {
            citycode: "0816",
            adcode: "510725",
            name: "梓潼县",
            center: "105.170746,31.642635",
            level: "district",
            districts: []
          },
          {
            citycode: "0816",
            adcode: "510704",
            name: "游仙区",
            center: "104.766136,31.473788",
            level: "district",
            districts: []
          },
          {
            citycode: "0816",
            adcode: "510722",
            name: "三台县",
            center: "105.093722,31.095826",
            level: "district",
            districts: []
          },
          {
            citycode: "0816",
            adcode: "510703",
            name: "涪城区",
            center: "104.756917,31.455192",
            level: "district",
            districts: []
          },
          {
            citycode: "0816",
            adcode: "510727",
            name: "平武县",
            center: "104.555481,32.409684",
            level: "district",
            districts: []
          },
          {
            citycode: "0816",
            adcode: "510726",
            name: "北川羌族自治县",
            center: "104.468163,31.617192",
            level: "district",
            districts: []
          },
          {
            citycode: "0816",
            adcode: "510723",
            name: "盐亭县",
            center: "105.389453,31.208362",
            level: "district",
            districts: []
          },
          {
            citycode: "0816",
            adcode: "510705",
            name: "安州区",
            center: "104.567543,31.534319",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "028",
        adcode: "510100",
        name: "成都市",
        center: "104.066301,30.572961",
        level: "city",
        districts: [
          {
            citycode: "028",
            adcode: "510182",
            name: "彭州市",
            center: "103.957706,30.990463",
            level: "district",
            districts: []
          },
          {
            citycode: "028",
            adcode: "510185",
            name: "简阳市",
            center: "104.547644,30.410937",
            level: "district",
            districts: []
          },
          {
            citycode: "028",
            adcode: "510131",
            name: "蒲江县",
            center: "103.506478,30.197558",
            level: "district",
            districts: []
          },
          {
            citycode: "028",
            adcode: "510116",
            name: "双流区",
            center: "103.92342,30.574884",
            level: "district",
            districts: []
          },
          {
            citycode: "028",
            adcode: "510105",
            name: "青羊区",
            center: "104.062415,30.674583",
            level: "district",
            districts: []
          },
          {
            citycode: "028",
            adcode: "510106",
            name: "金牛区",
            center: "104.052236,30.691359",
            level: "district",
            districts: []
          },
          {
            citycode: "028",
            adcode: "510184",
            name: "崇州市",
            center: "103.673025,30.630183",
            level: "district",
            districts: []
          },
          {
            citycode: "028",
            adcode: "510181",
            name: "都江堰市",
            center: "103.647193,30.988763",
            level: "district",
            districts: []
          },
          {
            citycode: "028",
            adcode: "510107",
            name: "武侯区",
            center: "104.043246,30.641849",
            level: "district",
            districts: []
          },
          {
            citycode: "028",
            adcode: "510121",
            name: "金堂县",
            center: "104.411871,30.86203",
            level: "district",
            districts: []
          },
          {
            citycode: "028",
            adcode: "510129",
            name: "大邑县",
            center: "103.51226,30.573004",
            level: "district",
            districts: []
          },
          {
            citycode: "028",
            adcode: "510118",
            name: "新津区",
            center: "103.810906,30.410404",
            level: "district",
            districts: []
          },
          {
            citycode: "028",
            adcode: "510108",
            name: "成华区",
            center: "104.101452,30.659966",
            level: "district",
            districts: []
          },
          {
            citycode: "028",
            adcode: "510115",
            name: "温江区",
            center: "103.856423,30.681956",
            level: "district",
            districts: []
          },
          {
            citycode: "028",
            adcode: "510117",
            name: "郫都区",
            center: "103.900486,30.795113",
            level: "district",
            districts: []
          },
          {
            citycode: "028",
            adcode: "510183",
            name: "邛崃市",
            center: "103.464176,30.41029",
            level: "district",
            districts: []
          },
          {
            citycode: "028",
            adcode: "510112",
            name: "龙泉驿区",
            center: "104.27536,30.556808",
            level: "district",
            districts: []
          },
          {
            citycode: "028",
            adcode: "510113",
            name: "青白江区",
            center: "104.251342,30.8786",
            level: "district",
            districts: []
          },
          {
            citycode: "028",
            adcode: "510114",
            name: "新都区",
            center: "104.158593,30.823568",
            level: "district",
            districts: []
          },
          {
            citycode: "028",
            adcode: "510104",
            name: "锦江区",
            center: "104.117262,30.598726",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0826",
        adcode: "511600",
        name: "广安市",
        center: "106.632647,30.456354",
        level: "city",
        districts: [
          {
            citycode: "0826",
            adcode: "511623",
            name: "邻水县",
            center: "106.930242,30.334911",
            level: "district",
            districts: []
          },
          {
            citycode: "0826",
            adcode: "511602",
            name: "广安区",
            center: "106.641628,30.473943",
            level: "district",
            districts: []
          },
          {
            citycode: "0826",
            adcode: "511681",
            name: "华蓥市",
            center: "106.783151,30.390439",
            level: "district",
            districts: []
          },
          {
            citycode: "0826",
            adcode: "511603",
            name: "前锋区",
            center: "106.886039,30.496059",
            level: "district",
            districts: []
          },
          {
            citycode: "0826",
            adcode: "511621",
            name: "岳池县",
            center: "106.440056,30.538656",
            level: "district",
            districts: []
          },
          {
            citycode: "0826",
            adcode: "511622",
            name: "武胜县",
            center: "106.295945,30.349493",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0818",
        adcode: "511700",
        name: "达州市",
        center: "107.46778,31.209278",
        level: "city",
        districts: [
          {
            citycode: "0818",
            adcode: "511724",
            name: "大竹县",
            center: "107.204702,30.736222",
            level: "district",
            districts: []
          },
          {
            citycode: "0818",
            adcode: "511725",
            name: "渠县",
            center: "106.973114,30.836504",
            level: "district",
            districts: []
          },
          {
            citycode: "0818",
            adcode: "511723",
            name: "开江县",
            center: "107.868609,31.082945",
            level: "district",
            districts: []
          },
          {
            citycode: "0818",
            adcode: "511702",
            name: "通川区",
            center: "107.505053,31.214665",
            level: "district",
            districts: []
          },
          {
            citycode: "0818",
            adcode: "511703",
            name: "达川区",
            center: "107.511736,31.196573",
            level: "district",
            districts: []
          },
          {
            citycode: "0818",
            adcode: "511722",
            name: "宣汉县",
            center: "107.727198,31.353845",
            level: "district",
            districts: []
          },
          {
            citycode: "0818",
            adcode: "511781",
            name: "万源市",
            center: "108.034393,32.081698",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0825",
        adcode: "510900",
        name: "遂宁市",
        center: "105.592602,30.53268",
        level: "city",
        districts: [
          {
            citycode: "0825",
            adcode: "510923",
            name: "大英县",
            center: "105.236852,30.594472",
            level: "district",
            districts: []
          },
          {
            citycode: "0825",
            adcode: "510981",
            name: "射洪市",
            center: "105.388366,30.871079",
            level: "district",
            districts: []
          },
          {
            citycode: "0825",
            adcode: "510921",
            name: "蓬溪县",
            center: "105.707498,30.75763",
            level: "district",
            districts: []
          },
          {
            citycode: "0825",
            adcode: "510904",
            name: "安居区",
            center: "105.45636,30.355091",
            level: "district",
            districts: []
          },
          {
            citycode: "0825",
            adcode: "510903",
            name: "船山区",
            center: "105.568359,30.526201",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0832",
        adcode: "512000",
        name: "资阳市",
        center: "104.627265,30.129236",
        level: "city",
        districts: [
          {
            citycode: "0832",
            adcode: "512022",
            name: "乐至县",
            center: "105.019823,30.275418",
            level: "district",
            districts: []
          },
          {
            citycode: "0832",
            adcode: "512021",
            name: "安岳县",
            center: "105.35551,30.103623",
            level: "district",
            districts: []
          },
          {
            citycode: "0832",
            adcode: "512002",
            name: "雁江区",
            center: "104.676814,30.107778",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "1833",
        adcode: "511400",
        name: "眉山市",
        center: "103.848417,30.077113",
        level: "city",
        districts: [
          {
            citycode: "1833",
            adcode: "511421",
            name: "仁寿县",
            center: "104.133931,29.995638",
            level: "district",
            districts: []
          },
          {
            citycode: "1833",
            adcode: "511424",
            name: "丹棱县",
            center: "103.512859,30.014398",
            level: "district",
            districts: []
          },
          {
            citycode: "1833",
            adcode: "511423",
            name: "洪雅县",
            center: "103.365035,29.915828",
            level: "district",
            districts: []
          },
          {
            citycode: "1833",
            adcode: "511425",
            name: "青神县",
            center: "103.846596,29.831302",
            level: "district",
            districts: []
          },
          {
            citycode: "1833",
            adcode: "511403",
            name: "彭山区",
            center: "103.872852,30.193278",
            level: "district",
            districts: []
          },
          {
            citycode: "1833",
            adcode: "511402",
            name: "东坡区",
            center: "103.831868,30.041956",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "1832",
        adcode: "511000",
        name: "内江市",
        center: "105.057992,29.58021",
        level: "city",
        districts: [
          {
            citycode: "1832",
            adcode: "511025",
            name: "资中县",
            center: "104.851874,29.763419",
            level: "district",
            districts: []
          },
          {
            citycode: "1832",
            adcode: "511011",
            name: "东兴区",
            center: "105.076107,29.593528",
            level: "district",
            districts: []
          },
          {
            citycode: "1832",
            adcode: "511024",
            name: "威远县",
            center: "104.669032,29.527456",
            level: "district",
            districts: []
          },
          {
            citycode: "1832",
            adcode: "511083",
            name: "隆昌市",
            center: "105.287507,29.339408",
            level: "district",
            districts: []
          },
          {
            citycode: "1832",
            adcode: "511002",
            name: "市中区",
            center: "105.06759,29.587091",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0833",
        adcode: "511100",
        name: "乐山市",
        center: "103.766085,29.552275",
        level: "city",
        districts: [
          {
            citycode: "0833",
            adcode: "511126",
            name: "夹江县",
            center: "103.571313,29.738143",
            level: "district",
            districts: []
          },
          {
            citycode: "0833",
            adcode: "511124",
            name: "井研县",
            center: "104.06968,29.65165",
            level: "district",
            districts: []
          },
          {
            citycode: "0833",
            adcode: "511111",
            name: "沙湾区",
            center: "103.550118,29.412404",
            level: "district",
            districts: []
          },
          {
            citycode: "0833",
            adcode: "511112",
            name: "五通桥区",
            center: "103.818024,29.406837",
            level: "district",
            districts: []
          },
          {
            citycode: "0833",
            adcode: "511113",
            name: "金口河区",
            center: "103.078597,29.244345",
            level: "district",
            districts: []
          },
          {
            citycode: "0833",
            adcode: "511123",
            name: "犍为县",
            center: "103.949231,29.208118",
            level: "district",
            districts: []
          },
          {
            citycode: "0833",
            adcode: "511132",
            name: "峨边彝族自治县",
            center: "103.262048,29.230426",
            level: "district",
            districts: []
          },
          {
            citycode: "0833",
            adcode: "511129",
            name: "沐川县",
            center: "103.902691,28.956394",
            level: "district",
            districts: []
          },
          {
            citycode: "0833",
            adcode: "511102",
            name: "市中区",
            center: "103.761329,29.555374",
            level: "district",
            districts: []
          },
          {
            citycode: "0833",
            adcode: "511133",
            name: "马边彝族自治县",
            center: "103.546347,28.83552",
            level: "district",
            districts: []
          },
          {
            citycode: "0833",
            adcode: "511181",
            name: "峨眉山市",
            center: "103.484557,29.601189",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0813",
        adcode: "510300",
        name: "自贡市",
        center: "104.779307,29.33924",
        level: "city",
        districts: [
          {
            citycode: "0813",
            adcode: "510321",
            name: "荣县",
            center: "104.417438,29.445461",
            level: "district",
            districts: []
          },
          {
            citycode: "0813",
            adcode: "510304",
            name: "大安区",
            center: "104.773982,29.36371",
            level: "district",
            districts: []
          },
          {
            citycode: "0813",
            adcode: "510322",
            name: "富顺县",
            center: "104.975193,29.181779",
            level: "district",
            districts: []
          },
          {
            citycode: "0813",
            adcode: "510311",
            name: "沿滩区",
            center: "104.873826,29.27208",
            level: "district",
            districts: []
          },
          {
            citycode: "0813",
            adcode: "510302",
            name: "自流井区",
            center: "104.777182,29.337295",
            level: "district",
            districts: []
          },
          {
            citycode: "0813",
            adcode: "510303",
            name: "贡井区",
            center: "104.715294,29.345481",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0830",
        adcode: "510500",
        name: "泸州市",
        center: "105.441866,28.87098",
        level: "city",
        districts: [
          {
            citycode: "0830",
            adcode: "510521",
            name: "泸县",
            center: "105.381879,29.1516",
            level: "district",
            districts: []
          },
          {
            citycode: "0830",
            adcode: "510504",
            name: "龙马潭区",
            center: "105.437751,28.913257",
            level: "district",
            districts: []
          },
          {
            citycode: "0830",
            adcode: "510503",
            name: "纳溪区",
            center: "105.371324,28.772888",
            level: "district",
            districts: []
          },
          {
            citycode: "0830",
            adcode: "510524",
            name: "叙永县",
            center: "105.444777,28.155631",
            level: "district",
            districts: []
          },
          {
            citycode: "0830",
            adcode: "510525",
            name: "古蔺县",
            center: "105.812694,28.038763",
            level: "district",
            districts: []
          },
          {
            citycode: "0830",
            adcode: "510502",
            name: "江阳区",
            center: "105.434982,28.87881",
            level: "district",
            districts: []
          },
          {
            citycode: "0830",
            adcode: "510522",
            name: "合江县",
            center: "105.831011,28.811278",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0831",
        adcode: "511500",
        name: "宜宾市",
        center: "104.642826,28.752354",
        level: "city",
        districts: [
          {
            citycode: "0831",
            adcode: "511523",
            name: "江安县",
            center: "105.066982,28.723797",
            level: "district",
            districts: []
          },
          {
            citycode: "0831",
            adcode: "511525",
            name: "高县",
            center: "104.517748,28.436166",
            level: "district",
            districts: []
          },
          {
            citycode: "0831",
            adcode: "511524",
            name: "长宁县",
            center: "104.920643,28.582866",
            level: "district",
            districts: []
          },
          {
            citycode: "0831",
            adcode: "511526",
            name: "珙县",
            center: "104.708986,28.439514",
            level: "district",
            districts: []
          },
          {
            citycode: "0831",
            adcode: "511503",
            name: "南溪区",
            center: "104.969147,28.846366",
            level: "district",
            districts: []
          },
          {
            citycode: "0831",
            adcode: "511528",
            name: "兴文县",
            center: "105.236207,28.303669",
            level: "district",
            districts: []
          },
          {
            citycode: "0831",
            adcode: "511527",
            name: "筠连县",
            center: "104.511159,28.167981",
            level: "district",
            districts: []
          },
          {
            citycode: "0831",
            adcode: "511502",
            name: "翠屏区",
            center: "104.619853,28.766537",
            level: "district",
            districts: []
          },
          {
            citycode: "0831",
            adcode: "511529",
            name: "屏山县",
            center: "104.346138,28.82867",
            level: "district",
            districts: []
          },
          {
            citycode: "0831",
            adcode: "511504",
            name: "叙州区",
            center: "104.533244,28.690068",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0834",
        adcode: "513400",
        name: "凉山彝族自治州",
        center: "102.267713,27.881396",
        level: "city",
        districts: [
          {
            citycode: "0834",
            adcode: "513435",
            name: "甘洛县",
            center: "102.771441,28.959131",
            level: "district",
            districts: []
          },
          {
            citycode: "0834",
            adcode: "513422",
            name: "木里藏族自治县",
            center: "101.280216,27.928736",
            level: "district",
            districts: []
          },
          {
            citycode: "0834",
            adcode: "513434",
            name: "越西县",
            center: "102.507467,28.639874",
            level: "district",
            districts: []
          },
          {
            citycode: "0834",
            adcode: "513436",
            name: "美姑县",
            center: "103.132359,28.328591",
            level: "district",
            districts: []
          },
          {
            citycode: "0834",
            adcode: "513437",
            name: "雷波县",
            center: "103.571705,28.263202",
            level: "district",
            districts: []
          },
          {
            citycode: "0834",
            adcode: "513433",
            name: "冕宁县",
            center: "102.176622,28.550145",
            level: "district",
            districts: []
          },
          {
            citycode: "0834",
            adcode: "513428",
            name: "普格县",
            center: "102.540901,27.376413",
            level: "district",
            districts: []
          },
          {
            citycode: "0834",
            adcode: "513429",
            name: "布拖县",
            center: "102.809157,27.7121",
            level: "district",
            districts: []
          },
          {
            citycode: "0834",
            adcode: "513423",
            name: "盐源县",
            center: "101.509038,27.422593",
            level: "district",
            districts: []
          },
          {
            citycode: "0834",
            adcode: "513402",
            name: "会理市",
            center: "102.244774,26.655047",
            level: "district",
            districts: []
          },
          {
            citycode: "0834",
            adcode: "513430",
            name: "金阳县",
            center: "103.248786,27.696735",
            level: "district",
            districts: []
          },
          {
            citycode: "0834",
            adcode: "513424",
            name: "德昌县",
            center: "102.175661,27.402832",
            level: "district",
            districts: []
          },
          {
            citycode: "0834",
            adcode: "513427",
            name: "宁南县",
            center: "102.751587,27.061431",
            level: "district",
            districts: []
          },
          {
            citycode: "0834",
            adcode: "513401",
            name: "西昌市",
            center: "102.264166,27.89441",
            level: "district",
            districts: []
          },
          {
            citycode: "0834",
            adcode: "513431",
            name: "昭觉县",
            center: "102.839849,28.015301",
            level: "district",
            districts: []
          },
          {
            citycode: "0834",
            adcode: "513426",
            name: "会东县",
            center: "102.577979,26.634744",
            level: "district",
            districts: []
          },
          {
            citycode: "0834",
            adcode: "513432",
            name: "喜德县",
            center: "102.412451,28.306429",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0812",
        adcode: "510400",
        name: "攀枝花市",
        center: "101.71846,26.582417",
        level: "city",
        districts: [
          {
            citycode: "0812",
            adcode: "510421",
            name: "米易县",
            center: "102.111073,26.896372",
            level: "district",
            districts: []
          },
          {
            citycode: "0812",
            adcode: "510422",
            name: "盐边县",
            center: "101.854027,26.682611",
            level: "district",
            districts: []
          },
          {
            citycode: "0812",
            adcode: "510411",
            name: "仁和区",
            center: "101.738615,26.497796",
            level: "district",
            districts: []
          },
          {
            citycode: "0812",
            adcode: "510402",
            name: "东区",
            center: "101.704129,26.546484",
            level: "district",
            districts: []
          },
          {
            citycode: "0812",
            adcode: "510403",
            name: "西区",
            center: "101.630557,26.5977",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0836",
        adcode: "513300",
        name: "甘孜藏族自治州",
        center: "101.96231,30.04952",
        level: "city",
        districts: [
          {
            citycode: "0836",
            adcode: "513332",
            name: "石渠县",
            center: "98.102938,32.978728",
            level: "district",
            districts: []
          },
          {
            citycode: "0836",
            adcode: "513328",
            name: "甘孜县",
            center: "99.991683,31.622731",
            level: "district",
            districts: []
          },
          {
            citycode: "0836",
            adcode: "513330",
            name: "德格县",
            center: "98.580914,31.806118",
            level: "district",
            districts: []
          },
          {
            citycode: "0836",
            adcode: "513327",
            name: "炉霍县",
            center: "100.676014,31.390657",
            level: "district",
            districts: []
          },
          {
            citycode: "0836",
            adcode: "513326",
            name: "道孚县",
            center: "101.125157,30.979486",
            level: "district",
            districts: []
          },
          {
            citycode: "0836",
            adcode: "513329",
            name: "新龙县",
            center: "100.311569,30.93917",
            level: "district",
            districts: []
          },
          {
            citycode: "0836",
            adcode: "513331",
            name: "白玉县",
            center: "98.824025,31.209669",
            level: "district",
            districts: []
          },
          {
            citycode: "0836",
            adcode: "513334",
            name: "理塘县",
            center: "100.269145,29.994228",
            level: "district",
            districts: []
          },
          {
            citycode: "0836",
            adcode: "513301",
            name: "康定市",
            center: "101.95687,29.998544",
            level: "district",
            districts: []
          },
          {
            citycode: "0836",
            adcode: "513335",
            name: "巴塘县",
            center: "99.110555,30.00533",
            level: "district",
            districts: []
          },
          {
            citycode: "0836",
            adcode: "513325",
            name: "雅江县",
            center: "101.014366,30.031498",
            level: "district",
            districts: []
          },
          {
            citycode: "0836",
            adcode: "513337",
            name: "稻城县",
            center: "100.297369,29.03791",
            level: "district",
            districts: []
          },
          {
            citycode: "0836",
            adcode: "513336",
            name: "乡城县",
            center: "99.798116,28.931081",
            level: "district",
            districts: []
          },
          {
            citycode: "0836",
            adcode: "513324",
            name: "九龙县",
            center: "101.507294,29.000347",
            level: "district",
            districts: []
          },
          {
            citycode: "0836",
            adcode: "513338",
            name: "得荣县",
            center: "99.286366,28.713085",
            level: "district",
            districts: []
          },
          {
            citycode: "0836",
            adcode: "513323",
            name: "丹巴县",
            center: "101.89054,30.878618",
            level: "district",
            districts: []
          },
          {
            citycode: "0836",
            adcode: "513333",
            name: "色达县",
            center: "100.333011,32.268541",
            level: "district",
            districts: []
          },
          {
            citycode: "0836",
            adcode: "513322",
            name: "泸定县",
            center: "102.234814,29.914103",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0837",
        adcode: "513200",
        name: "阿坝藏族羌族自治州",
        center: "102.224504,31.899427",
        level: "city",
        districts: [
          {
            citycode: "0837",
            adcode: "513225",
            name: "九寨沟县",
            center: "104.2426,33.252008",
            level: "district",
            districts: []
          },
          {
            citycode: "0837",
            adcode: "513231",
            name: "阿坝县",
            center: "101.706548,32.902387",
            level: "district",
            districts: []
          },
          {
            citycode: "0837",
            adcode: "513233",
            name: "红原县",
            center: "102.544395,32.790841",
            level: "district",
            districts: []
          },
          {
            citycode: "0837",
            adcode: "513228",
            name: "黑水县",
            center: "102.987592,32.069268",
            level: "district",
            districts: []
          },
          {
            citycode: "0837",
            adcode: "513201",
            name: "马尔康市",
            center: "102.206386,31.905799",
            level: "district",
            districts: []
          },
          {
            citycode: "0837",
            adcode: "513226",
            name: "金川县",
            center: "102.063821,31.47625",
            level: "district",
            districts: []
          },
          {
            citycode: "0837",
            adcode: "513222",
            name: "理县",
            center: "103.163284,31.435831",
            level: "district",
            districts: []
          },
          {
            citycode: "0837",
            adcode: "513224",
            name: "松潘县",
            center: "103.60428,32.655685",
            level: "district",
            districts: []
          },
          {
            citycode: "0837",
            adcode: "513227",
            name: "小金县",
            center: "102.362984,30.995823",
            level: "district",
            districts: []
          },
          {
            citycode: "0837",
            adcode: "513230",
            name: "壤塘县",
            center: "100.978526,32.265796",
            level: "district",
            districts: []
          },
          {
            citycode: "0837",
            adcode: "513221",
            name: "汶川县",
            center: "103.590185,31.476875",
            level: "district",
            districts: []
          },
          {
            citycode: "0837",
            adcode: "513223",
            name: "茂县",
            center: "103.85332,31.681727",
            level: "district",
            districts: []
          },
          {
            citycode: "0837",
            adcode: "513232",
            name: "若尔盖县",
            center: "102.96738,33.578503",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0835",
        adcode: "511800",
        name: "雅安市",
        center: "103.041538,30.009998",
        level: "city",
        districts: [
          {
            citycode: "0835",
            adcode: "511827",
            name: "宝兴县",
            center: "102.814156,30.382154",
            level: "district",
            districts: []
          },
          {
            citycode: "0835",
            adcode: "511802",
            name: "雨城区",
            center: "103.032868,30.005718",
            level: "district",
            districts: []
          },
          {
            citycode: "0835",
            adcode: "511822",
            name: "荥经县",
            center: "102.846537,29.793254",
            level: "district",
            districts: []
          },
          {
            citycode: "0835",
            adcode: "511824",
            name: "石棉县",
            center: "102.358364,29.230963",
            level: "district",
            districts: []
          },
          {
            citycode: "0835",
            adcode: "511803",
            name: "名山区",
            center: "103.109238,30.069837",
            level: "district",
            districts: []
          },
          {
            citycode: "0835",
            adcode: "511823",
            name: "汉源县",
            center: "102.650417,29.344275",
            level: "district",
            districts: []
          },
          {
            citycode: "0835",
            adcode: "511826",
            name: "芦山县",
            center: "102.933618,30.145077",
            level: "district",
            districts: []
          },
          {
            citycode: "0835",
            adcode: "511825",
            name: "天全县",
            center: "102.771745,30.05728",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: "022",
    adcode: "120000",
    name: "天津市",
    center: "117.201509,39.085318",
    level: "province",
    districts: [
      {
        citycode: "022",
        adcode: "120100",
        name: "天津城区",
        center: "117.190182,39.125596",
        level: "city",
        districts: [
          {
            citycode: "022",
            adcode: "120115",
            name: "宝坻区",
            center: "117.309748,39.717054",
            level: "district",
            districts: []
          },
          {
            citycode: "022",
            adcode: "120105",
            name: "河北区",
            center: "117.196874,39.148018",
            level: "district",
            districts: []
          },
          {
            citycode: "022",
            adcode: "120118",
            name: "静海区",
            center: "116.975474,38.947772",
            level: "district",
            districts: []
          },
          {
            citycode: "022",
            adcode: "120119",
            name: "蓟州区",
            center: "117.408432,40.046544",
            level: "district",
            districts: []
          },
          {
            citycode: "022",
            adcode: "120117",
            name: "宁河区",
            center: "117.826674,39.329749",
            level: "district",
            districts: []
          },
          {
            citycode: "022",
            adcode: "120112",
            name: "津南区",
            center: "117.356683,38.936971",
            level: "district",
            districts: []
          },
          {
            citycode: "022",
            adcode: "120101",
            name: "和平区",
            center: "117.214713,39.116884",
            level: "district",
            districts: []
          },
          {
            citycode: "022",
            adcode: "120113",
            name: "北辰区",
            center: "117.135614,39.224638",
            level: "district",
            districts: []
          },
          {
            citycode: "022",
            adcode: "120102",
            name: "河东区",
            center: "117.251584,39.128294",
            level: "district",
            districts: []
          },
          {
            citycode: "022",
            adcode: "120110",
            name: "东丽区",
            center: "117.313567,39.086789",
            level: "district",
            districts: []
          },
          {
            citycode: "022",
            adcode: "120106",
            name: "红桥区",
            center: "117.151566,39.167349",
            level: "district",
            districts: []
          },
          {
            citycode: "022",
            adcode: "120116",
            name: "滨海新区",
            center: "117.69641,39.017809",
            level: "district",
            districts: []
          },
          {
            citycode: "022",
            adcode: "120111",
            name: "西青区",
            center: "117.008994,39.141811",
            level: "district",
            districts: []
          },
          {
            citycode: "022",
            adcode: "120103",
            name: "河西区",
            center: "117.223379,39.109679",
            level: "district",
            districts: []
          },
          {
            citycode: "022",
            adcode: "120104",
            name: "南开区",
            center: "117.150638,39.138551",
            level: "district",
            districts: []
          },
          {
            citycode: "022",
            adcode: "120114",
            name: "武清区",
            center: "117.04456,39.384108",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "360000",
    name: "江西省",
    center: "115.816587,28.637234",
    level: "province",
    districts: [
      {
        citycode: "0790",
        adcode: "360500",
        name: "新余市",
        center: "114.916665,27.818553",
        level: "city",
        districts: [
          {
            citycode: "0790",
            adcode: "360502",
            name: "渝水区",
            center: "114.944499,27.799526",
            level: "district",
            districts: []
          },
          {
            citycode: "0790",
            adcode: "360521",
            name: "分宜县",
            center: "114.69264,27.814723",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0791",
        adcode: "360100",
        name: "南昌市",
        center: "115.857972,28.682976",
        level: "city",
        districts: [
          {
            citycode: "0791",
            adcode: "360103",
            name: "西湖区",
            center: "115.876998,28.657005",
            level: "district",
            districts: []
          },
          {
            citycode: "0791",
            adcode: "360123",
            name: "安义县",
            center: "115.549158,28.845585",
            level: "district",
            districts: []
          },
          {
            citycode: "0791",
            adcode: "360104",
            name: "青云谱区",
            center: "115.925709,28.62182",
            level: "district",
            districts: []
          },
          {
            citycode: "0791",
            adcode: "360111",
            name: "青山湖区",
            center: "115.962138,28.682867",
            level: "district",
            districts: []
          },
          {
            citycode: "0791",
            adcode: "360121",
            name: "南昌县",
            center: "115.93349,28.557921",
            level: "district",
            districts: []
          },
          {
            citycode: "0791",
            adcode: "360113",
            name: "红谷滩区",
            center: "115.858127,28.698188",
            level: "district",
            districts: []
          },
          {
            citycode: "0791",
            adcode: "360124",
            name: "进贤县",
            center: "116.242468,28.377627",
            level: "district",
            districts: []
          },
          {
            citycode: "0791",
            adcode: "360112",
            name: "新建区",
            center: "115.815244,28.693192",
            level: "district",
            districts: []
          },
          {
            citycode: "0791",
            adcode: "360102",
            name: "东湖区",
            center: "115.903576,28.698787",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0792",
        adcode: "360400",
        name: "九江市",
        center: "115.95356,29.66116",
        level: "city",
        districts: [
          {
            citycode: "0792",
            adcode: "360404",
            name: "柴桑区",
            center: "115.911005,29.608775",
            level: "district",
            districts: []
          },
          {
            citycode: "0792",
            adcode: "360483",
            name: "庐山市",
            center: "116.045118,29.448225",
            level: "district",
            districts: []
          },
          {
            citycode: "0792",
            adcode: "360402",
            name: "濂溪区",
            center: "115.992735,29.668008",
            level: "district",
            districts: []
          },
          {
            citycode: "0792",
            adcode: "360425",
            name: "永修县",
            center: "115.83207,29.011392",
            level: "district",
            districts: []
          },
          {
            citycode: "0792",
            adcode: "360428",
            name: "都昌县",
            center: "116.203999,29.273803",
            level: "district",
            districts: []
          },
          {
            citycode: "0792",
            adcode: "360482",
            name: "共青城市",
            center: "115.784269,29.235082",
            level: "district",
            districts: []
          },
          {
            citycode: "0792",
            adcode: "360426",
            name: "德安县",
            center: "115.767114,29.298599",
            level: "district",
            districts: []
          },
          {
            citycode: "0792",
            adcode: "360481",
            name: "瑞昌市",
            center: "115.681221,29.676026",
            level: "district",
            districts: []
          },
          {
            citycode: "0792",
            adcode: "360430",
            name: "彭泽县",
            center: "116.563858,29.877404",
            level: "district",
            districts: []
          },
          {
            citycode: "0792",
            adcode: "360429",
            name: "湖口县",
            center: "116.252206,29.731194",
            level: "district",
            districts: []
          },
          {
            citycode: "0792",
            adcode: "360403",
            name: "浔阳区",
            center: "116.001677,29.70547",
            level: "district",
            districts: []
          },
          {
            citycode: "0792",
            adcode: "360423",
            name: "武宁县",
            center: "115.092649,29.246785",
            level: "district",
            districts: []
          },
          {
            citycode: "0792",
            adcode: "360424",
            name: "修水县",
            center: "114.546536,29.026166",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0798",
        adcode: "360200",
        name: "景德镇市",
        center: "117.184892,29.2744",
        level: "city",
        districts: [
          {
            citycode: "0798",
            adcode: "360222",
            name: "浮梁县",
            center: "117.214984,29.352493",
            level: "district",
            districts: []
          },
          {
            citycode: "0798",
            adcode: "360203",
            name: "珠山区",
            center: "117.271365,29.305191",
            level: "district",
            districts: []
          },
          {
            citycode: "0798",
            adcode: "360202",
            name: "昌江区",
            center: "117.182648,29.273683",
            level: "district",
            districts: []
          },
          {
            citycode: "0798",
            adcode: "360281",
            name: "乐平市",
            center: "117.151499,28.978521",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0701",
        adcode: "360600",
        name: "鹰潭市",
        center: "117.039532,28.272092",
        level: "city",
        districts: [
          {
            citycode: "0701",
            adcode: "360602",
            name: "月湖区",
            center: "117.10247,28.266999",
            level: "district",
            districts: []
          },
          {
            citycode: "0701",
            adcode: "360603",
            name: "余江区",
            center: "116.854576,28.199657",
            level: "district",
            districts: []
          },
          {
            citycode: "0701",
            adcode: "360681",
            name: "贵溪市",
            center: "117.245178,28.292397",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0796",
        adcode: "360800",
        name: "吉安市",
        center: "114.96681,27.091243",
        level: "city",
        districts: [
          {
            citycode: "0796",
            adcode: "360802",
            name: "吉州区",
            center: "114.994991,27.144204",
            level: "district",
            districts: []
          },
          {
            citycode: "0796",
            adcode: "360822",
            name: "吉水县",
            center: "115.135963,27.229697",
            level: "district",
            districts: []
          },
          {
            citycode: "0796",
            adcode: "360830",
            name: "永新县",
            center: "114.242425,26.945157",
            level: "district",
            districts: []
          },
          {
            citycode: "0796",
            adcode: "360825",
            name: "永丰县",
            center: "115.421599,27.317301",
            level: "district",
            districts: []
          },
          {
            citycode: "0796",
            adcode: "360803",
            name: "青原区",
            center: "115.014836,27.082012",
            level: "district",
            districts: []
          },
          {
            citycode: "0796",
            adcode: "360828",
            name: "万安县",
            center: "114.759746,26.456821",
            level: "district",
            districts: []
          },
          {
            citycode: "0796",
            adcode: "360829",
            name: "安福县",
            center: "114.619818,27.393286",
            level: "district",
            districts: []
          },
          {
            citycode: "0796",
            adcode: "360823",
            name: "峡江县",
            center: "115.316567,27.5829",
            level: "district",
            districts: []
          },
          {
            citycode: "0796",
            adcode: "360881",
            name: "井冈山市",
            center: "114.289563,26.748132",
            level: "district",
            districts: []
          },
          {
            citycode: "0796",
            adcode: "360824",
            name: "新干县",
            center: "115.386853,27.740368",
            level: "district",
            districts: []
          },
          {
            citycode: "0796",
            adcode: "360821",
            name: "吉安县",
            center: "114.908337,27.039866",
            level: "district",
            districts: []
          },
          {
            citycode: "0796",
            adcode: "360826",
            name: "泰和县",
            center: "114.922987,26.801687",
            level: "district",
            districts: []
          },
          {
            citycode: "0796",
            adcode: "360827",
            name: "遂川县",
            center: "114.520825,26.313413",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0797",
        adcode: "360700",
        name: "赣州市",
        center: "114.933494,25.831139",
        level: "city",
        districts: [
          {
            citycode: "0797",
            adcode: "360730",
            name: "宁都县",
            center: "116.009171,26.470865",
            level: "district",
            districts: []
          },
          {
            citycode: "0797",
            adcode: "360781",
            name: "瑞金市",
            center: "116.027114,25.88623",
            level: "district",
            districts: []
          },
          {
            citycode: "0797",
            adcode: "360735",
            name: "石城县",
            center: "116.347611,26.31491",
            level: "district",
            districts: []
          },
          {
            citycode: "0797",
            adcode: "360732",
            name: "兴国县",
            center: "115.363475,26.338129",
            level: "district",
            districts: []
          },
          {
            citycode: "0797",
            adcode: "360731",
            name: "于都县",
            center: "115.415145,25.952564",
            level: "district",
            districts: []
          },
          {
            citycode: "0797",
            adcode: "360734",
            name: "寻乌县",
            center: "115.638534,24.969513",
            level: "district",
            districts: []
          },
          {
            citycode: "0797",
            adcode: "360725",
            name: "崇义县",
            center: "114.308135,25.682278",
            level: "district",
            districts: []
          },
          {
            citycode: "0797",
            adcode: "360729",
            name: "全南县",
            center: "114.530148,24.742353",
            level: "district",
            districts: []
          },
          {
            citycode: "0797",
            adcode: "360783",
            name: "龙南市",
            center: "114.804474,24.901216",
            level: "district",
            districts: []
          },
          {
            citycode: "0797",
            adcode: "360733",
            name: "会昌县",
            center: "115.809271,25.58734",
            level: "district",
            districts: []
          },
          {
            citycode: "0797",
            adcode: "360726",
            name: "安远县",
            center: "115.393992,25.136855",
            level: "district",
            districts: []
          },
          {
            citycode: "0797",
            adcode: "360722",
            name: "信丰县",
            center: "114.922485,25.38676",
            level: "district",
            districts: []
          },
          {
            citycode: "0797",
            adcode: "360704",
            name: "赣县区",
            center: "115.021196,25.854496",
            level: "district",
            districts: []
          },
          {
            citycode: "0797",
            adcode: "360728",
            name: "定南县",
            center: "115.027908,24.783372",
            level: "district",
            districts: []
          },
          {
            citycode: "0797",
            adcode: "360724",
            name: "上犹县",
            center: "114.55177,25.784754",
            level: "district",
            districts: []
          },
          {
            citycode: "0797",
            adcode: "360702",
            name: "章贡区",
            center: "114.920426,25.818247",
            level: "district",
            districts: []
          },
          {
            citycode: "0797",
            adcode: "360723",
            name: "大余县",
            center: "114.362306,25.401968",
            level: "district",
            districts: []
          },
          {
            citycode: "0797",
            adcode: "360703",
            name: "南康区",
            center: "114.765044,25.661369",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0795",
        adcode: "360900",
        name: "宜春市",
        center: "114.416826,27.816245",
        level: "city",
        districts: [
          {
            citycode: "0795",
            adcode: "360981",
            name: "丰城市",
            center: "115.771131,28.160053",
            level: "district",
            districts: []
          },
          {
            citycode: "0795",
            adcode: "360922",
            name: "万载县",
            center: "114.445477,28.106201",
            level: "district",
            districts: []
          },
          {
            citycode: "0795",
            adcode: "360926",
            name: "铜鼓县",
            center: "114.354623,28.513291",
            level: "district",
            districts: []
          },
          {
            citycode: "0795",
            adcode: "360902",
            name: "袁州区",
            center: "114.42794,27.796344",
            level: "district",
            districts: []
          },
          {
            citycode: "0795",
            adcode: "360921",
            name: "奉新县",
            center: "115.400624,28.688254",
            level: "district",
            districts: []
          },
          {
            citycode: "0795",
            adcode: "360983",
            name: "高安市",
            center: "115.366863,28.448054",
            level: "district",
            districts: []
          },
          {
            citycode: "0795",
            adcode: "360982",
            name: "樟树市",
            center: "115.546174,28.054632",
            level: "district",
            districts: []
          },
          {
            citycode: "0795",
            adcode: "360925",
            name: "靖安县",
            center: "115.362635,28.861296",
            level: "district",
            districts: []
          },
          {
            citycode: "0795",
            adcode: "360924",
            name: "宜丰县",
            center: "114.803036,28.394466",
            level: "district",
            districts: []
          },
          {
            citycode: "0795",
            adcode: "360923",
            name: "上高县",
            center: "114.948045,28.238591",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0799",
        adcode: "360300",
        name: "萍乡市",
        center: "113.887147,27.658721",
        level: "city",
        districts: [
          {
            citycode: "0799",
            adcode: "360302",
            name: "安源区",
            center: "113.87072,27.615",
            level: "district",
            districts: []
          },
          {
            citycode: "0799",
            adcode: "360321",
            name: "莲花县",
            center: "113.961589,27.128498",
            level: "district",
            districts: []
          },
          {
            citycode: "0799",
            adcode: "360313",
            name: "湘东区",
            center: "113.733047,27.640075",
            level: "district",
            districts: []
          },
          {
            citycode: "0799",
            adcode: "360322",
            name: "上栗县",
            center: "113.795294,27.880221",
            level: "district",
            districts: []
          },
          {
            citycode: "0799",
            adcode: "360323",
            name: "芦溪县",
            center: "114.029351,27.631273",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0794",
        adcode: "361000",
        name: "抚州市",
        center: "116.358054,27.948979",
        level: "city",
        districts: [
          {
            citycode: "0794",
            adcode: "361028",
            name: "资溪县",
            center: "117.060332,27.706088",
            level: "district",
            districts: []
          },
          {
            citycode: "0794",
            adcode: "361003",
            name: "东乡区",
            center: "116.603159,28.249059",
            level: "district",
            districts: []
          },
          {
            citycode: "0794",
            adcode: "361024",
            name: "崇仁县",
            center: "116.076363,27.754416",
            level: "district",
            districts: []
          },
          {
            citycode: "0794",
            adcode: "361021",
            name: "南城县",
            center: "116.637228,27.570031",
            level: "district",
            districts: []
          },
          {
            citycode: "0794",
            adcode: "361026",
            name: "宜黄县",
            center: "116.236174,27.554744",
            level: "district",
            districts: []
          },
          {
            citycode: "0794",
            adcode: "361023",
            name: "南丰县",
            center: "116.525898,27.21845",
            level: "district",
            districts: []
          },
          {
            citycode: "0794",
            adcode: "361025",
            name: "乐安县",
            center: "115.83099,27.428682",
            level: "district",
            districts: []
          },
          {
            citycode: "0794",
            adcode: "361022",
            name: "黎川县",
            center: "116.907446,27.282729",
            level: "district",
            districts: []
          },
          {
            citycode: "0794",
            adcode: "361030",
            name: "广昌县",
            center: "116.336556,26.843974",
            level: "district",
            districts: []
          },
          {
            citycode: "0794",
            adcode: "361027",
            name: "金溪县",
            center: "116.755018,27.91973",
            level: "district",
            districts: []
          },
          {
            citycode: "0794",
            adcode: "361002",
            name: "临川区",
            center: "116.311932,27.935098",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0793",
        adcode: "361100",
        name: "上饶市",
        center: "117.943064,28.45513",
        level: "city",
        districts: [
          {
            citycode: "0793",
            adcode: "361125",
            name: "横峰县",
            center: "117.596433,28.407116",
            level: "district",
            districts: []
          },
          {
            citycode: "0793",
            adcode: "361130",
            name: "婺源县",
            center: "117.861532,29.248491",
            level: "district",
            districts: []
          },
          {
            citycode: "0793",
            adcode: "361123",
            name: "玉山县",
            center: "118.244736,28.681936",
            level: "district",
            districts: []
          },
          {
            citycode: "0793",
            adcode: "361127",
            name: "余干县",
            center: "116.695787,28.70283",
            level: "district",
            districts: []
          },
          {
            citycode: "0793",
            adcode: "361129",
            name: "万年县",
            center: "117.058445,28.694582",
            level: "district",
            districts: []
          },
          {
            citycode: "0793",
            adcode: "361181",
            name: "德兴市",
            center: "117.594549,28.930557",
            level: "district",
            districts: []
          },
          {
            citycode: "0793",
            adcode: "361124",
            name: "铅山县",
            center: "117.734742,28.298415",
            level: "district",
            districts: []
          },
          {
            citycode: "0793",
            adcode: "361103",
            name: "广丰区",
            center: "118.189729,28.463697",
            level: "district",
            districts: []
          },
          {
            citycode: "0793",
            adcode: "361126",
            name: "弋阳县",
            center: "117.449346,28.378039",
            level: "district",
            districts: []
          },
          {
            citycode: "0793",
            adcode: "361104",
            name: "广信区",
            center: "117.907454,28.448893",
            level: "district",
            districts: []
          },
          {
            citycode: "0793",
            adcode: "361102",
            name: "信州区",
            center: "117.965997,28.430694",
            level: "district",
            districts: []
          },
          {
            citycode: "0793",
            adcode: "361128",
            name: "鄱阳县",
            center: "116.703731,29.005675",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "140000",
    name: "山西省",
    center: "112.578781,37.813948",
    level: "province",
    districts: [
      {
        citycode: "0353",
        adcode: "140300",
        name: "阳泉市",
        center: "113.580426,37.857094",
        level: "city",
        districts: [
          {
            citycode: "0353",
            adcode: "140321",
            name: "平定县",
            center: "113.629777,37.804986",
            level: "district",
            districts: []
          },
          {
            citycode: "0353",
            adcode: "140322",
            name: "盂县",
            center: "113.412279,38.086041",
            level: "district",
            districts: []
          },
          {
            citycode: "0353",
            adcode: "140303",
            name: "矿区",
            center: "113.555279,37.868494",
            level: "district",
            districts: []
          },
          {
            citycode: "0353",
            adcode: "140311",
            name: "郊区",
            center: "113.593998,37.943703",
            level: "district",
            districts: []
          },
          {
            citycode: "0353",
            adcode: "140302",
            name: "城区",
            center: "113.600694,37.847457",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0355",
        adcode: "140400",
        name: "长治市",
        center: "113.117394,36.195142",
        level: "city",
        districts: [
          {
            citycode: "0355",
            adcode: "140425",
            name: "平顺县",
            center: "113.435859,36.20037",
            level: "district",
            districts: []
          },
          {
            citycode: "0355",
            adcode: "140430",
            name: "沁县",
            center: "112.699176,36.756152",
            level: "district",
            districts: []
          },
          {
            citycode: "0355",
            adcode: "140429",
            name: "武乡县",
            center: "112.86396,36.837865",
            level: "district",
            districts: []
          },
          {
            citycode: "0355",
            adcode: "140431",
            name: "沁源县",
            center: "112.337726,36.499989",
            level: "district",
            districts: []
          },
          {
            citycode: "0355",
            adcode: "140428",
            name: "长子县",
            center: "112.877922,36.122258",
            level: "district",
            districts: []
          },
          {
            citycode: "0355",
            adcode: "140405",
            name: "屯留区",
            center: "112.892301,36.3162",
            level: "district",
            districts: []
          },
          {
            citycode: "0355",
            adcode: "140423",
            name: "襄垣县",
            center: "113.051298,36.535629",
            level: "district",
            districts: []
          },
          {
            citycode: "0355",
            adcode: "140426",
            name: "黎城县",
            center: "113.387025,36.502258",
            level: "district",
            districts: []
          },
          {
            citycode: "0355",
            adcode: "140406",
            name: "潞城区",
            center: "113.228897,36.334597",
            level: "district",
            districts: []
          },
          {
            citycode: "0355",
            adcode: "140404",
            name: "上党区",
            center: "113.051416,36.053104",
            level: "district",
            districts: []
          },
          {
            citycode: "0355",
            adcode: "140403",
            name: "潞州区",
            center: "113.122725,36.203305",
            level: "district",
            districts: []
          },
          {
            citycode: "0355",
            adcode: "140427",
            name: "壶关县",
            center: "113.206836,36.115645",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0349",
        adcode: "140600",
        name: "朔州市",
        center: "112.432906,39.331734",
        level: "city",
        districts: [
          {
            citycode: "0349",
            adcode: "140623",
            name: "右玉县",
            center: "112.466926,39.989198",
            level: "district",
            districts: []
          },
          {
            citycode: "0349",
            adcode: "140622",
            name: "应县",
            center: "113.190952,39.554471",
            level: "district",
            districts: []
          },
          {
            citycode: "0349",
            adcode: "140681",
            name: "怀仁市",
            center: "113.133061,39.820522",
            level: "district",
            districts: []
          },
          {
            citycode: "0349",
            adcode: "140602",
            name: "朔城区",
            center: "112.432071,39.320196",
            level: "district",
            districts: []
          },
          {
            citycode: "0349",
            adcode: "140621",
            name: "山阴县",
            center: "112.816421,39.527445",
            level: "district",
            districts: []
          },
          {
            citycode: "0349",
            adcode: "140603",
            name: "平鲁区",
            center: "112.28827,39.512219",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0356",
        adcode: "140500",
        name: "晋城市",
        center: "112.852022,35.491315",
        level: "city",
        districts: [
          {
            citycode: "0356",
            adcode: "140502",
            name: "城区",
            center: "112.853452,35.50248",
            level: "district",
            districts: []
          },
          {
            citycode: "0356",
            adcode: "140525",
            name: "泽州县",
            center: "112.922243,35.507061",
            level: "district",
            districts: []
          },
          {
            citycode: "0356",
            adcode: "140581",
            name: "高平市",
            center: "112.923798,35.798775",
            level: "district",
            districts: []
          },
          {
            citycode: "0356",
            adcode: "140524",
            name: "陵川县",
            center: "113.280755,35.775239",
            level: "district",
            districts: []
          },
          {
            citycode: "0356",
            adcode: "140522",
            name: "阳城县",
            center: "112.414798,35.486275",
            level: "district",
            districts: []
          },
          {
            citycode: "0356",
            adcode: "140521",
            name: "沁水县",
            center: "112.186726,35.690119",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0350",
        adcode: "140900",
        name: "忻州市",
        center: "112.734149,38.415958",
        level: "city",
        districts: [
          {
            citycode: "0350",
            adcode: "140928",
            name: "五寨县",
            center: "111.846808,38.91111",
            level: "district",
            districts: []
          },
          {
            citycode: "0350",
            adcode: "140925",
            name: "宁武县",
            center: "112.304734,39.001498",
            level: "district",
            districts: []
          },
          {
            citycode: "0350",
            adcode: "140926",
            name: "静乐县",
            center: "111.939498,38.359306",
            level: "district",
            districts: []
          },
          {
            citycode: "0350",
            adcode: "140922",
            name: "五台县",
            center: "113.255419,38.728056",
            level: "district",
            districts: []
          },
          {
            citycode: "0350",
            adcode: "140929",
            name: "岢岚县",
            center: "111.572964,38.703989",
            level: "district",
            districts: []
          },
          {
            citycode: "0350",
            adcode: "140921",
            name: "定襄县",
            center: "112.957234,38.471725",
            level: "district",
            districts: []
          },
          {
            citycode: "0350",
            adcode: "140902",
            name: "忻府区",
            center: "112.746357,38.403498",
            level: "district",
            districts: []
          },
          {
            citycode: "0350",
            adcode: "140927",
            name: "神池县",
            center: "112.210997,39.091079",
            level: "district",
            districts: []
          },
          {
            citycode: "0350",
            adcode: "140924",
            name: "繁峙县",
            center: "113.265464,39.188835",
            level: "district",
            districts: []
          },
          {
            citycode: "0350",
            adcode: "140931",
            name: "保德县",
            center: "111.085944,39.022616",
            level: "district",
            districts: []
          },
          {
            citycode: "0350",
            adcode: "140930",
            name: "河曲县",
            center: "111.138247,39.38452",
            level: "district",
            districts: []
          },
          {
            citycode: "0350",
            adcode: "140981",
            name: "原平市",
            center: "112.711025,38.731412",
            level: "district",
            districts: []
          },
          {
            citycode: "0350",
            adcode: "140923",
            name: "代县",
            center: "112.960102,39.066831",
            level: "district",
            districts: []
          },
          {
            citycode: "0350",
            adcode: "140932",
            name: "偏关县",
            center: "111.508922,39.436917",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0358",
        adcode: "141100",
        name: "吕梁市",
        center: "111.14454,37.518996",
        level: "city",
        districts: [
          {
            citycode: "0358",
            adcode: "141128",
            name: "方山县",
            center: "111.244309,37.895017",
            level: "district",
            districts: []
          },
          {
            citycode: "0358",
            adcode: "141127",
            name: "岚县",
            center: "111.672156,38.279587",
            level: "district",
            districts: []
          },
          {
            citycode: "0358",
            adcode: "141129",
            name: "中阳县",
            center: "111.178841,37.357816",
            level: "district",
            districts: []
          },
          {
            citycode: "0358",
            adcode: "141130",
            name: "交口县",
            center: "111.181241,36.982205",
            level: "district",
            districts: []
          },
          {
            citycode: "0358",
            adcode: "141126",
            name: "石楼县",
            center: "110.834712,36.998461",
            level: "district",
            districts: []
          },
          {
            citycode: "0358",
            adcode: "141123",
            name: "兴县",
            center: "111.127486,38.461818",
            level: "district",
            districts: []
          },
          {
            citycode: "0358",
            adcode: "141122",
            name: "交城县",
            center: "112.155857,37.55169",
            level: "district",
            districts: []
          },
          {
            citycode: "0358",
            adcode: "141121",
            name: "文水县",
            center: "112.028866,37.438101",
            level: "district",
            districts: []
          },
          {
            citycode: "0358",
            adcode: "141182",
            name: "汾阳市",
            center: "111.770834,37.261493",
            level: "district",
            districts: []
          },
          {
            citycode: "0358",
            adcode: "141125",
            name: "柳林县",
            center: "110.888993,37.429816",
            level: "district",
            districts: []
          },
          {
            citycode: "0358",
            adcode: "141102",
            name: "离石区",
            center: "111.150325,37.517797",
            level: "district",
            districts: []
          },
          {
            citycode: "0358",
            adcode: "141124",
            name: "临县",
            center: "110.992712,37.951008",
            level: "district",
            districts: []
          },
          {
            citycode: "0358",
            adcode: "141181",
            name: "孝义市",
            center: "111.778935,37.146051",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0359",
        adcode: "140800",
        name: "运城市",
        center: "111.007051,35.02667",
        level: "city",
        districts: [
          {
            citycode: "0359",
            adcode: "140823",
            name: "闻喜县",
            center: "111.224485,35.356664",
            level: "district",
            districts: []
          },
          {
            citycode: "0359",
            adcode: "140822",
            name: "万荣县",
            center: "110.837957,35.415805",
            level: "district",
            districts: []
          },
          {
            citycode: "0359",
            adcode: "140829",
            name: "平陆县",
            center: "111.193957,34.829595",
            level: "district",
            districts: []
          },
          {
            citycode: "0359",
            adcode: "140802",
            name: "盐湖区",
            center: "110.998135,35.015549",
            level: "district",
            districts: []
          },
          {
            citycode: "0359",
            adcode: "140821",
            name: "临猗县",
            center: "110.774553,35.144406",
            level: "district",
            districts: []
          },
          {
            citycode: "0359",
            adcode: "140828",
            name: "夏县",
            center: "111.219946,35.140733",
            level: "district",
            districts: []
          },
          {
            citycode: "0359",
            adcode: "140827",
            name: "垣曲县",
            center: "111.670215,35.298297",
            level: "district",
            districts: []
          },
          {
            citycode: "0359",
            adcode: "140824",
            name: "稷山县",
            center: "110.983273,35.604515",
            level: "district",
            districts: []
          },
          {
            citycode: "0359",
            adcode: "140882",
            name: "河津市",
            center: "110.712032,35.596357",
            level: "district",
            districts: []
          },
          {
            citycode: "0359",
            adcode: "140881",
            name: "永济市",
            center: "110.447771,34.866499",
            level: "district",
            districts: []
          },
          {
            citycode: "0359",
            adcode: "140826",
            name: "绛县",
            center: "111.568849,35.491764",
            level: "district",
            districts: []
          },
          {
            citycode: "0359",
            adcode: "140830",
            name: "芮城县",
            center: "110.694418,34.694173",
            level: "district",
            districts: []
          },
          {
            citycode: "0359",
            adcode: "140825",
            name: "新绛县",
            center: "111.224767,35.616007",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0357",
        adcode: "141000",
        name: "临汾市",
        center: "111.51931,36.088581",
        level: "city",
        districts: [
          {
            citycode: "0357",
            adcode: "141030",
            name: "大宁县",
            center: "110.752914,36.465126",
            level: "district",
            districts: []
          },
          {
            citycode: "0357",
            adcode: "141028",
            name: "吉县",
            center: "110.680513,36.096833",
            level: "district",
            districts: []
          },
          {
            citycode: "0357",
            adcode: "141031",
            name: "隰县",
            center: "110.940752,36.693345",
            level: "district",
            districts: []
          },
          {
            citycode: "0357",
            adcode: "141026",
            name: "安泽县",
            center: "112.250242,36.147921",
            level: "district",
            districts: []
          },
          {
            citycode: "0357",
            adcode: "141025",
            name: "古县",
            center: "111.92031,36.266767",
            level: "district",
            districts: []
          },
          {
            citycode: "0357",
            adcode: "141032",
            name: "永和县",
            center: "110.631981,36.759524",
            level: "district",
            districts: []
          },
          {
            citycode: "0357",
            adcode: "141029",
            name: "乡宁县",
            center: "110.846585,35.970834",
            level: "district",
            districts: []
          },
          {
            citycode: "0357",
            adcode: "141033",
            name: "蒲县",
            center: "111.096457,36.41183",
            level: "district",
            districts: []
          },
          {
            citycode: "0357",
            adcode: "141002",
            name: "尧都区",
            center: "111.578797,36.082463",
            level: "district",
            districts: []
          },
          {
            citycode: "0357",
            adcode: "141027",
            name: "浮山县",
            center: "111.848883,35.968124",
            level: "district",
            districts: []
          },
          {
            citycode: "0357",
            adcode: "141021",
            name: "曲沃县",
            center: "111.475783,35.641883",
            level: "district",
            districts: []
          },
          {
            citycode: "0357",
            adcode: "141034",
            name: "汾西县",
            center: "111.563993,36.652833",
            level: "district",
            districts: []
          },
          {
            citycode: "0357",
            adcode: "141082",
            name: "霍州市",
            center: "111.755111,36.569046",
            level: "district",
            districts: []
          },
          {
            citycode: "0357",
            adcode: "141024",
            name: "洪洞县",
            center: "111.67571,36.254087",
            level: "district",
            districts: []
          },
          {
            citycode: "0357",
            adcode: "141022",
            name: "翼城县",
            center: "111.719048,35.739706",
            level: "district",
            districts: []
          },
          {
            citycode: "0357",
            adcode: "141081",
            name: "侯马市",
            center: "111.372002,35.619105",
            level: "district",
            districts: []
          },
          {
            citycode: "0357",
            adcode: "141023",
            name: "襄汾县",
            center: "111.441725,35.876293",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0352",
        adcode: "140200",
        name: "大同市",
        center: "113.366749,40.09711",
        level: "city",
        districts: [
          {
            citycode: "0352",
            adcode: "140225",
            name: "浑源县",
            center: "113.69183,39.706485",
            level: "district",
            districts: []
          },
          {
            citycode: "0352",
            adcode: "140223",
            name: "广灵县",
            center: "114.282703,39.760404",
            level: "district",
            districts: []
          },
          {
            citycode: "0352",
            adcode: "140221",
            name: "阳高县",
            center: "113.748944,40.361059",
            level: "district",
            districts: []
          },
          {
            citycode: "0352",
            adcode: "140215",
            name: "云州区",
            center: "113.612496,40.040156",
            level: "district",
            districts: []
          },
          {
            citycode: "0352",
            adcode: "140226",
            name: "左云县",
            center: "112.703008,40.013442",
            level: "district",
            districts: []
          },
          {
            citycode: "0352",
            adcode: "140224",
            name: "灵丘县",
            center: "114.234452,39.442459",
            level: "district",
            districts: []
          },
          {
            citycode: "0352",
            adcode: "140214",
            name: "云冈区",
            center: "113.149604,40.005383",
            level: "district",
            districts: []
          },
          {
            citycode: "0352",
            adcode: "140222",
            name: "天镇县",
            center: "114.090871,40.42087",
            level: "district",
            districts: []
          },
          {
            citycode: "0352",
            adcode: "140212",
            name: "新荣区",
            center: "113.139628,40.256355",
            level: "district",
            districts: []
          },
          {
            citycode: "0352",
            adcode: "140213",
            name: "平城区",
            center: "113.298011,40.075246",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0354",
        adcode: "140700",
        name: "晋中市",
        center: "112.752633,37.688006",
        level: "city",
        districts: [
          {
            citycode: "0354",
            adcode: "140724",
            name: "昔阳县",
            center: "113.707151,37.612577",
            level: "district",
            districts: []
          },
          {
            citycode: "0354",
            adcode: "140723",
            name: "和顺县",
            center: "113.570295,37.329696",
            level: "district",
            districts: []
          },
          {
            citycode: "0354",
            adcode: "140725",
            name: "寿阳县",
            center: "113.176373,37.895191",
            level: "district",
            districts: []
          },
          {
            citycode: "0354",
            adcode: "140722",
            name: "左权县",
            center: "113.379412,37.082746",
            level: "district",
            districts: []
          },
          {
            citycode: "0354",
            adcode: "140721",
            name: "榆社县",
            center: "112.975378,37.071209",
            level: "district",
            districts: []
          },
          {
            citycode: "0354",
            adcode: "140729",
            name: "灵石县",
            center: "111.778692,36.848085",
            level: "district",
            districts: []
          },
          {
            citycode: "0354",
            adcode: "140727",
            name: "祁县",
            center: "112.335226,37.358425",
            level: "district",
            districts: []
          },
          {
            citycode: "0354",
            adcode: "140728",
            name: "平遥县",
            center: "112.175825,37.189614",
            level: "district",
            districts: []
          },
          {
            citycode: "0354",
            adcode: "140703",
            name: "太谷区",
            center: "112.551297,37.421392",
            level: "district",
            districts: []
          },
          {
            citycode: "0354",
            adcode: "140781",
            name: "介休市",
            center: "111.916451,37.027538",
            level: "district",
            districts: []
          },
          {
            citycode: "0354",
            adcode: "140702",
            name: "榆次区",
            center: "112.707564,37.698637",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0351",
        adcode: "140100",
        name: "太原市",
        center: "112.549656,37.870451",
        level: "city",
        districts: [
          {
            citycode: "0351",
            adcode: "140123",
            name: "娄烦县",
            center: "111.79715,38.067569",
            level: "district",
            districts: []
          },
          {
            citycode: "0351",
            adcode: "140122",
            name: "阳曲县",
            center: "112.67292,38.058511",
            level: "district",
            districts: []
          },
          {
            citycode: "0351",
            adcode: "140181",
            name: "古交市",
            center: "112.175034,37.907414",
            level: "district",
            districts: []
          },
          {
            citycode: "0351",
            adcode: "140121",
            name: "清徐县",
            center: "112.359367,37.608751",
            level: "district",
            districts: []
          },
          {
            citycode: "0351",
            adcode: "140108",
            name: "尖草坪区",
            center: "112.486141,37.940052",
            level: "district",
            districts: []
          },
          {
            citycode: "0351",
            adcode: "140107",
            name: "杏花岭区",
            center: "112.570412,37.894241",
            level: "district",
            districts: []
          },
          {
            citycode: "0351",
            adcode: "140109",
            name: "万柏林区",
            center: "112.515638,37.859738",
            level: "district",
            districts: []
          },
          {
            citycode: "0351",
            adcode: "140110",
            name: "晋源区",
            center: "112.477869,37.715519",
            level: "district",
            districts: []
          },
          {
            citycode: "0351",
            adcode: "140105",
            name: "小店区",
            center: "112.565524,37.736865",
            level: "district",
            districts: []
          },
          {
            citycode: "0351",
            adcode: "140106",
            name: "迎泽区",
            center: "112.563373,37.863308",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: "010",
    adcode: "110000",
    name: "北京市",
    center: "116.407387,39.904179",
    level: "province",
    districts: [
      {
        citycode: "010",
        adcode: "110100",
        name: "北京城区",
        center: "116.405285,39.904989",
        level: "city",
        districts: [
          {
            citycode: "010",
            adcode: "110116",
            name: "怀柔区",
            center: "116.631974,40.317003",
            level: "district",
            districts: []
          },
          {
            citycode: "010",
            adcode: "110109",
            name: "门头沟区",
            center: "116.101668,39.940842",
            level: "district",
            districts: []
          },
          {
            citycode: "010",
            adcode: "110117",
            name: "平谷区",
            center: "117.121589,40.140805",
            level: "district",
            districts: []
          },
          {
            citycode: "010",
            adcode: "110118",
            name: "密云区",
            center: "116.843351,40.377058",
            level: "district",
            districts: []
          },
          {
            citycode: "010",
            adcode: "110107",
            name: "石景山区",
            center: "116.223015,39.906304",
            level: "district",
            districts: []
          },
          {
            citycode: "010",
            adcode: "110102",
            name: "西城区",
            center: "116.36585,39.9126",
            level: "district",
            districts: []
          },
          {
            citycode: "010",
            adcode: "110115",
            name: "大兴区",
            center: "116.341483,39.726917",
            level: "district",
            districts: []
          },
          {
            citycode: "010",
            adcode: "110101",
            name: "东城区",
            center: "116.416334,39.928359",
            level: "district",
            districts: []
          },
          {
            citycode: "010",
            adcode: "110108",
            name: "海淀区",
            center: "116.2977,39.959893",
            level: "district",
            districts: []
          },
          {
            citycode: "010",
            adcode: "110113",
            name: "顺义区",
            center: "116.661474,40.149891",
            level: "district",
            districts: []
          },
          {
            citycode: "010",
            adcode: "110114",
            name: "昌平区",
            center: "116.231034,40.220952",
            level: "district",
            districts: []
          },
          {
            citycode: "010",
            adcode: "110105",
            name: "朝阳区",
            center: "116.443136,39.921444",
            level: "district",
            districts: []
          },
          {
            citycode: "010",
            adcode: "110119",
            name: "延庆区",
            center: "115.974609,40.457033",
            level: "district",
            districts: []
          },
          {
            citycode: "010",
            adcode: "110112",
            name: "通州区",
            center: "116.72923,39.916403",
            level: "district",
            districts: []
          },
          {
            citycode: "010",
            adcode: "110106",
            name: "丰台区",
            center: "116.286726,39.858538",
            level: "district",
            districts: []
          },
          {
            citycode: "010",
            adcode: "110111",
            name: "房山区",
            center: "116.143426,39.748889",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "540000",
    name: "西藏自治区",
    center: "91.117449,29.648694",
    level: "province",
    districts: [
      {
        citycode: "0895",
        adcode: "540300",
        name: "昌都市",
        center: "97.170425,31.142879",
        level: "city",
        districts: [
          {
            citycode: "0895",
            adcode: "540321",
            name: "江达县",
            center: "98.218336,31.499176",
            level: "district",
            districts: []
          },
          {
            citycode: "0895",
            adcode: "540324",
            name: "丁青县",
            center: "95.619868,31.409024",
            level: "district",
            districts: []
          },
          {
            citycode: "0895",
            adcode: "540323",
            name: "类乌齐县",
            center: "96.600246,31.211601",
            level: "district",
            districts: []
          },
          {
            citycode: "0895",
            adcode: "540302",
            name: "卡若区",
            center: "97.196021,31.112087",
            level: "district",
            districts: []
          },
          {
            citycode: "0895",
            adcode: "540329",
            name: "洛隆县",
            center: "95.825169,30.741988",
            level: "district",
            districts: []
          },
          {
            citycode: "0895",
            adcode: "540330",
            name: "边坝县",
            center: "94.7078,30.933652",
            level: "district",
            districts: []
          },
          {
            citycode: "0895",
            adcode: "540322",
            name: "贡觉县",
            center: "98.27097,30.860099",
            level: "district",
            districts: []
          },
          {
            citycode: "0895",
            adcode: "540325",
            name: "察雅县",
            center: "97.568752,30.653943",
            level: "district",
            districts: []
          },
          {
            citycode: "0895",
            adcode: "540326",
            name: "八宿县",
            center: "96.917836,30.053209",
            level: "district",
            districts: []
          },
          {
            citycode: "0895",
            adcode: "540327",
            name: "左贡县",
            center: "97.841176,29.671488",
            level: "district",
            districts: []
          },
          {
            citycode: "0895",
            adcode: "540328",
            name: "芒康县",
            center: "98.593493,29.679957",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0896",
        adcode: "540600",
        name: "那曲市",
        center: "92.05151,31.477905",
        level: "city",
        districts: [
          {
            citycode: "0896",
            adcode: "540624",
            name: "安多县",
            center: "91.68195,32.265016",
            level: "district",
            districts: []
          },
          {
            citycode: "0896",
            adcode: "540623",
            name: "聂荣县",
            center: "92.303377,32.10775",
            level: "district",
            districts: []
          },
          {
            citycode: "0896",
            adcode: "540628",
            name: "巴青县",
            center: "94.053438,31.91847",
            level: "district",
            districts: []
          },
          {
            citycode: "0896",
            adcode: "540625",
            name: "申扎县",
            center: "88.709936,30.93045",
            level: "district",
            districts: []
          },
          {
            citycode: "0896",
            adcode: "540627",
            name: "班戈县",
            center: "90.009822,31.392157",
            level: "district",
            districts: []
          },
          {
            citycode: "0896",
            adcode: "540622",
            name: "比如县",
            center: "93.681302,31.477914",
            level: "district",
            districts: []
          },
          {
            citycode: "0896",
            adcode: "540626",
            name: "索县",
            center: "93.785068,31.888045",
            level: "district",
            districts: []
          },
          {
            citycode: "0896",
            adcode: "540602",
            name: "色尼区",
            center: "92.053498,31.469645",
            level: "district",
            districts: []
          },
          {
            citycode: "0896",
            adcode: "540621",
            name: "嘉黎县",
            center: "93.232347,30.641543",
            level: "district",
            districts: []
          },
          {
            citycode: "0896",
            adcode: "540629",
            name: "尼玛县",
            center: "87.236772,31.784701",
            level: "district",
            districts: []
          },
          {
            citycode: "0896",
            adcode: "540630",
            name: "双湖县",
            center: "88.838017,33.188355",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0891",
        adcode: "540100",
        name: "拉萨市",
        center: "91.171924,29.653491",
        level: "city",
        districts: [
          {
            citycode: "0891",
            adcode: "540122",
            name: "当雄县",
            center: "91.101186,30.473134",
            level: "district",
            districts: []
          },
          {
            citycode: "0891",
            adcode: "540121",
            name: "林周县",
            center: "91.265287,29.893545",
            level: "district",
            districts: []
          },
          {
            citycode: "0891",
            adcode: "540127",
            name: "墨竹工卡县",
            center: "91.739134,29.850344",
            level: "district",
            districts: []
          },
          {
            citycode: "0891",
            adcode: "540104",
            name: "达孜区",
            center: "91.349503,29.670173",
            level: "district",
            districts: []
          },
          {
            citycode: "0891",
            adcode: "540102",
            name: "城关区",
            center: "91.140368,29.654813",
            level: "district",
            districts: []
          },
          {
            citycode: "0891",
            adcode: "540103",
            name: "堆龙德庆区",
            center: "91.002866,29.646815",
            level: "district",
            districts: []
          },
          {
            citycode: "0891",
            adcode: "540123",
            name: "尼木县",
            center: "90.16446,29.43202",
            level: "district",
            districts: []
          },
          {
            citycode: "0891",
            adcode: "540124",
            name: "曲水县",
            center: "90.743355,29.354293",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0892",
        adcode: "540200",
        name: "日喀则市",
        center: "88.880423,29.266838",
        level: "city",
        districts: [
          {
            citycode: "0892",
            adcode: "540232",
            name: "仲巴县",
            center: "84.03153,29.770279",
            level: "district",
            districts: []
          },
          {
            citycode: "0892",
            adcode: "540226",
            name: "昂仁县",
            center: "87.227739,29.299444",
            level: "district",
            districts: []
          },
          {
            citycode: "0892",
            adcode: "540227",
            name: "谢通门县",
            center: "88.255784,29.425455",
            level: "district",
            districts: []
          },
          {
            citycode: "0892",
            adcode: "540221",
            name: "南木林县",
            center: "89.099243,29.682331",
            level: "district",
            districts: []
          },
          {
            citycode: "0892",
            adcode: "540236",
            name: "萨嘎县",
            center: "85.232941,29.328818",
            level: "district",
            districts: []
          },
          {
            citycode: "0892",
            adcode: "540202",
            name: "桑珠孜区",
            center: "88.898503,29.247726",
            level: "district",
            districts: []
          },
          {
            citycode: "0892",
            adcode: "540225",
            name: "拉孜县",
            center: "87.636934,29.08188",
            level: "district",
            districts: []
          },
          {
            citycode: "0892",
            adcode: "540229",
            name: "仁布县",
            center: "89.841983,29.230933",
            level: "district",
            districts: []
          },
          {
            citycode: "0892",
            adcode: "540224",
            name: "萨迦县",
            center: "88.021674,28.899664",
            level: "district",
            districts: []
          },
          {
            citycode: "0892",
            adcode: "540234",
            name: "吉隆县",
            center: "85.298109,28.856542",
            level: "district",
            districts: []
          },
          {
            citycode: "0892",
            adcode: "540228",
            name: "白朗县",
            center: "89.261977,29.107688",
            level: "district",
            districts: []
          },
          {
            citycode: "0892",
            adcode: "540222",
            name: "江孜县",
            center: "89.605654,28.91186",
            level: "district",
            districts: []
          },
          {
            citycode: "0892",
            adcode: "540235",
            name: "聂拉木县",
            center: "85.982237,28.155186",
            level: "district",
            districts: []
          },
          {
            citycode: "0892",
            adcode: "540223",
            name: "定日县",
            center: "87.12612,28.658743",
            level: "district",
            districts: []
          },
          {
            citycode: "0892",
            adcode: "540230",
            name: "康马县",
            center: "89.681663,28.555627",
            level: "district",
            districts: []
          },
          {
            citycode: "0892",
            adcode: "540237",
            name: "岗巴县",
            center: "88.515318,28.271189",
            level: "district",
            districts: []
          },
          {
            citycode: "0892",
            adcode: "540233",
            name: "亚东县",
            center: "88.907136,27.486094",
            level: "district",
            districts: []
          },
          {
            citycode: "0892",
            adcode: "540231",
            name: "定结县",
            center: "87.765872,28.364159",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0893",
        adcode: "540500",
        name: "山南市",
        center: "91.771426,29.237722",
        level: "city",
        districts: [
          {
            citycode: "0893",
            adcode: "540523",
            name: "桑日县",
            center: "92.017723,29.259439",
            level: "district",
            districts: []
          },
          {
            citycode: "0893",
            adcode: "540528",
            name: "加查县",
            center: "92.592701,29.140355",
            level: "district",
            districts: []
          },
          {
            citycode: "0893",
            adcode: "540522",
            name: "贡嘎县",
            center: "90.978425,29.290169",
            level: "district",
            districts: []
          },
          {
            citycode: "0893",
            adcode: "540502",
            name: "乃东区",
            center: "91.761538,29.224904",
            level: "district",
            districts: []
          },
          {
            citycode: "0893",
            adcode: "540521",
            name: "扎囊县",
            center: "91.33725,29.245113",
            level: "district",
            districts: []
          },
          {
            citycode: "0893",
            adcode: "540526",
            name: "措美县",
            center: "91.433509,28.438202",
            level: "district",
            districts: []
          },
          {
            citycode: "0893",
            adcode: "540524",
            name: "琼结县",
            center: "91.684307,29.024492",
            level: "district",
            districts: []
          },
          {
            citycode: "0893",
            adcode: "540531",
            name: "浪卡子县",
            center: "90.400251,28.96693",
            level: "district",
            districts: []
          },
          {
            citycode: "0893",
            adcode: "540525",
            name: "曲松县",
            center: "92.203738,29.062826",
            level: "district",
            districts: []
          },
          {
            citycode: "0893",
            adcode: "540527",
            name: "洛扎县",
            center: "90.859971,28.385811",
            level: "district",
            districts: []
          },
          {
            citycode: "0893",
            adcode: "540529",
            name: "隆子县",
            center: "92.463309,28.408548",
            level: "district",
            districts: []
          },
          {
            citycode: "0893",
            adcode: "540530",
            name: "错那县",
            center: "91.957155,27.991121",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0894",
        adcode: "540400",
        name: "林芝市",
        center: "94.361436,29.64875",
        level: "city",
        districts: [
          {
            citycode: "0894",
            adcode: "540421",
            name: "工布江达县",
            center: "93.246077,29.88528",
            level: "district",
            districts: []
          },
          {
            citycode: "0894",
            adcode: "540424",
            name: "波密县",
            center: "95.768439,29.859751",
            level: "district",
            districts: []
          },
          {
            citycode: "0894",
            adcode: "540423",
            name: "墨脱县",
            center: "95.332108,29.325425",
            level: "district",
            districts: []
          },
          {
            citycode: "0894",
            adcode: "540402",
            name: "巴宜区",
            center: "94.361094,29.636576",
            level: "district",
            districts: []
          },
          {
            citycode: "0894",
            adcode: "540422",
            name: "米林县",
            center: "94.213059,29.215971",
            level: "district",
            districts: []
          },
          {
            citycode: "0894",
            adcode: "540426",
            name: "朗县",
            center: "93.074702,29.046337",
            level: "district",
            districts: []
          },
          {
            citycode: "0894",
            adcode: "540425",
            name: "察隅县",
            center: "97.466919,28.66128",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0897",
        adcode: "542500",
        name: "阿里地区",
        center: "80.105786,32.500987",
        level: "city",
        districts: [
          {
            citycode: "0897",
            adcode: "542526",
            name: "改则县",
            center: "84.062612,32.303148",
            level: "district",
            districts: []
          },
          {
            citycode: "0897",
            adcode: "542522",
            name: "札达县",
            center: "79.807096,31.479882",
            level: "district",
            districts: []
          },
          {
            citycode: "0897",
            adcode: "542527",
            name: "措勤县",
            center: "85.151881,31.017272",
            level: "district",
            districts: []
          },
          {
            citycode: "0897",
            adcode: "542521",
            name: "普兰县",
            center: "81.177116,30.290467",
            level: "district",
            districts: []
          },
          {
            citycode: "0897",
            adcode: "542524",
            name: "日土县",
            center: "79.733552,33.382017",
            level: "district",
            districts: []
          },
          {
            citycode: "0897",
            adcode: "542523",
            name: "噶尔县",
            center: "80.096591,32.492078",
            level: "district",
            districts: []
          },
          {
            citycode: "0897",
            adcode: "542525",
            name: "革吉县",
            center: "81.145433,32.387233",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "220000",
    name: "吉林省",
    center: "125.325802,43.896942",
    level: "province",
    districts: [
      {
        citycode: "0432",
        adcode: "220200",
        name: "吉林市",
        center: "126.549719,43.838132",
        level: "city",
        districts: [
          {
            citycode: "0432",
            adcode: "220283",
            name: "舒兰市",
            center: "126.965515,44.405922",
            level: "district",
            districts: []
          },
          {
            citycode: "0432",
            adcode: "220282",
            name: "桦甸市",
            center: "126.746245,42.972272",
            level: "district",
            districts: []
          },
          {
            citycode: "0432",
            adcode: "220281",
            name: "蛟河市",
            center: "127.344773,43.72382",
            level: "district",
            districts: []
          },
          {
            citycode: "0432",
            adcode: "220221",
            name: "永吉县",
            center: "126.497899,43.672198",
            level: "district",
            districts: []
          },
          {
            citycode: "0432",
            adcode: "220284",
            name: "磐石市",
            center: "126.060328,42.946608",
            level: "district",
            districts: []
          },
          {
            citycode: "0432",
            adcode: "220203",
            name: "龙潭区",
            center: "126.562131,43.910743",
            level: "district",
            districts: []
          },
          {
            citycode: "0432",
            adcode: "220211",
            name: "丰满区",
            center: "126.561351,43.821192",
            level: "district",
            districts: []
          },
          {
            citycode: "0432",
            adcode: "220202",
            name: "昌邑区",
            center: "126.574414,43.881896",
            level: "district",
            districts: []
          },
          {
            citycode: "0432",
            adcode: "220204",
            name: "船营区",
            center: "126.540909,43.833806",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0431",
        adcode: "220100",
        name: "长春市",
        center: "125.323643,43.816996",
        level: "city",
        districts: [
          {
            citycode: "0431",
            adcode: "220183",
            name: "德惠市",
            center: "125.728552,44.521788",
            level: "district",
            districts: []
          },
          {
            citycode: "0431",
            adcode: "220182",
            name: "榆树市",
            center: "126.533126,44.840263",
            level: "district",
            districts: []
          },
          {
            citycode: "0431",
            adcode: "220112",
            name: "双阳区",
            center: "125.664583,43.525367",
            level: "district",
            districts: []
          },
          {
            citycode: "0431",
            adcode: "220122",
            name: "农安县",
            center: "125.184921,44.432829",
            level: "district",
            districts: []
          },
          {
            citycode: "0431",
            adcode: "220113",
            name: "九台区",
            center: "125.839549,44.151672",
            level: "district",
            districts: []
          },
          {
            citycode: "0431",
            adcode: "220105",
            name: "二道区",
            center: "125.37419,43.865912",
            level: "district",
            districts: []
          },
          {
            citycode: "0431",
            adcode: "220103",
            name: "宽城区",
            center: "125.326614,43.943522",
            level: "district",
            districts: []
          },
          {
            citycode: "0431",
            adcode: "220102",
            name: "南关区",
            center: "125.350341,43.86382",
            level: "district",
            districts: []
          },
          {
            citycode: "0431",
            adcode: "220184",
            name: "公主岭市",
            center: "124.79379,43.495116",
            level: "district",
            districts: []
          },
          {
            citycode: "0431",
            adcode: "220106",
            name: "绿园区",
            center: "125.256214,43.881047",
            level: "district",
            districts: []
          },
          {
            citycode: "0431",
            adcode: "220104",
            name: "朝阳区",
            center: "125.288168,43.833845",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0436",
        adcode: "220800",
        name: "白城市",
        center: "122.838102,45.620131",
        level: "city",
        districts: [
          {
            citycode: "0436",
            adcode: "220881",
            name: "洮南市",
            center: "122.79845,45.356849",
            level: "district",
            districts: []
          },
          {
            citycode: "0436",
            adcode: "220882",
            name: "大安市",
            center: "124.291032,45.507004",
            level: "district",
            districts: []
          },
          {
            citycode: "0436",
            adcode: "220822",
            name: "通榆县",
            center: "123.088093,44.812912",
            level: "district",
            districts: []
          },
          {
            citycode: "0436",
            adcode: "220802",
            name: "洮北区",
            center: "122.851105,45.621545",
            level: "district",
            districts: []
          },
          {
            citycode: "0436",
            adcode: "220821",
            name: "镇赉县",
            center: "123.19967,45.848195",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0437",
        adcode: "220400",
        name: "辽源市",
        center: "125.144676,42.887961",
        level: "city",
        districts: [
          {
            citycode: "0437",
            adcode: "220403",
            name: "西安区",
            center: "125.149488,42.927252",
            level: "district",
            districts: []
          },
          {
            citycode: "0437",
            adcode: "220421",
            name: "东丰县",
            center: "125.53096,42.677253",
            level: "district",
            districts: []
          },
          {
            citycode: "0437",
            adcode: "220402",
            name: "龙山区",
            center: "125.13703,42.902194",
            level: "district",
            districts: []
          },
          {
            citycode: "0437",
            adcode: "220422",
            name: "东辽县",
            center: "124.991045,42.925636",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0435",
        adcode: "220500",
        name: "通化市",
        center: "125.939721,41.728312",
        level: "city",
        districts: [
          {
            citycode: "0435",
            adcode: "220502",
            name: "东昌区",
            center: "125.927187,41.702872",
            level: "district",
            districts: []
          },
          {
            citycode: "0435",
            adcode: "220503",
            name: "二道江区",
            center: "126.042546,41.773989",
            level: "district",
            districts: []
          },
          {
            citycode: "0435",
            adcode: "220521",
            name: "通化县",
            center: "125.758927,41.680135",
            level: "district",
            districts: []
          },
          {
            citycode: "0435",
            adcode: "220524",
            name: "柳河县",
            center: "125.744654,42.284594",
            level: "district",
            districts: []
          },
          {
            citycode: "0435",
            adcode: "220523",
            name: "辉南县",
            center: "126.046006,42.684706",
            level: "district",
            districts: []
          },
          {
            citycode: "0435",
            adcode: "220582",
            name: "集安市",
            center: "126.193172,41.125805",
            level: "district",
            districts: []
          },
          {
            citycode: "0435",
            adcode: "220581",
            name: "梅河口市",
            center: "125.711129,42.539183",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0438",
        adcode: "220700",
        name: "松原市",
        center: "124.825321,45.14191",
        level: "city",
        districts: [
          {
            citycode: "0438",
            adcode: "220721",
            name: "前郭尔罗斯蒙古族自治县",
            center: "124.823417,45.118061",
            level: "district",
            districts: []
          },
          {
            citycode: "0438",
            adcode: "220723",
            name: "乾安县",
            center: "124.040651,45.003539",
            level: "district",
            districts: []
          },
          {
            citycode: "0438",
            adcode: "220722",
            name: "长岭县",
            center: "123.967244,44.276293",
            level: "district",
            districts: []
          },
          {
            citycode: "0438",
            adcode: "220702",
            name: "宁江区",
            center: "124.792839,45.186486",
            level: "district",
            districts: []
          },
          {
            citycode: "0438",
            adcode: "220781",
            name: "扶余市",
            center: "126.049534,44.989057",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "1433",
        adcode: "222400",
        name: "延边朝鲜族自治州",
        center: "129.470605,42.909426",
        level: "city",
        districts: [
          {
            citycode: "1433",
            adcode: "222404",
            name: "珲春市",
            center: "130.365829,42.862551",
            level: "district",
            districts: []
          },
          {
            citycode: "1433",
            adcode: "222402",
            name: "图们市",
            center: "129.843807,42.968039",
            level: "district",
            districts: []
          },
          {
            citycode: "1433",
            adcode: "222406",
            name: "和龙市",
            center: "129.010932,42.546434",
            level: "district",
            districts: []
          },
          {
            citycode: "1433",
            adcode: "222424",
            name: "汪清县",
            center: "129.785137,43.317215",
            level: "district",
            districts: []
          },
          {
            citycode: "1433",
            adcode: "222401",
            name: "延吉市",
            center: "129.507655,42.891034",
            level: "district",
            districts: []
          },
          {
            citycode: "1433",
            adcode: "222426",
            name: "安图县",
            center: "128.899744,43.111978",
            level: "district",
            districts: []
          },
          {
            citycode: "1433",
            adcode: "222403",
            name: "敦化市",
            center: "128.232235,43.372669",
            level: "district",
            districts: []
          },
          {
            citycode: "1433",
            adcode: "222405",
            name: "龙井市",
            center: "129.426529,42.767172",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0434",
        adcode: "220300",
        name: "四平市",
        center: "124.350599,43.166764",
        level: "city",
        districts: [
          {
            citycode: "0434",
            adcode: "220303",
            name: "铁东区",
            center: "124.409852,43.162664",
            level: "district",
            districts: []
          },
          {
            citycode: "0434",
            adcode: "220323",
            name: "伊通满族自治县",
            center: "125.305393,43.345754",
            level: "district",
            districts: []
          },
          {
            citycode: "0434",
            adcode: "220302",
            name: "铁西区",
            center: "124.345994,43.146288",
            level: "district",
            districts: []
          },
          {
            citycode: "0434",
            adcode: "220322",
            name: "梨树县",
            center: "124.335389,43.30706",
            level: "district",
            districts: []
          },
          {
            citycode: "0434",
            adcode: "220382",
            name: "双辽市",
            center: "123.502398,43.518301",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0439",
        adcode: "220600",
        name: "白山市",
        center: "126.414274,41.944132",
        level: "city",
        districts: [
          {
            citycode: "0439",
            adcode: "220622",
            name: "靖宇县",
            center: "126.813262,42.388902",
            level: "district",
            districts: []
          },
          {
            citycode: "0439",
            adcode: "220605",
            name: "江源区",
            center: "126.591178,42.056747",
            level: "district",
            districts: []
          },
          {
            citycode: "0439",
            adcode: "220621",
            name: "抚松县",
            center: "127.449387,42.221038",
            level: "district",
            districts: []
          },
          {
            citycode: "0439",
            adcode: "220602",
            name: "浑江区",
            center: "126.416093,41.945409",
            level: "district",
            districts: []
          },
          {
            citycode: "0439",
            adcode: "220623",
            name: "长白朝鲜族自治县",
            center: "128.20066,41.420253",
            level: "district",
            districts: []
          },
          {
            citycode: "0439",
            adcode: "220681",
            name: "临江市",
            center: "126.918086,41.811979",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  },
  {
    citycode: [],
    adcode: "530000",
    name: "云南省",
    center: "102.709372,25.046432",
    level: "province",
    districts: [
      {
        citycode: "0870",
        adcode: "530600",
        name: "昭通市",
        center: "103.717078,27.338185",
        level: "city",
        districts: [
          {
            citycode: "0870",
            adcode: "530626",
            name: "绥江县",
            center: "103.968995,28.592119",
            level: "district",
            districts: []
          },
          {
            citycode: "0870",
            adcode: "530681",
            name: "水富市",
            center: "104.415964,28.629951",
            level: "district",
            districts: []
          },
          {
            citycode: "0870",
            adcode: "530625",
            name: "永善县",
            center: "103.63756,28.229018",
            level: "district",
            districts: []
          },
          {
            citycode: "0870",
            adcode: "530624",
            name: "大关县",
            center: "103.891164,27.748054",
            level: "district",
            districts: []
          },
          {
            citycode: "0870",
            adcode: "530629",
            name: "威信县",
            center: "105.049012,27.846839",
            level: "district",
            districts: []
          },
          {
            citycode: "0870",
            adcode: "530622",
            name: "巧家县",
            center: "102.935343,26.896904",
            level: "district",
            districts: []
          },
          {
            citycode: "0870",
            adcode: "530628",
            name: "彝良县",
            center: "104.055991,27.624277",
            level: "district",
            districts: []
          },
          {
            citycode: "0870",
            adcode: "530602",
            name: "昭阳区",
            center: "103.706323,27.320035",
            level: "district",
            districts: []
          },
          {
            citycode: "0870",
            adcode: "530621",
            name: "鲁甸县",
            center: "103.557969,27.186668",
            level: "district",
            districts: []
          },
          {
            citycode: "0870",
            adcode: "530623",
            name: "盐津县",
            center: "104.234458,28.108475",
            level: "district",
            districts: []
          },
          {
            citycode: "0870",
            adcode: "530627",
            name: "镇雄县",
            center: "104.873486,27.441527",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0874",
        adcode: "530300",
        name: "曲靖市",
        center: "103.796288,25.490866",
        level: "city",
        districts: [
          {
            citycode: "0874",
            adcode: "530326",
            name: "会泽县",
            center: "103.297155,26.417116",
            level: "district",
            districts: []
          },
          {
            citycode: "0874",
            adcode: "530304",
            name: "马龙区",
            center: "103.578459,25.428102",
            level: "district",
            districts: []
          },
          {
            citycode: "0874",
            adcode: "530381",
            name: "宣威市",
            center: "104.104255,26.218956",
            level: "district",
            districts: []
          },
          {
            citycode: "0874",
            adcode: "530325",
            name: "富源县",
            center: "104.255082,25.674217",
            level: "district",
            districts: []
          },
          {
            citycode: "0874",
            adcode: "530303",
            name: "沾益区",
            center: "103.822104,25.600424",
            level: "district",
            districts: []
          },
          {
            citycode: "0874",
            adcode: "530323",
            name: "师宗县",
            center: "103.985224,24.822471",
            level: "district",
            districts: []
          },
          {
            citycode: "0874",
            adcode: "530324",
            name: "罗平县",
            center: "104.297124,24.865388",
            level: "district",
            districts: []
          },
          {
            citycode: "0874",
            adcode: "530322",
            name: "陆良县",
            center: "103.66671,25.0293",
            level: "district",
            districts: []
          },
          {
            citycode: "0874",
            adcode: "530302",
            name: "麒麟区",
            center: "103.804406,25.496472",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0873",
        adcode: "532500",
        name: "红河哈尼族彝族自治州",
        center: "103.374873,23.363129",
        level: "city",
        districts: [
          {
            citycode: "0873",
            adcode: "532527",
            name: "泸西县",
            center: "103.76615,24.531981",
            level: "district",
            districts: []
          },
          {
            citycode: "0873",
            adcode: "532504",
            name: "弥勒市",
            center: "103.414817,24.411774",
            level: "district",
            districts: []
          },
          {
            citycode: "0873",
            adcode: "532502",
            name: "开远市",
            center: "103.266908,23.714518",
            level: "district",
            districts: []
          },
          {
            citycode: "0873",
            adcode: "532524",
            name: "建水县",
            center: "102.826178,23.635824",
            level: "district",
            districts: []
          },
          {
            citycode: "0873",
            adcode: "532529",
            name: "红河县",
            center: "102.420566,23.368946",
            level: "district",
            districts: []
          },
          {
            citycode: "0873",
            adcode: "532523",
            name: "屏边苗族自治县",
            center: "103.675458,22.986733",
            level: "district",
            districts: []
          },
          {
            citycode: "0873",
            adcode: "532528",
            name: "元阳县",
            center: "102.835358,23.219671",
            level: "district",
            districts: []
          },
          {
            citycode: "0873",
            adcode: "532531",
            name: "绿春县",
            center: "102.392655,22.993654",
            level: "district",
            districts: []
          },
          {
            citycode: "0873",
            adcode: "532501",
            name: "个旧市",
            center: "103.152663,23.389935",
            level: "district",
            districts: []
          },
          {
            citycode: "0873",
            adcode: "532530",
            name: "金平苗族瑶族傣族自治县",
            center: "103.227982,22.769894",
            level: "district",
            districts: []
          },
          {
            citycode: "0873",
            adcode: "532532",
            name: "河口瑶族自治县",
            center: "103.939265,22.529438",
            level: "district",
            districts: []
          },
          {
            citycode: "0873",
            adcode: "532525",
            name: "石屏县",
            center: "102.496138,23.705707",
            level: "district",
            districts: []
          },
          {
            citycode: "0873",
            adcode: "532503",
            name: "蒙自市",
            center: "103.364936,23.396111",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0886",
        adcode: "533300",
        name: "怒江傈僳族自治州",
        center: "98.8566,25.817555",
        level: "city",
        districts: [
          {
            citycode: "0886",
            adcode: "533324",
            name: "贡山独龙族怒族自治县",
            center: "98.666279,27.740839",
            level: "district",
            districts: []
          },
          {
            citycode: "0886",
            adcode: "533323",
            name: "福贡县",
            center: "98.869132,26.901831",
            level: "district",
            districts: []
          },
          {
            citycode: "0886",
            adcode: "533325",
            name: "兰坪白族普米族自治县",
            center: "99.416628,26.453622",
            level: "district",
            districts: []
          },
          {
            citycode: "0886",
            adcode: "533301",
            name: "泸水市",
            center: "98.857723,25.822579",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0691",
        adcode: "532800",
        name: "西双版纳傣族自治州",
        center: "100.797002,22.009037",
        level: "city",
        districts: [
          {
            citycode: "0691",
            adcode: "532801",
            name: "景洪市",
            center: "100.799595,22.011792",
            level: "district",
            districts: []
          },
          {
            citycode: "0691",
            adcode: "532822",
            name: "勐海县",
            center: "100.452444,21.957323",
            level: "district",
            districts: []
          },
          {
            citycode: "0691",
            adcode: "532823",
            name: "勐腊县",
            center: "101.564635,21.459233",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0877",
        adcode: "530400",
        name: "玉溪市",
        center: "102.526673,24.346786",
        level: "city",
        districts: [
          {
            citycode: "0877",
            adcode: "530425",
            name: "易门县",
            center: "102.161947,24.672156",
            level: "district",
            districts: []
          },
          {
            citycode: "0877",
            adcode: "530424",
            name: "华宁县",
            center: "102.928914,24.19322",
            level: "district",
            districts: []
          },
          {
            citycode: "0877",
            adcode: "530403",
            name: "江川区",
            center: "102.748499,24.299441",
            level: "district",
            districts: []
          },
          {
            citycode: "0877",
            adcode: "530402",
            name: "红塔区",
            center: "102.540122,24.341215",
            level: "district",
            districts: []
          },
          {
            citycode: "0877",
            adcode: "530426",
            name: "峨山彝族自治县",
            center: "102.405698,24.168899",
            level: "district",
            districts: []
          },
          {
            citycode: "0877",
            adcode: "530423",
            name: "通海县",
            center: "102.725538,24.11114",
            level: "district",
            districts: []
          },
          {
            citycode: "0877",
            adcode: "530481",
            name: "澄江市",
            center: "102.904181,24.675536",
            level: "district",
            districts: []
          },
          {
            citycode: "0877",
            adcode: "530428",
            name: "元江哈尼族彝族傣族自治县",
            center: "101.998138,23.596068",
            level: "district",
            districts: []
          },
          {
            citycode: "0877",
            adcode: "530427",
            name: "新平彝族傣族自治县",
            center: "101.990805,24.070436",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0888",
        adcode: "530700",
        name: "丽江市",
        center: "100.225936,26.855165",
        level: "city",
        districts: [
          {
            citycode: "0888",
            adcode: "530724",
            name: "宁蒗彝族自治县",
            center: "100.851083,27.282207",
            level: "district",
            districts: []
          },
          {
            citycode: "0888",
            adcode: "530722",
            name: "永胜县",
            center: "100.750907,26.684215",
            level: "district",
            districts: []
          },
          {
            citycode: "0888",
            adcode: "530723",
            name: "华坪县",
            center: "101.265373,26.629598",
            level: "district",
            districts: []
          },
          {
            citycode: "0888",
            adcode: "530702",
            name: "古城区",
            center: "100.22583,26.876468",
            level: "district",
            districts: []
          },
          {
            citycode: "0888",
            adcode: "530721",
            name: "玉龙纳西族自治县",
            center: "100.236967,26.821494",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0875",
        adcode: "530500",
        name: "保山市",
        center: "99.161489,25.112018",
        level: "city",
        districts: [
          {
            citycode: "0875",
            adcode: "530581",
            name: "腾冲市",
            center: "98.490276,25.020283",
            level: "district",
            districts: []
          },
          {
            citycode: "0875",
            adcode: "530502",
            name: "隆阳区",
            center: "99.165638,25.121137",
            level: "district",
            districts: []
          },
          {
            citycode: "0875",
            adcode: "530524",
            name: "昌宁县",
            center: "99.605105,24.827739",
            level: "district",
            districts: []
          },
          {
            citycode: "0875",
            adcode: "530521",
            name: "施甸县",
            center: "99.18919,24.723084",
            level: "district",
            districts: []
          },
          {
            citycode: "0875",
            adcode: "530523",
            name: "龙陵县",
            center: "98.68941,24.586703",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0883",
        adcode: "530900",
        name: "临沧市",
        center: "100.088837,23.884175",
        level: "city",
        districts: [
          {
            citycode: "0883",
            adcode: "530921",
            name: "凤庆县",
            center: "99.92873,24.580559",
            level: "district",
            districts: []
          },
          {
            citycode: "0883",
            adcode: "530922",
            name: "云县",
            center: "100.1303,24.444461",
            level: "district",
            districts: []
          },
          {
            citycode: "0883",
            adcode: "530923",
            name: "永德县",
            center: "99.258702,24.018463",
            level: "district",
            districts: []
          },
          {
            citycode: "0883",
            adcode: "530902",
            name: "临翔区",
            center: "100.082073,23.895298",
            level: "district",
            districts: []
          },
          {
            citycode: "0883",
            adcode: "530926",
            name: "耿马傣族佤族自治县",
            center: "99.397126,23.538092",
            level: "district",
            districts: []
          },
          {
            citycode: "0883",
            adcode: "530924",
            name: "镇康县",
            center: "98.825389,23.762886",
            level: "district",
            districts: []
          },
          {
            citycode: "0883",
            adcode: "530925",
            name: "双江拉祜族佤族布朗族傣族自治县",
            center: "99.828225,23.472719",
            level: "district",
            districts: []
          },
          {
            citycode: "0883",
            adcode: "530927",
            name: "沧源佤族自治县",
            center: "99.245894,23.146758",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0872",
        adcode: "532900",
        name: "大理白族自治州",
        center: "100.267608,25.606548",
        level: "city",
        districts: [
          {
            citycode: "0872",
            adcode: "532932",
            name: "鹤庆县",
            center: "100.176331,26.560122",
            level: "district",
            districts: []
          },
          {
            citycode: "0872",
            adcode: "532931",
            name: "剑川县",
            center: "99.905041,26.536889",
            level: "district",
            districts: []
          },
          {
            citycode: "0872",
            adcode: "532930",
            name: "洱源县",
            center: "99.962294,26.11337",
            level: "district",
            districts: []
          },
          {
            citycode: "0872",
            adcode: "532929",
            name: "云龙县",
            center: "99.371021,25.885733",
            level: "district",
            districts: []
          },
          {
            citycode: "0872",
            adcode: "532924",
            name: "宾川县",
            center: "100.590274,25.830491",
            level: "district",
            districts: []
          },
          {
            citycode: "0872",
            adcode: "532901",
            name: "大理市",
            center: "100.301614,25.678466",
            level: "district",
            districts: []
          },
          {
            citycode: "0872",
            adcode: "532922",
            name: "漾濞彝族自治县",
            center: "99.958089,25.669944",
            level: "district",
            districts: []
          },
          {
            citycode: "0872",
            adcode: "532928",
            name: "永平县",
            center: "99.54063,25.464134",
            level: "district",
            districts: []
          },
          {
            citycode: "0872",
            adcode: "532927",
            name: "巍山彝族回族自治县",
            center: "100.306977,25.227065",
            level: "district",
            districts: []
          },
          {
            citycode: "0872",
            adcode: "532923",
            name: "祥云县",
            center: "100.549961,25.483727",
            level: "district",
            districts: []
          },
          {
            citycode: "0872",
            adcode: "532926",
            name: "南涧彝族自治县",
            center: "100.510333,25.032353",
            level: "district",
            districts: []
          },
          {
            citycode: "0872",
            adcode: "532925",
            name: "弥渡县",
            center: "100.491038,25.343778",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0879",
        adcode: "530800",
        name: "普洱市",
        center: "100.966011,22.825229",
        level: "city",
        districts: [
          {
            citycode: "0879",
            adcode: "530825",
            name: "镇沅彝族哈尼族拉祜族自治县",
            center: "101.108733,24.00445",
            level: "district",
            districts: []
          },
          {
            citycode: "0879",
            adcode: "530822",
            name: "墨江哈尼族自治县",
            center: "101.692461,23.431894",
            level: "district",
            districts: []
          },
          {
            citycode: "0879",
            adcode: "530824",
            name: "景谷傣族彝族自治县",
            center: "100.702807,23.496987",
            level: "district",
            districts: []
          },
          {
            citycode: "0879",
            adcode: "530821",
            name: "宁洱哈尼族彝族自治县",
            center: "101.045743,23.048809",
            level: "district",
            districts: []
          },
          {
            citycode: "0879",
            adcode: "530828",
            name: "澜沧拉祜族自治县",
            center: "99.932045,22.555799",
            level: "district",
            districts: []
          },
          {
            citycode: "0879",
            adcode: "530802",
            name: "思茅区",
            center: "100.977069,22.786769",
            level: "district",
            districts: []
          },
          {
            citycode: "0879",
            adcode: "530829",
            name: "西盟佤族自治县",
            center: "99.59016,22.644237",
            level: "district",
            districts: []
          },
          {
            citycode: "0879",
            adcode: "530826",
            name: "江城哈尼族彝族自治县",
            center: "101.862344,22.585858",
            level: "district",
            districts: []
          },
          {
            citycode: "0879",
            adcode: "530823",
            name: "景东彝族自治县",
            center: "100.833877,24.446731",
            level: "district",
            districts: []
          },
          {
            citycode: "0879",
            adcode: "530827",
            name: "孟连傣族拉祜族佤族自治县",
            center: "99.584225,22.329053",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0887",
        adcode: "533400",
        name: "迪庆藏族自治州",
        center: "99.70211,27.819149",
        level: "city",
        districts: [
          {
            citycode: "0887",
            adcode: "533401",
            name: "香格里拉市",
            center: "99.743582,27.842185",
            level: "district",
            districts: []
          },
          {
            citycode: "0887",
            adcode: "533422",
            name: "德钦县",
            center: "98.917851,28.464213",
            level: "district",
            districts: []
          },
          {
            citycode: "0887",
            adcode: "533423",
            name: "维西傈僳族自治县",
            center: "99.300937,27.163808",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0878",
        adcode: "532300",
        name: "楚雄彝族自治州",
        center: "101.528304,25.045678",
        level: "city",
        districts: [
          {
            citycode: "0878",
            adcode: "532328",
            name: "元谋县",
            center: "101.87434,25.704499",
            level: "district",
            districts: []
          },
          {
            citycode: "0878",
            adcode: "532326",
            name: "大姚县",
            center: "101.336576,25.729551",
            level: "district",
            districts: []
          },
          {
            citycode: "0878",
            adcode: "532301",
            name: "楚雄市",
            center: "101.546242,25.032945",
            level: "district",
            districts: []
          },
          {
            citycode: "0878",
            adcode: "532323",
            name: "牟定县",
            center: "101.546898,25.312939",
            level: "district",
            districts: []
          },
          {
            citycode: "0878",
            adcode: "532325",
            name: "姚安县",
            center: "101.241632,25.504287",
            level: "district",
            districts: []
          },
          {
            citycode: "0878",
            adcode: "532302",
            name: "禄丰市",
            center: "102.079082,25.151061",
            level: "district",
            districts: []
          },
          {
            citycode: "0878",
            adcode: "532322",
            name: "双柏县",
            center: "101.642369,24.688814",
            level: "district",
            districts: []
          },
          {
            citycode: "0878",
            adcode: "532329",
            name: "武定县",
            center: "102.403949,25.530731",
            level: "district",
            districts: []
          },
          {
            citycode: "0878",
            adcode: "532327",
            name: "永仁县",
            center: "101.666795,26.049522",
            level: "district",
            districts: []
          },
          {
            citycode: "0878",
            adcode: "532324",
            name: "南华县",
            center: "101.283236,25.200163",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0871",
        adcode: "530100",
        name: "昆明市",
        center: "102.833669,24.88149",
        level: "city",
        districts: [
          {
            citycode: "0871",
            adcode: "530113",
            name: "东川区",
            center: "103.187825,26.082997",
            level: "district",
            districts: []
          },
          {
            citycode: "0871",
            adcode: "530129",
            name: "寻甸回族彝族自治县",
            center: "103.256559,25.558163",
            level: "district",
            districts: []
          },
          {
            citycode: "0871",
            adcode: "530125",
            name: "宜良县",
            center: "103.141674,24.91983",
            level: "district",
            districts: []
          },
          {
            citycode: "0871",
            adcode: "530102",
            name: "五华区",
            center: "102.707262,25.043635",
            level: "district",
            districts: []
          },
          {
            citycode: "0871",
            adcode: "530115",
            name: "晋宁区",
            center: "102.595325,24.669077",
            level: "district",
            districts: []
          },
          {
            citycode: "0871",
            adcode: "530126",
            name: "石林彝族自治县",
            center: "103.290536,24.771761",
            level: "district",
            districts: []
          },
          {
            citycode: "0871",
            adcode: "530124",
            name: "富民县",
            center: "102.497722,25.221924",
            level: "district",
            districts: []
          },
          {
            citycode: "0871",
            adcode: "530112",
            name: "西山区",
            center: "102.664426,25.038039",
            level: "district",
            districts: []
          },
          {
            citycode: "0871",
            adcode: "530181",
            name: "安宁市",
            center: "102.47865,24.919831",
            level: "district",
            districts: []
          },
          {
            citycode: "0871",
            adcode: "530127",
            name: "嵩明县",
            center: "103.043384,25.327273",
            level: "district",
            districts: []
          },
          {
            citycode: "0871",
            adcode: "530111",
            name: "官渡区",
            center: "102.748888,24.950285",
            level: "district",
            districts: []
          },
          {
            citycode: "0871",
            adcode: "530114",
            name: "呈贡区",
            center: "102.822104,24.885738",
            level: "district",
            districts: []
          },
          {
            citycode: "0871",
            adcode: "530128",
            name: "禄劝彝族苗族自治县",
            center: "102.471993,25.551768",
            level: "district",
            districts: []
          },
          {
            citycode: "0871",
            adcode: "530103",
            name: "盘龙区",
            center: "102.751643,25.116512",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0876",
        adcode: "532600",
        name: "文山壮族苗族自治州",
        center: "104.21567,23.400983",
        level: "city",
        districts: [
          {
            citycode: "0876",
            adcode: "532627",
            name: "广南县",
            center: "105.055075,24.046378",
            level: "district",
            districts: []
          },
          {
            citycode: "0876",
            adcode: "532626",
            name: "丘北县",
            center: "104.166713,24.05064",
            level: "district",
            districts: []
          },
          {
            citycode: "0876",
            adcode: "532622",
            name: "砚山县",
            center: "104.336905,23.605075",
            level: "district",
            districts: []
          },
          {
            citycode: "0876",
            adcode: "532624",
            name: "麻栗坡县",
            center: "104.702732,23.125837",
            level: "district",
            districts: []
          },
          {
            citycode: "0876",
            adcode: "532601",
            name: "文山市",
            center: "104.233237,23.38683",
            level: "district",
            districts: []
          },
          {
            citycode: "0876",
            adcode: "532623",
            name: "西畴县",
            center: "104.671802,23.437707",
            level: "district",
            districts: []
          },
          {
            citycode: "0876",
            adcode: "532625",
            name: "马关县",
            center: "104.394524,23.013108",
            level: "district",
            districts: []
          },
          {
            citycode: "0876",
            adcode: "532628",
            name: "富宁县",
            center: "105.630921,23.625072",
            level: "district",
            districts: []
          }
        ]
      },
      {
        citycode: "0692",
        adcode: "533100",
        name: "德宏傣族景颇族自治州",
        center: "98.585621,24.433146",
        level: "city",
        districts: [
          {
            citycode: "0692",
            adcode: "533122",
            name: "梁河县",
            center: "98.296584,24.804275",
            level: "district",
            districts: []
          },
          {
            citycode: "0692",
            adcode: "533103",
            name: "芒市",
            center: "98.58809,24.433766",
            level: "district",
            districts: []
          },
          {
            citycode: "0692",
            adcode: "533102",
            name: "瑞丽市",
            center: "97.855423,24.018377",
            level: "district",
            districts: []
          },
          {
            citycode: "0692",
            adcode: "533123",
            name: "盈江县",
            center: "97.943474,24.691325",
            level: "district",
            districts: []
          },
          {
            citycode: "0692",
            adcode: "533124",
            name: "陇川县",
            center: "97.793359,24.182347",
            level: "district",
            districts: []
          }
        ]
      }
    ]
  }
];
const fieldNames = {
  value: "name",
  label: "name",
  children: "districts"
};
const AddressCascader = ({ disabled }) => {
  const areaChange = (value, selectedOptions) => {
    console.log(value, selectedOptions);
  };
  return /* @__PURE__ */ jsx(
    Cascader$1,
    {
      style: { width: 300 },
      fieldNames,
      options: data,
      onChange: areaChange,
      placeholder: "请选择",
      disabled
    }
  );
};
export {
  AddressCascader,
  MessageCenter,
  NumericKeyboard,
  SwitchStaff
};
